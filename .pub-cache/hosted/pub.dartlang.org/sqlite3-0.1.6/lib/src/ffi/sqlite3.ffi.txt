# Generate an empty struct for chars so that we can define string-reading extensions on Pointer<char>
type char = opaque struct;

type sqlite3 = opaque struct;
type sqlite3_stmt = opaque struct;

int32 sqlite3_open_v2(char* filename, sqlite3 **ppDb, int32 flags, char* zVfs);
int32 sqlite3_close_v2(sqlite3 *db);

int32 sqlite3_extended_result_codes(sqlite3* db, int32 onoff);

# Error handling
int32 sqlite3_extended_errcode(sqlite3 *db);
char* sqlite3_errmsg(sqlite3* db);
char* sqlite3_errstr(int32 code);

void sqlite3_free(void *ptr);

# Versions

char *sqlite3_libversion();
char *sqlite3_sourceid();
int sqlite3_libversion_number();

# Database

int64 sqlite3_last_insert_rowid(sqlite3 *db);
int32 sqlite3_changes(sqlite3 *db);
int sqlite3_exec(sqlite3 *db, char *sql, void *callback, void *argToCb, char **errorOut);

# Statements

int32 sqlite3_finalize(sqlite3_stmt *pStmt);
int32 sqlite3_step(sqlite3_stmt *pStmt);
int32 sqlite3_reset(sqlite3_stmt *pStmt);

int32 sqlite3_column_count(sqlite3_stmt *pStmt);
int32 sqlite3_bind_parameter_count(sqlite3_stmt *pStmt);
char *sqlite3_column_name(sqlite3_stmt *pStmt, int N);

int sqlite3_bind_blob64(sqlite3_stmt *pStmt, int32 index, void* data, uint64 length, void* destructor);
int sqlite3_bind_double(sqlite3_stmt* pStmt, int32 index, double data);
int sqlite3_bind_int64(sqlite3_stmt* pStmt, int32 index, int64 data);
int sqlite3_bind_null(sqlite3_stmt* pStmt, int32 index);
int sqlite3_bind_text(sqlite3_stmt* pStmt, int32 index, char* data, int32 length, void* destructor);

void *sqlite3_column_blob(sqlite3_stmt* pStmt, int32 iCol);
double sqlite3_column_double(sqlite3_stmt* pStmt, int32 iCol);
int64 sqlite3_column_int64(sqlite3_stmt* pStmt, int32 iCol);
char* sqlite3_column_text(sqlite3_stmt* pStmt, int32 iCol);
int sqlite3_column_bytes(sqlite3_stmt* pStmt, int32 iCol);
int sqlite3_column_type(sqlite3_stmt* pStmt, int32 iCol);

# Values

type sqlite3_value = opaque struct;

void* sqlite3_value_blob(sqlite3_value *value);
double sqlite3_value_double(sqlite3_value *value);
int sqlite3_value_type(sqlite3_value *value);
int64 sqlite3_value_int64(sqlite3_value *value);
char *sqlite3_value_text(sqlite3_value *value);
int sqlite3_value_bytes(sqlite3_value *value);

# Functions

type sqlite3_context = opaque struct;

int32 sqlite3_create_function_v2(
  sqlite3 *db,
  char *zFunctionName,
  int nArg,
  int eTextRep,
  void *pApp,
  void *xFunc,
  void *xStep,
  void *xFinal,
  void *xDestroy
);

void *sqlite3_aggregate_context(sqlite3_context *ctx, int32 nBytes);

void *sqlite3_user_data(sqlite3_context *ctx);
void sqlite3_result_blob64(sqlite3_context *ctx, void* data, uint64 length, void *destructor);
void sqlite3_result_double(sqlite3_context *ctx, double result);
void sqlite3_result_error(sqlite3_context *ctx, char* msg, int32 length);
void sqlite3_result_int64(sqlite3_context *ctx, int64 result);
void sqlite3_result_null(sqlite3_context *ctx);
void sqlite3_result_text(sqlite3_context* ctx, char* data, int length, void* destructor);
