jobs:
  include:

    - &unit-test-stage
      stage: Unit Testing
      language: generic
      os: linux
      env: channel=stable
      before_install: # runs on linux only
        - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
      before_script:
        # install pre-compiled flutter
        - FLUTTER_VERSION=1.2.1-${channel}
        - |
          if [ $TRAVIS_OS_NAME == "osx" ]; then
            wget --quiet --output-document=flutter.zip https://storage.googleapis.com/flutter_infra/releases/${channel}/macos/flutter_macos_v${FLUTTER_VERSION}.zip && unzip -qq flutter.zip > /dev/null && rm flutter.zip
          else
            wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${channel}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
          fi
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor -v
        - |
          [[ $TRAVIS_OS_NAME != "linux" && channel != "stable" ]] || pub global activate coverage
      script: ./scripts/runTests.sh
      after_success: bash <(curl -s https://codecov.io/bash) -f lcov.info
    - <<: *unit-test-stage
      os: osx
      before_install:
      after_success:
      env: channel=stable
    - <<: *unit-test-stage
      env: channel=beta
      after_success:
    - <<: *unit-test-stage
      os: osx
      env: channel=beta
      before_install:
      after_success:
      env: channel=beta
    - <<: *unit-test-stage
      env: channel=dev
      after_success:
    - <<: *unit-test-stage
      os: osx
      env: channel=dev
      before_install:
      after_success:
    - <<: *unit-test-stage
      env: branch=master
      before_script:
        - git clone https://github.com/flutter/flutter.git -b $branch
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter precache
        - flutter doctor -v
        - pub global activate coverage
      after_success:
    - <<: *unit-test-stage
      os: osx
      env: branch=master
      before_install:
      before_script:
        - git clone https://github.com/flutter/flutter.git -b $branch
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter precache
        - flutter doctor -v
        - pub global activate coverage
      after_success:

    - &integration-test-stage
      stage: Integration Testing
      sudo: true
      dist: trusty
      language: generic
      os: linux
      env: integration-test-linux
      # Run integration tests on android
      before_install: &before_install_linux
        # Install the Android SDK Dependency.
        - export ANDROID_HOME=/opt/android-sdk-linux
        - cd /opt
        - wget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O android-sdk-tools.zip
        - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
        - rm android-sdk-tools.zip
        - cd -
        - PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
        # Silence warning.
        - mkdir -p ~/.android
        - touch ~/.android/repositories.cfg
        # Accept licenses before installing components, no need to echo y for each component
        - yes | sdkmanager --licenses
        # Platform tools
        - sdkmanager "emulator" "tools" "platform-tools" > /dev/null
        - sdkmanager --list | head -15
        # install older packages (for emulator)
        - sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null
        # Create and start emulator.
        - EMULATOR_API_LEVEL=22
        - ANDROID_ABI="default;armeabi-v7a"
        - sdkmanager "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI" > /dev/null
        - sdkmanager --list | head -15
        - echo no | avdmanager create avd --force -n test -k "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI"
        - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader &
        # install pre-compiled flutter
        - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
        - sdkmanager "platforms;android-28" "build-tools;28.0.3" > /dev/null # required by flutter
        - channel=stable
        - FLUTTER_VERSION=1.2.1-${channel}
        - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${channel}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor -v
        # Wait for emulator to finish startup.
        - ./scripts/android-wait-for-emulator.sh
        - adb shell input keyevent 82
        - flutter devices
      script: travis_retry ./scripts/ci.sh ./example
    - <<: *integration-test-stage
      os: osx
      # use oldest flutter supported version of xcode
      osx_image: xcode8.0
      env: integration-test-ios
      # Run integration tests on ios
      before_install: &before_install_osx
        - open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app
        # skip homebrew update
        - export HOMEBREW_NO_AUTO_UPDATE=1
#        - brew update
        - brew install libimobiledevice
        - brew install ideviceinstaller
        - brew install ios-deploy
        - brew install cocoapods || echo 'ignore exit(1)'
        - brew link --overwrite cocoapods
        # install pre-compiled flutter
        - channel=stable
        - FLUTTER_VERSION=1.2.1-${channel}
        - wget --quiet --output-document=flutter.zip https://storage.googleapis.com/flutter_infra/releases/${channel}/macos/flutter_macos_v${FLUTTER_VERSION}.zip && unzip -qq flutter.zip > /dev/null && rm flutter.zip
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor -v
        - flutter devices
      script: travis_retry ./scripts/ci.sh ./example

    - stage: Ready to deploy
      os: osx
      language: generic
      env: not implemented ðŸ¤“
      script: echo "Deploying to store ..."


  allow_failures:
    - env: channel=dev
    - env: branch=master
