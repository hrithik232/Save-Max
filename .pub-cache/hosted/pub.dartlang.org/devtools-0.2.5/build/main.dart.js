// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.9.0-edge.9c94f0841078756ea0437a590b66ddfe24eabdaf.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new H._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new H.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    hexDigitValue: function(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new H.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      P.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      P.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new H.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        P.ArgumentError_checkNotNull(count, _s5_, type$.int);
        P.RangeError_checkNotNegative(count, _s5_);
        return new H.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      P.ArgumentError_checkNotNull(count, _s5_, type$.int);
      P.RangeError_checkNotNegative(count, _s5_);
      return new H.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      var t1 = J.get$length$asx(a);
      if (typeof t1 !== "number")
        return t1.$sub();
      H.Sort__doSort(a, 0, t1 - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2,
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CastStream: function CastStream(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastStreamSubscription: function CastStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _.__internal$_zone = t1;
      _.__internal$_handleError = _.__internal$_handleData = null;
      _.$ti = t2;
    },
    CastStreamTransformer: function CastStreamTransformer(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastConverter: function CastConverter(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet(t0, t1, t2) {
      this._source = t0;
      this._emptySet = t1;
      this.$ti = t2;
    },
    CastSet_removeWhere_closure: function CastSet_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    CastQueue: function CastQueue(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    instantiate1: function(f, T1) {
      var t1 = new H.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved == "string")
        return preserved;
      return rawClassName;
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res != "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i, _null = null;
      if (typeof source != "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H._asStringS(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var t1 = H.Primitives__objectTypeNameNewRti(object);
      return t1;
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        if (H.Primitives__saneNativeClassName(dispatchName))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.Primitives__saneNativeClassName(constructorName))
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1 = $name !== "Object" && $name !== "";
      return t1;
    },
    Primitives_dateNow: function() {
      return Date.now();
    },
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives_currentUri: function() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getWeekday: function(receiver) {
      return C.JSInt_methods.$mod((receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDay() + 0 : H.Primitives_lazyAsJsDate(receiver).getDay() + 0) + 6, 7) + 1;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || H._isBool(object) || typeof object == "number" || typeof object == "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      var t1 = H._isBool(object) || typeof object == "number" || typeof object == "string";
      if (t1)
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, key;
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, type$.dynamic);
      else
        $arguments = [];
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H._asStringS(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            key = H._asStringS(keys[_i]);
            if (namedArguments.containsKey$1(0, key)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[key]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asIntS(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_, null);
    },
    diagnoseRangeError: function(start, end, $length) {
      var _s13_ = "Invalid value";
      if (start < 0 || start > $length)
        return new P.RangeError(0, $length, true, start, "start", _s13_);
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", _s13_);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value != "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return _null;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H._asStringS(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H._asStringS(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H._asStringS(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet: function(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asIntS(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      signatureFunction = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return null;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeType: function(object) {
      var rti = object instanceof H.Closure ? H.closureFunctionType(object) : null;
      return H.createRuntimeType(rti == null ? H.instanceType(object) : rti);
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return null;
      if (Array.isArray(substitution))
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H._asStringS($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H._asStringS($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof H.JSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, C.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof H.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, H.escapeReplacement(replacement));
      }
      if (pattern == null)
        H.throwExpression(H.argumentErrorValue(pattern));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    _stringIdentity: function(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, startIndex, t2, t3, t4, t5;
      if (!type$.Pattern._is(pattern))
        throw H.wrapException(P.ArgumentError$value(pattern, "pattern", "is not a Pattern"));
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new H._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), startIndex = 0, t2 = ""; t1.moveNext$0(); t2 = t3) {
        t3 = t1.__js_helper$_current;
        t4 = t3._match;
        t5 = t4.index;
        t3 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$2(receiver, startIndex, t5))) + H.S(onMatch.call$1(t3));
        startIndex = t5 + t4[0].length;
      }
      t1 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _.__js_helper$_name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (!H._isInt(offsetInBytes))
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    },
    _ensureNativeList: function(list) {
      var t1, t2, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      t2 = t1.get$length(list);
      if (typeof t2 !== "number")
        return H.iae(t2);
      result = new Array(t2);
      result.fixed$length = Array;
      i = 0;
      while (true) {
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = H._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 2) {
        t1 = namedArray[i];
        rti = namedArray[i + 1];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        optionalNamed = functionParameters._optionalNamed,
        substitutedOptionalNamed = H._substituteNamed(universe, optionalNamed, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedOptionalNamed === optionalNamed)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._optionalNamed = substitutedOptionalNamed;
      return result;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(_index) {
      var rti,
        index = _index,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    createRuntimeType: function(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new H._Type(rti);
      starErasedRti = H._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new H._Type(starErasedRti) : type;
    },
    typeLiteral: function(recipe) {
      return H.createRuntimeType(H._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest: function(object) {
      var testRti = this,
        isFn = H._generalIsTestImplementation,
        t1 = type$.Object;
      if (testRti === t1) {
        isFn = H._isObject;
        testRti._as = H._asObject;
      } else {
        if (!H.isStrongTopType(testRti))
          if (!(testRti === type$.legacy_Object))
            t1 = testRti === t1;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          isFn = H._isTop;
          testRti._as = H._asTop;
        } else if (testRti === type$.int)
          isFn = H._isInt;
        else if (testRti === type$.double)
          isFn = H._isNum;
        else if (testRti === type$.num)
          isFn = H._isNum;
        else if (testRti === type$.String)
          isFn = H._isString;
        else if (testRti === type$.bool)
          isFn = H._isBool;
        else if (testRti._kind === 9) {
          t1 = testRti._primary;
          if (testRti._rest.every(H.isTopType)) {
            testRti._specializedTestResource = "$is" + t1;
            isFn = H._isTestViaProperty;
          }
        }
      }
      testRti._is = isFn;
      return testRti._is(object);
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _isTestViaProperty: function(object) {
      var t1 = this,
        tag = t1._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    checkTypeBound: function(type, bound, variable, methodName) {
      var _null = null;
      if (H._isSubtype(init.typeUniverse, type, _null, bound, _null))
        return type;
      throw H.wrapException(H._TypeError$fromMessage("The type argument '" + H.S(H._rtiToString(type, _null)) + "' is not a subtype of the type variable bound '" + H.S(H._rtiToString(bound, _null)) + "' of type variable '" + variable + "' in '" + H.S(methodName) + "'."));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + H.S(objectTypeDescription) + "' is not a subtype of type '" + H.S(checkedTypeDescription) + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return true;
    },
    _asObject: function(object) {
      return object;
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object || false === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object || false === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object || false === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += C.JSString_methods.$add(sep, H._rtiToString(array[i], genericContext));
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, optionalNamed, optionalNamedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (t4 < 0)
            return H.ioore(genericContext, t4);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          t3 = boundRti._kind;
          kind = t3;
          if (kind !== 2)
            if (kind !== 3)
              if (kind !== 4)
                if (kind !== 5)
                  t3 = t3 === 7 && boundRti._primary === t1;
                else
                  t3 = true;
              else
                t3 = true;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            if (!(boundRti === t2))
              t3 = boundRti === t1;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      optionalNamed = parameters._optionalNamed;
      optionalNamedLength = optionalNamed.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += C.JSString_methods.$add(sep, H._rtiToString(requiredPositional[i], genericContext));
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += C.JSString_methods.$add(sep, H._rtiToString(optionalPositional[i], genericContext));
        argumentsText += "]";
      }
      if (optionalNamedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < optionalNamedLength; i += 2, sep = _s2_)
          argumentsText += C.JSString_methods.$add(sep, H._rtiToString(optionalNamed[i + 1], genericContext)) + " " + optionalNamed[i];
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParametersText + "(" + argumentsText + ") => " + H.S(returnTypeText);
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return J.$add$ansx(argumentKind === 11 || argumentKind === 12 ? C.JSString_methods.$add("(", s) + ")" : s, "?");
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(rti._primary, genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = universe.eT,
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        cache = universe.eC,
        probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Universe__parseRecipe(universe, null, recipe, normalize);
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Universe__parseRecipe(universe, environment, recipe, true);
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__parseRecipe: function(universe, environment, recipe, normalize) {
      var rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, normalize));
      if (rti != null)
        return rti;
      throw H.wrapException(P.UnimplementedError$('_Universe._parseRecipe("' + H.S(recipe) + '")'));
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._generalAsCheckImplementation;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (H.isStrongTopType(baseType) || baseType === type$.Null || baseKind === 7 || baseKind === 6)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, starArgumentKind, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          starArgumentKind = starArgument._kind;
          if (starArgumentKind === 1)
            return type$.Null;
          else if (starArgumentKind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = baseType === type$.Object;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null)
          return type$.Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 2, sep = ",") {
        t1 = $arguments[i];
        s0 = $arguments[i + 1]._canonicalRecipe;
        s += sep + t1 + ":" + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, s, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      s = newBase._canonicalRecipe + ";" + ("<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        optionalNamed = parameters._optionalNamed,
        optionalNamedLength = optionalNamed.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0)
        recipe += (requiredPositionalLength > 0 ? "," : "") + "[" + H._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      if (optionalNamedLength > 0)
        recipe += (requiredPositionalLength > 0 ? "," : "") + "{" + H._Universe__canonicalRecipeJoinNamed(optionalNamed) + "}";
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + "<" + H._Universe__canonicalRecipeJoin(bounds) + ">",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t1, i, ch, universe, array, head, base, u, parameters, optionalPositional, optionalNamed, item,
        source = parser.r,
        stack = parser.s;
      for (t1 = source.length, i = 0; i < t1;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              break;
            case 59:
              stack.push(H._Parser_toType(parser.u, parser.e, stack.pop()));
              break;
            case 94:
              stack.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, stack.pop()));
              break;
            case 35:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 62:
              universe = parser.u;
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              head = stack.pop();
              if (typeof head == "string")
                stack.push(H._Universe__lookupInterfaceRti(universe, head, array));
              else {
                base = H._Parser_toType(universe, parser.e, head);
                switch (base._kind) {
                  case 11:
                    stack.push(H._Universe__lookupGenericFunctionRti(universe, base, array, parser.n));
                    break;
                  default:
                    stack.push(H._Universe__lookupBindingRti(universe, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = parser.u;
              stack.push(H._Universe__lookupStarRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 63:
              u = parser.u;
              stack.push(H._Universe__lookupQuestionRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 47:
              u = parser.u;
              stack.push(H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 40:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 41:
              universe = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = universe.sEA;
              optionalNamed = universe.sEA;
              head = stack.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = stack.pop();
                    break;
                  case -2:
                    optionalNamed = stack.pop();
                    break;
                  default:
                    stack.push(head);
                    break;
                }
              else
                stack.push(head);
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._optionalNamed = optionalNamed;
              stack.push(H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, parser.e, stack.pop()), parameters));
              break;
            case 91:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 93:
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-1);
              break;
            case 123:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 125:
              array = stack.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = stack.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 1; i < $length; i += 2)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = s === type$.Null;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = t._primary;
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return t1;
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t1;
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (t1 = type$.Rti, i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          t1._as(sBound);
          t1._as(tBound);
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sOptionalNamed, tOptionalNamed, sOptionalNamedLength, tOptionalNamedLength, j, tName, sName;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sOptionalNamed = sParameters._optionalNamed;
      tOptionalNamed = tParameters._optionalNamed;
      sOptionalNamedLength = sOptionalNamed.length;
      tOptionalNamedLength = tOptionalNamed.length;
      for (i = 0, j = 0; j < tOptionalNamedLength; j += 2) {
        tName = tOptionalNamed[j];
        do {
          if (i >= sOptionalNamedLength)
            return false;
          sName = sOptionalNamed[i];
          i += 2;
        } while (sName < tName);
        if (tName < sName)
          return false;
        t1 = sOptionalNamed[i - 1];
        if (!H._isSubtype(universe, tOptionalNamed[j + 1], tEnv, t1, sEnv))
          return false;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var t1 = t._kind,
        kind = t1;
      if (kind !== 2)
        if (kind !== 3)
          if (kind !== 4)
            if (kind !== 5)
              t1 = t1 === 7 && t._primary === type$.Object;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._optionalNamed = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    isBrowserObject: function(o) {
      return type$.Blob._is(o) || type$.Event._is(o) || type$.KeyRange._is(o) || type$.ImageData._is(o) || type$.Node._is(o) || type$.Window._is(o) || type$.WorkerGlobalScope._is(o);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (!H._isInt($length))
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")));
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$bn: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$hoverinfo$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$hoverinfo(receiver, value);
    },
    set$innerHtml$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
    },
    set$length$asx: function(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    set$visible$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$visible(receiver, value);
    },
    get$attributes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$children$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$children(receiver);
    },
    get$classes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$classes(receiver);
    },
    get$entries$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$entries(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$id$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$id(receiver);
    },
    get$innerHtml$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$innerHtml(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNegative$n: function(receiver) {
      return J.getInterceptor$n(receiver).get$isNegative(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$kind$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$kind(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    get$name$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    get$offset$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$offset(receiver);
    },
    get$onBlur$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onBlur(receiver);
    },
    get$onChange$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onChange(receiver);
    },
    get$onClick$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onClick(receiver);
    },
    get$onDoubleClick$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onDoubleClick(receiver);
    },
    get$onFocus$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onFocus(receiver);
    },
    get$onKeyDown$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
    },
    get$onKeyUp$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyUp(receiver);
    },
    get$onMouseDown$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseDown(receiver);
    },
    get$onMouseLeave$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseLeave(receiver);
    },
    get$onMouseOver$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseOver(receiver);
    },
    get$onMouseWheel$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseWheel(receiver);
    },
    get$onResize$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onResize(receiver);
    },
    get$onScroll$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onScroll(receiver);
    },
    get$onTouchEnd$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onTouchEnd(receiver);
    },
    get$onTouchMove$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onTouchMove(receiver);
    },
    get$onTouchStart$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onTouchStart(receiver);
    },
    get$points$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$points(receiver);
    },
    get$root$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$root(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$setRequestHeader$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$setRequestHeader(receiver);
    },
    get$shapes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$shapes(receiver);
    },
    get$source$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$source(receiver);
    },
    get$span$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$span(receiver);
    },
    get$valueAsString$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$valueAsString(receiver);
    },
    get$values$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$values(receiver);
    },
    get$x$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$x(receiver);
    },
    get$y$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$y(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $and$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver & a0) >>> 0;
      return J.getInterceptor$bn(receiver).$and(receiver, a0);
    },
    $div$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver / a0;
      return J.getInterceptor$n(receiver).$div(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $or$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver | a0) >>> 0;
      return J.getInterceptor$bn(receiver).$or(receiver, a0);
    },
    $shl$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$shl(receiver, a0);
    },
    $sub$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    _async$_add$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
    },
    _clearChildren$0$x: function(receiver) {
      return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    _replaceChild$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    allMatches$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    append$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).append$1(receiver, a0);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    cast$2$0$ax: function(receiver, $T1, $T2) {
      return J.getInterceptor$ax(receiver).cast$2$0(receiver, $T1, $T2);
    },
    clamp$2$n: function(receiver, a0, a1) {
      return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
    },
    clear$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).clear$0(receiver);
    },
    click$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).click$1(receiver, a0);
    },
    close$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).close$0(receiver);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    contains$2$asx: function(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    containsKey$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    destroy$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).destroy$0(receiver);
    },
    destroy$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).destroy$2(receiver, a0, a1);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    find$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).find$0(receiver);
    },
    firstWhere$2$orElse$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
    },
    focus$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).focus$0(receiver);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getSelection$3$isSummaryTree$z: function(receiver, a0, a1, a2) {
      return J.getInterceptor$z(receiver).getSelection$3$isSummaryTree(receiver, a0, a1, a2);
    },
    indexOf$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
    },
    insert$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    join$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    lastIndexOf$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).lastIndexOf$1(receiver, a0);
    },
    map$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    map$2$1$ax: function(receiver, a0, $T1, $T2) {
      return J.getInterceptor$ax(receiver).map$2$1(receiver, a0, $T1, $T2);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    open$3$async$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
    },
    readAsText$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).readAsText$1(receiver, a0);
    },
    remove$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    remove$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    removeAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeWhere$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeWhere$1(receiver, a0);
    },
    replaceWith$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
    },
    reset$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).reset$0(receiver);
    },
    round$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).round$0(receiver);
    },
    roundToDouble$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).roundToDouble$0(receiver);
    },
    scrollIntoView$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).scrollIntoView$0(receiver);
    },
    scrollIntoView$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).scrollIntoView$1(receiver, a0);
    },
    scrollTo$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).scrollTo$1(receiver, a0);
    },
    scrollTo$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).scrollTo$2(receiver, a0, a1);
    },
    send$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).send$1(receiver, a0);
    },
    setInnerHtml$2$treeSanitizer$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).setInnerHtml$2$treeSanitizer(receiver, a0, a1);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    setSizes$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).setSizes$1(receiver, a0);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    stop$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).stop$0(receiver);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toStringAsFixed$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    trimRight$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trimRight$0(receiver);
    },
    update$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).update$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new P._Future($.Zone__current, type$._Future_dynamic);
          future._state = 4;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.Null, type$.int, type$.dynamic);
    },
    _IterationMarker_yieldStar: function(values) {
      return new P._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration: function() {
      return C._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError: function(error) {
      return new P._IterationMarker(error, 3);
    },
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    _invokeErrorHandler: function(errorHandler, error, stackTrace) {
      if (type$.dynamic_Function_Null_Null._is(errorHandler))
        return errorHandler.call$2(error, stackTrace);
      else
        return type$.dynamic_Function_dynamic._as(errorHandler).call$1(error);
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1, replacement;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      t1 = $.Zone__current;
      if (t1 !== C.C__RootZone) {
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          if (error == null)
            error = new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
      }
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed: function(duration, $T) {
      var result = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      P.Timer_Timer(duration, new P.Future_Future$delayed_closure(null, result));
      return result;
    },
    Future_wait: function(futures, $T) {
      var handleError, future, pos, e, st, t2, t3, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("_Future<List<0>>"),
        result = new P._Future($.Zone__current, t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, eagerError, result);
      try {
        for (t2 = J.get$iterator$ax(futures), t3 = type$.Null; t2.moveNext$0();) {
          future = t2.get$current(t2);
          pos = _box_0.remaining;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, result, cleanUp, eagerError, $T), handleError, t3);
          ++_box_0.remaining;
        }
        t2 = _box_0.remaining;
        if (t2 === 0) {
          t1 = new P._Future($.Zone__current, t1);
          t1._asyncComplete$1(C.List_empty1);
          return t1;
        }
        t1 = new Array(t2);
        t1.fixed$length = Array;
        _box_0.values = H.setRuntimeTypeInfo(t1, $T._eval$1("JSArray<0>"));
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        if (_box_0.remaining === 0 || H.boolConversionCheck(eagerError))
          return P.Future_Future$error(e, st, $T._eval$1("List<0>"));
        else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return result;
    },
    Future_forEach: function(elements, action, $T) {
      return P.Future_doWhile(new P.Future_forEach_closure(new J.ArrayIterator(elements, elements.length, H._arrayInstanceType(elements)._eval$1("ArrayIterator<1>")), action));
    },
    Future__kTrue: function(_) {
      return true;
    },
    Future_doWhile: function(action) {
      var nextIteration, t1 = {},
        t2 = $.Zone__current,
        doneSignal = new P._Future(t2, type$._Future_dynamic);
      t1.nextIteration = null;
      nextIteration = t2.bindUnaryCallbackGuarded$1$1(new P.Future_doWhile_closure(t1, action, doneSignal), type$.bool);
      t1.nextIteration = nextIteration;
      nextIteration.call$1(true);
      return doneSignal;
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      result._completeError$2(error, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(_zone, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 4;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$._FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, listeners0, sourceResult, t5, t6, zone, oldZone, current, result, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$._FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t5 = !hasError;
        if (t5) {
          t6 = listeners.state;
          t6 = (t6 & 1) !== 0 || (t6 & 15) === 8;
        } else
          t6 = true;
        if (t6) {
          t6 = listeners.result;
          zone = t6._zone;
          if (hasError) {
            t1 = t1._zone;
            t1.toString;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = listeners.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t5) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            if (t1._state >= 4) {
              current = t3._as(t6._resultOrListeners);
              t6._resultOrListeners = null;
              listeners = t6._reverseListeners$1(current);
              t6._state = t1._state;
              t6._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t6);
            return;
          }
        }
        result = listeners.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t2,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = C.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure(elements, $T), $T._eval$1("_GeneratedStreamImpl<0>"));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1 = stream == null ? H.throwExpression(P.ArgumentError$notNull("stream")) : stream;
      return new P._StreamIterator(t1, $T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController: function(onCancel, onListen, sync, $T) {
      var _null = null;
      return sync ? new P._SyncStreamController(onListen, _null, _null, onCancel, $T._eval$1("_SyncStreamController<0>")) : new P._AsyncStreamController(onListen, _null, _null, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(t1, t2, $T._eval$1("_BufferingStreamSubscription<0>"));
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _AsBroadcastStream$: function(_source, onListenHandler, onCancelHandler, $T) {
      var t1 = type$.dynamic,
        t2 = $T._eval$1("StreamSubscription<0>");
      t2 = new P._AsBroadcastStream(_source, $.Zone__current.registerUnaryCallback$2$1(onListenHandler, t1, t2), $.Zone__current.registerUnaryCallback$2$1(onCancelHandler, t1, t2), $.Zone__current, $T._eval$1("_AsBroadcastStream<0>"));
      t2.set$_async$_controller(new P._AsBroadcastStreamController(t2.get$_onListen(), t2.get$_onCancel(), $T._eval$1("_AsBroadcastStreamController<0>")));
      return t2;
    },
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception, error0;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        replacement = $.Zone__current.errorCallback$2(e, s);
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = replacement.error;
          error = error0 == null ? new P.NullThrownError() : error0;
          stackTrace = replacement.stackTrace;
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var boundCallback,
        t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return t1.createPeriodicTimer$2(duration, callback);
      boundCallback = t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer);
      return $.Zone__current.createPeriodicTimer$2(duration, boundCallback);
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      return new P.AsyncError(error, t1);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _parentDelegate: function(zone) {
      if (zone.get$parent(zone) == null)
        return null;
      return zone.get$parent(zone).get$_delegate();
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      t1.stackTrace = stackTrace;
      type$.StackTrace._as(stackTrace);
      if (error == null) {
        t1.error = new P.ArgumentError(false, null, "error", "Must not be null");
        t1.stackTrace = P.StackTrace_current();
      }
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = type$.Zone;
      t1._as($self);
      type$.ZoneDelegate._as($parent);
      t1._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = type$.Zone;
      t1._as($self);
      type$.ZoneDelegate._as($parent);
      t1._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = type$.Zone;
      t1._as($self);
      type$.ZoneDelegate._as($parent);
      t1._as(zone);
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback: function($self, $parent, zone, f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    _rootRegisterUnaryCallback: function($self, $parent, zone, f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    _rootRegisterBinaryCallback: function($self, $parent, zone, f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    _rootErrorCallback: function($self, $parent, zone, error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      return null;
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      type$.void_Function._as(f);
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || C.C__RootZone.get$errorZone() === zone.get$errorZone()) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      P._scheduleAsyncCallback(f);
    },
    _rootCreateTimer: function($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      callback = zone.bindCallback$1$1(type$.void_Function._as(callback), type$.void);
      return P.Timer__createTimer(duration, callback);
    },
    _rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      callback = zone.bindUnaryCallback$2$1(type$.void_Function_Timer._as(callback), type$.dynamic, type$.Timer);
      return P.Timer__createPeriodicTimer(duration, callback);
    },
    _rootPrint: function($self, $parent, zone, line) {
      H.printString(H._asStringS(line));
    },
    _printToZone: function(line) {
      $.Zone__current.print$1(0, line);
    },
    _rootFork: function($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, t2;
      type$.ZoneSpecification._as(specification);
      type$.Map_dynamic_dynamic._as(zoneValues);
      $.printToZone = P.async___printToZone$closure();
      if (specification == null)
        specification = C._ZoneSpecification_ALf;
      valueMap = zone.get$_async$_map();
      t1 = new P._CustomZone(zone, valueMap);
      t2 = zone.get$_run();
      t1._run = t2;
      t2 = zone.get$_runUnary();
      t1._runUnary = t2;
      t2 = zone.get$_runBinary();
      t1._runBinary = t2;
      t2 = zone.get$_registerCallback();
      t1._registerCallback = t2;
      t2 = zone.get$_registerUnaryCallback();
      t1._registerUnaryCallback = t2;
      t2 = zone.get$_registerBinaryCallback();
      t1._registerBinaryCallback = t2;
      t2 = zone.get$_errorCallback();
      t1.set$_errorCallback(t2);
      t2 = zone.get$_scheduleMicrotask();
      t1.set$_scheduleMicrotask(t2);
      t2 = zone.get$_createTimer();
      t1.set$_createTimer(t2);
      t2 = zone.get$_createPeriodicTimer();
      t1.set$_createPeriodicTimer(t2);
      t2 = zone.get$_print();
      t1.set$_print(t2);
      t2 = zone.get$_fork();
      t1.set$_fork(t2);
      t2 = specification.handleUncaughtError;
      t1.set$_handleUncaughtError(t2 != null ? new P._ZoneFunction(t1, t2, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace) : zone.get$_handleUncaughtError());
      return t1;
    },
    runZoned: function(body, zoneSpecification, $R) {
      P.ArgumentError_checkNotNull(body, "body", $R._eval$1("0()"));
      return P._runZoned(body, null, zoneSpecification, $R);
    },
    _runZoned: function(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._async$_controller = t0;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _AsBroadcastStreamController: function _AsBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _._pending = null;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future: function Future() {
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _.result = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _.result = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _.T = t5;
    },
    Future_forEach_closure: function Future_forEach_closure(t0, t1) {
      this.iterator = t0;
      this.action = t1;
    },
    Future_doWhile_closure: function Future_doWhile_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.action = t1;
      this.doneSignal = t2;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    Completer: function Completer() {
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _Future_timeout_closure: function _Future_timeout_closure(t0, t1) {
      this.result = t0;
      this.timeLimit = t1;
    },
    _Future_timeout_closure0: function _Future_timeout_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.result = t2;
    },
    _Future_timeout_closure1: function _Future_timeout_closure1(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_contains_closure: function Stream_contains_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.needle = t2;
      _.future = t3;
    },
    Stream_contains__closure: function Stream_contains__closure(t0, t1) {
      this.element = t0;
      this.needle = t1;
    },
    Stream_contains__closure0: function Stream_contains__closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_contains_closure0: function Stream_contains_closure0(t0) {
      this.future = t0;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_toList_closure: function Stream_toList_closure(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    Stream_toList_closure0: function Stream_toList_closure0(t0, t1) {
      this.future = t0;
      this.result = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.future = t2;
    },
    Stream_first_closure0: function Stream_first_closure0(t0) {
      this.future = t0;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamView: function StreamView(t0, t1) {
      this._stream = t0;
      this.$ti = t1;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    StreamController: function StreamController() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._async$_controller = t0;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t0;
      _._state = t1;
      _._pending = _._cancelFuture = null;
      _.$ti = t2;
    },
    _BufferingStreamSubscription_asFuture_closure: function _BufferingStreamSubscription_asFuture_closure(t0, t1) {
      this.result = t0;
      this.futureValue = t1;
    },
    _BufferingStreamSubscription_asFuture_closure0: function _BufferingStreamSubscription_asFuture_closure0(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture__closure: function _BufferingStreamSubscription_asFuture__closure(t0, t1, t2) {
      this.result = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _DoneStreamSubscription_asFuture_closure: function _DoneStreamSubscription_asFuture_closure(t0, t1) {
      this.result = t0;
      this.futureValue = t1;
    },
    _AsBroadcastStream: function _AsBroadcastStream(t0, t1, t2, t3, t4) {
      var _ = this;
      _._async$_source = t0;
      _._onListenHandler = t1;
      _._onCancelHandler = t2;
      _._zone = t3;
      _._subscription = _._async$_controller = null;
      _.$ti = t4;
    },
    _BroadcastSubscriptionWrapper: function _BroadcastSubscriptionWrapper(t0, t1) {
      this._stream = t0;
      this.$ti = t1;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._isPaused = false;
      _.$ti = t1;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._stream = t0;
      _._onDone = _._onError = _._async$_onData = _._subscription = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _WhereStream: function _WhereStream(t0, t1, t2) {
      this._test = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _HandleErrorStream: function _HandleErrorStream(t0, t1, t2, t3) {
      var _ = this;
      _._transform = t0;
      _._test = t1;
      _._async$_source = t2;
      _.$ti = t3;
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _RunNullaryZoneFunction: function _RunNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunUnaryZoneFunction: function _RunUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunBinaryZoneFunction: function _RunBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterNullaryZoneFunction: function _RegisterNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterUnaryZoneFunction: function _RegisterUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterBinaryZoneFunction: function _RegisterBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    ZoneSpecification: function ZoneSpecification() {
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    ZoneDelegate: function ZoneDelegate() {
    },
    Zone: function Zone() {
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1) {
      var _ = this;
      _._delegateCache = _._handleUncaughtError = _._fork = _._print = _._createPeriodicTimer = _._createTimer = _._scheduleMicrotask = _._errorCallback = _._registerBinaryCallback = _._registerUnaryCallback = _._registerCallback = _._runBinary = _._runUnary = _._run = null;
      _.parent = t0;
      _._async$_map = t1;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0) {
      this._box_0 = t0;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new P._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
          hashCode = P.collection___defaultHashCode$closure();
        } else {
          if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
            return new P._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
          if (equals == null)
            equals = P.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = P.collection___defaultHashCode$closure();
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new P._CustomHashMap_closure($K);
      return new P._CustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        hashCode = P.collection___defaultHashCode$closure();
      } else {
        if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
          return new P._LinkedIdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedIdentityHashMap<1,2>"));
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      return new P._LinkedCustomHashMap(_equals, _hashCode, new P._LinkedCustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty: function($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal: function(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(H.fillLiteralSet(values, new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals: function(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode: function(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      J.forEach$1$ax(other, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of: function(other, $K, $V) {
      var t1 = P.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current(t1)));
      return result;
    },
    ListMixin__compareAny: function(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var _i, element;
      for (_i = 0; _i < 12; ++_i) {
        element = iterable[_i];
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    ListQueue$: function($E) {
      var t1 = new P.ListQueue($E._eval$1("ListQueue<0>")),
        t2 = new Array(8);
      t2.fixed$length = Array;
      t1.set$_collection$_table(H.setRuntimeTypeInfo(t2, $E._eval$1("JSArray<0>")));
      return t1;
    },
    ListQueue__nextPowerOf2: function(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    SplayTreeMap$: function(compare, $K, $V) {
      return new P.SplayTreeMap(new P._SplayTreeMapNode(null, null, $K._eval$1("@<0>")._bind$1($V)._eval$1("_SplayTreeMapNode<1,2>")), compare, new P.SplayTreeMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("SplayTreeMap<1,2>"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._collection$_element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0) {
      var _ = this;
      _._collection$_table = null;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t0;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeMapNode: function _SplayTreeMapNode(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _.key = t1;
      _.right = _.left = null;
      _.$ti = t2;
    },
    _SplayTree: function _SplayTree() {
    },
    SplayTreeMap: function SplayTreeMap(t0, t1, t2, t3) {
      var _ = this;
      _._collection$_root = null;
      _._dummy = t0;
      _._comparator = t1;
      _._validKey = t2;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t3;
    },
    SplayTreeMap_closure: function SplayTreeMap_closure(t0) {
      this.K = t0;
    },
    SplayTreeMap_addAll_closure: function SplayTreeMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable(t0, t1) {
      this._tree = t0;
      this.$ti = t1;
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _SplayTreeNodeIterator: function _SplayTreeNodeIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source != "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end);
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var decoder, t1, $length;
      if (allowMalformed)
        return null;
      decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      t1 = 0 === start;
      if (t1 && true)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      if (P.Utf8Decoder__unsafe(codeUnits))
        return null;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var i,
        limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, i, byteOr, byte, outputIndex0, t2, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = output.length, i = start, byteOr = 0; i < end; ++i) {
        if (i >= bytes.length)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          if (outputIndex >= t1)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t2;
          outputIndex = outputIndex0 + 1;
          t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          if (outputIndex0 >= t1)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t2;
          outputIndex0 = outputIndex + 1;
          t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          if (outputIndex >= t1)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t2;
          outputIndex = outputIndex0 + 1;
          t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          if (outputIndex0 >= t1)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t2;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t2;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (outputIndex0 >= t1)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t2;
            outputIndex = outputIndex1 + 1;
            if (outputIndex1 >= t1)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t2;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (outputIndex0 >= t1)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t2;
            outputIndex = outputIndex1 + 1;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (outputIndex1 >= t1)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = t2;
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        if (i >= bytes.length)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      t1 = "Not a byte value at index " + i + ": 0x";
      if (i >= bytes.length)
        return H.ioore(bytes, i);
      throw H.wrapException(P.ArgumentError$value(bytes, t1 + J.toRadixString$1$n(bytes[i], 16), null));
    },
    _Base64Decoder_decodeChunk: function(input, start, end, output, outIndex, state) {
      var i, charOr, char, t1, code, outIndex0, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = C.JSInt_methods._shrOtherPositive$1(state, 2),
        count = state & 3,
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      charOr = 0;
      for (; i < end; ++i) {
        char = C.JSString_methods._codeUnitAt$1(input, i);
        charOr |= char;
        t1 = char & 127;
        if (t1 >= inverseAlphabet.length)
          return H.ioore(inverseAlphabet, t1);
        code = inverseAlphabet[t1];
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            t1 = output.length;
            if (outIndex >= t1)
              return H.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (outIndex0 >= t1)
              return H.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (outIndex >= t1)
              return H.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw H.wrapException(P.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            t1 = output.length;
            if (outIndex >= t1)
              return H.ioore(output, outIndex);
            output[outIndex] = bits >>> 10;
            if (outIndex0 >= t1)
              return H.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 2;
          } else {
            if ((bits & 15) !== 0)
              throw H.wrapException(P.FormatException$(_s31_, input, i));
            if (outIndex >= output.length)
              return H.ioore(output, outIndex);
            output[outIndex] = bits >>> 4;
          }
          expectedPadding = (3 - count) * 3;
          if (char === 37)
            expectedPadding += 2;
          return P._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
        }
        throw H.wrapException(P.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return (bits << 2 | count) >>> 0;
      for (i = start; i < end; ++i) {
        char = C.JSString_methods._codeUnitAt$1(input, i);
        if (char > 127)
          break;
      }
      throw H.wrapException(P.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer: function(input, start, end, state) {
      var $length, bufferLength, remainderLength, t1,
        paddingStart = P._Base64Decoder__trimPaddingChars(input, start, end);
      if (typeof paddingStart !== "number")
        return paddingStart.$sub();
      $length = (state & 3) + (paddingStart - start);
      bufferLength = C.JSInt_methods._shrOtherPositive$1($length, 2) * 3;
      remainderLength = $length & 3;
      if (remainderLength !== 0) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = paddingStart < end;
      } else
        t1 = false;
      if (t1)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return new Uint8Array(bufferLength);
      return null;
    },
    _Base64Decoder__trimPaddingChars: function(input, start, end) {
      var char,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          char = C.JSString_methods.codeUnitAt$1(input, index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding: function(input, start, end, state) {
      var expectedPadding, char;
      if (start === end)
        return state;
      expectedPadding = -state - 1;
      for (; expectedPadding > 0;) {
        char = C.JSString_methods._codeUnitAt$1(input, start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            char = C.JSString_methods._codeUnitAt$1(input, start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          char = C.JSString_methods._codeUnitAt$1(input, start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw H.wrapException(P.FormatException$("Invalid padding character", input, start));
      return -expectedPadding - 1;
    },
    Encoding_getByName: function($name) {
      if ($name == null)
        return null;
      return $.Encoding__nameToEncoding.$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      var stringifier;
      if (indent == null)
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      else
        stringifier = new P._JsonStringStringifierPretty(indent, 0, output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
    },
    _Utf8Decoder_errorDescription: function(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List: function(codeUnits, start, end) {
      var $length, bytes, t1, t2, i, b;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      bytes = new Uint8Array($length);
      for (t1 = bytes.length, t2 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t2.$index(codeUnits, start + i);
        if (typeof b !== "number")
          return b.$and();
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (i >= t1)
          return H.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMap_addAll_closure: function _JsonMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._convert$_callback = t0;
      this._buffer = t1;
      this._bufferIndex = 0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    _symbolMapToStringMap: function(map) {
      var result = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_dynamic);
      J.forEach$1$ax(map, new P._symbolMapToStringMap_closure(result));
      return result;
    },
    identityHashCode: function(object) {
      return H.objectHashCode(object);
    },
    Function_apply: function($function, positionalArguments, namedArguments) {
      return H.Primitives_applyFunction($function, positionalArguments, namedArguments == null ? null : P._symbolMapToStringMap(namedArguments));
    },
    Expando$: function($name, $T) {
      var t1;
      if (typeof WeakMap == "function")
        t1 = new WeakMap();
      else {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        t1 = "expando$key$" + t1;
      }
      return new P.Expando(t1, $name, $T._eval$1("Expando<0>"));
    },
    int_parse: function(source, onError, radix) {
      var value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$filled: function($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && true)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current(t1)));
      if (growable)
        return list;
      return $E._eval$1("List<0>")._as(J.JSArray_markFixedList(list));
    },
    List_List$unmodifiable: function(elements, $E) {
      return $E._eval$1("List<0>")._as(J.JSArray_markUnmodifiableList(P.List_List$from(elements, false, $E)));
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len, t1;
      if (Array.isArray(charCodes)) {
        type$.JSArray_int._as(charCodes);
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len);
        if (start <= 0) {
          if (typeof end !== "number")
            return end.$lt();
          t1 = end < len;
        } else
          t1 = true;
        return H.Primitives_stringFromCharCodes(t1 ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (type$.NativeUint8List._is(charCodes))
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, charCodes.length, _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, charCodes.length, _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, true, false, false, false));
    },
    identical: function(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer($content);
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri, 0, null);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, t3, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === C.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        if (typeof text != "string")
          H.throwExpression(H.argumentErrorValue(text));
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      i = 0;
      t2 = "";
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128) {
          t3 = C.JSInt_methods._shrOtherPositive$1(byte, 4);
          if (t3 >= 8)
            return H.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += H.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15] + _s16_[byte & 15];
        ++i;
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime$_withValue: function(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + _value));
      P.ArgumentError_checkNotNull(isUtc, "isUtc", type$.bool);
      return new P.DateTime(_value, isUtc);
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(microseconds, milliseconds) {
      if (typeof microseconds !== "number")
        return H.iae(microseconds);
      return new P.Duration(1000 * milliseconds + microseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull: function(argument, $name, $T) {
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
      return argument;
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name, message) {
      return new P.RangeError(null, null, true, value, $name, message != null ? message : "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      if (typeof value !== "number")
        return value.$lt();
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asIntS($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var i,
        result = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    Map_castFrom: function(source, $K, $V, K2, V2) {
      return new H.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    num_parse: function(input) {
      var t1,
        source = J.trim$0$s(input),
        result = H.Primitives_parseInt(source, null);
      if (result == null)
        result = H.Primitives_parseDouble(source);
      if (result != null)
        return result;
      t1 = P.FormatException$(input, null, null);
      throw H.wrapException(t1);
    },
    print: function(object) {
      var t1 = $.printToZone;
      if (t1 == null)
        H.printString(object);
      else
        t1.call$1(object);
    },
    Set_castFrom: function(source, newSet, $S, $T) {
      return new H.CastSet(source, newSet, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastSet<1,2>"));
    },
    Stopwatch$: function() {
      if ($.Stopwatch__frequency == null) {
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
      }
      return new P.Stopwatch();
    },
    _combineSurrogatePair: function(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse: function(uri, start, end) {
      var t1, delta, t2, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t3, schemeAuth, _null = null;
      end = uri.length;
      t1 = start + 5;
      if (end >= t1) {
        delta = ((J._codeUnitAt$1$s(uri, start + 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, start) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, start + 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, start + 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, start + 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(start > 0 || end < end ? C.JSString_methods.substring$2(uri, start, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, t1, end), 0, _null).get$uri();
      }
      t2 = new Array(8);
      t2.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t2, type$.JSArray_int);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      t2 = start - 1;
      C.JSArray_methods.$indexSet(indices, 1, t2);
      C.JSArray_methods.$indexSet(indices, 2, t2);
      C.JSArray_methods.$indexSet(indices, 7, t2);
      C.JSArray_methods.$indexSet(indices, 3, start);
      C.JSArray_methods.$indexSet(indices, 4, start);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, start, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= start)
        if (P._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      t2 = indices[2];
      if (typeof t2 !== "number")
        return t2.$add();
      hostStart = t2 + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      t2 = indices[7];
      if (typeof t2 !== "number")
        return t2.$lt();
      isSimple = t2 < start;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t2 = portStart > start;
          if (t2 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && J.startsWith$2$s(uri, "..", pathStart)))
              t3 = queryStart > pathStart + 2 && J.startsWith$2$s(uri, "/..", queryStart - 3);
            else
              t3 = true;
            if (t3) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === start + 4)
                if (J.startsWith$2$s(uri, "file", start)) {
                  if (hostStart <= start) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= start;
                    t1 = delta - start;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    start = 0;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart)
                    if (start === 0 && true) {
                      uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++queryStart;
                      ++fragmentStart;
                      ++end;
                    } else {
                      uri = C.JSString_methods.substring$2(uri, start, pathStart) + "/" + C.JSString_methods.substring$2(uri, queryStart, end);
                      schemeEnd -= start;
                      hostStart -= start;
                      portStart -= start;
                      pathStart -= start;
                      t1 = 1 - start;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      start = 0;
                    }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", start)) {
                  if (t2 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1))
                    if (start === 0 && true) {
                      uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart -= 3;
                      queryStart -= 3;
                      fragmentStart -= 3;
                      end -= 3;
                    } else {
                      uri = C.JSString_methods.substring$2(uri, start, portStart) + C.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      hostStart -= start;
                      portStart -= start;
                      t1 = 3 + start;
                      pathStart -= t1;
                      queryStart -= t1;
                      fragmentStart -= t1;
                      end = uri.length;
                      start = 0;
                    }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === t1 && J.startsWith$2$s(uri, "https", start)) {
                if (t2 && portStart + 4 === pathStart && J.startsWith$2$s(uri, "443", portStart + 1)) {
                  t1 = start === 0 && true;
                  t2 = J.getInterceptor$asx(uri);
                  if (t1) {
                    uri = t2.replaceRange$3(uri, portStart, pathStart, "");
                    pathStart -= 4;
                    queryStart -= 4;
                    fragmentStart -= 4;
                    end -= 3;
                  } else {
                    uri = t2.substring$2(uri, start, portStart) + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= start;
                    hostStart -= start;
                    portStart -= start;
                    t1 = 4 + start;
                    pathStart -= t1;
                    queryStart -= t1;
                    fragmentStart -= t1;
                    end = uri.length;
                    start = 0;
                  }
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (start > 0 || end < uri.length) {
          uri = J.substring$2$s(uri, start, end);
          schemeEnd -= start;
          hostStart -= start;
          portStart -= start;
          pathStart -= start;
          queryStart -= start;
          fragmentStart -= start;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_tryParse: function(uri) {
      var t1, exception, start = 0, end = null;
      try {
        t1 = P.Uri_parse(uri, start, end);
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(H.unwrapException(exception)))
          return null;
        else
          throw exception;
      }
    },
    Uri_decodeComponent: function(encodedComponent) {
      H._asStringS(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri_splitQueryString: function(query) {
      var t1 = type$.String;
      return C.JSArray_methods.fold$1$2(H.setRuntimeTypeInfo(query.split("&"), type$.JSArray_String), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), new P.Uri_splitQueryString_closure(C.C_Utf8Codec), type$.Map_String_String);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0, _null = null,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = result.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t1)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= t1)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, t2, wildCardLength, index, value, j, t3,
        error = new P.Uri_parseIPv6Address_error(host),
        parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, t2 = bytes.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          t3 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= t2)
            return H.ioore(bytes, index);
          bytes[index] = t3;
          t3 = index + 1;
          if (t3 >= t2)
            return H.ioore(bytes, t3);
          bytes[t3] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      if (scheme == null)
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__Uri: function(host, path, port, queryParameters, scheme) {
      var userInfo, query, fragment, isFile, t1, hasAuthority, t2, _null = null;
      scheme = P._Uri__makeScheme(scheme, 0, scheme == null ? 0 : scheme.length);
      userInfo = P._Uri__makeUserInfo(_null, 0, 0);
      host = P._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = P._Uri__makeQuery(_null, 0, 0, queryParameters);
      fragment = P._Uri__makeFragment(_null, 0, 0);
      port = P._Uri__makePort(port, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(path, 0, path == null ? 0 : path.length, _null, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !C.JSString_methods.startsWith$1(path, "/"))
        path = P._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return new P._Uri(scheme, userInfo, t1 && C.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__compareScheme: function(scheme, uri) {
      var t1, i, schemeChar, uriChar, delta, lowerChar;
      for (t1 = scheme.length, i = 0; i < t1; ++i) {
        schemeChar = C.JSString_methods._codeUnitAt$1(scheme, i);
        uriChar = C.JSString_methods._codeUnitAt$1(uri, i);
        delta = schemeChar ^ uriChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = uriChar | delta;
            if (97 <= lowerChar && lowerChar <= 122)
              continue;
          }
          return false;
        }
      }
      return true;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      C.JSArray_methods.forEach$1(segments, new P._Uri__checkNonWindowsPathReservedCharacters_closure(false));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = H.SubListIterable$(segments, firstSegment, null, H._arrayInstanceType(segments)._precomputed1), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        t3 = P.RegExp_RegExp('["*/:<>?\\\\|]', false);
        t2.toString;
        if (H.stringContainsUnchecked(t2, t3, 0)) {
          t1 = P.UnsupportedError$("Illegal character in path: " + t2);
          throw H.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = P.UnsupportedError$("Illegal drive letter " + P.String_String$fromCharCode(charCode));
      throw H.wrapException(t1);
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = P._Uri__checkZoneID(host, t2, t1);
        if (typeof index !== "number")
          return index.$lt();
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        P.Uri_parseIPv6Address(host, t2, index);
        return C.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      for (; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = C.JSString_methods.indexOf$2(host, "%", start);
          if (!(index >= start && index < end))
            index = end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          P.Uri_parseIPv6Address(host, start, index);
          return "[" + C.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID: function(host, start, end) {
      var t1,
        index = C.JSString_methods.indexOf$2(host, "%", start);
      if (index >= start) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = index < end;
      } else
        t1 = false;
      return t1 ? index : end;
    },
    _Uri__normalizeZoneID: function(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength,
        buffer = prefix !== "" ? new P.StringBuffer(prefix) : null;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          t2 = buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            P._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_nxB, t1);
            t1 = (C.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
            buffer._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk, t1);
              t1 = (C.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              P._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = 65536 | (char & 1023) << 10 | tail & 1023;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
              buffer._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme)._codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority,
        t1 = path == null;
      if (t1 && true)
        return isFile ? "/" : "";
      result = !t1 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : C.JSNull_methods.map$1$1(pathSegments, new P._Uri__makePath_closure(), type$.String).join$1(0, "/");
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      var result, t1 = {};
      if (query != null) {
        if (queryParameters != null)
          throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      }
      if (queryParameters == null)
        return null;
      result = new P.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new P._Uri__makeQuery_closure(new P._Uri__makeQuery_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return null;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, type$.JSArray_int);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, type$.JSArray_int);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var char, t2, replacement, sourceLength, tail, _null = null,
        t1 = !escapeDelimiters,
        index = start,
        sectionStart = index,
        buffer = _null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = C.JSString_methods.codeUnitAt$1(component, index);
          if (char < 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(charTable, t2);
            t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else {
              if (t1)
                if (char <= 93) {
                  t2 = char >>> 4;
                  if (t2 >= 8)
                    return H.ioore(C.List_2Vk, t2);
                  t2 = (C.List_2Vk[t2] & 1 << (char & 15)) !== 0;
                } else
                  t2 = false;
              else
                t2 = false;
              if (t2) {
                P._Uri__fail(component, index, "Invalid character");
                sourceLength = _null;
                replacement = sourceLength;
              } else {
                if ((char & 64512) === 55296) {
                  t2 = index + 1;
                  if (t2 < end) {
                    tail = C.JSString_methods.codeUnitAt$1(component, t2);
                    if ((tail & 64512) === 56320) {
                      char = 65536 | (char & 1023) << 10 | tail & 1023;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                replacement = P._Uri__escapeChar(char);
              }
            }
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(component, sectionStart, index);
            buffer._contents += H.S(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return _null;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return H.ioore(segments, 0);
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = P.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = J.getInterceptor$s(text),
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (C.C_Utf8Codec !== encoding)
          t2 = false;
        else
          t2 = true;
        if (t2)
          return t1.substring$2(text, start, end);
        else
          bytes = new H.CodeUnits(t1.substring$2(text, start, end));
      } else {
        bytes = H.setRuntimeTypeInfo([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          codeUnit = t1._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            C.JSArray_methods.add$1(bytes, 32);
          else
            C.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(0, bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse: function(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H.setRuntimeTypeInfo([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        t1 = type$.Uint8List,
        tables = P.List_List$generate(22, new P._createTables_closure(), true, t1),
        t2 = new P._createTables_build(tables),
        t3 = new P._createTables_setChars(),
        t4 = new P._createTables_setRange(),
        t5 = t1._as(t2.call$2(0, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 14);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 3);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(14, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 15);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(15, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, "%", 225);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(1, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(2, 235));
      t3.call$3(t5, _s77_, 139);
      t3.call$3(t5, _s1_1, 131);
      t3.call$3(t5, _s1_, 146);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(3, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 68);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(4, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, "[", 232);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(5, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(6, 231));
      t4.call$3(t5, "19", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(7, 231));
      t4.call$3(t5, "09", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t3.call$3(t1._as(t2.call$2(8, 8)), "]", 5);
      t5 = t1._as(t2.call$2(9, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 16);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(16, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 17);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(17, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(10, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(18, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 19);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(19, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(11, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(12, 236));
      t3.call$3(t5, _s77_, 12);
      t3.call$3(t5, _s1_2, 12);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(13, 237));
      t3.call$3(t5, _s77_, 13);
      t3.call$3(t5, _s1_2, 13);
      t4.call$3(t1._as(t2.call$2(20, 245)), "az", 21);
      t2 = t1._as(t2.call$2(21, 245));
      t4.call$3(t2, "az", 21);
      t4.call$3(t2, "09", 21);
      t3.call$3(t2, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = J.getInterceptor$s(uri), i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = t1._codeUnitAt$1(uri, i) ^ 96;
        if (char > 95)
          char = 31;
        if (char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure(t0) {
      this.result = t0;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error0: function Error0() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Expando: function Expando(t0, t1, t2) {
      this._jsWeakMapOrKey = t0;
      this.name = t1;
      this.$ti = t2;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Match: function Match() {
    },
    RegExp: function RegExp() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    Set: function Set() {
    },
    StackTrace: function StackTrace() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._core$_start = 0;
    },
    String: function String() {
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri: function Uri() {
    },
    Uri_splitQueryString_closure: function Uri_splitQueryString_closure(t0) {
      this.encoding = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._queryParameters = _._hashCodeCache = _._text = _._pathSegments = null;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1) {
      this.uri = t0;
      this.portStart = t1;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0) {
      this.argumentError = t0;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_closure: function _createTables_closure() {
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._queryParameters = _._hashCodeCache = _._text = _._pathSegments = null;
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, t2;
      if (object == null)
        return null;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        t2 = H._asStringS(keys[_i]);
        dict.$indexSet(0, t2, object[t2]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: function(dict) {
      var object = {};
      dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      return t1 == null ? $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0) : t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null)
        t1 = $.Device__isWebKit = !H.boolConversionCheck(P.Device_isOpera()) && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      return t1;
    },
    Device_cssPrefix: function() {
      var t1,
        prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null ? $.Device__isFirefox = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0) : t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null)
          t1 = $.Device__isIE = !H.boolConversionCheck(P.Device_isOpera()) && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
        if (t1)
          prefix = "-ms-";
        else
          prefix = H.boolConversionCheck(P.Device_isOpera()) ? "-o-" : "-webkit-";
      }
      return $.Device__cachedCssPrefix = prefix;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0) {
      this.object = t0;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    CssClassSetImpl: function CssClassSetImpl() {
    },
    CssClassSetImpl_add_closure: function CssClassSetImpl_add_closure(t0) {
      this.value = t0;
    },
    CssClassSetImpl_addAll_closure: function CssClassSetImpl_addAll_closure(t0, t1) {
      this.$this = t0;
      this.iterable = t1;
    },
    CssClassSetImpl_removeAll_closure: function CssClassSetImpl_removeAll_closure(t0) {
      this.iterable = t0;
    },
    CssClassSetImpl_removeWhere_closure: function CssClassSetImpl_removeWhere_closure(t0) {
      this.test = t0;
    },
    CssClassSetImpl_clear_closure: function CssClassSetImpl_clear_closure() {
    },
    FilteredElementList: function FilteredElementList(t0, t1) {
      this._node = t0;
      this._childNodes = t1;
    },
    FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
    },
    FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
    },
    FilteredElementList_removeRange_closure: function FilteredElementList_removeRange_closure() {
    },
    Cursor: function Cursor() {
    },
    CursorWithValue: function CursorWithValue() {
    },
    Database: function Database() {
    },
    Index: function Index() {
    },
    KeyRange: function KeyRange() {
    },
    ObjectStore: function ObjectStore() {
    },
    Observation: function Observation() {
    },
    _callDartFunction: function(callback, captureThis, $self, $arguments) {
      var arguments0, t1, dartArgs;
      H._asBoolS(captureThis);
      type$.List_dynamic._as($arguments);
      if (H.boolConversionCheck(captureThis)) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      t1 = type$.dynamic;
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), t1), true, t1);
      return P._convertToJS(P.Function_apply(type$.Function._as(callback), dartArgs, null));
    },
    JsObject_JsObject: function($constructor, $arguments) {
      var args, t1, factoryFunction,
        ctor = P._convertToJS($constructor);
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return type$.JsObject._as(P._wrapToDart(new ctor()));
          case 1:
            return type$.JsObject._as(P._wrapToDart(new ctor(P._convertToJS($arguments[0]))));
          case 2:
            return type$.JsObject._as(P._wrapToDart(new ctor(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]))));
          case 3:
            return type$.JsObject._as(P._wrapToDart(new ctor(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]))));
          case 4:
            return type$.JsObject._as(P._wrapToDart(new ctor(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3]))));
        }
      args = [null];
      t1 = H._arrayInstanceType($arguments);
      C.JSArray_methods.addAll$1(args, new H.MappedListIterable($arguments, t1._eval$1("@(1)")._as(P.js___convertToJS$closure()), t1._eval$1("MappedListIterable<1,@>")));
      factoryFunction = ctor.bind.apply(ctor, args);
      String(factoryFunction);
      return type$.JsObject._as(P._wrapToDart(new factoryFunction()));
    },
    JsObject_JsObject$jsify: function(object) {
      return type$.JsObject._as(P._wrapToDart(P.JsObject__convertDataTree(object)));
    },
    JsObject__convertDataTree: function(data) {
      return new P.JsObject__convertDataTree__convert(new P._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
    },
    JsArray__checkRange: function(start, end, $length) {
      var _null = null;
      if (start < 0 || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, _null, _null));
      if (typeof end !== "number")
        return end.$lt();
      if (end < start || end > $length)
        throw H.wrapException(P.RangeError$range(end, start, $length, _null, _null));
    },
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return null;
    },
    _convertToJS: function(o) {
      if (o == null || typeof o == "string" || typeof o == "number" || H._isBool(o))
        return o;
      if (o instanceof P.JsObject)
        return o._js$_jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (type$.TypedData._is(o))
        return o;
      if (o instanceof P.DateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (type$.Function._is(o))
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: function(o) {
      var t1, t2;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && type$.TypedData._is(o))
        return o;
      else if (o instanceof Date) {
        t1 = H._asIntS(o.getTime());
        t2 = new P.DateTime(t1, false);
        t2.DateTime$_withValue$2$isUtc(t1, false);
        return t2;
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    },
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      return P.Function_apply(type$.Function._as(callback), $arguments, null);
    },
    allowInterop: function(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(P._convertDartFunctionFast(f));
    },
    JsObject__convertDataTree__convert: function JsObject__convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    JsObject: function JsObject(t0) {
      this._js$_jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._js$_jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._js$_jsObject = t0;
      this.$ti = t1;
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    jsify: function(object) {
      return P._convertDataTree(object);
    },
    _convertDataTree: function(data) {
      return new P._convertDataTree__convert(new P._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _convertDataTree__convert: function _convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    max: function(a, b, $T) {
      H.checkTypeBound($T, type$.num, "T", "max");
      $T._as(a);
      $T._as(b);
      return Math.max(H.checkNum(a), H.checkNum(b));
    },
    log0: function(x) {
      return Math.log(x);
    },
    pow: function(x, exponent) {
      H.checkNum(exponent);
      return Math.pow(x, exponent);
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JSRandom: function _JSRandom() {
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    Angle: function Angle() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    StringList: function StringList() {
    },
    AttributeClassSet: function AttributeClassSet(t0) {
      this._svg$_element = t0;
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    ByteBuffer: function ByteBuffer() {
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioBufferSourceNode: function AudioBufferSourceNode() {
    },
    AudioNode: function AudioNode() {
    },
    AudioParam: function AudioParam() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioParamMap_values_closure: function AudioParamMap_values_closure(t0) {
      this.values = t0;
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AudioTrack: function AudioTrack() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    SqlDatabase: function SqlDatabase() {
    },
    SqlError: function SqlError() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {
    window: function() {
      return window;
    },
    Blob_Blob: function(blobParts) {
      var t1 = new self.Blob(blobParts);
      return t1;
    },
    CanvasElement_CanvasElement: function(height, width) {
      var e = document.createElement("canvas");
      if (width != null)
        e.width = width;
      if (height != null)
        e.height = height;
      return e;
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1 = document.body,
        fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = type$._ChildNodeListLazy;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), t1._eval$1("bool(ListMixin.E)")._as(new W.Element_Element$html_closure()), t1._eval$1("WhereIterable<ListMixin.E>"));
      return type$.Element._as(t1.get$single(t1));
    },
    Element__determineMouseWheelEventType: function(e) {
      type$.EventTarget._as(e);
      return "wheel";
    },
    Element__safeTagName: function(element) {
      var t1, exception,
        result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        if (typeof t1.get$tagName(element) == "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    Event_Event$eventType: function(type, $name, canBubble, cancelable) {
      var e = document.createEvent(type);
      e.initEvent($name, true, true);
      return e;
    },
    EventSource__factoryEventSource: function(url, eventSourceInitDict) {
      var t1 = new EventSource(url, P.convertDartToNative_Dictionary(eventSourceInitDict));
      return t1;
    },
    FontFace_FontFace: function(family, source) {
      return new FontFace(family, source);
    },
    HttpRequest_request: function(url, method, sendData, withCredentials) {
      var t2, t3, t4,
        t1 = new P._Future($.Zone__current, type$._Future_HttpRequest),
        completer = new P._AsyncCompleter(t1, type$._AsyncCompleter_HttpRequest),
        xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, method, url, true);
      if (withCredentials != null)
        xhr.withCredentials = withCredentials;
      t2 = type$.void_Function_ProgressEvent;
      t3 = t2._as(new W.HttpRequest_request_closure(xhr, completer));
      type$.void_Function._as(null);
      t4 = type$.ProgressEvent;
      W._EventStreamSubscription$(xhr, "load", t3, false, t4);
      W._EventStreamSubscription$(xhr, "error", t2._as(completer.get$completeError()), false, t4);
      if (sendData != null)
        xhr.send(sendData);
      else
        xhr.send();
      return t1;
    },
    ImageElement_ImageElement: function(src) {
      var e = document.createElement("img");
      e.src = src;
      return e;
    },
    Notification__factoryNotification: function(title, options) {
      var t1 = new Notification(title, P.convertDartToNative_Dictionary(options));
      return t1;
    },
    Notification__requestPermission: function(deprecatedCallback) {
      return Notification.requestPermission(H.convertDartClosureToJS(deprecatedCallback, 1));
    },
    Notification_requestPermission: function() {
      var t1 = new P._Future($.Zone__current, type$._Future_String);
      W.Notification__requestPermission(new W.Notification_requestPermission_closure(new P._AsyncCompleter(t1, type$._AsyncCompleter_String)));
      return t1;
    },
    WebSocket_WebSocket: function(url, protocols) {
      return new WebSocket(url);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _ElementCssClassSet__toggleOnOff: function(_element, value, shouldAdd) {
      var list = _element.classList;
      if (shouldAdd) {
        list.add(value);
        return true;
      } else {
        list.remove(value);
        return false;
      }
    },
    _ElementCssClassSet__addAll: function(_element, iterable) {
      var t1,
        list = _element.classList;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();)
        list.add(t1.get$current(t1));
    },
    _ElementCssClassSet__removeAll: function(_element, iterable) {
      var t1, _i,
        list = _element.classList;
      for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i)
        list.remove(H._asStringS(iterable[_i]));
    },
    _ElementCssClassSet__removeWhere: function(_element, test, doRemove) {
      var i, item,
        list = _element.classList;
      for (i = 0; i < list.length;) {
        item = list.item(i);
        if (true === test.call$1(item))
          list.remove(item);
        else
          ++i;
      }
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _Html5NodeValidator$: function(uriPolicy) {
      var e = document.createElement("a"),
        t1 = new W._SameOriginUriPolicy(e, window.location);
      t1 = new W._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
      type$.Element._as(element);
      H._asStringS(attributeName);
      H._asStringS(value);
      type$._Html5NodeValidator._as(context);
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
      var t1, t2, t3;
      type$.Element._as(element);
      H._asStringS(attributeName);
      H._asStringS(value);
      t1 = type$._Html5NodeValidator._as(context).uriPolicy;
      t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$: function() {
      var t1 = type$.String,
        t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1),
        t3 = type$.String_Function_String._as(new W._TemplatingNodeValidator_closure()),
        t4 = H.setRuntimeTypeInfo(["TEMPLATE"], type$.JSArray_String);
      t1 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), null);
      t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t3, type$.MappedListIterable_String_String), t4, null);
      return t1;
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (type$.EventTarget._is($window))
          return $window;
        return null;
      } else
        return type$.EventTarget._as(e);
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (type$.Document._is(o))
        return o;
      return new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(o, true);
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return type$.WindowBase._as(w);
      else
        return new W._DOMWindowCrossFrame(w);
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    Animation: function Animation() {
    },
    ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    },
    AreaElement: function AreaElement() {
    },
    BackgroundFetchEvent: function BackgroundFetchEvent() {
    },
    BackgroundFetchRegistration: function BackgroundFetchRegistration() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BluetoothRemoteGattDescriptor: function BluetoothRemoteGattDescriptor() {
    },
    BodyElement: function BodyElement() {
    },
    BroadcastChannel: function BroadcastChannel() {
    },
    ButtonElement: function ButtonElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    Client: function Client() {
    },
    CloseEvent: function CloseEvent() {
    },
    Credential: function Credential() {
    },
    CredentialUserData: function CredentialUserData() {
    },
    CssKeyframesRule: function CssKeyframesRule() {
    },
    CssKeywordValue: function CssKeywordValue() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnitValue: function CssUnitValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataElement: function DataElement() {
    },
    DataTransferItem: function DataTransferItem() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DeprecationReport: function DeprecationReport() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList(t0, t1) {
      this._element = t0;
      this._childElements = t1;
    },
    _FrozenElementList: function _FrozenElementList(t0, t1) {
      this._nodeList = t0;
      this.$ti = t1;
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    ScrollAlignment: function ScrollAlignment(t0) {
      this._html$_value = t0;
    },
    EmbedElement: function EmbedElement() {
    },
    Entry: function Entry() {
    },
    Entry_remove_closure: function Entry_remove_closure(t0) {
      this.completer = t0;
    },
    Entry_remove_closure0: function Entry_remove_closure0(t0) {
      this.completer = t0;
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event0: function Event0() {
    },
    EventSource: function EventSource() {
    },
    EventTarget: function EventTarget() {
    },
    ExtendableEvent: function ExtendableEvent() {
    },
    FederatedCredential: function FederatedCredential() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileSystem: function FileSystem() {
    },
    FileWriter: function FileWriter() {
    },
    FontFace: function FontFace() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    GamepadButton: function GamepadButton() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequest_request_closure: function HttpRequest_request_closure(t0, t1) {
      this.xhr = t0;
      this.completer = t1;
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    IFrameElement: function IFrameElement() {
    },
    ImageData: function ImageData() {
    },
    ImageElement: function ImageElement() {
    },
    InputElement: function InputElement() {
    },
    InterventionReport: function InterventionReport() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    LIElement: function LIElement() {
    },
    Location: function Location() {
    },
    MapElement: function MapElement() {
    },
    MediaDeviceInfo: function MediaDeviceInfo() {
    },
    MediaElement: function MediaElement() {
    },
    MediaError: function MediaError() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaList: function MediaList() {
    },
    MediaRecorder: function MediaRecorder() {
    },
    MediaStream: function MediaStream() {
    },
    MediaStreamTrack: function MediaStreamTrack() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MetaElement: function MetaElement() {
    },
    MeterElement: function MeterElement() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiInputMap_values_closure: function MidiInputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap_values_closure: function MidiOutputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiPort: function MidiPort() {
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    MouseEvent: function MouseEvent() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    Notification0: function Notification0() {
    },
    Notification_requestPermission_closure: function Notification_requestPermission_closure(t0) {
      this.completer = t0;
    },
    OListElement: function OListElement() {
    },
    ObjectElement: function ObjectElement() {
    },
    OptionElement: function OptionElement() {
    },
    OutputElement: function OutputElement() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    ParamElement: function ParamElement() {
    },
    PasswordCredential: function PasswordCredential() {
    },
    PaymentRequest: function PaymentRequest() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceServerTiming: function PerformanceServerTiming() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    PositionError: function PositionError() {
    },
    PresentationAvailability: function PresentationAvailability() {
    },
    PresentationConnection: function PresentationConnection() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    PresentationRequest: function PresentationRequest() {
    },
    ProgressElement: function ProgressElement() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    RelatedApplication: function RelatedApplication() {
    },
    ReportBody: function ReportBody() {
    },
    ResizeObserver: function ResizeObserver() {
    },
    RtcDataChannel: function RtcDataChannel() {
    },
    RtcDataChannelEvent: function RtcDataChannelEvent() {
    },
    RtcLegacyStatsReport: function RtcLegacyStatsReport() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    RtcStatsReport_values_closure: function RtcStatsReport_values_closure(t0) {
      this.values = t0;
    },
    SelectElement: function SelectElement() {
    },
    Sensor: function Sensor() {
    },
    SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    },
    SlotElement: function SlotElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognition: function SpeechRecognition() {
    },
    SpeechRecognitionError: function SpeechRecognitionError() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    },
    Storage: function Storage() {
    },
    Storage_addAll_closure: function Storage_addAll_closure(t0) {
      this.$this = t0;
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    Storage_values_closure: function Storage_values_closure(t0) {
      this.values = t0;
    },
    StorageEvent: function StorageEvent() {
    },
    StyleSheet: function StyleSheet() {
    },
    TableColElement: function TableColElement() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchEvent: function TouchEvent() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    TrackElement: function TrackElement() {
    },
    UIEvent: function UIEvent() {
    },
    UnderlyingSourceBase: function UnderlyingSourceBase() {
    },
    Url: function Url() {
    },
    VRSession: function VRSession() {
    },
    VideoElement: function VideoElement() {
    },
    VideoTrack: function VideoTrack() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    VttRegion: function VttRegion() {
    },
    WebSocket: function WebSocket() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window: function Window() {
    },
    Window_animationFrame_closure: function Window_animationFrame_closure(t0) {
      this.completer = t0;
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _AttributeMap_addAll_closure: function _AttributeMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._element = t0;
    },
    CanvasImageSource: function CanvasImageSource() {
    },
    _ElementCssClassSet: function _ElementCssClassSet(t0) {
      this._element = t0;
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    },
    _CustomEventStreamProvider: function _CustomEventStreamProvider(t0) {
      this.$ti = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame(t0) {
      this._window = t0;
    },
    NodeValidator: function NodeValidator() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
      this.modifiedTree = false;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  O = {
    decodeAnsiColorEscapeCodes: function($async$text, $async$ansiUp) {
      return P._makeSyncStarIterable(function() {
        var text = $async$text,
          ansiUp = $async$ansiUp;
        var $async$goto = 0, $async$handler = 1, $async$currentError, packet, t1, t2, t3, t4, url;
        return function $async$decodeAnsiColorEscapeCodes($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                ansiUp._ansi_up$_text = text;
              case 2:
                // for condition
                // trivial condition
                packet = ansiUp._getNextPacket$0();
                t1 = packet.kind;
                if (t1 === C.PacketKind_0 || t1 === C.PacketKind_2) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                if (t1 === C.PacketKind_3 || t1 === C.PacketKind_4) {
                  // goto for condition
                  $async$goto = 2;
                  break;
                }
                $async$goto = t1 === C.PacketKind_1 ? 4 : 6;
                break;
              case 4:
                // then
                t1 = ansiUp.bold;
                t2 = ansiUp.fg;
                t3 = ansiUp.bg;
                t4 = packet.text;
                t2 = t2 == null ? null : t2.rgb;
                if (t2 == null)
                  t2 = null;
                else
                  t2 = H.setRuntimeTypeInfo(t2.slice(0), H._arrayInstanceType(t2)._eval$1("JSArray<1>"));
                t3 = t3 == null ? null : t3.rgb;
                if (t3 == null)
                  t3 = null;
                else
                  t3 = H.setRuntimeTypeInfo(t3.slice(0), H._arrayInstanceType(t3)._eval$1("JSArray<1>"));
                $async$goto = 7;
                return new O.StyledText(t4, t2, t3, t1 === true, null);
              case 7:
                // after yield
                // goto join
                $async$goto = 5;
                break;
              case 6:
                // else
                $async$goto = t1 === C.PacketKind_5 ? 8 : 10;
                break;
              case 8:
                // then
                ansiUp._processAnsi$1(packet);
                // goto join
                $async$goto = 9;
                break;
              case 10:
                // else
                $async$goto = t1 === C.PacketKind_6 ? 11 : 12;
                break;
              case 11:
                // then
                url = packet.url;
                t1 = C.JSString_methods.startsWith$1(url, "http:") || C.JSString_methods.startsWith$1(url, "https:");
                t2 = packet.text;
                $async$goto = t1 ? 13 : 15;
                break;
              case 13:
                // then
                $async$goto = 16;
                return new O.StyledText(t2, null, null, false, url);
              case 16:
                // after yield
                // goto join
                $async$goto = 14;
                break;
              case 15:
                // else
                $async$goto = 17;
                return new O.StyledText(t2, null, null, false, null);
              case 17:
                // after yield
              case 14:
                // join
              case 12:
                // join
              case 9:
                // join
              case 5:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.StyledText);
    },
    AnsiUp: function AnsiUp() {
      var _ = this;
      _._csiRegex = _.bg = _.fg = _.palette256 = _.ansiColors = _.bold = _._ansi_up$_text = null;
    },
    AnsiUpColor: function AnsiUpColor(t0) {
      this.rgb = t0;
    },
    PacketKind: function PacketKind(t0) {
      this._ansi_up$_name = t0;
    },
    TextPacket: function TextPacket(t0, t1, t2) {
      this.kind = t0;
      this.text = t1;
      this.url = t2;
    },
    StyledText: function StyledText(t0, t1, t2, t3, t4) {
      var _ = this;
      _.text = t0;
      _.fgColor = t1;
      _.bgColor = t2;
      _.bold = t3;
      _.url = t4;
    },
    DelegatingStreamSink: function DelegatingStreamSink(t0, t1) {
      this._stream_sink$_sink = t0;
      this.$ti = t1;
    },
    ConsoleArea: function ConsoleArea(t0, t1, t2) {
      var _ = this;
      _._timer = t0;
      _._bufferedText = t1;
      _._ansiUp = t2;
      _._editor = _._console_area$_container = null;
    },
    ConsoleArea_appendText_closure: function ConsoleArea_appendText_closure(t0) {
      this.$this = t0;
    },
    ConsoleArea_styledContents_closure: function ConsoleArea_styledContents_closure() {
    },
    ConsoleArea_styledContents_closure0: function ConsoleArea_styledContents_closure0() {
    },
    FrameworkController: function FrameworkController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._showPageIdController = t0;
      _._connectVmController = t1;
      _._connectedController = t2;
      _._disconnectedController = t3;
      _._framework_controller$_pageChangeController = t4;
    },
    FrameworkController__init_closure: function FrameworkController__init_closure(t0) {
      this.$this = t0;
    },
    ConnectVmEvent: function ConnectVmEvent(t0, t1) {
      this.serviceProtocolUri = t0;
      this.notify = t1;
    },
    HtmlMemoryScreen: function HtmlMemoryScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.memoryController = t0;
      _.heapAutoCompletePopup = _.heapPopupList = _.vmSearchField = _.resumeButton = _.pauseButton = _.experimentStatus = _.objectCountStatus = _.classCountStatus = _.librariesUi = _.settings = null;
      _.hoverPopup = t1;
      _.gcNowButton = _.settingsButton = _.resetAccumulatorsButton = _.vmMemorySnapshotButton = _.vmMemorySearchButton = null;
      _.tableStack = t2;
      _.history = _._inboundTree = _.originalHeapStats = _.tableContainer = _.memoryChart = null;
      _.memoryPath = t3;
      _.memoryDataView = null;
      _.isProfileBuild = t4;
      _.experimentCheckbox = _.privateClasses = _.classNameFilter = null;
      _._knownSnapshotClasses = t5;
      _._currentHoverSummary = _._tdCellHover = null;
      _.name = t6;
      _.id = t7;
      _.iconClass = t8;
      _.disabledTooltip = t9;
      _.disabled = t10;
      _.showTab = t11;
      _._helpStatus = null;
      _.shortcutCallback = t12;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t13;
      _.statusItems = t14;
    },
    HtmlMemoryScreen_createContent_closure: function HtmlMemoryScreen_createContent_closure(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure0: function HtmlMemoryScreen_createContent_closure0(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure1: function HtmlMemoryScreen_createContent_closure1(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure2: function HtmlMemoryScreen_createContent_closure2(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure3: function HtmlMemoryScreen_createContent_closure3(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure4: function HtmlMemoryScreen_createContent_closure4(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createContent_closure5: function HtmlMemoryScreen_createContent_closure5(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_createSettingsDialog_closure: function HtmlMemoryScreen_createSettingsDialog_closure(t0) {
      this.$this = t0;
    },
    HtmlMemoryScreen_findClass_closure: function HtmlMemoryScreen_findClass_closure(t0) {
      this.className = t0;
    },
    HtmlMemoryScreen_findClass_closure0: function HtmlMemoryScreen_findClass_closure0() {
    },
    HtmlMemoryScreen_findClassDetails_closure: function HtmlMemoryScreen_findClassDetails_closure(t0) {
      this.classRefId = t0;
    },
    HtmlMemoryScreen_findClassDetails_closure0: function HtmlMemoryScreen_findClassDetails_closure0() {
    },
    HtmlMemoryScreen__selectInstanceByObjectRef_closure: function HtmlMemoryScreen__selectInstanceByObjectRef_closure(t0) {
      this.objectRefToFind = t0;
    },
    HtmlMemoryScreen__selectInstanceByObjectRef_closure0: function HtmlMemoryScreen__selectInstanceByObjectRef_closure0() {
    },
    HtmlMemoryScreen__createHeapStatsTableView_closure: function HtmlMemoryScreen__createHeapStatsTableView_closure(t0, t1) {
      this.$this = t0;
      this.table = t1;
    },
    HtmlMemoryScreen_computeInboundReference_closure: function HtmlMemoryScreen_computeInboundReference_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.instanceNode = t2;
    },
    HtmlMemoryScreen__createInstanceView_closure: function HtmlMemoryScreen__createInstanceView_closure(t0) {
      this.objectRef = t0;
    },
    NavigationState: function NavigationState(t0) {
      this.field = "";
      this._className = t0;
    },
    NavigationPath: function NavigationPath(t0) {
      this._path = t0;
      this._inboundFieldName = "";
    },
    _HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin: function _HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin() {
    },
    evaluate: function(objectRef, expression) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InstanceRef),
        $async$returnValue, result, t1, t2;
      var $async$evaluate = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = type$.ServiceConnectionManager;
                t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
                t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
                $async$goto = 3;
                return P._asyncAwait(t2.evaluate$3(0, t1.get$id(t1), objectRef, expression), $async$evaluate);
              case 3:
                // returning from await.
                result = $async$result;
                t1 = J.getInterceptor$(result);
                switch (t1.get$runtimeType(result)) {
                  case C.Type_InstanceRef_N4G:
                    t1 = result.json;
                    $async$returnValue = t1 == null ? null : Q.InstanceRef$_fromJson(t1);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.Type_ErrorRef_Ltj:
                    $async$returnValue = null;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    B.log("Memory evaluate: Unknown type " + t1.get$runtimeType(result).toString$0(0) + ".", C.LogLevel_2);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$evaluate, $async$completer);
    },
    getInboundReferences: function(objectRef, maxInstances) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InboundReferences),
        $async$returnValue, response, t1, t2;
      var $async$getInboundReferences = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 3;
              return P._asyncAwait(t2.getInboundReferences$3(t1.get$id(t1), objectRef, maxInstances), $async$getInboundReferences);
            case 3:
              // returning from await.
              response = $async$result;
              if (response.type === "Sentinel") {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = O.InboundReferences$(response.json);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInboundReferences, $async$completer);
    },
    InboundReferences$: function(json) {
      var t1 = new O.InboundReferences0(null);
      t1.InboundReferences$1(json);
      return t1;
    },
    _searchClass: function(allClasses, className) {
      return C.JSArray_methods.firstWhere$2$orElse(allClasses, new O._searchClass_closure(className), new O._searchClass_closure0());
    },
    computeInboundRefs: function(allClasses, refs, buildCallback) {
      var t1, t2, t3, _i, element, t4, classRef, owningAllocator, owningAllocatorIsAbstract, referenceName, fieldRef, t5, library, _null = null,
        _s36_ = "hoverInstanceAllocations: Unhandled ",
        elements = refs == null ? _null : refs.elements;
      if (elements == null)
        elements = H.setRuntimeTypeInfo([], type$.JSArray_InboundReference);
      for (t1 = elements.length, t2 = type$.FieldRef, t3 = type$.ClassRef, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
        element = elements[_i];
        t4 = element.parentField;
        if (t4 == null && element.json == null)
          continue;
        if (t4.get$owner() != null && J.contains$1$asx(J.get$name$x(element.parentField.get$owner()), "&"))
          continue;
        switch (J.get$runtimeType$(element.parentField).toString$0(0)) {
          case "ClassRef":
            classRef = J.get$runtimeType$(element.parentField).$eq(0, C.Type_FieldRef_YUI) ? t3._as(element.parentField) : _null;
            owningAllocator = classRef.get$name(classRef);
            owningAllocatorIsAbstract = O._searchClass(allClasses, owningAllocator) == null;
            referenceName = _null;
            break;
          case "FieldRef":
            fieldRef = J.get$runtimeType$(element.parentField).$eq(0, C.Type_FieldRef_YUI) ? t2._as(element.parentField) : _null;
            referenceName = fieldRef.get$name(fieldRef);
            switch (J.get$runtimeType$(fieldRef.get$owner()).toString$0(0)) {
              case "ClassRef":
                t4 = fieldRef.get$owner().json;
                if (t4 == null)
                  classRef = _null;
                else {
                  classRef = new Q.ClassRef(t4);
                  classRef.type = H._asStringS(J.$index$asx(t4, "type"));
                  t5 = J.getInterceptor$asx(t4);
                  classRef.id = H._asStringS(t5.$index(t4, "id"));
                  classRef.fixedId = H._asBoolS(t5.$index(t4, "fixedId"));
                  classRef.name = H._asStringS(t5.$index(t4, "name"));
                }
                owningAllocator = classRef.name;
                owningAllocatorIsAbstract = O._searchClass(allClasses, owningAllocator) == null;
                break;
              case "Library":
              case "LibraryRef":
                t4 = fieldRef.get$owner().json;
                library = t4 == null ? _null : Q.Library$_fromJson(t4);
                t4 = library == null ? _null : library.name;
                owningAllocator = "Library " + (t4 == null ? "" : t4);
                owningAllocatorIsAbstract = _null;
                break;
              default:
                owningAllocatorIsAbstract = _null;
                owningAllocator = owningAllocatorIsAbstract;
            }
            break;
          case "FuncRef":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          case "Instance":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          case "InstanceRef":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          case "Library":
          case "LibraryRef":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          case "NullVal":
          case "NullValRef":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          case "Obj":
          case "ObjRef":
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
            break;
          default:
            B.log(_s36_ + J.get$runtimeType$(element.parentField).toString$0(0), C.LogLevel_2);
            owningAllocatorIsAbstract = _null;
            owningAllocator = owningAllocatorIsAbstract;
            referenceName = owningAllocator;
        }
        buildCallback.call$3(referenceName, owningAllocator, owningAllocatorIsAbstract);
      }
    },
    InboundReferences0: function InboundReferences0(t0) {
      this.elements = null;
      this.json = t0;
      this.type = null;
    },
    InboundReferences_closure: function InboundReferences_closure() {
    },
    InboundReference0: function InboundReference0(t0) {
      this.parentField = null;
      this.json = t0;
      this.type = null;
    },
    _searchClass_closure: function _searchClass_closure(t0) {
      this.className = t0;
    },
    _searchClass_closure0: function _searchClass_closure0() {
    },
    BrowserClient: function BrowserClient(t0) {
      this._xhrs = t0;
    },
    BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.request = t2;
    },
    BrowserClient_send__closure: function BrowserClient_send__closure(t0, t1, t2, t3) {
      var _ = this;
      _.reader = t0;
      _.completer = t1;
      _.xhr = t2;
      _.request = t3;
    },
    BrowserClient_send__closure0: function BrowserClient_send__closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _.headers = t4;
      _._finalized = false;
    },
    Style__getPlatformStyle: function() {
      var t1, _null = null;
      if (P.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      t1 = P.Uri_base();
      if (!C.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (P._Uri__Uri(_null, "a/b", _null, _null, _null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    Plotly: function Plotly() {
    },
    TraceData: function TraceData() {
    },
    Data: function Data() {
    },
    Marker: function Marker() {
    },
    Line: function Line() {
    },
    Transform0: function Transform0() {
    },
    Title: function Title() {
    },
    Layout: function Layout() {
    },
    Shape: function Shape() {
    },
    Legend: function Legend() {
    },
    HoverLabel: function HoverLabel() {
    },
    Font: function Font() {
    },
    AxisLayout: function AxisLayout() {
    },
    RangeSelector: function RangeSelector() {
    },
    Button: function Button() {
    },
    Margin: function Margin() {
    },
    RangeSlider: function RangeSlider() {
    },
    Configuration: function Configuration() {
    },
    DataEvent: function DataEvent() {
    },
    LegendDataEvent: function LegendDataEvent() {
    },
    Point1: function Point1() {
    },
    HoverFX: function HoverFX() {
    }
  },
  X = {
    CodeMirror__createFromElement: function(element, options) {
      var t1 = P.JsObject_JsObject(type$.JsFunction._as(type$.JsObject._as($.$get$_context().$index(0, "CodeMirror"))), [element, P.JsObject_JsObject$jsify(options)]);
      return t1;
    },
    CodeMirror$fromElement: function(element, options) {
      var t1 = X.CodeMirror__createFromElement(element, options),
        t2 = new X.CodeMirror(t1, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.JsEventListener_dynamic));
      $.CodeMirror__instances.$indexSet(0, t1, t2);
      return t2;
    },
    Position$fromProxy: function(obj) {
      var t1 = J.getInterceptor$asx(obj);
      return new X.Position(H._asIntS(t1.$index(obj, "line")), H._asIntS(t1.$index(obj, "ch")));
    },
    CodeMirror: function CodeMirror(t0, t1) {
      this._doc = null;
      this.jsProxy = t0;
      this._events = t1;
    },
    Doc: function Doc(t0, t1) {
      this.jsProxy = t0;
      this._events = t1;
    },
    Doc_getAllMarks_closure: function Doc_getAllMarks_closure() {
    },
    Position: function Position(t0, t1) {
      this.line = t0;
      this.ch = t1;
    },
    TextMarker: function TextMarker(t0, t1) {
      this.jsProxy = t0;
      this._events = t1;
    },
    LineHandle: function LineHandle(t0, t1) {
      this.jsProxy = t0;
      this._events = t1;
    },
    ProxyHolder: function ProxyHolder() {
    },
    ProxyHolder_onEvent_closure: function ProxyHolder_onEvent_closure() {
    },
    ProxyHolder_onEvent_closure0: function ProxyHolder_onEvent_closure0() {
    },
    breadthFirstTraversal: function(root, action, returnCondition, $T) {
      var t2, t3, node,
        t1 = H.setRuntimeTypeInfo([root], $T._eval$1("JSArray<0>")),
        queue = P.ListQueue$($T);
      queue.addAll$1(0, t1);
      for (t1 = queue.get$add(queue), t2 = action != null, t3 = returnCondition != null; !queue.get$isEmpty(queue);) {
        node = queue.removeFirst$0();
        if (t3 && H.boolConversionCheck(returnCondition.call$1(node)))
          return node;
        if (t2)
          action.call$1(node);
        C.JSArray_methods.forEach$1(node.children, t1);
      }
      return null;
    },
    TreeNode0: function TreeNode0() {
    },
    TreeNode_expandCascading_closure: function TreeNode_expandCascading_closure(t0) {
      this.$this = t0;
    },
    TreeNode_collapseCascading_closure: function TreeNode_collapseCascading_closure(t0) {
      this.$this = t0;
    },
    TreeNavigator: function TreeNavigator() {
    },
    Tree: function Tree() {
    },
    TreeNode: function TreeNode(t0, t1, t2) {
      var _ = this;
      _.data = t0;
      _.hasChildren = _.isExpanded = false;
      _.nextSibling = _.previousSibling = _.parent = _.collapse = _.expand = null;
      _.children = t1;
      _.$ti = t2;
    },
    StreamedResponse: function StreamedResponse(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    UninitializedLocaleData$: function(message, fallbackData, $F) {
      return new X.UninitializedLocaleData(message, fallbackData, H.setRuntimeTypeInfo([], type$.JSArray_String), $F._eval$1("UninitializedLocaleData<0>"));
    },
    UninitializedLocaleData: function UninitializedLocaleData(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.fallbackData = t1;
      _._badMessages = t2;
      _.$ti = t3;
    },
    LocaleDataException: function LocaleDataException(t0) {
      this.message = t0;
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = type$.JSArray_String;
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return new X.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0) {
      this.$this = t0;
    },
    ParsedPath__splitExtension_closure: function ParsedPath__splitExtension_closure() {
    },
    ParsedPath__splitExtension_closure0: function ParsedPath__splitExtension_closure0() {
    },
    PathException$: function(message) {
      return new X.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    VersionRange: function VersionRange() {
    },
    SourceSpanWithContext$: function(start, end, text, _context) {
      var t1 = new X.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!C.JSString_methods.contains$1(_context, text))
        H.throwExpression(P.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".'));
      if (B.findLineStart(_context, text, start.get$column()) == null)
        H.throwExpression(P.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".'));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._span_with_context$_context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._string_scanner$_position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    }
  },
  R = {JsEventListener: function JsEventListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._proxy = t0;
      _._js_utils$_name = t1;
      _.cvtEvent = t2;
      _.argCount = t3;
      _._callback = _._js_utils$_controller = null;
      _.$ti = t4;
    }, JsEventListener_stream_closure: function JsEventListener_stream_closure(t0) {
      this.$this = t0;
    }, JsEventListener_stream__closure: function JsEventListener_stream__closure(t0) {
      this.$this = t0;
    }, JsEventListener_stream__closure0: function JsEventListener_stream__closure0(t0) {
      this.$this = t0;
    }, JsEventListener_stream__closure1: function JsEventListener_stream__closure1(t0) {
      this.$this = t0;
    }, JsEventListener_stream__closure2: function JsEventListener_stream__closure2(t0) {
      this.$this = t0;
    }, JsEventListener_stream_closure0: function JsEventListener_stream_closure0(t0) {
      this.$this = t0;
    },
    _convert: function(bytes, start, end) {
      var t1, i, bufferIndex, byteOr, byte, bufferIndex0, t2,
        buffer = new Uint8Array((end - start) * 2);
      for (t1 = buffer.length, i = start, bufferIndex = 0, byteOr = 0; i < end; ++i) {
        if (i >= bytes.length)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        bufferIndex0 = bufferIndex + 1;
        t2 = (byte & 240) >>> 4;
        t2 = t2 < 10 ? t2 + 48 : t2 + 97 - 10;
        if (bufferIndex >= t1)
          return H.ioore(buffer, bufferIndex);
        buffer[bufferIndex] = t2;
        bufferIndex = bufferIndex0 + 1;
        t2 = byte & 15;
        t2 = t2 < 10 ? t2 + 48 : t2 + 97 - 10;
        if (bufferIndex0 >= t1)
          return H.ioore(buffer, bufferIndex0);
        buffer[bufferIndex0] = t2;
      }
      if (byteOr >= 0 && byteOr <= 255)
        return P.String_String$fromCharCodes(buffer, 0, null);
      for (i = start; i < end; ++i) {
        if (i >= bytes.length)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return byte.$ge();
        if (byte >= 0 && byte <= 255)
          continue;
        throw H.wrapException(P.FormatException$("Invalid byte " + (byte < 0 ? "-" : "") + "0x" + C.JSInt_methods.toRadixString$1(Math.abs(byte), 16) + ".", bytes, i));
      }
      throw H.wrapException("unreachable");
    },
    HexEncoder: function HexEncoder() {
    },
    SourceEditor$: function(codeMirror, debuggerState) {
      var t1 = new R.SourceEditor(codeMirror, debuggerState, H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint), P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.List_Breakpoint), P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.num));
      t1.SourceEditor$2(codeMirror, debuggerState);
      return t1;
    },
    HtmlDebuggerScreen: function HtmlDebuggerScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.debuggerState = t0;
      _._initialized = false;
      _._consoleDiv = _._sourceArea = _._navEditorPanels = _._matcher = _.consoleArea = _.popupScriptsView = _.scriptsView = _.breakpointsView = _.variablesView = _.callStackView = _.sourceEditor = _._popupView = _._popupTextfield = _._sourcePathDiv = _._breakpointsCountDiv = _.deviceStatus = null;
      _.name = t1;
      _.id = t2;
      _.iconClass = t3;
      _.disabledTooltip = t4;
      _.disabled = t5;
      _.showTab = t6;
      _._helpStatus = null;
      _.shortcutCallback = t7;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t8;
      _.statusItems = t9;
    },
    HtmlDebuggerScreen_createContent__updateResumeButton: function HtmlDebuggerScreen_createContent__updateResumeButton(t0) {
      this.resumeButton = t0;
    },
    HtmlDebuggerScreen_createContent__updatePauseButton: function HtmlDebuggerScreen_createContent__updatePauseButton(t0) {
      this.pauseButton = t0;
    },
    HtmlDebuggerScreen_createContent_closure: function HtmlDebuggerScreen_createContent_closure(t0, t1) {
      this.$this = t0;
      this._updateResumeButton = t1;
    },
    HtmlDebuggerScreen_createContent_closure0: function HtmlDebuggerScreen_createContent_closure0(t0, t1) {
      this.$this = t0;
      this._updatePauseButton = t1;
    },
    HtmlDebuggerScreen_createContent_closure1: function HtmlDebuggerScreen_createContent_closure1(t0, t1, t2) {
      this.$this = t0;
      this._updatePauseButton = t1;
      this._updateResumeButton = t2;
    },
    HtmlDebuggerScreen_createContent_closure2: function HtmlDebuggerScreen_createContent_closure2(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure3: function HtmlDebuggerScreen_createContent_closure3(t0, t1) {
      this.$this = t0;
      this.breakOnExceptionControl = t1;
    },
    HtmlDebuggerScreen_createContent_closure4: function HtmlDebuggerScreen_createContent_closure4(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure5: function HtmlDebuggerScreen_createContent_closure5(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent__closure: function HtmlDebuggerScreen_createContent__closure(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure6: function HtmlDebuggerScreen_createContent_closure6(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_updateStepCapabilities: function HtmlDebuggerScreen_createContent_updateStepCapabilities(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    HtmlDebuggerScreen_createContent_closure7: function HtmlDebuggerScreen_createContent_closure7(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure8: function HtmlDebuggerScreen_createContent_closure8(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure9: function HtmlDebuggerScreen_createContent_closure9(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_updateFrames: function HtmlDebuggerScreen_createContent_updateFrames(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_updateStatusLine: function HtmlDebuggerScreen_createContent_updateStatusLine(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure10: function HtmlDebuggerScreen_createContent_closure10(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure11: function HtmlDebuggerScreen_createContent_closure11(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure12: function HtmlDebuggerScreen_createContent_closure12(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure13: function HtmlDebuggerScreen_createContent_closure13(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_createContent_closure14: function HtmlDebuggerScreen_createContent_closure14(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen_onContentAttached_closure: function HtmlDebuggerScreen_onContentAttached_closure() {
    },
    HtmlDebuggerScreen_onContentAttached_closure0: function HtmlDebuggerScreen_onContentAttached_closure0(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__hookupListeners_closure: function HtmlDebuggerScreen__hookupListeners_closure(t0, t1) {
      this.$this = t0;
      this.scriptsView = t1;
    },
    HtmlDebuggerScreen__buildMenuNav_closure: function HtmlDebuggerScreen__buildMenuNav_closure(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure0: function HtmlDebuggerScreen__buildMenuNav_closure0(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure1: function HtmlDebuggerScreen__buildMenuNav_closure1(t0, t1) {
      this.$this = t0;
      this.scriptCountDiv = t1;
    },
    HtmlDebuggerScreen__buildMenuNav_closure2: function HtmlDebuggerScreen__buildMenuNav_closure2(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure3: function HtmlDebuggerScreen__buildMenuNav_closure3(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure4: function HtmlDebuggerScreen__buildMenuNav_closure4(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure5: function HtmlDebuggerScreen__buildMenuNav_closure5(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure6: function HtmlDebuggerScreen__buildMenuNav_closure6(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure7: function HtmlDebuggerScreen__buildMenuNav_closure7(t0, t1) {
      this.$this = t0;
      this.textfield = t1;
    },
    HtmlDebuggerScreen__buildMenuNav_closure8: function HtmlDebuggerScreen__buildMenuNav_closure8(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__buildMenuNav_closure9: function HtmlDebuggerScreen__buildMenuNav_closure9(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__handleConnectionStart_closure: function HtmlDebuggerScreen__handleConnectionStart_closure(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__handleConnectionStart_closure0: function HtmlDebuggerScreen__handleConnectionStart_closure0(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__handleIsolateChanged_closure: function HtmlDebuggerScreen__handleIsolateChanged_closure(t0) {
      this.$this = t0;
    },
    HtmlDebuggerScreen__handleIsolateChanged_closure0: function HtmlDebuggerScreen__handleIsolateChanged_closure0(t0) {
      this.$this = t0;
    },
    SourcePosition: function SourcePosition(t0, t1) {
      this.line = t0;
      this.column = t1;
    },
    SourceEditor: function SourceEditor(t0, t1, t2, t3, t4) {
      var _ = this;
      _.codeMirror = t0;
      _.debuggerState = t1;
      _.executionPoint = _.scriptRef = _.currentScript = null;
      _.breakpoints = t2;
      _.linesToBreakpoints = t3;
      _._executionPointElement = _._currentLineClass = null;
      _._lastScrollPositions = t4;
    },
    SourceEditor_closure: function SourceEditor_closure(t0) {
      this.$this = t0;
    },
    SourceEditor__closure: function SourceEditor__closure() {
    },
    SourceEditor__closure0: function SourceEditor__closure0() {
    },
    SourceEditor__refreshMarkers_closure: function SourceEditor__refreshMarkers_closure() {
    },
    SourceEditor__refreshMarkers_closure0: function SourceEditor__refreshMarkers_closure0() {
    },
    ScriptAndPosition: function ScriptAndPosition(t0, t1) {
      this.script = t0;
      this.position = t1;
    },
    HtmlApp: function HtmlApp(t0, t1) {
      this.framework = t0;
      this._handlers = t1;
    },
    HtmlApp__bind_closure: function HtmlApp__bind_closure(t0) {
      this.$this = t0;
    },
    HtmlApp__bind__closure: function HtmlApp__bind__closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    HtmlApp__bind__closure0: function HtmlApp__bind__closure0(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    HtmlApp_debuggerGetBreakpoints_closure: function HtmlApp_debuggerGetBreakpoints_closure() {
    },
    HtmlApp_debuggerGetScripts_closure: function HtmlApp_debuggerGetScripts_closure() {
    },
    HtmlApp_debuggerGetCallStackFrames_closure: function HtmlApp_debuggerGetCallStackFrames_closure() {
    },
    HtmlApp_debuggerGetVariables_closure: function HtmlApp_debuggerGetVariables_closure() {
    },
    HtmlCpuCallTree$: function(profileDataProvider) {
      var _null = null,
        t1 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)),
        t2 = new R.HtmlCpuCallTree(C.CpuProfilerViewType_2, profileDataProvider, t1);
      t2.CoreElement$5$attributes$classes$html$text("div", _null, "fill-section", _null, _null);
      t2.flex$0(0);
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t2._html_cpu_profile_tables$_init$0();
      return t2;
    },
    HtmlCpuBottomUp$: function(profileDataProvider) {
      var _null = null,
        t1 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)),
        t2 = new R.HtmlCpuBottomUp(C.CpuProfilerViewType_1, profileDataProvider, t1);
      t2.CoreElement$5$attributes$classes$html$text("div", _null, "fill-section", _null, _null);
      t2.flex$0(0);
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t2._html_cpu_profile_tables$_init$0();
      return t2;
    },
    HtmlCpuCallTree: function HtmlCpuCallTree(t0, t1, t2) {
      var _ = this;
      _.callTreeTable = null;
      _.type = t0;
      _.profileDataProvider = t1;
      _.viewNeedsRebuild = false;
      _.element = t2;
    },
    HtmlCpuCallTree__init_closure: function HtmlCpuCallTree__init_closure(t0) {
      this.$this = t0;
    },
    HtmlCpuCallTree__init_closure0: function HtmlCpuCallTree__init_closure0(t0) {
      this.$this = t0;
    },
    HtmlCpuBottomUp: function HtmlCpuBottomUp(t0, t1, t2) {
      var _ = this;
      _.bottomUpTable = null;
      _.type = t0;
      _.profileDataProvider = t1;
      _.viewNeedsRebuild = false;
      _.element = t2;
    },
    HtmlCpuBottomUp__init_closure: function HtmlCpuBottomUp__init_closure(t0) {
      this.$this = t0;
    },
    HtmlCpuBottomUp__init_closure0: function HtmlCpuBottomUp__init_closure0(t0) {
      this.$this = t0;
    },
    _connectWithSse: function(uri, onError, finishedCompleter) {
      return R._connectWithSse$body(uri, onError, finishedCompleter);
    },
    _connectWithSse$body: function(uri, onError, finishedCompleter) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.VmServiceWrapper),
        $async$returnValue, t2, client, t3, t4, stream, t1;
      var $async$_connectWithSse = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.uri = uri;
              t2 = new P._Future($.Zone__current, type$._Future_VmServiceWrapper);
              uri = uri.get$scheme() === "sse" ? uri.replace$1$scheme(0, "http") : uri.replace$1$scheme(0, "https");
              t1.uri = uri;
              client = M.SseClient$(uri.toString$0(0));
              t3 = client._incomingController;
              t4 = H._instanceType(t3)._eval$1("_ControllerStream<1>");
              t4._eval$1("~(StreamSubscription<Stream.T>)")._as(null);
              stream = P._AsBroadcastStream$(new P._ControllerStream(t3, t4), null, null, t4._eval$1("Stream.T"));
              t3 = client._eventSource;
              t1 = type$.void_Function_Event._as(new R._connectWithSse_closure(t1, stream, client, finishedCompleter, new P._AsyncCompleter(t2, type$._AsyncCompleter_VmServiceWrapper)));
              type$.void_Function._as(null);
              W._EventStreamSubscription$(t3, "open", t1, false, type$.Event);
              t1 = stream.listen$2$cancelOnError(null, true).asFuture$1$1(null, type$.dynamic);
              t1.catchError$1(onError);
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_connectWithSse, $async$completer);
    },
    _connectWithWebSocket: function(uri, onError, finishedCompleter) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.VmServiceWrapper),
        $async$returnValue, path, t1, t2, t3, localToForeignController, foreignToLocalController, t4, t5, ws, service, scheme;
      var $async$_connectWithWebSocket = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              scheme = uri.isScheme$1("wss") || uri.isScheme$1("https") ? "wss" : "ws";
              if (C.JSString_methods.endsWith$1(uri.get$path(uri), "/ws"))
                path = uri.get$path(uri);
              else
                path = C.JSString_methods.endsWith$1(uri.get$path(uri), "/") ? uri.get$path(uri) + "ws" : uri.get$path(uri) + "/ws";
              uri = uri.replace$2$path$scheme(0, path, scheme);
              t1 = W.WebSocket_WebSocket(uri.toString$0(0), null);
              t1.binaryType = "arraybuffer";
              t2 = new B.StreamChannelController(type$.StreamChannelController_dynamic);
              t3 = type$.dynamic;
              localToForeignController = P.StreamController_StreamController(null, null, true, t3);
              foreignToLocalController = P.StreamController_StreamController(null, null, true, t3);
              t4 = H._instanceType(foreignToLocalController);
              t5 = H._instanceType(localToForeignController);
              t2.set$_local(K.GuaranteeChannel$(new P._ControllerStream(foreignToLocalController, t4._eval$1("_ControllerStream<1>")), new P._StreamSinkWrapper(localToForeignController, t5._eval$1("_StreamSinkWrapper<1>")), true, t3));
              t2.set$_foreign(K.GuaranteeChannel$(new P._ControllerStream(localToForeignController, t5._eval$1("_ControllerStream<1>")), new P._StreamSinkWrapper(foreignToLocalController, t4._eval$1("_StreamSinkWrapper<1>")), false, t3));
              ws = new R.HtmlWebSocketChannel(t1, t2);
              ws.HtmlWebSocketChannel$1(t1);
              t2 = t2._foreign._streamController;
              t2.toString;
              t1 = H._instanceType(t2)._eval$1("_ControllerStream<1>");
              service = U.VmServiceWrapper$fromNewVmService(new P._HandleErrorStream(onError, type$.bool_Function_dynamic._as(null), new P._ControllerStream(t2, t1), t1._eval$1("_HandleErrorStream<Stream.T>")), new R._connectWithWebSocket_closure(ws), uri);
              if (ws._closeCode != null) {
                onError.call$1(null);
                $async$returnValue = service;
                // goto return
                $async$goto = 1;
                break;
              }
              ws._html0$_sink._stream_sink$_sink.get$done().then$1$2$onError(new R._connectWithWebSocket_closure0(finishedCompleter, service), onError, type$.void);
              $async$returnValue = service;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_connectWithWebSocket, $async$completer);
    },
    connect: function(uri, finishedCompleter) {
      var t1 = new P._Future($.Zone__current, type$._Future_VmServiceWrapper),
        connectedCompleter = new P._AsyncCompleter(t1, type$._AsyncCompleter_VmServiceWrapper),
        t2 = new R.connect_onError(connectedCompleter),
        t3 = type$.Null;
      new R.connect_connectHelper(uri, t2, finishedCompleter).call$0().then$1$2$onError(new R.connect_closure(connectedCompleter), t2, t3);
      finishedCompleter.future.then$1$1(new R.connect_closure0(connectedCompleter, t2), t3);
      return t1;
    },
    _connectWithSse_closure: function _connectWithSse_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.stream = t1;
      _.client = t2;
      _.finishedCompleter = t3;
      _.serviceCompleter = t4;
    },
    _connectWithSse__closure: function _connectWithSse__closure(t0, t1) {
      this.finishedCompleter = t0;
      this.service = t1;
    },
    _connectWithWebSocket_closure: function _connectWithWebSocket_closure(t0) {
      this.ws = t0;
    },
    _connectWithWebSocket_closure0: function _connectWithWebSocket_closure0(t0, t1) {
      this.finishedCompleter = t0;
      this.service = t1;
    },
    connect_onError: function connect_onError(t0) {
      this.connectedCompleter = t0;
    },
    connect_connectHelper: function connect_connectHelper(t0, t1, t2) {
      this.uri = t0;
      this.onError = t1;
      this.finishedCompleter = t2;
    },
    connect_closure: function connect_closure(t0) {
      this.connectedCompleter = t0;
    },
    connect_closure0: function connect_closure0(t0, t1) {
      this.connectedCompleter = t0;
      this.onError = t1;
    },
    _getStreamController: function($name, streamControllers, onFirstListenerSubscribed, $T) {
      streamControllers.putIfAbsent$2(0, $name, new R._getStreamController_closure(onFirstListenerSubscribed, $T));
      return streamControllers.$index(0, $name);
    },
    ServiceConnectionManager: function ServiceConnectionManager(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._connectionAvailableController = t0;
      _._serviceAvailable = t1;
      _.serviceTrafficLogger = _._serviceCapabilities = null;
      _._registeredServiceNotifiers = t2;
      _._registeredMethodsForService = t3;
      _._vmFlagManager = t4;
      _.sdkVersion = _.vm = _.service = _.connectedApp = _._serviceExtensionManager = _._isolateManager = null;
      _._stateController = t5;
      _._connectionClosedController = t6;
      _._deviceBusy = t7;
    },
    ServiceConnectionManager_registeredServiceListenable_closure: function ServiceConnectionManager_registeredServiceListenable_closure() {
    },
    ServiceConnectionManager_vmServiceOpened_closure: function ServiceConnectionManager_vmServiceOpened_closure(t0) {
      this.$this = t0;
    },
    ServiceConnectionManager_vmServiceOpened_handleServiceEvent: function ServiceConnectionManager_vmServiceOpened_handleServiceEvent(t0) {
      this.$this = t0;
    },
    ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure: function ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure() {
    },
    ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure0: function ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure0() {
    },
    ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure1: function ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure1() {
    },
    ServiceConnectionManager_vmServiceOpened_closure0: function ServiceConnectionManager_vmServiceOpened_closure0(t0) {
      this.service = t0;
    },
    ServiceConnectionManager_getDisplayRefreshRate_closure: function ServiceConnectionManager_getDisplayRefreshRate_closure() {
    },
    ServiceConnectionManager_getDisplayRefreshRate_closure0: function ServiceConnectionManager_getDisplayRefreshRate_closure0() {
    },
    ServiceConnectionManager_libraryUriAvailableNow_closure: function ServiceConnectionManager_libraryUriAvailableNow_closure() {
    },
    ServiceConnectionManager_libraryUriAvailableNow_closure0: function ServiceConnectionManager_libraryUriAvailableNow_closure0(t0) {
      this.uri = t0;
    },
    IsolateManager: function IsolateManager(t0, t1, t2, t3, t4) {
      var _ = this;
      _._isolates = t0;
      _._serviceExtensionManager = _._service_manager$_service = _._selectedIsolate = null;
      _._isolateCreatedController = t1;
      _._isolateExitedController = t2;
      _._selectedIsolateController = t3;
      _.selectedIsolateAvailable = t4;
      _.selectedIsolateLibraries = null;
    },
    IsolateManager_selectIsolate_closure: function IsolateManager_selectIsolate_closure(t0) {
      this.isolateRefId = t0;
    },
    IsolateManager_selectIsolate_closure0: function IsolateManager_selectIsolate_closure0() {
    },
    IsolateManager__initSelectedIsolate_closure: function IsolateManager__initSelectedIsolate_closure() {
    },
    IsolateManager__initSelectedIsolate_closure0: function IsolateManager__initSelectedIsolate_closure0() {
    },
    ServiceExtensionManager: function ServiceExtensionManager(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._isolateManager = _._service_manager$_service = null;
      _._firstFrameEventReceived = false;
      _._serviceExtensionController = t0;
      _._serviceExtensionStateController = t1;
      _._serviceExtensionListenables = t2;
      _._serviceExtensions = t3;
      _._enabledServiceExtensions = t4;
      _._pendingServiceExtensions = t5;
      _.extensionStatesUpdated = t6;
      _.connectedApp = null;
    },
    ServiceExtensionManager_resetAvailableExtensions_closure: function ServiceExtensionManager_resetAvailableExtensions_closure() {
    },
    ServiceExtensionManager_hasServiceExtensionListener_closure: function ServiceExtensionManager_hasServiceExtensionListener_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    ServiceExtensionManager_hasServiceExtensionListener__closure: function ServiceExtensionManager_hasServiceExtensionListener__closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    ServiceExtensionManager_hasServiceExtensionListener___closure: function ServiceExtensionManager_hasServiceExtensionListener___closure(t0) {
      this.notifier = t0;
    },
    ServiceExtensionManager_hasServiceExtensionListener__closure0: function ServiceExtensionManager_hasServiceExtensionListener__closure0(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    ServiceExtensionManager__getServiceExtensionController_closure: function ServiceExtensionManager__getServiceExtensionController_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    ServiceExtensionManager__getServiceExtensionStateController_closure: function ServiceExtensionManager__getServiceExtensionStateController_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    _getStreamController_closure: function _getStreamController_closure(t0, t1) {
      this.onFirstListenerSubscribed = t0;
      this.T = t1;
    },
    ServiceExtensionState: function ServiceExtensionState(t0, t1) {
      this.enabled = t0;
      this.value = t1;
    },
    VmFlagManager: function VmFlagManager(t0, t1) {
      this._service_manager$_service = null;
      this._flags = t0;
      this._flagNotifiers = t1;
    },
    VmServiceCapabilities: function VmServiceCapabilities(t0) {
      this.version = t0;
    },
    TimelineService: function TimelineService(t0, t1) {
      this.timelineController = t0;
      this.profilerService = t1;
    },
    TimelineService__initTimelineListener_closure: function TimelineService__initTimelineListener_closure(t0) {
      this.$this = t0;
    },
    TimelineService_startTimeline_closure: function TimelineService_startTimeline_closure() {
    },
    TimelineService_startTimeline_closure0: function TimelineService_startTimeline_closure0() {
    },
    HtmlTreeNavigator: function HtmlTreeNavigator() {
    },
    MediaType_MediaType$parse: function(mediaType) {
      return B.wrapFormatException("media type", mediaType, new R.MediaType_MediaType$parse_closure(mediaType), type$.MediaType);
    },
    MediaType$: function(type, subtype, parameters) {
      var t1 = type.toLowerCase(),
        t2 = subtype.toLowerCase(),
        t3 = type$.String;
      t3 = parameters == null ? P.LinkedHashMap_LinkedHashMap$_empty(t3, t3) : Z.CaseInsensitiveMap$from(parameters, t3);
      return new R.MediaType(t1, t2, new P.UnmodifiableMapView(t3, type$.UnmodifiableMapView_String_String));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    _StreamChannel: function _StreamChannel(t0, t1, t2) {
      this.stream = t0;
      this.sink = t1;
      this.$ti = t2;
    },
    StreamChannelMixin: function StreamChannelMixin() {
    },
    HtmlWebSocketChannel: function HtmlWebSocketChannel(t0, t1) {
      var _ = this;
      _._webSocket = t0;
      _._localCloseReason = _._localCloseCode = _._closeCode = null;
      _._html0$_controller = t1;
      _._html0$_sink = null;
    },
    HtmlWebSocketChannel_closure: function HtmlWebSocketChannel_closure(t0) {
      this.$this = t0;
    },
    HtmlWebSocketChannel_closure0: function HtmlWebSocketChannel_closure0(t0) {
      this.$this = t0;
    },
    HtmlWebSocketChannel_closure1: function HtmlWebSocketChannel_closure1(t0) {
      this.$this = t0;
    },
    HtmlWebSocketChannel_closure2: function HtmlWebSocketChannel_closure2(t0) {
      this.$this = t0;
    },
    HtmlWebSocketChannel__listen_closure: function HtmlWebSocketChannel__listen_closure(t0) {
      this.$this = t0;
    },
    HtmlWebSocketChannel__listen_closure0: function HtmlWebSocketChannel__listen_closure0(t0) {
      this.$this = t0;
    },
    _HtmlWebSocketSink: function _HtmlWebSocketSink(t0, t1) {
      this._channel = t0;
      this._stream_sink$_sink = t1;
    }
  },
  M = {
    _isToStringVisiting0: function(o) {
      return C.JSArray_methods.any$1($._toStringVisiting0, new M._isToStringVisiting_closure(o));
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_entries_closure: function CanonicalizedMap_entries_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_map_closure: function CanonicalizedMap_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.K2 = t2;
      _.V2 = t3;
    },
    CanonicalizedMap_values_closure: function CanonicalizedMap_values_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_toString_closure: function CanonicalizedMap_toString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.result = t2;
    },
    _isToStringVisiting_closure: function _isToStringVisiting_closure(t0) {
      this.o = t0;
    },
    RemoteDiagnosticsNode: function RemoteDiagnosticsNode(t0, t1, t2, t3) {
      var _ = this;
      _.parent = t0;
      _.cachedProperties = null;
      _.inspectorService = t1;
      _.json = t2;
      _._valueProperties = null;
      _.isProperty = t3;
      _._diagnostics_node$_children = _._childrenFuture = _._creationLocation = _._style = null;
    },
    InspectorSourceLocation: function InspectorSourceLocation(t0, t1) {
      this.json = t0;
      this.parent = t1;
    },
    InspectorTreeWeb: function InspectorTreeWeb() {
    },
    InspectorTreeWeb_addKeyboardListeners_closure: function InspectorTreeWeb_addKeyboardListeners_closure(t0) {
      this.$this = t0;
    },
    MemoryPlotly: function MemoryPlotly(t0, t1) {
      var _ = this;
      _._domName = t0;
      _._memoryChart = t1;
      _.eventTimeline = null;
      _.liveUpdate = true;
    },
    MemoryPlotly_getMemoryLayout_getYAxis: function MemoryPlotly_getMemoryLayout_getYAxis() {
    },
    MemoryPlotly_getMemoryLayout_getLegend: function MemoryPlotly_getMemoryLayout_getLegend() {
    },
    EventTimeline: function EventTimeline(t0, t1, t2, t3, t4) {
      var _ = this;
      _._snapshotColorCss = t0;
      _._resetColorCss = t1;
      _._eventBgColorCss = t2;
      _._domName = t3;
      _._chart = t4;
      _.snapshotTraceIndex = _.resetTraceIndex = null;
      _.lastEventType = "";
      _.lastEventTime = -1;
    },
    HtmlPerformanceScreen: function HtmlPerformanceScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._performanceController = t0;
      _._cpuProfiler = _._tabNav = _._recordingStatusMessage = _._recordingStatus = _._recordingInstructions = _._profileGranularitySelector = _._clearButton = _._stopRecordingButton = _._startRecordingButton = null;
      _.name = t1;
      _.id = t2;
      _.iconClass = t3;
      _.disabledTooltip = t4;
      _.disabled = t5;
      _.showTab = t6;
      _._helpStatus = null;
      _.shortcutCallback = t7;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t8;
      _.statusItems = t9;
    },
    HtmlPerformanceScreen__initContent_closure: function HtmlPerformanceScreen__initContent_closure(t0) {
      this.$this = t0;
    },
    HtmlPerformanceScreen__initContent_closure0: function HtmlPerformanceScreen__initContent_closure0(t0) {
      this.$this = t0;
    },
    HtmlPerformanceScreen__initContent_closure1: function HtmlPerformanceScreen__initContent_closure1(t0) {
      this.$this = t0;
    },
    _HtmlCpuProfiler: function _HtmlCpuProfiler(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._performanceController = t0;
      _.flameChart = t1;
      _.bottomUp = t2;
      _.callTree = t3;
      _.defaultView = t4;
      _._selectedViewType = _.views = null;
      _.showingMessage = false;
      _.element = t5;
    },
    StreamValueListenable: function StreamValueListenable(t0, t1, t2, t3) {
      var _ = this;
      _.subscription = null;
      _._stream_value_listenable$_onListen = t0;
      _._lookupValue = t1;
      _._stream_value_listenable$_value = null;
      _._listeners = t2;
      _.$ti = t3;
    },
    FullTimelineFlameChartCanvas__calculateStartInset: function(data) {
      var measurementCanvas, t1, t2, maxSectionLabelWidth, t3;
      $.FullTimelineFlameChartCanvas_sectionLabelWidths.clear$0(0);
      measurementCanvas = W.CanvasElement_CanvasElement(null, null).getContext("2d");
      measurementCanvas.font = Y.fontStyleToCss(C.TextStyle_w66);
      for (t1 = data.eventGroups, t2 = t1.$ti, t2 = new P._SplayTreeKeyIterator(t1, H.setRuntimeTypeInfo([], t2._eval$1("JSArray<_SplayTreeNode<1>>")), t1._modificationCount, t1._splayCount, t2._eval$1("_SplayTreeKeyIterator<1>")), t2._findLeftMostDescendent$1(t1._collection$_root), maxSectionLabelWidth = 0; t2.moveNext$0();) {
        t1 = t2.get$current(t2);
        t3 = measurementCanvas.measureText(t1).width;
        t3.toString;
        if (t3 > maxSectionLabelWidth)
          maxSectionLabelWidth = t3;
        $.FullTimelineFlameChartCanvas_sectionLabelWidths.$indexSet(0, t1, t3);
      }
      return maxSectionLabelWidth + 18;
    },
    _nextUiColor: function() {
      var t1 = $._uiColorOffset,
        color = $.uiColorPalette[C.JSInt_methods.$mod(t1, 3)];
      $._uiColorOffset = t1 + 1;
      return color;
    },
    _nextGpuColor: function() {
      var t1 = $._gpuColorOffset,
        color = $.rasterColorPalette[C.JSInt_methods.$mod(t1, 3)];
      $._gpuColorOffset = t1 + 1;
      return color;
    },
    FrameBasedTimelineFlameChartCanvas: function FrameBasedTimelineFlameChartCanvas(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._dragScroll = t0;
      _._viewportCanvas = null;
      _._maxZoomLevel = t1;
      _.data = t2;
      _.duration = t3;
      _.startInset = t4;
      _.width = t5;
      _.height = t6;
      _._nodeSelectedController = t7;
      _.selectedNode = null;
      _.rows = t8;
      _.sections = t9;
      _.timelineGrid = t10;
      _.zoomLevel = 1;
      _.floatingPointScrollLeft = 0;
    },
    FrameBasedTimelineFlameChartCanvas_initUiElements_getTopForRow: function FrameBasedTimelineFlameChartCanvas_initUiElements_getTopForRow(t0) {
      this.$this = t0;
    },
    FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes: function FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.frameStartOffset = t1;
      _.pxPerMicro = t2;
      _.getTopForRow = t3;
    },
    FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes_closure: function FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes_closure(t0) {
      this.event = t0;
    },
    FullTimelineFlameChartCanvas: function FullTimelineFlameChartCanvas(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.chartNodesByEvent = t0;
      _.horizontalGuidelines = t1;
      _.verticalGuidelines = t2;
      _.widestRow = -1;
      _._dragScroll = t3;
      _._viewportCanvas = null;
      _._maxZoomLevel = t4;
      _.data = t5;
      _.duration = t6;
      _.startInset = t7;
      _.width = t8;
      _.height = t9;
      _._nodeSelectedController = t10;
      _.selectedNode = null;
      _.rows = t11;
      _.sections = t12;
      _.timelineGrid = t13;
      _.zoomLevel = 1;
      _.floatingPointScrollLeft = 0;
    },
    FullTimelineFlameChartCanvas_initUiElements_getTopForRow: function FullTimelineFlameChartCanvas_initUiElements_getTopForRow() {
    },
    FullTimelineFlameChartCanvas_initUiElements_createChartNode: function FullTimelineFlameChartCanvas_initUiElements_createChartNode(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.getTopForRow = t2;
    },
    FullTimelineFlameChartCanvas_initUiElements_createChartNode_closure: function FullTimelineFlameChartCanvas_initUiElements_createChartNode_closure(t0) {
      this.event = t0;
    },
    FullTimelineFlameChartCanvas_initUiElements_closure: function FullTimelineFlameChartCanvas_initUiElements_closure() {
    },
    FullTimelineFlameChartCanvas__calculateAsyncGuidelines_generateSubsequentVerticalGuideline: function FullTimelineFlameChartCanvas__calculateAsyncGuidelines_generateSubsequentVerticalGuideline(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.event = t2;
      _.child = t3;
      _.node = t4;
      _.childNode = t5;
      _.verticalGuidelineStartY = t6;
    },
    FullTimelineFlameChartCanvas_relativeYPosition_closure: function FullTimelineFlameChartCanvas_relativeYPosition_closure(t0) {
      this.absoluteY = t0;
    },
    FullTimelineFlameChartCanvas_relativeYPosition_closure0: function FullTimelineFlameChartCanvas_relativeYPosition_closure0() {
    },
    HtmlTimelineScreen$: function(startTimelineMode, disabledTooltip, enabled) {
      var _null = null,
        _s13_ = "octicon-pulse",
        _s8_ = "timeline",
        _s8_0 = "Timeline",
        t1 = $.$get$CpuProfilerController_baseStateCpuProfileData(),
        t2 = type$.JSArray_of_void_Function,
        t3 = H.setRuntimeTypeInfo([], t2),
        t4 = H.setRuntimeTypeInfo([], t2),
        t5 = type$.ValueNotifier_bool,
        t6 = H.setRuntimeTypeInfo([], t2),
        t7 = H.setRuntimeTypeInfo([], t2),
        t8 = type$.ValueNotifier_double,
        t9 = H.setRuntimeTypeInfo([], t2),
        t10 = type$._AsyncBroadcastStreamController_bool,
        t11 = new U.ValueNotifier(C.TimelineMode_0, H.setRuntimeTypeInfo([], t2), type$.ValueNotifier_TimelineMode);
      t9 = new U.TimelineController(new T.CpuProfilerController(new U.ValueNotifier(t1, t3, type$.ValueNotifier_CpuProfileData), new U.ValueNotifier(false, t4, t5), new U.ValueNotifier(_null, t6, type$.ValueNotifier_CpuStackFrame), new Z.CpuProfilerService(), new V.CpuProfileTransformer(new U.ValueNotifier(0, t7, t8))), new U.ValueNotifier(_null, t9, type$.ValueNotifier_TimelineEvent), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_OfflineData_TimelineData), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_String), new P._AsyncBroadcastStreamController(_null, _null, t10), t11, H.setRuntimeTypeInfo([], type$.JSArray_TraceEventWrapper));
      t7 = new R.TimelineService(t9, new Z.CpuProfilerService());
      t7._html_timeline_service$_initListeners$0();
      t9.timelineService = t7;
      t1 = new U.FullTimeline(t9, new P._AsyncBroadcastStreamController(_null, _null, t10), new U.ValueNotifier(false, H.setRuntimeTypeInfo([], t2), t5), new U.ValueNotifier(false, H.setRuntimeTypeInfo([], t2), t5), new U.ValueNotifier(false, H.setRuntimeTypeInfo([], t2), t5));
      t3 = type$.String;
      t4 = type$.int;
      t1.set$processor(new Y.FullTimelineProcessor(new U.ValueNotifier(0, H.setRuntimeTypeInfo([], t2), t8), P.LinkedHashMap_LinkedHashMap$_empty(t3, type$.AsyncTimelineEvent), P.LinkedHashMap_LinkedHashMap$_empty(t4, type$.SyncTimelineEvent), P.LinkedHashMap_LinkedHashMap$_empty(t4, type$.TraceEvent), t9));
      t9.fullTimeline = t1;
      t1 = type$.ValueNotifier_TimelineFrame;
      t5 = new U.FrameBasedTimeline(t9, new U.ValueNotifier(_null, H.setRuntimeTypeInfo([], t2), t1), new U.ValueNotifier(_null, H.setRuntimeTypeInfo([], t2), t1), new U.ValueNotifier(false, H.setRuntimeTypeInfo([], t2), t5));
      t2 = type$.JSArray_SyncTimelineEvent;
      t5.set$processor(new Y.FrameBasedTimelineProcessor(P.LinkedHashMap_LinkedHashMap$_empty(t3, type$.TimelineFrame), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([null, null], t2), H.setRuntimeTypeInfo([null, null], type$.JSArray_TraceEvent), P.List_List$generate(2, new Y.FrameBasedTimelineProcessor_closure(), true, type$.HeapPriorityQueue_TraceEventWrapper), t9));
      t9.frameBasedTimeline = t5;
      t9.set$timelines(H.setRuntimeTypeInfo([t5, t9.fullTimeline], type$.JSArray_TimelineBase_TimelineData_TimelineProcessor));
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_HtmlStatusItem);
      if (Y.hiddenPages().contains$1(0, "none"))
        t2 = false;
      else
        t2 = enabled === false;
      t1 = new M.HtmlTimelineScreen(startTimelineMode, t9, _s8_0, _s8_, _s13_, disabledTooltip, t2, true, _null, new B.Property(new P._AsyncBroadcastStreamController(_null, _null, t10), false, type$.Property_bool), t1);
      t1.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(disabledTooltip, enabled, _s13_, _s8_, _s8_0, _null, true);
      t11.set$value(0, startTimelineMode);
      return t1;
    },
    HtmlTimelineScreen: function HtmlTimelineScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.startTimelineMode = t0;
      _.timelineController = t1;
      _.splitter = _.debugButtonSection = _.upperButtonSection = _._recordingSpinner = _._html_timeline_screen$_recordingStatusMessage = _._html_timeline_screen$_recordingStatus = _._html_timeline_screen$_recordingInstructions = _._timelineModeCheckbox = _._timelineModeSettingContainer = _._html_timeline_screen$_profileGranularitySelector = _.trackWidgetBuildsButton = _.performanceOverlayButton = _.exitOfflineModeButton = _.exportButton = _.clearButton = _._html_timeline_screen$_stopRecordingButton = _._html_timeline_screen$_startRecordingButton = _.resumeButton = _.pauseButton = _.eventDetails = _.timelineFlameChartCanvas = _._emptyFlameChart = _.flameChartContainer = _.framesBarChart = null;
      _.splitterConfigured = false;
      _.name = t2;
      _.id = t3;
      _.iconClass = t4;
      _.disabledTooltip = t5;
      _.disabled = t6;
      _.showTab = t7;
      _._helpStatus = null;
      _.shortcutCallback = t8;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t9;
      _.statusItems = t10;
    },
    HtmlTimelineScreen_createContent_closure: function HtmlTimelineScreen_createContent_closure(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_createContent_closure0: function HtmlTimelineScreen_createContent_closure0(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_createContent_closure1: function HtmlTimelineScreen_createContent_closure1(t0, t1) {
      this.$this = t0;
      this.checkbox = t1;
    },
    HtmlTimelineScreen_onContentAttached_closure: function HtmlTimelineScreen_onContentAttached_closure(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_onContentAttached_closure0: function HtmlTimelineScreen_onContentAttached_closure0(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_onContentAttached__closure: function HtmlTimelineScreen_onContentAttached__closure(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_onContentAttached_closure1: function HtmlTimelineScreen_onContentAttached_closure1(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_onContentAttached_closure2: function HtmlTimelineScreen_onContentAttached_closure2(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen_onContentAttached_closure3: function HtmlTimelineScreen_onContentAttached_closure3() {
    },
    HtmlTimelineScreen_onContentAttached_closure4: function HtmlTimelineScreen_onContentAttached_closure4(t0) {
      this.$this = t0;
    },
    HtmlTimelineScreen__selectFrame_closure: function HtmlTimelineScreen__selectFrame_closure(t0) {
      this.$this = t0;
    },
    AdbMemoryInfo: function AdbMemoryInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.realtime = t0;
      _.javaHeap = t1;
      _.nativeHeap = t2;
      _.code = t3;
      _.stack = t4;
      _.graphics = t5;
      _.other = t6;
      _.system = t7;
      _.total = t8;
    },
    _parseUri: function(uri) {
      if (type$.Uri._is(uri))
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new P.StringBuffer("");
        t1 = method + "(";
        message._contents = t1;
        t2 = H.SubListIterable$(args, 0, numArgs, H._arrayInstanceType(args)._precomputed1);
        t3 = t2.$ti;
        t3 = t1 + new H.MappedListIterable(t2, t3._eval$1("String(ListIterable.E)")._as(new M._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
      }
    },
    Context0: function Context0(t0) {
      this.style = t0;
    },
    Context_join_closure: function Context_join_closure() {
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    SseClient$: function(serverUrl) {
      var _null = null,
        t1 = type$.String;
      t1 = new M.SseClient(P.StreamController_StreamController(_null, _null, false, t1), P.StreamController_StreamController(_null, _null, false, t1), F.Logger_Logger("SseClient"), P.StreamController_StreamController(_null, _null, false, type$.dynamic));
      t1.SseClient$1(serverUrl);
      return t1;
    },
    SseClient: function SseClient(t0, t1, t2, t3) {
      var _ = this;
      _._incomingController = t0;
      _._outgoingController = t1;
      _._logger = t2;
      _._errorTimer = _._serverUrl = _._eventSource = null;
      _._sse_client$_messages = t3;
    },
    SseClient_closure: function SseClient_closure(t0) {
      this.$this = t0;
    },
    SseClient_closure0: function SseClient_closure0(t0) {
      this.$this = t0;
    },
    SseClient__closure: function SseClient__closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    }
  },
  U = {DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    }, IterableEquality: function IterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    }, ListEquality: function ListEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    }, _UnorderedEquality: function _UnorderedEquality() {
    }, SetEquality: function SetEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    }, _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    }, MapEquality: function MapEquality(t0, t1, t2) {
      this._keyEquality = t0;
      this._valueEquality = t1;
      this.$ti = t2;
    }, DeepCollectionEquality: function DeepCollectionEquality() {
    },
    main: function() {
      P.runZoned(new U.main_closure(), C._ZoneSpecification_2jN, type$.Future_Null);
    },
    _handleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1, t2, errorLines;
      type$.StackTrace._as(stackTrace);
      t1 = H.S(error) + "\n";
      t2 = stackTrace == null;
      F.error(C.JSString_methods.trim$0(t1 + H.S(t2 ? "" : stackTrace)), true);
      window;
      t1 = J.getInterceptor$(error);
      errorLines = H.setRuntimeTypeInfo(t1.toString$0(error).split("\n"), type$.JSArray_String);
      t1 = "DevTools exception: [" + t1.get$runtimeType(error).toString$0(0) + "] " + H.S(C.JSArray_methods.get$first(errorLines));
      if (typeof console != "undefined")
        window.console.groupCollapsed(t1);
      t1 = H.SubListIterable$(errorLines, 1, null, type$.String).join$1(0, "\n");
      if (typeof console != "undefined")
        window.console.log(t1);
      if (!t2) {
        if (errorLines.length > 1)
          if (typeof console != "undefined")
            window.console.log("\n");
        t1 = C.JSString_methods.trim$0(stackTrace.toString$0(0));
        if (typeof console != "undefined")
          window.console.log(t1);
      }
      if (typeof console != "undefined")
        window.console.groupEnd();
    },
    main_closure: function main_closure() {
    },
    main__closure: function main__closure(t0) {
      this.framework = t0;
    },
    main__closure0: function main__closure0(t0) {
      this.framework = t0;
    },
    TimelineController: function TimelineController(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.cpuProfilerController = t0;
      _._selectedTimelineEventNotifier = t1;
      _._loadOfflineDataController = t2;
      _._nonFatalErrorController = t3;
      _._clearController = t4;
      _.timelineService = _.offlineTimelineData = _.timelines = _.fullTimeline = _.frameBasedTimeline = null;
      _._timelineModeNotifier = t5;
      _.allTraceEvents = t6;
    },
    TimelineController__threadIdForEvents_closure: function TimelineController__threadIdForEvents_closure(t0) {
      this.targetEventNames = t0;
    },
    TimelineController__threadIdForEvents_closure0: function TimelineController__threadIdForEvents_closure0() {
    },
    TimelineController_setOfflineData_closure: function TimelineController_setOfflineData_closure(t0) {
      this.offlineData = t0;
    },
    TimelineController_setOfflineData_closure0: function TimelineController_setOfflineData_closure0() {
    },
    TimelineController_setOfflineData_closure1: function TimelineController_setOfflineData_closure1(t0) {
      this.offlineData = t0;
    },
    FrameBasedTimeline: function FrameBasedTimeline(t0, t1, t2, t3) {
      var _ = this;
      _._html_timeline_controller$_timelineController = t0;
      _._frameAddedNotifier = t1;
      _._selectedFrameNotifier = t2;
      _.manuallyPaused = false;
      _._pausedNotifier = t3;
      _.processor = _.data = null;
    },
    FullTimeline: function FullTimeline(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html_timeline_controller$_timelineController = t0;
      _._timelineProcessedController = t1;
      _._emptyRecordingNotifier = t2;
      _._html_timeline_controller$_recordingNotifier = t3;
      _._html_timeline_controller$_processingNotifier = t4;
      _.processor = _.data = null;
    },
    TimelineBase: function TimelineBase() {
    },
    TimelineMode: function TimelineMode(t0) {
      this._html_timeline_controller$_name = t0;
    },
    TextTreeConfiguration$: function(addBlankLineIfNoChildren, afterDescriptionIfBody, afterName, afterProperties, beforeName, beforeProperties, bodyIndent, footer, isBlankLineBetweenPropertiesAndChildren, isNameOnOwnLine, lineBreak, lineBreakProperties, linkCharacter, manditoryFooter, prefixLastChildLineOne, prefixLineOne, prefixOtherLines, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, propertySeparator, showChildren, suffixLineOne) {
      return new U.TextTreeConfiguration(prefixLineOne, suffixLineOne, prefixOtherLines, prefixLastChildLineOne, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, linkCharacter, C.JSString_methods.$mul(" ", linkCharacter.length), lineBreak, lineBreakProperties, beforeName, afterName, afterDescriptionIfBody, beforeProperties, afterProperties, propertySeparator, bodyIndent, showChildren, addBlankLineIfNoChildren, isNameOnOwnLine, footer, manditoryFooter, isBlankLineBetweenPropertiesAndChildren);
    },
    _PrefixedStringBuilder__wordWrapLine: function(message, wrapRanges, width, otherLineOffset, startOffset) {
      return U._PrefixedStringBuilder__wordWrapLine$body(message, wrapRanges, width, otherLineOffset, startOffset);
    },
    _PrefixedStringBuilder__wordWrapLine$body: function($async$message, $async$wrapRanges, $async$width, $async$otherLineOffset, $async$startOffset) {
      return P._makeSyncStarIterable(function() {
        var message = $async$message,
          wrapRanges = $async$wrapRanges,
          width = $async$width,
          otherLineOffset = $async$otherLineOffset,
          startOffset = $async$startOffset;
        var $async$goto = 0, $async$handler = 2, $async$currentError, startForLengthCalculations, noWrap, addPrefix, index, mode, lastWordStart, lastWordEnd, start, t2, _box_0, t1;
        return function $async$_PrefixedStringBuilder__wordWrapLine($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  _box_0 = {};
                  t1 = message.length;
                  $async$goto = t1 + startOffset < width ? 3 : 4;
                  break;
                case 3:
                  // then
                  $async$goto = 5;
                  return message;
                case 5:
                  // after yield
                  // goto return
                  $async$goto = 1;
                  break;
                case 4:
                  // join
                  startForLengthCalculations = -startOffset;
                  _box_0.currentChunk = 0;
                  noWrap = new U._PrefixedStringBuilder__wordWrapLine_noWrap(_box_0, wrapRanges);
                  addPrefix = false, index = 0, mode = C._WordWrapParseMode_0, lastWordStart = null, lastWordEnd = null, start = 0;
                case 6:
                  // for condition
                  // trivial condition
                case 8:
                  // switch
                  switch (mode) {
                    case C._WordWrapParseMode_0:
                      // goto case
                      $async$goto = 10;
                      break;
                    case C._WordWrapParseMode_1:
                      // goto case
                      $async$goto = 11;
                      break;
                    case C._WordWrapParseMode_2:
                      // goto case
                      $async$goto = 12;
                      break;
                    default:
                      // goto after switch
                      $async$goto = 9;
                      break;
                  }
                  break;
                case 10:
                  // case
                  while (true) {
                    if (index < t1) {
                      if (index < 0) {
                        H.ioore(message, index);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t2 = message[index] === " ";
                    } else
                      t2 = false;
                    if (!t2)
                      break;
                    ++index;
                  }
                  lastWordStart = index;
                  mode = C._WordWrapParseMode_1;
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 11:
                  // case
                  while (true) {
                    if (index < t1) {
                      if (index < 0) {
                        H.ioore(message, index);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t2 = message[index] !== " " || H.boolConversionCheck(noWrap.call$1(index));
                    } else
                      t2 = false;
                    if (!t2)
                      break;
                    ++index;
                  }
                  mode = C._WordWrapParseMode_2;
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 12:
                  // case
                  t2 = index - startForLengthCalculations;
                  $async$goto = t2 > width || index === t1 ? 13 : 15;
                  break;
                case 13:
                  // then
                  if (t2 <= width || lastWordEnd == null)
                    lastWordEnd = index;
                  $async$goto = 16;
                  return C.JSString_methods.substring$2(message, start, lastWordEnd);
                case 16:
                  // after yield
                  if (lastWordEnd >= t1) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  if (lastWordEnd === index) {
                    while (true) {
                      if (index < t1) {
                        if (index < 0) {
                          H.ioore(message, index);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t2 = message[index] === " ";
                      } else
                        t2 = false;
                      if (!t2)
                        break;
                      ++index;
                    }
                    start = index;
                    mode = C._WordWrapParseMode_1;
                  } else {
                    start = lastWordStart;
                    mode = C._WordWrapParseMode_2;
                  }
                  if (typeof start !== "number") {
                    start.$sub();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  startForLengthCalculations = start - otherLineOffset;
                  addPrefix = true;
                  lastWordEnd = null;
                  // goto join
                  $async$goto = 14;
                  break;
                case 15:
                  // else
                  lastWordEnd = index;
                  mode = C._WordWrapParseMode_0;
                case 14:
                  // join
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 9:
                  // after switch
                  // goto for condition
                  $async$goto = 6;
                  break;
                case 7:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, type$.String);
    },
    DiagnosticsProperty$: function($name, value, allowWrap, description, level, showName, style, $T) {
      return new U.DiagnosticsProperty(description, true, null, value, level, $name, true, showName, null, style, $T._eval$1("DiagnosticsProperty<0>"));
    },
    shortHash: function(object) {
      return C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(object.get$hashCode(object) & 1048575, 16), 5, "0");
    },
    debugPrintThrottled: function(message, wrapWidth) {
      var messageLines = H.setRuntimeTypeInfo(message.split("\n"), type$.JSArray_String);
      $.$get$_debugPrintBuffer().addAll$1(0, messageLines);
      if (!$._debugPrintScheduled)
        U._debugPrintTask();
    },
    _debugPrintTask: function() {
      var t3, line,
        t1 = $._debugPrintScheduled = false,
        t2 = $.$get$_debugPrintStopwatch();
      if (P.Duration$(t2.get$elapsedMicroseconds(), 0)._duration > 1000000) {
        t2.stop$0(0);
        t3 = t2._stop;
        t2._core$_start = t3 == null ? H._asIntS($.Primitives_timerTicks.call$0()) : t3;
        $._debugPrintedCharacters = 0;
      }
      while (true) {
        if ($._debugPrintedCharacters < 12288) {
          t2 = $.$get$_debugPrintBuffer();
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = t1;
        if (!t2)
          break;
        line = $.$get$_debugPrintBuffer().removeFirst$0();
        $._debugPrintedCharacters = $._debugPrintedCharacters + line.length;
        line = H.S(line);
        t2 = $.printToZone;
        if (t2 == null)
          H.printString(line);
        else
          t2.call$1(line);
      }
      t1 = $.$get$_debugPrintBuffer();
      if (!t1.get$isEmpty(t1)) {
        $._debugPrintScheduled = true;
        $._debugPrintedCharacters = 0;
        P.Timer_Timer(C.Duration_1000000, U._fake_flutter___debugPrintTask$closure());
        if ($._debugPrintCompleter == null)
          $._debugPrintCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
      } else {
        $.$get$_debugPrintStopwatch().start$0(0);
        t1 = $._debugPrintCompleter;
        if (t1 != null)
          t1.complete$0(0);
        $._debugPrintCompleter = null;
      }
    },
    TextStyle$: function(color, debugLabel, decoration, decorationColor, decorationStyle, fontFamily, fontSize, fontStyle, fontWeight, height, inherit, letterSpacing, textBaseline, wordSpacing) {
      return new U.TextStyle(true, color, fontFamily, fontSize, fontWeight, fontStyle, letterSpacing, wordSpacing, textBaseline, height, decoration, decorationColor, decorationStyle, debugLabel);
    },
    Listenable: function Listenable() {
    },
    ValueListenable: function ValueListenable() {
    },
    ChangeNotifier: function ChangeNotifier() {
    },
    ValueNotifier: function ValueNotifier(t0, t1, t2) {
      this._value = t0;
      this._listeners = t1;
      this.$ti = t2;
    },
    DiagnosticLevel: function DiagnosticLevel(t0, t1) {
      this.index = t0;
      this.__fake_flutter$_name = t1;
    },
    DiagnosticsTreeStyle: function DiagnosticsTreeStyle(t0) {
      this.__fake_flutter$_name = t0;
    },
    TextTreeConfiguration: function TextTreeConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23) {
      var _ = this;
      _.prefixLineOne = t0;
      _.suffixLineOne = t1;
      _.prefixOtherLines = t2;
      _.prefixLastChildLineOne = t3;
      _.prefixOtherLinesRootNode = t4;
      _.propertyPrefixIfChildren = t5;
      _.propertyPrefixNoChildren = t6;
      _.linkCharacter = t7;
      _.childLinkSpace = t8;
      _.lineBreak = t9;
      _.lineBreakProperties = t10;
      _.beforeName = t11;
      _.afterName = t12;
      _.afterDescriptionIfBody = t13;
      _.beforeProperties = t14;
      _.afterProperties = t15;
      _.propertySeparator = t16;
      _.bodyIndent = t17;
      _.showChildren = t18;
      _.addBlankLineIfNoChildren = t19;
      _.isNameOnOwnLine = t20;
      _.footer = t21;
      _.manditoryFooter = t22;
      _.isBlankLineBetweenPropertiesAndChildren = t23;
    },
    _WordWrapParseMode: function _WordWrapParseMode(t0) {
      this.__fake_flutter$_name = t0;
    },
    _PrefixedStringBuilder: function _PrefixedStringBuilder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.prefixLineOne = t0;
      _._prefixOtherLines = t1;
      _._nextPrefixOtherLines = null;
      _.wrapWidth = t2;
      _.__fake_flutter$_buffer = t3;
      _._currentLine = t4;
      _._wrappableRanges = t5;
      _._numLines = 0;
    },
    _PrefixedStringBuilder__wordWrapLine_noWrap: function _PrefixedStringBuilder__wordWrapLine_noWrap(t0, t1) {
      this._box_0 = t0;
      this.wrapRanges = t1;
    },
    _NoDefaultValue: function _NoDefaultValue() {
    },
    TextTreeRenderer: function TextTreeRenderer(t0, t1) {
      this._wrapWidth = t0;
      this._minLevel = t1;
    },
    TextTreeRenderer_render_visitor: function TextTreeRenderer_render_visitor(t0, t1) {
      this._box_0 = t0;
      this.descendants = t1;
    },
    TextTreeRenderer_render_closure: function TextTreeRenderer_render_closure(t0) {
      this.$this = t0;
    },
    DiagnosticsNode: function DiagnosticsNode() {
    },
    DiagnosticsProperty: function DiagnosticsProperty(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._description = t0;
      _.allowWrap = t1;
      _.ifNull = t2;
      _._value = t3;
      _._valueComputed = true;
      _.__fake_flutter$_exception = null;
      _._defaultLevel = t4;
      _.name = t5;
      _.showSeparator = t6;
      _.showName = t7;
      _.linePrefix = t8;
      _.style = t9;
      _.$ti = t10;
    },
    DiagnosticableNode: function DiagnosticableNode() {
    },
    DiagnosticableTreeNode: function DiagnosticableTreeNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _._cachedBuilder = null;
      _.name = t1;
      _.showSeparator = t2;
      _.showName = t3;
      _.linePrefix = t4;
      _.style = t5;
    },
    DiagnosticPropertiesBuilder: function DiagnosticPropertiesBuilder(t0) {
      this.properties = t0;
    },
    Diagnosticable: function Diagnosticable() {
    },
    DiagnosticableMixin: function DiagnosticableMixin() {
    },
    DiagnosticableTree: function DiagnosticableTree() {
    },
    TextStyle: function TextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.inherit = t0;
      _.color = t1;
      _.fontFamily = t2;
      _.fontSize = t3;
      _.fontWeight = t4;
      _.fontStyle = t5;
      _.letterSpacing = t6;
      _.wordSpacing = t7;
      _.textBaseline = t8;
      _.height = t9;
      _.decoration = t10;
      _.decorationColor = t11;
      _.decorationStyle = t12;
      _.debugLabel = t13;
    },
    _Diagnosticable_Object_DiagnosticableMixin: function _Diagnosticable_Object_DiagnosticableMixin() {
    },
    HtmlDragScroll: function HtmlDragScroll() {
      var _ = this;
      _.wasDragged = false;
      _._touchEndListener = _._touchMoveListener = _._mouseUpListener = _._mouseMoveListener = _._onVerticalScroll = null;
    },
    HtmlDragScroll__handleMouseDrags_closure: function HtmlDragScroll__handleMouseDrags_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.dragged = t2;
    },
    HtmlDragScroll__handleMouseDrags__closure: function HtmlDragScroll__handleMouseDrags__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.dragged = t2;
    },
    HtmlDragScroll__handleMouseDrags__closure0: function HtmlDragScroll__handleMouseDrags__closure0(t0) {
      this.$this = t0;
    },
    HtmlDragScroll__handleTouchDrags_closure: function HtmlDragScroll__handleTouchDrags_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.dragged = t2;
    },
    HtmlDragScroll__handleTouchDrags__closure: function HtmlDragScroll__handleTouchDrags__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.dragged = t2;
    },
    HtmlDragScroll__handleTouchDrags__closure0: function HtmlDragScroll__handleTouchDrags__closure0(t0) {
      this.$this = t0;
    },
    VmServiceWrapper$fromNewVmService: function(inStream, writeMessage, connectedUri) {
      var t1 = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_bool), type$._AsyncCompleter_bool);
      t1.complete$1(0, true);
      t1 = new U.VmServiceWrapper(connectedUri, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Future_Success), P.LinkedHashSet_LinkedHashSet$_empty(type$.TrackedFuture_Object), t1);
      t1._vmService = Q.VmService$(inStream, writeMessage, null, null);
      return t1;
    },
    _CpuProfileTimelineTree__CpuProfileTimelineTree$fromCpuSamples: function(cpuSamples) {
      var t1, t2, _i, sample, t3, t4, current, values,
        root = new U._CpuProfileTimelineTree(cpuSamples, -1, H.setRuntimeTypeInfo([], type$.JSArray__CpuProfileTimelineTree));
      for (t1 = cpuSamples.samples, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        sample = t1[_i];
        t3 = sample.stack;
        t3.toString;
        t4 = H._arrayInstanceType(t3)._eval$1("ReversedListIterable<1>");
        t3 = new H.ReversedListIterable(t3, t4);
        t4 = new H.ListIterator(t3, t3.get$length(t3), t4._eval$1("ListIterator<ListIterable.E>"));
        current = root;
        for (; t4.moveNext$0();)
          current = current._getChild$1(t4.__internal$_current);
        t3 = $.$get$_CpuProfileTimelineTree__timelineTreeExpando();
        t3.toString;
        t3.$ti._precomputed1._as(current);
        t3 = t3._jsWeakMapOrKey;
        if (typeof t3 != "string")
          t3.set(sample, current);
        else {
          t4 = H._isBool(sample) || typeof sample == "number" || typeof sample == "string";
          if (t4)
            H.throwExpression(H.argumentErrorValue(sample));
          values = sample.expando$values;
          if (values == null) {
            values = new P.Object();
            t4 = H._isBool(sample) || typeof sample == "number" || typeof sample == "string";
            if (t4)
              H.throwExpression(H.argumentErrorValue(sample));
            sample.expando$values = values;
          }
          t4 = H._isBool(values) || typeof values == "number" || typeof values == "string";
          if (t4)
            H.throwExpression(H.argumentErrorValue(values));
          values[t3] = current;
        }
      }
      return root;
    },
    VmServiceWrapper: function VmServiceWrapper(t0, t1, t2, t3) {
      var _ = this;
      _._protocolVersion = _._vmService = null;
      _.connectedUri = t0;
      _._activeStreams = t1;
      _.activeFutures = t2;
      _._allFuturesCompleter = t3;
    },
    VmServiceWrapper_getCpuProfileTimeline_processStackFrame: function VmServiceWrapper_getCpuProfileTimeline_processStackFrame(t0, t1, t2) {
      this._box_0 = t0;
      this.isolateId = t1;
      this.traceObject = t2;
    },
    VmServiceWrapper_getCpuProfileTimeline_closure: function VmServiceWrapper_getCpuProfileTimeline_closure() {
    },
    TrackedFuture: function TrackedFuture() {
    },
    _CpuProfileTimelineTree: function _CpuProfileTimelineTree(t0, t1, t2) {
      var _ = this;
      _.samples = t0;
      _.index = t1;
      _.frameId = -1;
      _.children = t2;
    },
    Client0: function Client0() {
    },
    Response_fromStream: function(response) {
      return U.Response_fromStream$body(response);
    },
    Response_fromStream$body: function(response) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, body, t1, t2, t3, t4, t5, t6;
      var $async$Response_fromStream = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(response.stream.toBytes$0(), $async$Response_fromStream);
            case 3:
              // returning from await.
              body = $async$result;
              t1 = response.statusCode;
              t2 = response.request;
              t3 = response.headers;
              t4 = response.reasonPhrase;
              t5 = B.toUint8List(body);
              t6 = body.length;
              t5 = new U.Response0(t5, t2, t1, t4, t6, t3, false, true);
              t5.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t1, t6, t3, false, true, t4, t2);
              $async$returnValue = t5;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$Response_fromStream, $async$completer);
    },
    _contentTypeForHeaders: function(headers) {
      var contentType = headers.$index(0, "content-type");
      if (contentType != null)
        return R.MediaType_MediaType$parse(contentType);
      return R.MediaType$("application", "octet-stream", null);
    },
    Response0: function Response0(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bodyBytes = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    Highlighter$: function(span, color) {
      var t1 = U.Highlighter__collateLines(H.setRuntimeTypeInfo([U._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new U.Highlighter_closure(color).call$0(),
        t3 = C.JSInt_methods.toString$0(C.JSArray_methods.get$last(t1).number + 1),
        t4 = U.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = H._arrayInstanceType(t1);
      return new U.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new H.MappedListIterable(t1, t5._eval$1("int(1)")._as(new U.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, H.instantiate1(P.math__max$closure(), type$.int)), !B.isAllTheSame(new H.MappedListIterable(t1, t5._eval$1("Object(1)")._as(new U.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object>"))), new P.StringBuffer(""));
    },
    Highlighter__contiguous: function(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines: function(highlights) {
      var t1, t2, t3,
        highlightsByUrl = Y.groupBy(highlights, new U.Highlighter__collateLines_closure(), type$._Highlight, type$.dynamic);
      for (t1 = highlightsByUrl.get$values(highlightsByUrl), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.sort$1$ax(t1.get$current(t1), new U.Highlighter__collateLines_closure0());
      t1 = highlightsByUrl.get$values(highlightsByUrl);
      t2 = H._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return P.List_List$from(new H.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new U.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$: function(span, primary) {
      return new U._Highlight(new U._Highlight_closure(span).call$0(), true);
    },
    _Highlight__normalizeNewlines: function(span) {
      var t1, endOffset, i, t2, t3, t4,
        text = span.get$text(span);
      if (!C.JSString_methods.contains$1(text, "\r\n"))
        return span;
      t1 = span.get$end(span);
      endOffset = t1.get$offset(t1);
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(text, i) === 13 && C.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start(span);
      t2 = span.get$sourceUrl();
      t3 = span.get$end(span);
      t3 = t3.get$line(t3);
      t2 = V.SourceLocation$(endOffset, span.get$end(span).get$column(), t3, t2);
      t3 = H.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context(span);
      return X.SourceSpanWithContext$(t1, t2, t3, H.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline: function(span) {
      var context, text, start, end, t1, t2, t3;
      if (!C.JSString_methods.endsWith$1(span.get$context(span), "\n"))
        return span;
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n\n"))
        return span;
      context = C.JSString_methods.substring$2(span.get$context(span), 0, span.get$context(span).length - 1);
      text = span.get$text(span);
      start = span.get$start(span);
      end = span.get$end(span);
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n")) {
        t1 = B.findLineStart(span.get$context(span), span.get$text(span), span.get$start(span).get$column());
        t2 = span.get$start(span).get$column();
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + t2 + span.get$length(span) === span.get$context(span).length;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end(span);
          t1 = t1.get$offset(t1);
          t2 = span.get$sourceUrl();
          t3 = span.get$end(span);
          t3 = t3.get$line(t3);
          if (typeof t3 !== "number")
            return t3.$sub();
          end = V.SourceLocation$(t1 - 1, U._Highlight__lastLineLength(context), t3 - 1, t2);
          t1 = span.get$start(span);
          t1 = t1.get$offset(t1);
          t2 = span.get$end(span);
          start = t1 === t2.get$offset(t2) ? end : span.get$start(span);
        }
      }
      return X.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine: function(span) {
      var t1, t2, text, t3, t4;
      if (span.get$end(span).get$column() !== 0)
        return span;
      t1 = span.get$end(span);
      t1 = t1.get$line(t1);
      t2 = span.get$start(span);
      if (t1 == t2.get$line(t2))
        return span;
      text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
      t1 = span.get$start(span);
      t2 = span.get$end(span);
      t2 = t2.get$offset(t2);
      t3 = span.get$sourceUrl();
      t4 = span.get$end(span);
      t4 = t4.get$line(t4);
      if (typeof t4 !== "number")
        return t4.$sub();
      t3 = V.SourceLocation$(t2 - 1, text.length - C.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return X.SourceSpanWithContext$(t1, t3, text, C.JSString_methods.endsWith$1(span.get$context(span), "\n") ? C.JSString_methods.substring$2(span.get$context(span), 0, span.get$context(span).length - 1) : span.get$context(span));
    },
    _Highlight__lastLineLength: function(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      else if (C.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - C.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - C.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter_highlight_closure0: function Highlighter_highlight_closure0() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1) {
      this.span = t0;
      this.isPrimary = t1;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    }
  },
  Y = {
    groupBy: function(values, key, $S, $T) {
      var _i, element,
        map = P.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (_i = 0; _i < 1; ++_i) {
        element = values[_i];
        J.add$1$ax(map.putIfAbsent$2(0, key.call$1(element), new Y.groupBy_closure($S)), element);
      }
      return map;
    },
    groupBy_closure: function groupBy_closure(t0) {
      this.S = t0;
    },
    HeapPriorityQueue: function HeapPriorityQueue(t0, t1, t2) {
      var _ = this;
      _.comparison = t0;
      _._priority_queue$_queue = t1;
      _._priority_queue$_length = 0;
      _.$ti = t2;
    },
    HtmlMemoryChart$: function(_memoryController) {
      var _null = null,
        t1 = new Y.HtmlMemoryChart(_memoryController, type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "section section-border", _null, _null);
      t1.HtmlMemoryChart$1(_memoryController);
      return t1;
    },
    HtmlMemoryChart: function HtmlMemoryChart(t0, t1) {
      var _ = this;
      _._memoryController = t0;
      _._chartCreated = false;
      _._plotlyChart = null;
      _.lastGcTimestamp = 0;
      _.element = t1;
    },
    HtmlMemoryChart_closure: function HtmlMemoryChart_closure(t0) {
      this.$this = t0;
    },
    FrameBasedTimelineProcessor: function FrameBasedTimelineProcessor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.pendingFrames = t0;
      _.pendingEvents = t1;
      _.currentEventNodes = t2;
      _._previousDurationEndEvents = t3;
      _.heaps = t4;
      _.gpuThreadId = _.uiThreadId = null;
      _.timelineController = t5;
    },
    FrameBasedTimelineProcessor_closure: function FrameBasedTimelineProcessor_closure() {
    },
    FrameBasedTimelineProcessor_processTraceEvent_closure: function FrameBasedTimelineProcessor_processTraceEvent_closure(t0, t1) {
      this.$this = t0;
      this.heap = t1;
    },
    FrameBasedTimelineProcessor__handleFrameStartEvent_closure: function FrameBasedTimelineProcessor__handleFrameStartEvent_closure(t0) {
      this.id = t0;
    },
    FrameBasedTimelineProcessor__handleFrameEndEvent_closure: function FrameBasedTimelineProcessor__handleFrameEndEvent_closure(t0) {
      this.id = t0;
    },
    FrameBasedTimelineProcessor__handleDurationCompleteEvent_closure: function FrameBasedTimelineProcessor__handleDurationCompleteEvent_closure(t0) {
      this.timelineEvent = t0;
    },
    FrameBasedTimelineProcessor_maybeAddPendingEvents_closure: function FrameBasedTimelineProcessor_maybeAddPendingEvents_closure() {
    },
    FrameBasedTimelineProcessor_eventOccursWithinFrameBounds_satisfiesUiGpuOrder: function FrameBasedTimelineProcessor_eventOccursWithinFrameBounds_satisfiesUiGpuOrder(t0, t1) {
      this.e = t0;
      this.f = t1;
    },
    FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure: function FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure() {
    },
    FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure0: function FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure0() {
    },
    FullTimelineProcessor: function FullTimelineProcessor(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html_timeline_processor$_progressNotifier = t0;
      _._traceEventsProcessed = 0;
      _._asyncEventsById = t1;
      _._currentDurationEventNodes = t2;
      _._previousDurationEndEvents = t3;
      _.gpuThreadId = _.uiThreadId = _._pendingRootCompleteEvent = null;
      _.timelineController = t4;
    },
    FullTimelineProcessor_processTimeline_closure: function FullTimelineProcessor_processTimeline_closure() {
    },
    FullTimelineProcessor_processTimeline_closure0: function FullTimelineProcessor_processTimeline_closure0() {
    },
    FullTimelineProcessor_processTimeline_closure1: function FullTimelineProcessor_processTimeline_closure1() {
    },
    FullTimelineProcessor__handleDurationCompleteEvent_closure: function FullTimelineProcessor__handleDurationCompleteEvent_closure(t0) {
      this.timelineEvent = t0;
    },
    TimelineProcessor: function TimelineProcessor() {
    },
    _UrlIconRenderer__maybeRewriteIconUrl: function(url) {
      var t1 = $.$get$_devicePixelRatio();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 1 && C.JSString_methods.endsWith$1(url, ".png") && !C.JSString_methods.endsWith$1(url, "@2x.png"))
        return C.JSString_methods.substring$2(url, 0, url.length - 4) + "@2x.png";
      return url;
    },
    getIconRenderer: function(icon) {
      var t2,
        t1 = $.$get$rendererExpando(),
        renderer = t1.$index(0, icon);
      if (renderer != null)
        return renderer;
      if (icon instanceof S.UrlIcon)
        renderer = new Y._UrlIconRenderer(Y._UrlIconRenderer__maybeRewriteIconUrl(icon.src), icon);
      else if (icon instanceof S.ColorIcon)
        renderer = new Y._ColorIconRenderer(icon);
      else if (icon instanceof S.CustomIcon) {
        t2 = icon.kind;
        renderer = new Y._CustomIconRenderer(Y.getIconRenderer(t2.icon), icon);
      } else if (icon instanceof K.MaterialIcon)
        renderer = new Y._MaterialIconRenderer(icon);
      else
        throw H.wrapException(P.UnimplementedError$("No icon renderer defined for " + H.S(icon) + " of type " + J.get$runtimeType$(icon).toString$0(0)));
      t1.$indexSet(0, icon, renderer);
      return renderer;
    },
    HtmlIconRenderer: function HtmlIconRenderer() {
    },
    _UrlIconRenderer: function _UrlIconRenderer(t0, t1) {
      var _ = this;
      _.src = t0;
      _._imageFuture = _._image = null;
      _.icon = t1;
    },
    _UrlIconRenderer_loadImage_closure: function _UrlIconRenderer_loadImage_closure(t0, t1, t2) {
      this.$this = t0;
      this.imageElement = t1;
      this.completer = t2;
    },
    _ColorIconRenderer: function _ColorIconRenderer(t0) {
      this._image = null;
      this.icon = t0;
    },
    _CustomIconRenderer: function _CustomIconRenderer(t0, t1) {
      this.baseIconRenderer = t0;
      this._image = null;
      this.icon = t1;
    },
    _CustomIconRenderer__buildImageAsync_closure: function _CustomIconRenderer__buildImageAsync_closure(t0, t1) {
      this.$this = t0;
      this.canvas = t1;
    },
    _MaterialIconRenderer: function _MaterialIconRenderer(t0) {
      this._image = null;
      this.icon = t0;
    },
    _MaterialIconRenderer_loadImage_closure: function _MaterialIconRenderer_loadImage_closure() {
    },
    _MaterialIconRenderer_loadImage_closure0: function _MaterialIconRenderer_loadImage_closure0(t0, t1) {
      this.$this = t0;
      this.imageCompleter = t1;
    },
    _MaterialIconRenderer_createCanvasSource__drawIcon: function _MaterialIconRenderer_createCanvasSource__drawIcon(t0, t1) {
      this.$this = t0;
      this.context2D = t1;
    },
    _MaterialIconRenderer_createCanvasSource_closure: function _MaterialIconRenderer_createCanvasSource_closure(t0) {
      this._drawIcon = t0;
    },
    Level: function Level(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    FileLocation$_: function(file, offset) {
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        H.throwExpression(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + file.get$length(file) + "."));
      return new Y.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    FileSpan: function FileSpan() {
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._file$_end = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    fontStyleToCss: function(textStyle) {
      var t1 = textStyle.fontWeight != null ? "700 " : "",
        t2 = textStyle.fontSize;
      t1 += "" + (t2 == null ? 14 : t2) + "px ";
      t2 = textStyle.fontFamily;
      t1 += (t2 == null ? "Arial" : t2) + " ";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    colorToCss: function(color) {
      var cssColor = $._cssColors.$index(0, color);
      if (cssColor != null)
        return cssColor;
      cssColor = "#" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(((color.get$value(color) & 16777215) << 8 | color.get$alpha(color)) >>> 0, 16), 8, "0");
      $._cssColors.$indexSet(0, color, cssColor);
      return cssColor;
    },
    createLinkStatusItem: function(textElement, href, title) {
      var element0, _null = null,
        element = Y.getIconRenderer(new K.MaterialIcon("open_in_new", C.MaterialColor_Map_HFpTk_4288585374, 18, 0, 18)).createElement$0(0),
        t1 = element.style;
      t1.verticalAlign = "text-bottom";
      t1.marginBottom = "0";
      element0 = A.CoreElement$("a", _null, _null, _null, _null);
      element0.add$1(0, H.setRuntimeTypeInfo([new A.CoreElement(element), textElement], type$.JSArray_CoreElement));
      t1 = element0.element;
      t1.setAttribute("href", href);
      t1.setAttribute("target", "_blank");
      t1.title = title;
      t1 = A.CoreElement$("span", _null, _null, _null, _null);
      t1.add$1(0, element0);
      return new A.HtmlStatusItem(t1);
    },
    maybeAddDebugMessage: function(framework, screenId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        t1, $async$temp1;
      var $async$maybeAddDebugMessage = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = !$.offlineMode ? 2 : 4;
              break;
            case 2:
              // then
              t1 = type$.ServiceConnectionManager;
              $async$temp1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp != null;
              if ($async$temp1) {
                // goto then
                $async$goto = 5;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 6;
              break;
            case 5:
              // then
              $async$temp1 = H;
              $async$goto = 9;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isFlutterApp(), $async$maybeAddDebugMessage);
            case 9:
              // returning from await.
              $async$temp1 = $async$temp1.boolConversionCheck($async$result);
              if ($async$temp1) {
                // goto then
                $async$goto = 7;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 8;
              break;
            case 7:
              // then
              $async$temp1 = H;
              $async$goto = 10;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isProfileBuild(), $async$maybeAddDebugMessage);
            case 10:
              // returning from await.
              $async$result = !$async$temp1.boolConversionCheck($async$result);
            case 8:
              // join
            case 6:
              // join
              t1 = $async$result;
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              t1 = false;
            case 3:
              // join
              if (t1)
                framework.messageManager.addMessage$2($.$get$debugWarning(), screenId);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$maybeAddDebugMessage, $async$completer);
    },
    hiddenPages: function() {
      var t1 = $._hiddenPages;
      return t1 == null ? $._hiddenPages = Y._lookupHiddenPages() : t1;
    },
    _lookupHiddenPages: function() {
      var t1,
        queryString = window.location.search;
      if (queryString == null || queryString.length <= 1)
        return P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      t1 = J.$index$asx(P.Uri_splitQueryString(J.substring$1$s(queryString, 1)), "hide");
      t1 = J.split$1$s(t1 == null ? "" : t1, ",");
      return P.LinkedHashSet_LinkedHashSet$from(t1, H._arrayInstanceType(t1)._precomputed1);
    },
    createHighDpiCanvas: function(width, height) {
      var scaledWidth, scaledHeight, canvas, t2,
        t1 = $.$get$_devicePixelRatio();
      if (typeof t1 !== "number")
        return H.iae(t1);
      scaledWidth = C.JSNumber_methods.ceil$0(width * t1);
      t1 = $.$get$_devicePixelRatio();
      if (typeof t1 !== "number")
        return H.iae(t1);
      scaledHeight = C.JSNumber_methods.ceil$0(height * t1);
      canvas = W.CanvasElement_CanvasElement(scaledHeight, scaledWidth);
      t1 = canvas.style;
      t2 = "" + width + "px";
      t1.width = t2;
      t2 = "" + height + "px";
      t1.height = t2;
      canvas.getContext("2d").scale(scaledWidth / width, scaledHeight / height);
      return canvas;
    },
    downloadFile: function(src, filename) {
      var t2,
        t1 = document,
        element = t1.createElement("a");
      element.setAttribute("href", (self.URL || self.webkitURL).createObjectURL(W.Blob_Blob([src])));
      element.setAttribute("download", filename);
      t2 = element.style;
      t2.display = "none";
      t1.body.appendChild(element);
      t1 = J.getInterceptor$x(element);
      t1.click$0(element);
      t1.remove$0(element);
    },
    createRecordingInstructions: function(recordingGoal) {
      var t3, t4, t5, _null = null, _s3_ = "div", _s6_ = "layout",
        _s29_ = "recording-instruction-message",
        _s10_ = "horizontal",
        t1 = A.CoreElement$(_s3_, _null, "center-in-parent recording-instruction-container", _null, _null),
        t2 = t1.element;
      t2.setAttribute(_s6_, "");
      t2.setAttribute("vertical", "");
      t1.flex$0(0);
      t2 = A.CoreElement$(_s3_, _null, _s29_, _null, _null);
      t3 = t2.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s10_, "");
      t2.flex$0(0);
      t3 = type$.JSArray_CoreElement;
      t2.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s3_, _null, _null, _null, "Click the record button "), new A.CoreElement(Y.getIconRenderer($.$get$record()).createElement$0(0)), A.CoreElement$(_s3_, _null, _null, _null, recordingGoal)], t3));
      t4 = A.CoreElement$(_s3_, _null, _s29_, _null, _null);
      t5 = t4.element;
      t5.setAttribute(_s6_, "");
      t5.setAttribute(_s10_, "");
      t4.flex$0(0);
      t4.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s3_, _null, _null, _null, "Click the stop button "), new A.CoreElement(Y.getIconRenderer($.$get$stop()).createElement$0(0)), A.CoreElement$(_s3_, _null, _null, _null, "to end the recording.")], t3));
      t1.add$1(0, H.setRuntimeTypeInfo([t2, t4], t3));
      return t1;
    }
  },
  B = {
    defaultCompare: function($T) {
      return new B.defaultCompare_closure($T);
    },
    Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.last = t1;
      this.$ti = t2;
    },
    defaultCompare_closure: function defaultCompare_closure(t0) {
      this.T = t0;
    },
    EvalOnDartLibrary$: function(candidateLibraryNames, service) {
      var t1 = new B.EvalOnDartLibrary(P.LinkedHashSet_LinkedHashSet$from(candidateLibraryNames, type$.String), service);
      t1.EvalOnDartLibrary$3$isolateId(candidateLibraryNames, service, null);
      return t1;
    },
    EvalOnDartLibrary: function EvalOnDartLibrary(t0, t1) {
      var _ = this;
      _._disposed = false;
      _._candidateLibraryNames = t0;
      _.service = t1;
      _.allPendingRequestsDone = _._isolateId = _.selectedIsolateStreamSubscription = _._initializeComplete = _._libraryRef = null;
    },
    EvalOnDartLibrary_closure: function EvalOnDartLibrary_closure(t0) {
      this.$this = t0;
    },
    EvalOnDartLibrary_eval_closure: function EvalOnDartLibrary_eval_closure(t0, t1, t2) {
      this.$this = t0;
      this.expression = t1;
      this.scope = t2;
    },
    EvalOnDartLibrary_addRequest_wrappedRequest: function EvalOnDartLibrary_addRequest_wrappedRequest(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.isAlive = t1;
      _.response = t2;
      _.request = t3;
      _.T = t4;
    },
    EvalOnDartLibrary_getObjHelper_closure: function EvalOnDartLibrary_getObjHelper_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.instance = t1;
      _.offset = t2;
      _.count = t3;
      _.T = t4;
    },
    LibraryNotFound: function LibraryNotFound(t0) {
      this.candidateNames = t0;
    },
    PerformanceController: function PerformanceController(t0, t1) {
      this._recordingNotifier = t0;
      this.CpuProfilerControllerProviderMixin_cpuProfilerController = t1;
    },
    _PerformanceController_Object_CpuProfilerControllerProviderMixin: function _PerformanceController_Object_CpuProfilerControllerProviderMixin() {
    },
    printMb: function(bytes) {
      return C.JSDouble_methods.toStringAsFixed$1(bytes / 1048576, 1);
    },
    msText: function(dur, fractionDigits) {
      var t1 = C.JSDouble_methods.toStringAsFixed$1(dur._duration / 1000, fractionDigits);
      return t1 + " ms";
    },
    nullSafeMin: function(a, b, $T) {
      var t1 = a == null;
      if (t1 || b == null)
        return t1 ? b : a;
      return Math.min(H.checkNum(a), b);
    },
    nullSafeMax: function(a, b, $T) {
      var t1 = a == null;
      if (t1 || b == null)
        return t1 ? b : a;
      return Math.max(H.checkNum(a), b);
    },
    executeWithDelay: function(delay, callback, executeNow) {
      if (executeNow || C.JSInt_methods._tdivFast$1(delay._duration, 1000) <= 0)
        callback.call$0();
      else
        P.Timer_Timer(delay, new B.executeWithDelay_closure(callback));
    },
    delayForBatchProcessing: function(micros) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void);
      var $async$delayForBatchProcessing = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(P.Future_Future$delayed(P.Duration$(micros, 0), type$.dynamic), $async$delayForBatchProcessing);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$delayForBatchProcessing, $async$completer);
    },
    longestFittingSubstring: function(originalText, maxWidth, asciiMeasurements, slowMeasureFallback) {
      var runes, currentWidth, i, rune, charWidth;
      if (originalText.length === 0)
        return originalText;
      runes = P.List_List$from(new P.Runes(originalText), true, type$.Runes._eval$1("Iterable.E"));
      for (currentWidth = 0, i = 0; i < runes.length;) {
        rune = runes[i];
        if (typeof rune !== "number")
          return rune.$lt();
        if (rune < 128) {
          if (rune < 0 || rune >= asciiMeasurements.length)
            return H.ioore(asciiMeasurements, rune);
          charWidth = asciiMeasurements[rune];
        } else
          charWidth = slowMeasureFallback.call$1(rune);
        if (typeof charWidth !== "number")
          return H.iae(charWidth);
        currentWidth += charWidth;
        if (currentWidth > maxWidth)
          break;
        ++i;
      }
      return C.JSString_methods.substring$2(originalText, 0, i);
    },
    getSimpleStackFrameName: function($name) {
      var newName;
      $name.toString;
      newName = H.stringReplaceAllUnchecked($name, "<anonymous closure>", "<closure>");
      if (C.JSString_methods.contains$1(newName, " "))
        return newName;
      return C.JSArray_methods.get$last(newName.split("&"));
    },
    JsonUtils_getIntMember: function(json, memberName) {
      var t1 = H._asIntS(J.$index$asx(json, memberName));
      return t1 == null ? -1 : t1;
    },
    safeDivide: function(numerator, denominator) {
      var quotient;
      if (numerator != null && true) {
        if (typeof numerator !== "number")
          return numerator.$div();
        quotient = numerator / denominator;
        if (isFinite(quotient))
          return quotient;
      }
      return 0;
    },
    executeWithDelay_closure: function executeWithDelay_closure(t0) {
      this.callback = t0;
    },
    Property: function Property(t0, t1, t2) {
      this._changeController = t0;
      this._utils$_value = t1;
      this.$ti = t2;
    },
    DelayedTimer: function DelayedTimer(t0, t1) {
      var _ = this;
      _.minDelay = t0;
      _.maxDelay = t1;
      _._maxTimer = _._minTimer = _._closure = null;
    },
    RateLimiter: function RateLimiter(t0, t1) {
      var _ = this;
      _.callback = t0;
      _._pendingRequest = null;
      _.requestScheduledButNotStarted = false;
      _._lastRequestTime = null;
      _.delayBetweenRequests = t1;
    },
    RateLimiter_scheduleRequest_closure: function RateLimiter_scheduleRequest_closure(t0) {
      this.$this = t0;
    },
    RateLimiter_scheduleRequest_closure0: function RateLimiter_scheduleRequest_closure0(t0) {
      this.$this = t0;
    },
    TimeUnit: function TimeUnit(t0) {
      this._utils$_name = t0;
    },
    TimeRange: function TimeRange(t0) {
      this.singleAssignment = t0;
      this._utils$_end = this._utils$_start = null;
    },
    Reporter: function Reporter(t0) {
      this._utils$_listeners = t0;
    },
    ImmediateValueNotifier: function ImmediateValueNotifier(t0, t1, t2) {
      this._value = t0;
      this._listeners = t1;
      this.$ti = t2;
    },
    SortDirection: function SortDirection(t0) {
      this._utils$_name = t0;
    },
    mapToQuery: function(map, encoding) {
      var pairs = H.setRuntimeTypeInfo([], type$.JSArray_List_String);
      map.forEach$1(0, new B.mapToQuery_closure(pairs, encoding));
      return new H.MappedListIterable(pairs, type$.String_Function_List_String._as(new B.mapToQuery_closure0()), type$.MappedListIterable_of_List_String_and_String).join$1(0, "&");
    },
    encodingForCharset: function(charset) {
      var t1;
      if (charset == null)
        return C.C_Latin1Codec;
      t1 = P.Encoding_getByName(charset);
      return t1 == null ? C.C_Latin1Codec : t1;
    },
    toUint8List: function(input) {
      if (type$.Uint8List._is(input))
        return input;
      if (type$.TypedData._is(input))
        return H.NativeUint8List_NativeUint8List$view(input.buffer, 0, null);
      return new Uint8Array(H._ensureNativeList(input));
    },
    toByteStream: function(stream) {
      return stream;
    },
    mapToQuery_closure: function mapToQuery_closure(t0, t1) {
      this.pairs = t0;
      this.encoding = t1;
    },
    mapToQuery_closure0: function mapToQuery_closure0() {
    },
    DateSymbols: function DateSymbols(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _.NAME = t0;
      _.ERAS = t1;
      _.ERANAMES = t2;
      _.NARROWMONTHS = t3;
      _.STANDALONENARROWMONTHS = t4;
      _.MONTHS = t5;
      _.STANDALONEMONTHS = t6;
      _.SHORTMONTHS = t7;
      _.STANDALONESHORTMONTHS = t8;
      _.WEEKDAYS = t9;
      _.STANDALONEWEEKDAYS = t10;
      _.SHORTWEEKDAYS = t11;
      _.STANDALONESHORTWEEKDAYS = t12;
      _.STANDALONENARROWWEEKDAYS = t13;
      _.SHORTQUARTERS = t14;
      _.QUARTERS = t15;
      _.AMPMS = t16;
    },
    NumberSymbols$: function(CURRENCY_PATTERN, DECIMAL_PATTERN, DECIMAL_SEP, DEF_CURRENCY_CODE, EXP_SYMBOL, GROUP_SEP, INFINITY, MINUS_SIGN, NAME, NAN, PERCENT, PERCENT_PATTERN, PERMILL, PLUS_SIGN, SCIENTIFIC_PATTERN, ZERO_DIGIT) {
      return new B.NumberSymbols(NAME, DECIMAL_SEP, GROUP_SEP, PERCENT, ZERO_DIGIT, PLUS_SIGN, MINUS_SIGN, EXP_SYMBOL, PERMILL, INFINITY, NAN, DECIMAL_PATTERN, DEF_CURRENCY_CODE);
    },
    NumberSymbols: function NumberSymbols(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.NAME = t0;
      _.DECIMAL_SEP = t1;
      _.GROUP_SEP = t2;
      _.PERCENT = t3;
      _.ZERO_DIGIT = t4;
      _.PLUS_SIGN = t5;
      _.MINUS_SIGN = t6;
      _.EXP_SYMBOL = t7;
      _.PERMILL = t8;
      _.INFINITY = t9;
      _.NAN = t10;
      _.DECIMAL_PATTERN = t11;
      _.DEF_CURRENCY_CODE = t12;
    },
    InternalStyle: function InternalStyle() {
    },
    StreamChannelController: function StreamChannelController(t0) {
      this._foreign = this._local = null;
      this.$ti = t0;
    },
    log: function(message, level) {
      switch (level) {
        case C.LogLevel_0:
          window;
          if (typeof console != "undefined")
            window.console.log(message);
          break;
        case C.LogLevel_1:
          window;
          if (typeof console != "undefined")
            window.console.warn(message);
          break;
        case C.LogLevel_2:
          window;
          if (typeof console != "undefined")
            window.console.error(message);
          break;
      }
    },
    wrapFormatException: function($name, value, body, $T) {
      var error, error0, t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof G.SourceSpanFormatException) {
          error = t1;
          throw H.wrapException(G.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, J.get$source$z(error)));
        } else if (type$.FormatException._is(t1)) {
          error0 = t1;
          throw H.wrapException(P.FormatException$("Invalid " + $name + ' "' + value + '": ' + H.S(J.get$message$x(error0)), J.get$source$z(error0), J.get$offset$z(error0)));
        } else
          throw exception;
      }
    },
    isAlphabetic: function(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(C.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return C.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    isAllTheSame: function(iter) {
      var t1, lastValue, value;
      for (t1 = new H.ListIterator(iter, iter.get$length(iter), iter.$ti._eval$1("ListIterator<ListIterable.E>")), lastValue = null; t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (lastValue == null)
          lastValue = value;
        else if (!J.$eq$(value, lastValue))
          return false;
      }
      return true;
    },
    replaceFirstNull: function(list, element, $E) {
      var index = C.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw H.wrapException(P.ArgumentError$(H.S(list) + " contains no null elements."));
      C.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull: function(list, element, $E) {
      var index = C.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw H.wrapException(P.ArgumentError$(H.S(list) + " contains no elements matching " + element.toString$0(0) + "."));
      C.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits: function(string, codeUnit) {
      var t1, count;
      for (t1 = new H.CodeUnits(string), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === codeUnit)
          ++count;
      return count;
    },
    findLineStart: function(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = C.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = C.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : C.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    }
  },
  N = {HexCodec: function HexCodec() {
    },
    HtmlScriptsView$: function(uriDescriber) {
      var t1 = new N.HtmlScriptsView();
      t1.HtmlScriptsView$1(uriDescriber);
      return t1;
    },
    ListDirection: function ListDirection(t0) {
      this._html_scripts_view$_name = t0;
    },
    HtmlPopupView: function HtmlPopupView(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html_scripts_view$_sourceArea = t0;
      _._html_scripts_view$_sourcePathDiv = t1;
      _._html_scripts_view$_popupTextfield = t2;
      _._scriptsView = t3;
      _._oldSourceNameTextColor = null;
      _._poppedUp = false;
      _.element = t4;
    },
    HtmlScriptsView: function HtmlScriptsView() {
      this._highlightRef = this._html_scripts_view$_items = this._matcherRendering = null;
    },
    HtmlScriptsView_closure: function HtmlScriptsView_closure(t0, t1) {
      this.$this = t0;
      this.uriDescriber = t1;
    },
    HtmlScriptsView_showScripts_closure: function HtmlScriptsView_showScripts_closure(t0, t1) {
      this.$this = t0;
      this.commonPrefix = t1;
    },
    HtmlScriptsView_showScripts_closure0: function HtmlScriptsView_showScripts_closure0(t0) {
      this.rootLib = t0;
    },
    HtmlScriptsView_showScripts_closure1: function HtmlScriptsView_showScripts_closure1() {
    },
    HtmlScriptsMatcher: function HtmlScriptsMatcher(t0, t1) {
      var _ = this;
      _._textfield = _._scriptsView = null;
      _._debuggerState = t0;
      _._originalScrollTop = _._originalScriptRef = null;
      _.matchingState = t1;
      _._selectRow = -1;
      _._finishCallback = _._keyEventSubscription = null;
    },
    HtmlScriptsMatcher_start_closure: function HtmlScriptsMatcher_start_closure(t0) {
      this.$this = t0;
    },
    HtmlScriptsMatcher_reset_closure: function HtmlScriptsMatcher_reset_closure(t0) {
      this.originalRefs = t0;
    },
    HtmlScriptsMatcher__startMatching_closure: function HtmlScriptsMatcher__startMatching_closure(t0) {
      this.$this = t0;
    },
    HtmlScriptsMatcher_displayMatchingScripts_closure: function HtmlScriptsMatcher_displayMatchingScripts_closure(t0, t1) {
      this.$this = t0;
      this.charsToMatch = t1;
    },
    HtmlScriptsMatcher_displayMatchingScripts_closure0: function HtmlScriptsMatcher_displayMatchingScripts_closure0(t0) {
      this.matchingRefs = t0;
    },
    LineSegment: function LineSegment() {
    },
    HorizontalLineSegment: function HorizontalLineSegment(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    VerticalLineSegment: function VerticalLineSegment(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    PButton$octicon: function(text, icon) {
      var _null = null,
        t1 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("button", _null)),
        t2 = new N.PButton(t1);
      t2.CoreElement$5$attributes$classes$html$text("button", _null, "btn optional-text", _null, _null);
      t1.title = text;
      t2.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("span", _null, "octicon octicon-" + icon, _null, _null), A.CoreElement$("span", _null, "optional-text", _null, text)], type$.JSArray_CoreElement));
      t2.clazz$1("btn-sm");
      return t2;
    },
    PButton$icon: function(text, icon, title) {
      var _null = null, _s6_ = "button",
        t1 = type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null)),
        t2 = new N.PButton(t1);
      t2.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn optional-text", _null, _null);
      t1.setAttribute("type", _s6_);
      t1.setAttribute("title", title == null ? text : title);
      if (icon != null) {
        t2.add$1(0, new A.CoreElement(Y.getIconRenderer(icon).createElement$0(0)));
        t2.add$1(0, A.CoreElement$("span", _null, _null, _null, text));
      } else
        t1.textContent = text;
      return t2;
    },
    PTabNav$: function(tabs) {
      var _null = null,
        t1 = new N.PTabNav(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_PTabNavTab), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "tabnav", _null, _null);
      t1.PTabNav$1(tabs);
      return t1;
    },
    PNavMenu$: function(items, supportsSelection) {
      var _null = null,
        t1 = new N.PNavMenu(type$.Element._as(W._ElementFactoryProvider_createElement_tag("nav", _null)));
      t1.CoreElement$5$attributes$classes$html$text("nav", _null, "menu", _null, _null);
      t1.PNavMenu$2$supportsSelection(items, false);
      return t1;
    },
    PSelect: function PSelect(t0) {
      this.element = t0;
    },
    PSelect_onChange_closure: function PSelect_onChange_closure(t0) {
      this.$this = t0;
    },
    PSelect_change_closure: function PSelect_change_closure(t0) {
      this.handle = t0;
    },
    PButton: function PButton(t0) {
      this.element = t0;
    },
    PFlash: function PFlash(t0) {
      this.element = t0;
    },
    PTabNav: function PTabNav(t0, t1) {
      this._selectedTabController = t0;
      this.selectedTab = null;
      this.element = t1;
    },
    PTabNav_closure: function PTabNav_closure(t0, t1) {
      this.$this = t0;
      this.tab = t1;
    },
    PTabNavTab: function PTabNavTab(t0) {
      this.element = t0;
    },
    PNavMenu: function PNavMenu(t0) {
      this.selectedItem = null;
      this.element = t0;
    },
    PNavMenuItem: function PNavMenuItem(t0) {
      this.element = t0;
    },
    ServiceExtensionCheckbox$: function(extensionDescription) {
      var _null = null,
        t1 = new N.ServiceExtensionCheckbox(extensionDescription, A.CoreElement$("label", _null, _null, _null, _null));
      t1.ServiceExtensionCheckbox$1(extensionDescription);
      return t1;
    },
    ServiceExtensionButton$: function(extensionDescription) {
      var t1 = extensionDescription.description,
        t2 = extensionDescription.icon,
        t3 = extensionDescription.tooltips;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = N.PButton$icon(t1, t2, t3[1]);
      t3.clazz$1("btn-sm");
      t3 = new N.ServiceExtensionButton(extensionDescription, t3);
      t3.ServiceExtensionButton$1(extensionDescription);
      return t3;
    },
    ServiceExtensionCheckbox: function ServiceExtensionCheckbox(t0, t1) {
      this.extensionDescription = t0;
      this.element = t1;
      this._checkboxElement = null;
    },
    ServiceExtensionCheckbox_closure: function ServiceExtensionCheckbox_closure(t0) {
      this.checkbox = t0;
    },
    ServiceExtensionCheckbox_closure0: function ServiceExtensionCheckbox_closure0(t0) {
      this.$this = t0;
    },
    ServiceExtensionCheckbox__updateState_closure: function ServiceExtensionCheckbox__updateState_closure(t0) {
      this.$this = t0;
    },
    ServiceExtensionButton: function ServiceExtensionButton(t0, t1) {
      this.extensionDescription = t0;
      this.button = t1;
    },
    ServiceExtensionButton_closure: function ServiceExtensionButton_closure(t0) {
      this.$this = t0;
    },
    ServiceExtensionButton_closure0: function ServiceExtensionButton_closure0(t0) {
      this.$this = t0;
    },
    ServiceExtensionButton__updateState_closure: function ServiceExtensionButton__updateState_closure(t0) {
      this.$this = t0;
    },
    ServiceExtensionSelector: function ServiceExtensionSelector() {
    },
    ServiceExtensionSelector_closure: function ServiceExtensionSelector_closure(t0) {
      this.$this = t0;
    },
    ServiceExtensionSelector_updateState_closure: function ServiceExtensionSelector_updateState_closure(t0) {
      this.$this = t0;
    },
    TogglePlatformSelector: function TogglePlatformSelector(t0, t1) {
      this.extensionDescription = t0;
      this.selector = t1;
      this._service_extension_elements$_selectedValue = null;
    },
    expectQuotedString: function(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return C.JSString_methods.splitMapJoin$2$onMatch(J.substring$2$s(string, 1, string.length - 1), $.$get$_quotedPair(), type$.String_Function_Match._as(new N.expectQuotedString_closure()));
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    WebSocketChannel: function WebSocketChannel(t0) {
      this._channel$_webSocket = t0;
    },
    WebSocketSink: function WebSocketSink(t0, t1) {
      this._channel$_webSocket = t0;
      this._stream_sink$_sink = t1;
    },
    lowerBound: function(sortedList, value, $T) {
      var min, mid, comp,
        compare = B.defaultCompare($T),
        max = sortedList.length;
      for (min = 0; min < max;) {
        mid = min + C.JSInt_methods._shrOtherPositive$1(max - min, 1);
        if (mid < 0 || mid >= sortedList.length)
          return H.ioore(sortedList, mid);
        comp = compare.call$2(sortedList[mid], value);
        if (typeof comp !== "number")
          return comp.$lt();
        if (comp < 0)
          min = mid + 1;
        else
          max = mid;
      }
      return min;
    }
  },
  K = {Disposer: function Disposer(t0, t1, t2) {
      this._subscriptions = t0;
      this._listenables = t1;
      this._auto_dispose$_listeners = t2;
    }, DisposableController: function DisposableController() {
    }, AutoDisposeControllerMixin: function AutoDisposeControllerMixin() {
    },
    InspectorTreeConfig$: function(onClientActiveChange, onExpand, onHover, onNodeAdded, onSelectionChange, summaryTree, treeType) {
      return new K.InspectorTreeConfig(onNodeAdded, onSelectionChange, onExpand, onHover);
    },
    PaintEntry: function PaintEntry() {
    },
    InspectorTreeNodeRenderBuilder: function InspectorTreeNodeRenderBuilder() {
    },
    InspectorTreeNodeRender: function InspectorTreeNodeRender() {
    },
    InspectorTreeNodeRendererLegacy: function InspectorTreeNodeRendererLegacy() {
    },
    InspectorTreeNode: function InspectorTreeNode() {
    },
    InspectorTreeRow: function InspectorTreeRow(t0, t1, t2, t3, t4) {
      var _ = this;
      _.node = t0;
      _.ticks = t1;
      _.depth = t2;
      _.index = t3;
      _.lineToParent = t4;
    },
    InspectorTreeConfig: function InspectorTreeConfig(t0, t1, t2, t3) {
      var _ = this;
      _.onNodeAdded = t0;
      _.onSelectionChange = t1;
      _.onExpand = t2;
      _.onHover = t3;
    },
    InspectorTreeController: function InspectorTreeController() {
    },
    InspectorTreeController_root_closure: function InspectorTreeController_root_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    InspectorTreeController_selection_closure: function InspectorTreeController_selection_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    InspectorTreeController_hover_closure: function InspectorTreeController_hover_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    InspectorTreeController_navigateLeft_closure: function InspectorTreeController_navigateLeft_closure(t0) {
      this.$this = t0;
    },
    InspectorTreeController_navigateRight_closure: function InspectorTreeController_navigateRight_closure(t0) {
      this.$this = t0;
    },
    InspectorTreeController_nodeChanged_closure: function InspectorTreeController_nodeChanged_closure(t0) {
      this.node = t0;
    },
    InspectorTreeController_removeNodeFromParent_closure: function InspectorTreeController_removeNodeFromParent_closure(t0) {
      this.node = t0;
    },
    InspectorTreeController_appendChild_closure: function InspectorTreeController_appendChild_closure(t0, t1) {
      this.node = t0;
      this.child = t1;
    },
    InspectorTreeController_expandPath_closure: function InspectorTreeController_expandPath_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    InspectorTreeController_collapseToSelected_closure: function InspectorTreeController_collapseToSelected_closure(t0) {
      this.$this = t0;
    },
    InspectorTreeController_onExpandRow_closure: function InspectorTreeController_onExpandRow_closure(t0, t1) {
      this.$this = t0;
      this.row = t1;
    },
    InspectorTreeController_onCollapseRow_closure: function InspectorTreeController_onCollapseRow_closure(t0) {
      this.row = t0;
    },
    InspectorTreeFixedRowHeightController: function InspectorTreeFixedRowHeightController() {
    },
    InspectorTreeHtml$: function() {
      var t3, t4, t5, t6,
        t1 = A.CoreElement$("div", null, "inspector-tree-html", null, null),
        t2 = new K.InspectorTreeHtml(t1, H.setRuntimeTypeInfo([], type$.JSArray_InspectorTreeRow));
      t1.get$onClick(t1).listen$1(t2.get$onMouseClick());
      t1 = t1.element;
      t1.setAttribute("tabIndex", "0");
      t3 = J.getInterceptor$x(t1);
      t4 = t3.get$onMouseMove(t1);
      t5 = t4.$ti;
      t6 = t5._eval$1("~(1)")._as(t2.get$onMouseMove(t2));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t4._target, t4._eventType, t6, false, t5._precomputed1);
      t1 = t3.get$onMouseLeave(t1);
      t3 = t1.$ti;
      W._EventStreamSubscription$(t1._target, t1._eventType, t3._eval$1("~(1)")._as(t2.get$onMouseLeave(t2)), false, t3._precomputed1);
      return t2;
    },
    HtmlPaintEntry: function HtmlPaintEntry() {
    },
    IconPaintEntry: function IconPaintEntry(t0) {
      this.iconRenderer = t0;
      this.element = null;
    },
    HtmlTextPaintEntry: function HtmlTextPaintEntry(t0, t1, t2) {
      var _ = this;
      _.text = t0;
      _.color = t1;
      _.font = t2;
      _.element = null;
    },
    InspectorTreeNodeRenderHtmlBuilder: function InspectorTreeNodeRenderHtmlBuilder(t0, t1, t2, t3) {
      var _ = this;
      _.color = _.font = _.lastStyle = null;
      _.allowWrap = t0;
      _._entries = t1;
      _.level = t2;
      _.treeStyle = t3;
    },
    InspectorTreeNodeHtmlRender: function InspectorTreeNodeHtmlRender(t0, t1) {
      this.cssClasses = t0;
      this.element = null;
      this.entries = t1;
    },
    InspectorTreeNodeHtml: function InspectorTreeNodeHtml(t0) {
      var _ = this;
      _._renderObject = null;
      _._isDirty = true;
      _._shouldShow = null;
      _.selected = false;
      _._diagnostic = null;
      _._inspector_tree$_children = t0;
      _.allowExpandCollapse = _._isExpanded = true;
      _._childrenCount = _._inspector_tree$_parent = null;
    },
    InspectorTreeHtml: function InspectorTreeHtml(t0, t1) {
      var _ = this;
      _._inspector_tree_html$_container = t0;
      _._computingHover = _._recomputeRows = false;
      _.lastContentWidth = _._hover = _._config = _._selection = _._root = null;
      _.cachedRows = t1;
      _.currentHoverDiagnostic = null;
    },
    InspectorTreeHtml_setState_closure: function InspectorTreeHtml_setState_closure(t0) {
      this.$this = t0;
    },
    InspectorTreeHtml_animateToTargets_closure: function InspectorTreeHtml_animateToTargets_closure(t0) {
      this.targets = t0;
    },
    _InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb: function _InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb() {
    },
    InspectorTreeControllerLegacy: function InspectorTreeControllerLegacy() {
    },
    InspectorTreeNodeLegacy: function InspectorTreeNodeLegacy() {
    },
    InspectorTreeNodeLegacy_renderObject_radix: function InspectorTreeNodeLegacy_renderObject_radix() {
    },
    ColumnData_fastIntl: function(value) {
      if (H._isInt(value) && value < 1000)
        return J.toString$0$(value);
      else
        return $.$get$nf().format$1(value);
    },
    HoverCellData: function HoverCellData() {
    },
    TableData: function TableData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.client = null;
      _._hasPendingRebuild = false;
      _._columns = t0;
      _.data = t1;
      _._sortDirection = _._sortColumn = null;
      _.selectController = t2;
      _.selectElementController = t3;
      _._rowsChangedController = t4;
      _._selectedObjectIndex = _._selectedObject = null;
      _.$ti = t5;
    },
    TableData_setRows_closure: function TableData_setRows_closure(t0) {
      this.$this = t0;
    },
    TableData_setRows_closure0: function TableData_setRows_closure0() {
    },
    TableData_scrollTo_closure: function TableData_scrollTo_closure(t0, t1, t2) {
      this.$this = t0;
      this.index = t1;
      this.scrollBehavior = t2;
    },
    TableData_scheduleRebuild_closure: function TableData_scheduleRebuild_closure(t0) {
      this.$this = t0;
    },
    TableData__sortData_closure: function TableData__sortData_closure(t0, t1, t2) {
      this.$this = t0;
      this.column = t1;
      this.direction = t2;
    },
    TreeTableData: function TreeTableData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.client = null;
      _._hasPendingRebuild = false;
      _._columns = t0;
      _.data = t1;
      _._sortDirection = _._sortColumn = null;
      _.selectController = t2;
      _.selectElementController = t3;
      _._rowsChangedController = t4;
      _._selectedObjectIndex = _._selectedObject = null;
      _.$ti = t5;
    },
    TreeTableData__sortData__addToSortedData: function TreeTableData__sortData__addToSortedData(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.sortedData = t1;
      _.column = t2;
      _.direction = t3;
    },
    TreeTableData__sortData__addToSortedData_closure: function TreeTableData__sortData__addToSortedData_closure(t0, t1, t2) {
      this.$this = t0;
      this.column = t1;
      this.direction = t2;
    },
    TreeTableData__sortData_closure: function TreeTableData__sortData_closure(t0) {
      this.$this = t0;
    },
    TreeTableData__sortData_closure0: function TreeTableData__sortData_closure0(t0, t1, t2) {
      this.$this = t0;
      this.column = t1;
      this.direction = t2;
    },
    TreeTableData_collapseNode_cascadingRemove: function TreeTableData_collapseNode_cascadingRemove(t0) {
      this.$this = t0;
    },
    TreeTableData_expandNode_expand: function TreeTableData_expandNode_expand(t0) {
      this.$this = t0;
    },
    ColumnData: function ColumnData() {
    },
    TreeColumnData: function TreeColumnData() {
    },
    ColumnAlignment: function ColumnAlignment(t0) {
      this._table_data$_name = t0;
    },
    MaterialIcon$: function(text, color, angle, codePoint, fontSize, iconWidth) {
      return new K.MaterialIcon(text, color, fontSize, angle, iconWidth);
    },
    FlutterMaterialIcons_getIconForCodePoint: function(charCode) {
      var code = H.Primitives_stringFromCharCode(charCode);
      return $.FlutterMaterialIcons__iconCache.putIfAbsent$2(0, code, new K.FlutterMaterialIcons_getIconForCodePoint_closure(code, charCode));
    },
    MaterialIcon: function MaterialIcon(t0, t1, t2, t3, t4) {
      var _ = this;
      _.text = t0;
      _.color = t1;
      _.fontSize = t2;
      _.angle = t3;
      _.iconWidth = t4;
    },
    FlutterMaterialIcons_getIconForCodePoint_closure: function FlutterMaterialIcons_getIconForCodePoint_closure(t0, t1) {
      this.code = t0;
      this.charCode = t1;
    },
    ThemedColor$: function(_light, _dark) {
      return new K.ThemedColor(_light, _dark);
    },
    ThemedColor_fromSingleColor: function(color) {
      return new K.ThemedColor(color, color);
    },
    ThemedColor: function ThemedColor(t0, t1) {
      this._light = t0;
      this._dark = t1;
    },
    GuaranteeChannel$: function(innerStream, innerSink, allowSinkErrors, $T) {
      var t2, t1 = {};
      t1.innerStream = innerStream;
      t2 = new K.GuaranteeChannel($T._eval$1("GuaranteeChannel<0>"));
      t2.GuaranteeChannel$3$allowSinkErrors(innerSink, allowSinkErrors, t1, $T);
      return t2;
    },
    GuaranteeChannel: function GuaranteeChannel(t0) {
      var _ = this;
      _._guarantee_channel$_subscription = _._streamController = _._guarantee_channel$_sink = null;
      _._disconnected = false;
      _.$ti = t0;
    },
    GuaranteeChannel_closure: function GuaranteeChannel_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    GuaranteeChannel__closure: function GuaranteeChannel__closure(t0) {
      this.$this = t0;
    },
    _GuaranteeSink: function _GuaranteeSink(t0, t1, t2, t3, t4) {
      var _ = this;
      _._inner = t0;
      _._guarantee_channel$_channel = t1;
      _._doneCompleter = t2;
      _._closed = _._disconnected = false;
      _._addStreamCompleter = _._addStreamSubscription = null;
      _._allowErrors = t3;
      _.$ti = t4;
    },
    _GuaranteeSink__addError_closure: function _GuaranteeSink__addError_closure() {
    },
    Uuid$: function() {
      var options, t2, t1 = {};
      t1.options = options;
      t1.options = null;
      t2 = new K.Uuid();
      t2.Uuid$1$options(t1);
      return t2;
    },
    Uuid: function Uuid() {
      var _ = this;
      _._clockSeq = _._nodeId = _._seedBytes = null;
      _._lastNSecs = _._lastMSecs = 0;
      _._hexToByte = _._byteToHex = null;
    }
  },
  F = {
    FlameChartNode$: function(rect, backgroundColor, textColor, selectedTextColor, data, displayTextProvider, chartStartInset, $T) {
      var t1 = rect.left;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new F.FlameChartNode(t1, rect.right - t1, backgroundColor, textColor, selectedTextColor, data, displayTextProvider, chartStartInset, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.num), rect, $T._eval$1("FlameChartNode<0>"));
    },
    FlameChart: function FlameChart() {
    },
    FlameChart_nodeInRow_binarySearchForNode: function FlameChart_nodeInRow_binarySearchForNode(t0, t1) {
      this.nodes = t0;
      this.x = t1;
    },
    FlameChart_sectionLabel_closure: function FlameChart_sectionLabel_closure(t0) {
      this.title = t0;
    },
    FlameChartCanvas: function FlameChartCanvas() {
    },
    FlameChartCanvas_closure: function FlameChartCanvas_closure(t0) {
      this.$this = t0;
    },
    FlameChartCanvas__initAsciiMeasurements_closure: function FlameChartCanvas__initAsciiMeasurements_closure(t0) {
      this.measurementCanvas = t0;
    },
    FlameChartCanvas_paintSections_closure: function FlameChartCanvas_paintSections_closure() {
    },
    FlameChartRow: function FlameChartRow(t0, t1) {
      this.nodes = t0;
      this.index = t1;
    },
    FlameChartSection: function FlameChartSection(t0, t1, t2, t3) {
      var _ = this;
      _.index = t0;
      _.startRow = t1;
      _.endRow = t2;
      _.absStartY = t3;
    },
    FlameChartNode: function FlameChartNode(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.startingLeft = t0;
      _.startingWidth = t1;
      _.backgroundColor = t2;
      _.textColor = t3;
      _.selectedTextColor = t4;
      _.data = t5;
      _.displayTextProvider = t6;
      _.chartStartInset = t7;
      _.textMeasurements = t8;
      _.rect = t9;
      _.selected = false;
      _.row = null;
      _.$ti = t10;
    },
    FlameChartNode_paint_closure: function FlameChartNode_paint_closure(t0) {
      this.canvas = t0;
    },
    TimelineGrid: function TimelineGrid(t0, t1, t2) {
      var _ = this;
      _._flame_chart_canvas$_duration = t0;
      _._chartStartInset = t1;
      _.currentInterval = 150;
      _._flameChartWidth = t2;
      _._zoomLevel = 1;
    },
    LogLevel: function LogLevel(t0) {
      this._name = t0;
    },
    _breakpointComparator: function(a, b) {
      var t2, aRef, bRef, compare,
        t1 = type$.Breakpoint;
      t1._as(a);
      t1._as(b);
      t1 = new F._breakpointComparator_getRef();
      t2 = new F._breakpointComparator_getPos();
      aRef = t1.call$1(a.location);
      bRef = t1.call$1(b.location);
      compare = J.compareTo$1$ns(aRef.get$uri(), bRef.get$uri());
      if (compare !== 0)
        return compare;
      t1 = t2.call$1(a.location);
      t2 = t2.call$1(b.location);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 - t2;
    },
    BreakpointsView$: function(_breakpointsCountDiv, debuggerState, uriDescriber) {
      var t1 = new F.BreakpointsView(_breakpointsCountDiv);
      t1.BreakpointsView$3(_breakpointsCountDiv, debuggerState, uriDescriber);
      return t1;
    },
    BreakOnExceptionControl$: function() {
      var _null = null,
        t1 = new F.BreakOnExceptionControl(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_String), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "break-on-exceptions flex-no-wrap", _null, _null);
      t1.BreakOnExceptionControl$0();
      return t1;
    },
    _breakpointComparator_getRef: function _breakpointComparator_getRef() {
    },
    _breakpointComparator_getPos: function _breakpointComparator_getPos() {
    },
    BreakpointsView: function BreakpointsView(t0) {
      this._breakpoints_view$_breakpointsCountDiv = t0;
      this._breakpoints_view$_items = null;
    },
    BreakpointsView_closure: function BreakpointsView_closure(t0, t1) {
      this.uriDescriber = t0;
      this.debuggerState = t1;
    },
    BreakpointsView__closure: function BreakpointsView__closure(t0, t1, t2) {
      this.debuggerState = t0;
      this.location = t1;
      this.element = t2;
    },
    BreakOnExceptionControl: function BreakOnExceptionControl(t0, t1) {
      var _ = this;
      _._allElement = _._unhandledElement = null;
      _._pauseModeController = t0;
      _.element = t1;
    },
    BreakOnExceptionControl_closure: function BreakOnExceptionControl_closure(t0) {
      this.$this = t0;
    },
    BreakOnExceptionControl_closure0: function BreakOnExceptionControl_closure0(t0, t1) {
      this.$this = t0;
      this.unhandledExceptionsElement = t1;
    },
    HtmlVariablesView$: function(debuggerState, variableDescriber) {
      var t1 = new F.HtmlVariablesView();
      t1.HtmlVariablesView$2(debuggerState, variableDescriber);
      return t1;
    },
    HtmlVariablesView: function HtmlVariablesView() {
      this._items = null;
    },
    HtmlVariablesView_closure: function HtmlVariablesView_closure(t0) {
      this.variableDescriber = t0;
    },
    HtmlVariablesView__closure: function HtmlVariablesView__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.variableDescriber = t1;
      _.variable = t2;
      _.element = t3;
    },
    HtmlVariablesView___closure: function HtmlVariablesView___closure(t0) {
      this.element = t0;
    },
    VariablesChildProvider: function VariablesChildProvider(t0) {
      this.debuggerState = t0;
    },
    VariablesChildProvider_getChildren_closure: function VariablesChildProvider_getChildren_closure() {
    },
    VariablesChildProvider_getChildren_closure0: function VariablesChildProvider_getChildren_closure0() {
    },
    HtmlStatus$: function(statusLine, initialMessage) {
      var _null = null,
        t1 = new F.HtmlStatus(statusLine),
        t2 = A.CoreElement$("span", _null, _null, _null, _null),
        t3 = new A.HtmlStatusItem(t2);
      t1.item = t3;
      t2.element.textContent = initialMessage;
      C.JSArray_methods.add$1(statusLine._html_framework$_items, t3);
      statusLine._rebuild$0();
      return t1;
    },
    _renderDuration: function(duration) {
      var t1 = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      if (t1 < 1000)
        return $.$get$nf().format$1(t1) + "ms";
      else
        return C.JSDouble_methods.toStringAsFixed$1(t1 / 1000, 1) + "s";
    },
    HtmlPerfToolFramework: function HtmlPerfToolFramework(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.reloadStatus = _.connectionStatus = _.isolateSelect = _.isolateSelectStatus = null;
      _.screens = t0;
      _._screenContents = t1;
      _.screensReady = t2;
      _.messageManager = t3;
      _.analyticsDialog = _.snapshotMessage = _.connectDialog = _.globalActions = _.auxiliaryStatus = _.pageStatus = _.globalStatus = _._html_framework$_previous = _.current = null;
      _._pageChangeController = t4;
      _.defaultAuxiliaryStatus = t5;
    },
    HtmlPerfToolFramework_initGlobalUI_closure: function HtmlPerfToolFramework_initGlobalUI_closure() {
    },
    HtmlPerfToolFramework_initGlobalUI_closure0: function HtmlPerfToolFramework_initGlobalUI_closure0(t0) {
      this.$this = t0;
    },
    HtmlPerfToolFramework_initGlobalUI_closure1: function HtmlPerfToolFramework_initGlobalUI_closure1(t0, t1) {
      this.$this = t0;
      this.link = t1;
    },
    HtmlPerfToolFramework_initGlobalUI_closure2: function HtmlPerfToolFramework_initGlobalUI_closure2(t0, t1) {
      this.$this = t0;
      this.screen = t1;
    },
    HtmlPerfToolFramework_initGlobalUI_closure3: function HtmlPerfToolFramework_initGlobalUI_closure3(t0) {
      this.$this = t0;
    },
    HtmlPerfToolFramework_initDevToolsServerConnection_closure: function HtmlPerfToolFramework_initDevToolsServerConnection_closure(t0) {
      this._box_0 = t0;
    },
    HtmlPerfToolFramework_initDevToolsServerConnection_closure0: function HtmlPerfToolFramework_initDevToolsServerConnection_closure0(t0) {
      this.$this = t0;
    },
    HtmlPerfToolFramework_initDevToolsServerConnection_closure1: function HtmlPerfToolFramework_initDevToolsServerConnection_closure1() {
    },
    HtmlPerfToolFramework_initDevToolsServerConnection_closure2: function HtmlPerfToolFramework_initDevToolsServerConnection_closure2() {
    },
    HtmlPerfToolFramework_disableAppWithError_closure: function HtmlPerfToolFramework_disableAppWithError_closure() {
    },
    HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure: function HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure(t0, t1) {
      this.$this = t0;
      this.hotReloadListenable = t1;
    },
    HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure0: function HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure0(t0, t1) {
      this.$this = t0;
      this.hotRestartListenable = t1;
    },
    HtmlPerfToolFramework__buildReloadButton_closure: function HtmlPerfToolFramework__buildReloadButton_closure(t0, t1) {
      this.$this = t0;
      this.reloadAction = t1;
    },
    HtmlPerfToolFramework__buildRestartButton_closure: function HtmlPerfToolFramework__buildRestartButton_closure(t0, t1) {
      this.$this = t0;
      this.restartAction = t1;
    },
    HtmlNotFoundScreen: function HtmlNotFoundScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.name = t0;
      _.id = t1;
      _.iconClass = t2;
      _.disabledTooltip = t3;
      _.disabled = t4;
      _.showTab = t5;
      _._helpStatus = null;
      _.shortcutCallback = t6;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t7;
      _.statusItems = t8;
    },
    HtmlStatus: function HtmlStatus(t0) {
      this.statusLine = t0;
      this.item = null;
    },
    _request: function(url) {
      return F._request$body(url);
    },
    _request$body: function(url) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.HttpRequest),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], exception, response, $async$exception;
      var $async$_request = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              response = null;
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(W.HttpRequest_request(url, "POST", null, null), $async$_request);
            case 7:
              // returning from await.
              response = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              H.unwrapException($async$exception);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = response;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_request, $async$completer);
    },
    _logWarning: function(response, apiType, respText) {
      var t1 = "HttpRequest " + apiType + " failed status = ";
      t1 += H.S(response == null ? null : response.status);
      B.log(t1 + (respText != null ? ", responseText = " + respText : ""), C.LogLevel_1);
    },
    isFlutterGAEnabled: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, responseValue, enabled, resp;
      var $async$isFlutterGAEnabled = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(F._request("api/getFlutterGAEnabled"), $async$isFlutterGAEnabled);
            case 3:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) === 200) {
                responseValue = C.C_JsonCodec.decode$1(0, resp.responseText);
                enabled = H._asBoolS(responseValue == null ? false : responseValue);
              } else {
                F._logWarning(resp, "api/getFlutterGAEnabled", null);
                enabled = false;
              }
              $async$returnValue = enabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$isFlutterGAEnabled, $async$completer);
    },
    flutterGAClientID: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, resp, clientId, $async$temp1;
      var $async$flutterGAClientID = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait(F.isFlutterGAEnabled(), $async$flutterGAClientID);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 7;
              return P._asyncAwait(F._request("api/getFlutterGAClientId"), $async$flutterGAClientID);
            case 7:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) === 200) {
                clientId = H._asStringS(C.C_JsonCodec.decode$1(0, resp.responseText));
                if (clientId == null)
                  B.log("api/getFlutterGAClientId is null", C.LogLevel_1);
              } else {
                F._logWarning(resp, "api/getFlutterGAClientId", null);
                clientId = "";
              }
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              clientId = "";
            case 4:
              // join
              $async$returnValue = clientId;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$flutterGAClientID, $async$completer);
    },
    resetDevToolsFile: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        resp;
      var $async$resetDevToolsFile = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(F._request("api/resetDevTools"), $async$resetDevToolsFile);
            case 2:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) !== 200)
                F._logWarning(resp, "api/resetDevTools", null);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$resetDevToolsFile, $async$completer);
    },
    isFirstRun: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, firstRun, resp;
      var $async$isFirstRun = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(F._request("api/getDevToolsFirstRun"), $async$isFirstRun);
            case 3:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) === 200)
                firstRun = H._asBoolS(C.C_JsonCodec.decode$1(0, resp.responseText));
              else {
                F._logWarning(resp, "api/getDevToolsFirstRun", null);
                firstRun = false;
              }
              $async$returnValue = firstRun;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$isFirstRun, $async$completer);
    },
    gaEnabled: function() {
      return $._gaEnabled;
    },
    isEnabled: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, resp, enabled, t1;
      var $async$isEnabled = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $._gaEnabled;
              if (t1 != null) {
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait(F._request("api/getDevToolsEnabled"), $async$isEnabled);
            case 3:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) === 200)
                enabled = H._asBoolS(C.C_JsonCodec.decode$1(0, resp.responseText));
              else {
                F._logWarning(resp, "api/getDevToolsEnabled", null);
                enabled = false;
              }
              $async$returnValue = $._gaEnabled = enabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$isEnabled, $async$completer);
    },
    setEnabled: function(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        resp;
      var $async$setEnabled = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(F._request("api/setDevToolsEnabled?enabled=" + value), $async$setEnabled);
            case 2:
              // returning from await.
              resp = $async$result;
              if ((resp == null ? null : resp.status) === 200)
                $._gaEnabled = value;
              else
                F._logWarning(resp, "api/setDevToolsEnabled", resp.responseText);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$setEnabled, $async$completer);
    },
    screen: function(screenName) {
      F.GTag_event(screenName, {event_category: "screen", value: 0, user_app: $._userAppType, user_build: $._userBuildType, user_platform: $._userPlatformType, devtools_platform: $._devtoolsPlatformType, devtools_chrome: $._devtoolsChrome, devtools_version: "0.2.5", ide_launched: $._ideLaunched, flutter_client_id: $._flutterClientId});
    },
    select: function(screenName, selectedItem, value) {
      F.GTag_event(screenName, {event_category: "select", event_label: selectedItem, value: value, user_app: $._userAppType, user_build: $._userBuildType, user_platform: $._userPlatformType, devtools_platform: $._devtoolsPlatformType, devtools_chrome: $._devtoolsChrome, devtools_version: "0.2.5", ide_launched: $._ideLaunched, flutter_client_id: $._flutterClientId});
    },
    error: function(errorMessage, fatal) {
      if ($._lastGaError == errorMessage)
        return;
      $._lastGaError = errorMessage;
      F.GTag_exception({description: errorMessage, fatal: fatal, user_app: $._userAppType, user_build: $._userBuildType, user_platform: $._userPlatformType, devtools_platform: $._devtoolsPlatformType, devtools_chrome: $._devtoolsChrome, devtools_version: "0.2.5", ide_launched: $._ideLaunched, flutter_client_id: $._flutterClientId});
    },
    computeUserApplicationCustomGTagData: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1, isFlutter, isWebApp, isProfile, $async$temp1, $async$temp2;
      var $async$computeUserApplicationCustomGTagData = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($._analyticsComputed) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.ServiceConnectionManager;
              $async$goto = 3;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isFlutterApp(), $async$computeUserApplicationCustomGTagData);
            case 3:
              // returning from await.
              isFlutter = $async$result;
              $async$goto = 4;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isDartWebApp(), $async$computeUserApplicationCustomGTagData);
            case 4:
              // returning from await.
              isWebApp = $async$result;
              $async$goto = 5;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isProfileBuild(), $async$computeUserApplicationCustomGTagData);
            case 5:
              // returning from await.
              isProfile = $async$result;
              H.boolConversionCheck(isFlutter);
              $async$goto = isFlutter ? 6 : 7;
              break;
            case 6:
              // then
              $async$temp1 = $;
              $async$temp2 = H;
              $async$goto = 8;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 24, 0)), $async$computeUserApplicationCustomGTagData);
            case 8:
              // returning from await.
              $async$temp1._userPlatformType = $async$temp2.boolConversionCheck($async$result) ? t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vm.operatingSystem : "unknown";
            case 7:
              // join
              if (isFlutter)
                $._userAppType = "flutter";
              if (H.boolConversionCheck(isWebApp))
                $._userAppType = "web";
              $._userBuildType = H.boolConversionCheck(isProfile) ? "profile" : "debug";
              $._analyticsComputed = true;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$computeUserApplicationCustomGTagData, $async$completer);
    },
    GtagEventDevTools: function GtagEventDevTools() {
    },
    GtagExceptionDevTools: function GtagExceptionDevTools() {
    },
    GTag_event: function(eventName, gaEvent) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$temp1;
      var $async$GTag_event = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 2;
              return P._asyncAwait(F.isEnabled(), $async$GTag_event);
            case 2:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result))
                self.gtag("event", eventName, gaEvent);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$GTag_event, $async$completer);
    },
    GTag_exception: function(gaException) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$temp1;
      var $async$GTag_exception = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 2;
              return P._asyncAwait(F.isEnabled(), $async$GTag_exception);
            case 2:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result))
                self.gtag("event", "exception", gaException);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$GTag_exception, $async$completer);
    },
    GtagEvent: function GtagEvent() {
    },
    GtagException: function GtagException() {
    },
    Logger_Logger: function($name) {
      return $.Logger__loggers.putIfAbsent$2(0, $name, new F.Logger_Logger_closure($name));
    },
    Logger: function Logger(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.parent = t1;
      _._level = null;
      _._children = t2;
      _.children = t3;
    },
    Logger_Logger_closure: function Logger_Logger_closure(t0) {
      this.name = t0;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    getSimplePackageUrl: function(url) {
      var flutterPrefixIndex = C.JSString_methods.indexOf$1(url, "packages/flutter/"),
        flutterWebPrefixIndex = C.JSString_methods.indexOf$1(url, "packages/flutter_web/");
      if (flutterPrefixIndex !== -1)
        return "package:" + C.JSString_methods.substring$1(url, flutterPrefixIndex + 9);
      else if (flutterWebPrefixIndex !== -1)
        return "package:" + C.JSString_methods.substring$1(url, flutterWebPrefixIndex + 9);
      return url;
    },
    normalizeVmServiceUri: function(value) {
      var uri;
      value = C.JSString_methods.trim$0(value);
      uri = P.Uri_parse(C.JSString_methods.trim$0(C.JSString_methods.contains$1(value, "%3A%2F%2F") ? P._Uri__uriDecode(value, 0, value.length, C.C_Utf8Codec, false) : value), 0, null).removeFragment$0();
      if (!uri.get$isAbsolute())
        return null;
      if (C.JSString_methods.endsWith$1(uri.get$path(uri), "/"))
        return uri;
      return uri.replace$1$path(0, uri.get$path(uri));
    },
    main0: function() {
      U.main();
    }
  },
  T = {
    allowedError: function(future, logError, $T) {
      return future.catchError$1(new T.allowedError_closure(logError));
    },
    allowedError_closure: function allowedError_closure(t0) {
      this.logError = t0;
    },
    EnumUtils$: function(enumValues, $T) {
      var t1 = type$.String;
      t1 = new T.EnumUtils(P.LinkedHashMap_LinkedHashMap$_empty(t1, $T), P.LinkedHashMap_LinkedHashMap$_empty($T, t1), $T._eval$1("EnumUtils<0>"));
      t1.EnumUtils$1(enumValues, $T);
      return t1;
    },
    EnumUtils: function EnumUtils(t0, t1, t2) {
      this._lookupTable = t0;
      this._reverseLookupTable = t1;
      this.$ti = t2;
    },
    InfoController: function InfoController(t0, t1, t2, t3) {
      var _ = this;
      _.onFlutterVersionChanged = t0;
      _.onFlagListChanged = t1;
      _.flutterVersionServiceAvailable = t2;
      _.AutoDisposeControllerMixin__delegate = t3;
    },
    InfoController__listenForFlutterVersionChanges_closure: function InfoController__listenForFlutterVersionChanges_closure(t0, t1) {
      this.$this = t0;
      this.flutterVersionServiceListenable = t1;
    },
    _InfoController_DisposableController_AutoDisposeControllerMixin: function _InfoController_DisposableController_AutoDisposeControllerMixin() {
    },
    HtmlInboundsTree: function HtmlInboundsTree(t0, t1, t2) {
      var _ = this;
      _._memoryScreen = t0;
      _.spinner = _.referencesTable = null;
      _.inboundsTree = t1;
      _.element = t2;
    },
    HtmlInboundsTree__init_closure: function HtmlInboundsTree__init_closure(t0) {
      this.$this = t0;
    },
    HtmlInboundsTree__init__closure: function HtmlInboundsTree__init__closure(t0, t1) {
      this._box_0 = t0;
      this.inboundNode = t1;
    },
    HtmlInboundsTree__init_closure0: function HtmlInboundsTree__init_closure0(t0) {
      this.$this = t0;
    },
    InboundsTreeData: function InboundsTreeData() {
      this.data = null;
    },
    InboundsTreeNode: function InboundsTreeNode(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html_memory_inbounds$_name = t0;
      _._instance = t1;
      _.fieldName = t2;
      _.instanceHashCode = t3;
      _.parent = null;
      _.children = t4;
      _.index = -1;
      _._depth = 0;
      _._trees$_level = _._trees$_root = null;
      _._trees$_isExpanded = false;
    },
    HtmlInstanceRefsView: function HtmlInstanceRefsView() {
    },
    ClassNameColumn: function ClassNameColumn(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.nodeExpandedController = t0;
      _.nodeCollapsedController = t1;
      _.title = t2;
      _.fixedWidthPx = t3;
      _.percentWidth = t4;
      _.alignment = t5;
    },
    FieldNameColumn: function FieldNameColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    FilteredLibraries_normalizeLibraryUri: function(library) {
      var firstPart = C.JSArray_methods.get$first(library.uri.split("/"));
      if (J.getInterceptor$s(firstPart).startsWith$1(firstPart, "dart:"))
        return "Dart";
      else if (C.JSString_methods.startsWith$1(firstPart, "package:flutter"))
        return "Flutter";
      else
        return firstPart;
    },
    MemoryController: function MemoryController(t0, t1, t2, t3) {
      var _ = this;
      _.settings = t0;
      _.libraryFilters = t1;
      _.libraryCollection = null;
      _._memoryTrackerController = t2;
      _._disconnectController = t3;
      _._memoryTracker = null;
    },
    MemoryController__handleConnectionStart_closure: function MemoryController__handleConnectionStart_closure(t0) {
      this.$this = t0;
    },
    MemoryController_startTimeline_closure: function MemoryController_startTimeline_closure(t0) {
      this.$this = t0;
    },
    MemoryController_getAllocationProfile_closure: function MemoryController_getAllocationProfile_closure() {
    },
    MemoryController_getAllocationProfile_closure0: function MemoryController_getAllocationProfile_closure0() {
    },
    MemoryController_getInstances_closure: function MemoryController_getInstances_closure(t0, t1) {
      this.classRef = t0;
      this.className = t1;
    },
    MemoryController_computeLibraries_closure: function MemoryController_computeLibraries_closure(t0) {
      this.$this = t0;
    },
    MemoryController_computeLibraries__closure: function MemoryController_computeLibraries__closure() {
    },
    MemoryController_computeLibraries__closure0: function MemoryController_computeLibraries__closure0(t0) {
      this.$this = t0;
    },
    MemoryController_computeLibraries___closure: function MemoryController_computeLibraries___closure(t0) {
      this.$this = t0;
    },
    SettingsModel: function SettingsModel() {
      this.pattern = "";
      this.hidePrivateClasses = true;
      this.experiment = false;
    },
    FilteredLibraries: function FilteredLibraries(t0) {
      this._filteredLibraries = t0;
    },
    LibraryCollection: function LibraryCollection(t0, t1, t2) {
      this._libraryFilters = t0;
      this.librarires = t1;
      this.displayClasses = t2;
    },
    LibraryCollection_computeDisplayClasses_closure: function LibraryCollection_computeDisplayClasses_closure(t0, t1) {
      this.$this = t0;
      this.librariesFiltered = t1;
    },
    MemoryTracker_getHeaps: function(isolate) {
      return J.map$1$1$ax(J.get$values$x(type$.Map_String_dynamic._as(J.$index$asx(isolate.json, "_heaps"))), new T.MemoryTracker_getHeaps_closure(), type$.HeapSpace);
    },
    MemoryTracker: function MemoryTracker(t0, t1, t2, t3) {
      var _ = this;
      _.service = t0;
      _._pollingTimer = null;
      _.samples = t1;
      _.isolateHeaps = t2;
      _.processRss = null;
      _._memory_protocol$_changeController = t3;
    },
    MemoryTracker__pollMemory_closure: function MemoryTracker__pollMemory_closure(t0) {
      this.$this = t0;
    },
    MemoryTracker__recalculate_closure: function MemoryTracker__recalculate_closure() {
    },
    MemoryTracker__recalculate_closure0: function MemoryTracker__recalculate_closure0() {
    },
    MemoryTracker__recalculate_closure1: function MemoryTracker__recalculate_closure1() {
    },
    MemoryTracker__recalculate_closure2: function MemoryTracker__recalculate_closure2() {
    },
    MemoryTracker_getHeaps_closure: function MemoryTracker_getHeaps_closure() {
    },
    ClassHeapDetailStats: function ClassHeapDetailStats(t0) {
      var _ = this;
      _.json = t0;
      _.bytesAccumulated = _.bytesCurrent = _.instancesAccumulated = _.instancesCurrent = 0;
      _.classRef = null;
    },
    InstanceSummary: function InstanceSummary(t0, t1, t2) {
      this.classRef = t0;
      this.className = t1;
      this.objectRef = t2;
    },
    SelfTimeColumn: function SelfTimeColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    TotalTimeColumn: function TotalTimeColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    MethodNameColumn: function MethodNameColumn(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.nodeExpandedController = t0;
      _.nodeCollapsedController = t1;
      _.title = t2;
      _.fixedWidthPx = t3;
      _.percentWidth = t4;
      _.alignment = t5;
    },
    SourceColumn: function SourceColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    CpuProfilerController: function CpuProfilerController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._dataNotifier = t0;
      _._processingNotifier = t1;
      _._selectedCpuStackFrameNotifier = t2;
      _.service = t3;
      _.transformer = t4;
    },
    CpuProfilerControllerProviderMixin: function CpuProfilerControllerProviderMixin() {
    },
    FramesBarChart$: function(timelineController) {
      var _null = null,
        t1 = new T.FramesBarChart(timelineController, type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "timeline-frames section section-border", _null, _null);
      t1.FramesBarChart$1(timelineController);
      return t1;
    },
    FramesBarChart: function FramesBarChart(t0, t1) {
      var _ = this;
      _.timelineController = t0;
      _.frameUIgraph = null;
      _._createdPlot = false;
      _.element = t1;
    },
    FramesBarChart_closure: function FramesBarChart_closure(t0) {
      this.$this = t0;
    },
    FramesBarChart_closure0: function FramesBarChart_closure0(t0) {
      this.$this = t0;
    },
    PlotlyDivGraph: function PlotlyDivGraph(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.timelineController = t0;
      _._frames = t1;
      _.dataIndexes = t2;
      _.uiDurations = t3;
      _.gpuDurations = t4;
      _.plotlyChart = null;
      _._frameIndex = 0;
      _._lastPlottedFrameIndex = -1;
      _.currentSelection = null;
      _.element = t5;
    },
    PlotlyDivGraph_createPlot_closure: function PlotlyDivGraph_createPlot_closure(t0) {
      this.$this = t0;
    },
    _FramesBarChart_CoreElement_HtmlSetStateMixin: function _FramesBarChart_CoreElement_HtmlSetStateMixin() {
    },
    ViewportCanvas$: function(classes, onMouseLeave, onMouseMove, onSizeChange, onTap, paintCallback) {
      var _null = null,
        t1 = new T.ViewportCanvas(paintCallback, onTap, onMouseMove, onMouseLeave, onSizeChange, P.LinkedHashMap_LinkedHashMap$_empty(type$._ChunkPosition, type$._CanvasChunk), A.CoreElement$("div", "flex", classes, _null, _null), A.CoreElement$("div", _null, _null, _null, _null), C.Rect_0_0_0_0);
      t1.ViewportCanvas$7$addBuffer$classes$onMouseLeave$onMouseMove$onSizeChange$onTap$paintCallback(true, classes, onMouseLeave, onMouseMove, onSizeChange, onTap, paintCallback);
      return t1;
    },
    _CanvasChunk: function _CanvasChunk(t0) {
      var _ = this;
      _.canvas = t0;
      _._context = null;
      _._empty = true;
      _._dirty = null;
      _.attached = false;
      _._lastFrameRendered = -1;
      _._viewport_canvas$_position = _.rect = null;
    },
    _ChunkPosition: function _ChunkPosition(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    ViewportCanvas: function ViewportCanvas(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._activeTouch = _._currentMouseHover = null;
      _._wasDraggedByTouch = false;
      _._frameId = 0;
      _._paintCallback = t0;
      _._viewport_canvas$_onTap = t1;
      _._onMouseMove = t2;
      _._onMouseLeave = t3;
      _._onSizeChange = t4;
      _._chunks = t5;
      _._viewport_canvas$_resizeObserver = null;
      _._viewport_canvas$_element = t6;
      _._content = t7;
      _._contentHeight = _._contentWidth = 0;
      _._contentSizeChanged = true;
      _._viewport_canvas$_hasPendingRebuild = false;
      _._renderedViewport = null;
      _._viewport = t8;
    },
    ViewportCanvas_closure: function ViewportCanvas_closure(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure0: function ViewportCanvas_closure0(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure1: function ViewportCanvas_closure1(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure2: function ViewportCanvas_closure2(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure3: function ViewportCanvas_closure3(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure4: function ViewportCanvas_closure4(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure5: function ViewportCanvas_closure5(t0) {
      this.$this = t0;
    },
    ViewportCanvas_closure6: function ViewportCanvas_closure6(t0) {
      this.$this = t0;
    },
    ViewportCanvas__scheduleRebuild_closure: function ViewportCanvas__scheduleRebuild_closure(t0) {
      this.$this = t0;
    },
    ViewportCanvas_scrollToRect_closure: function ViewportCanvas_scrollToRect_closure(t0, t1) {
      this.$this = t0;
      this.target = t1;
    },
    _ViewportCanvas_Object_HtmlSetStateMixin: function _ViewportCanvas_Object_HtmlSetStateMixin() {
    },
    ProfileGranularitySelector$: function(framework) {
      var _null = null,
        t1 = new T.ProfileGranularitySelector(framework),
        t2 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("select", _null)),
        t3 = new N.PSelect(t2);
      t3.CoreElement$5$attributes$classes$html$text("select", _null, "form-select", _null, _null);
      t3.clazz$1("select-sm");
      t3.clazz$1("button-bar-dropdown");
      t3.change$1(t1.get$_handleSelect());
      t2.title = 'Granularity of CPU profiling. For a finer-grained profile, choose "Profile granularity: high". Please read our documentation to understand the trade-offs associated with this setting.';
      t3.option$2$value("Profile granularity: low", "1000");
      t3.option$2$value("Profile granularity: medium", "250");
      t3.option$2$value("Profile granularity: high", "50");
      t1.selector = t3;
      type$.SelectElement._as(t2).selectedIndex = 1;
      return t1;
    },
    ProfileGranularitySelector: function ProfileGranularitySelector(t0) {
      this.framework = t0;
      this._selectedValue = this.selector = null;
    },
    FlutterVersion$_: function(channel, dartSdkVersion, engineRevision, frameworkCommitDate, frameworkRevision, repositoryUrl, version) {
      var t1 = new T.FlutterVersion(version, channel, repositoryUrl, frameworkRevision, frameworkCommitDate, engineRevision, dartSdkVersion, 0, 0, 0);
      t1.FlutterVersion$_$7$channel$dartSdkVersion$engineRevision$frameworkCommitDate$frameworkRevision$repositoryUrl$version(channel, dartSdkVersion, engineRevision, frameworkCommitDate, frameworkRevision, repositoryUrl, version);
      return t1;
    },
    FlutterVersion_FlutterVersion$parse: function(json) {
      var t1 = J.getInterceptor$asx(json),
        t2 = H._asStringS(t1.$index(json, "frameworkVersion")),
        t3 = H._asStringS(t1.$index(json, "channel")),
        t4 = H._asStringS(t1.$index(json, "repositoryUrl")),
        t5 = H._asStringS(t1.$index(json, "frameworkRevisionShort")),
        t6 = H._asStringS(t1.$index(json, "frameworkCommitDate")),
        t7 = H._asStringS(t1.$index(json, "engineRevisionShort"));
      return T.FlutterVersion$_(t3, H._asStringS(t1.$index(json, "dartSdkVersion")), t7, t6, t5, t4, t2);
    },
    FlutterVersion: function FlutterVersion(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.version = t0;
      _.channel = t1;
      _.repositoryUrl = t2;
      _.frameworkRevision = t3;
      _.frameworkCommitDate = t4;
      _.engineRevision = t5;
      _.dartSdkVersion = t6;
      _.major = t7;
      _.minor = t8;
      _.patch = t9;
    },
    FlutterVersion$__closure: function FlutterVersion$__closure() {
    },
    SemanticVersion: function SemanticVersion(t0, t1, t2) {
      this.major = t0;
      this.minor = t1;
      this.patch = t2;
    },
    BaseResponse: function BaseResponse() {
    },
    Intl_defaultLocale: function() {
      var zoneLocale = H._asStringS($.Zone__current.$index(0, C.Symbol_89P));
      return zoneLocale == null ? $.Intl__defaultLocale : zoneLocale;
    },
    Intl_verifiedLocale: function(newLocale, localeExists, onFailure) {
      var t1, _i, each;
      if (newLocale == null) {
        if (T.Intl_defaultLocale() == null)
          $.Intl__defaultLocale = "en_US";
        return T.Intl_verifiedLocale(T.Intl_defaultLocale(), localeExists, onFailure);
      }
      if (H.boolConversionCheck(localeExists.call$1(newLocale)))
        return newLocale;
      for (t1 = [T.Intl_canonicalizedLocale(newLocale), T.Intl_shortLocale(newLocale), "fallback"], _i = 0; _i < 3; ++_i) {
        each = t1[_i];
        if (H.boolConversionCheck(localeExists.call$1(each)))
          return each;
      }
      return onFailure.call$1(newLocale);
    },
    Intl__throwLocaleError: function(localeName) {
      throw H.wrapException(P.ArgumentError$('Invalid locale "' + localeName + '"'));
    },
    Intl_shortLocale: function(aLocale) {
      if (aLocale.length < 2)
        return aLocale;
      return C.JSString_methods.substring$2(aLocale, 0, 2).toLowerCase();
    },
    Intl_canonicalizedLocale: function(aLocale) {
      var t1, region;
      if (aLocale == null) {
        if (T.Intl_defaultLocale() == null)
          $.Intl__defaultLocale = "en_US";
        return T.Intl_defaultLocale();
      }
      if (aLocale === "C")
        return "en_ISO";
      if (aLocale.length < 5)
        return aLocale;
      t1 = aLocale[2];
      if (t1 !== "-" && t1 !== "_")
        return aLocale;
      region = C.JSString_methods.substring$1(aLocale, 3);
      if (region.length <= 3)
        region = region.toUpperCase();
      return aLocale[0] + aLocale[1] + "_" + region;
    },
    DateFormat_localeExists: function(localeName) {
      var t1;
      if (localeName == null)
        return false;
      t1 = $.$get$_dateTimeSymbols();
      t1.toString;
      return T.Intl_canonicalizedLocale(localeName) === "en_US" ? true : t1._throwException$0();
    },
    DateFormat__fieldConstructors: function() {
      return H.setRuntimeTypeInfo([new T.DateFormat__fieldConstructors_closure(), new T.DateFormat__fieldConstructors_closure0(), new T.DateFormat__fieldConstructors_closure1()], type$.JSArray_of__DateFormatField_Function_String_DateFormat);
    },
    _DateFormatQuotedField__patchQuotes: function(pattern) {
      var t1, t2;
      if (pattern === "''")
        return "'";
      else {
        t1 = J.substring$2$s(pattern, 1, pattern.length - 1);
        t2 = $.$get$_DateFormatQuotedField__twoEscapedQuotes();
        return H.stringReplaceAllUnchecked(t1, t2, "'");
      }
    },
    _dayOfYear: function(month, day, leapYear) {
      var t1, t2;
      if (month === 1)
        return day;
      if (month === 2)
        return day + 31;
      t1 = C.JSDouble_methods.floor$0(30.6 * month - 91.4);
      t2 = leapYear ? 1 : 0;
      return t1 + day + 59 + t2;
    },
    NumberFormat$decimalPattern: function() {
      var t3,
        t1 = T.Intl_verifiedLocale(null, T.intl_NumberFormat_localeExists$closure(), T.intl_Intl__throwLocaleError$closure()),
        t2 = new T.NumberFormat(t1, new P.StringBuffer(""));
      t1 = t2._symbols = $.$get$numberFormatSymbols().$index(0, t1);
      t3 = C.JSString_methods._codeUnitAt$1(t1.ZERO_DIGIT, 0);
      t2._localeZero = t3;
      t2._zeroOffset = t3 - 48;
      t2._negativePrefix = t1.MINUS_SIGN;
      t3 = t1.DEF_CURRENCY_CODE;
      t2.currencyName = t3;
      t2._setPattern$1(new T.NumberFormat$decimalPattern_closure().call$1(t1));
      return t2;
    },
    NumberFormat_localeExists: function(localeName) {
      if (localeName == null)
        return false;
      return $.$get$numberFormatSymbols().containsKey$1(0, localeName);
    },
    DateFormat: function DateFormat(t0) {
      var _ = this;
      _.dateTimeConstructor = t0;
      _._localeZero = _._localeZeroCodeUnit = _._useNativeDigits = _._formatFieldsPrivate = _._intl$_pattern = _._locale = null;
    },
    DateFormat_closure: function DateFormat_closure() {
    },
    DateFormat__fieldConstructors_closure: function DateFormat__fieldConstructors_closure() {
    },
    DateFormat__fieldConstructors_closure0: function DateFormat__fieldConstructors_closure0() {
    },
    DateFormat__fieldConstructors_closure1: function DateFormat__fieldConstructors_closure1() {
    },
    _DateFormatField: function _DateFormatField() {
    },
    _DateFormatLiteralField: function _DateFormatLiteralField(t0, t1) {
      this.pattern = t0;
      this.parent = t1;
    },
    _DateFormatQuotedField: function _DateFormatQuotedField(t0, t1) {
      this._fullPattern = null;
      this.pattern = t0;
      this.parent = t1;
    },
    _DateFormatPatternField: function _DateFormatPatternField(t0, t1) {
      this.pattern = t0;
      this.parent = t1;
    },
    NumberFormat: function NumberFormat(t0, t1) {
      var _ = this;
      _._negativePrefix = "-";
      _._positiveSuffix = _._negativeSuffix = _._positivePrefix = "";
      _._finalGroupingSize = _._groupingSize = 3;
      _._useExponentialNotation = _._useSignForPositiveExponent = _._decimalSeparatorAlwaysShown = _._groupingSizeSetExplicitly = false;
      _.maximumIntegerDigits = 40;
      _.minimumIntegerDigits = 1;
      _.maximumFractionDigits = 3;
      _.minimumExponentDigits = _.minimumFractionDigits = 0;
      _._internalMultiplier = 1;
      _._multiplierDigits = 0;
      _._intl$_pattern = null;
      _._locale = t0;
      _._decimalDigits = _._currencySymbol = _.currencyName = _._symbols = null;
      _._intl$_buffer = t1;
      _._zeroOffset = _._localeZero = 0;
    },
    NumberFormat$decimalPattern_closure: function NumberFormat$decimalPattern_closure() {
    },
    _NumberFormatParser: function _NumberFormatParser(t0, t1, t2) {
      var _ = this;
      _.format = t0;
      _.pattern = t1;
      _.currencySymbol = t2;
      _.inQuote = false;
      _.decimalPos = -1;
      _.digitRightCount = _.zeroDigitCount = _.digitLeftCount = 0;
      _.groupingCount = -1;
    },
    _StringIterable: function _StringIterable(t0) {
      this.iterator = t0;
    },
    _StringIterator: function _StringIterator(t0) {
      this.input = t0;
      this.nextIndex = 0;
      this._intl$_current = null;
    },
    Version_Version: function(major, minor, patch, build) {
      var text = H.S(major) + "." + H.S(minor) + "." + H.S(patch),
        t1 = build == null;
      if (!t1)
        text += "+" + build;
      t1 = t1 ? [] : T.Version__splitParts(build);
      if (typeof major !== "number")
        return major.$lt();
      if (major < 0)
        H.throwExpression(P.ArgumentError$("Major version must be non-negative."));
      if (typeof minor !== "number")
        return minor.$lt();
      if (minor < 0)
        H.throwExpression(P.ArgumentError$("Minor version must be non-negative."));
      if (typeof patch !== "number")
        return patch.$lt();
      if (patch < 0)
        H.throwExpression(P.ArgumentError$("Patch version must be non-negative."));
      return new T.Version0(major, minor, patch, [], t1, text);
    },
    Version__splitParts: function(text) {
      return new H.MappedListIterable(H.setRuntimeTypeInfo(text.split("."), type$.JSArray_String), type$.Object_Function_String._as(new T.Version__splitParts_closure()), type$.MappedListIterable_String_Object).toList$0(0);
    },
    Version0: function Version0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.patch = t2;
      _.preRelease = t3;
      _.build = t4;
      _._version$_text = t5;
    },
    Version__splitParts_closure: function Version__splitParts_closure() {
    },
    UuidUtil_mathRNG: function() {
      var b, rand, i,
        t1 = new Array(16);
      t1.fixed$length = Array;
      b = H.setRuntimeTypeInfo(t1, type$.JSArray_int);
      for (rand = null, i = 0; i < 16; ++i) {
        t1 = i & 3;
        if (t1 === 0)
          rand = C.JSInt_methods.toInt$0(C.JSNumber_methods.floor$0(C.C__JSRandom.nextDouble$0() * 4294967296));
        if (typeof rand !== "number")
          return rand.$shr();
        C.JSArray_methods.$indexSet(b, i, C.JSInt_methods._shrOtherPositive$1(rand, t1 << 3) & 255);
      }
      return b;
    }
  },
  E = {Notification: function Notification() {
      this._impl = null;
    },
    ensureInspectorServiceDependencies: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1;
      var $async$ensureInspectorServiceDependencies = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($._inspectorDependenciesLoaded) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $.Catalog__cachedCatalog;
              $async$goto = 3;
              return P._asyncAwait(t1 == null ? $.Catalog__cachedCatalog = S.Catalog__loadHelper() : t1, $async$ensureInspectorServiceDependencies);
            case 3:
              // returning from await.
              $._inspectorDependenciesLoaded = true;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$ensureInspectorServiceDependencies, $async$completer);
    },
    InspectorService$: function(vmService, inspectorLibrary, supportedServiceMethods) {
      var t1 = new E.InspectorService(vmService, P.LinkedHashSet_LinkedHashSet$_empty(type$.InspectorServiceClient), inspectorLibrary, P.LinkedHashMap_LinkedHashMap$_empty(type$.InspectorInstanceRef, type$.List_int), new K.Disposer(H.setRuntimeTypeInfo([], type$.JSArray_StreamSubscription_dynamic), H.setRuntimeTypeInfo([], type$.JSArray_Listenable), H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function)));
      t1.InspectorService$3(vmService, inspectorLibrary, supportedServiceMethods);
      return t1;
    },
    InspectorService_create: function(vmService) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InspectorService),
        $async$returnValue, inspectorLibrary, supportedServiceMethods, $async$temp1, $async$temp2;
      var $async$InspectorService_create = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              type$.VmServiceWrapper._as(vmService);
              inspectorLibrary = B.EvalOnDartLibrary$(C.List_BmV, vmService);
              $async$temp1 = E;
              $async$temp2 = inspectorLibrary;
              $async$goto = 5;
              return P._asyncAwait(inspectorLibrary._libraryRef.future.catchError$2$test(new E.InspectorService_create_closure(), new E.InspectorService_create_closure0()), $async$InspectorService_create);
            case 5:
              // returning from await.
              $async$goto = 4;
              return P._asyncAwait($async$temp2.getObjHelper$1$2($async$result, null, type$.Library), $async$InspectorService_create);
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait(new $async$temp1.InspectorService_create_lookupFunctionNames($async$result, inspectorLibrary).call$0(), $async$InspectorService_create);
            case 3:
              // returning from await.
              supportedServiceMethods = $async$result;
              if (supportedServiceMethods == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = E.InspectorService$(vmService, inspectorLibrary, supportedServiceMethods);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$InspectorService_create, $async$completer);
    },
    InspectorService: function InspectorService(t0, t1, t2, t3, t4) {
      var _ = this;
      _.vmService = t0;
      _.clients = t1;
      _.inspectorLibrary = t2;
      _._expectedSelectionChanges = t3;
      _._cachedSelectionGroups = _._currentSelection = null;
      _.AutoDisposeControllerMixin__delegate = t4;
    },
    InspectorService_closure: function InspectorService_closure(t0) {
      this.$this = t0;
    },
    InspectorService_create_closure: function InspectorService_create_closure() {
    },
    InspectorService_create_closure0: function InspectorService_create_closure0() {
    },
    InspectorService_create_lookupFunctionNames: function InspectorService_create_lookupFunctionNames(t0, t1) {
      this.library = t0;
      this.inspectorLibrary = t1;
    },
    InspectorService__trackClientSelfTriggeredSelection_closure: function InspectorService__trackClientSelfTriggeredSelection_closure() {
    },
    ObjectGroup: function ObjectGroup(t0, t1) {
      this.groupName = t0;
      this.inspectorService = t1;
      this.disposed = false;
    },
    ObjectGroup__callServiceExtension_closure: function ObjectGroup__callServiceExtension_closure(t0, t1, t2) {
      this.$this = t0;
      this.extension = t1;
      this.args = t2;
    },
    ObjectGroup_getDartObjectProperties_closure: function ObjectGroup_getDartObjectProperties_closure() {
    },
    FlutterTreeType: function FlutterTreeType(t0) {
      this._inspector_service$_name = t0;
    },
    InspectorServiceClient: function InspectorServiceClient() {
    },
    InspectorInstanceRef: function InspectorInstanceRef(t0) {
      this.id = t0;
    },
    InspectorObjectGroupManager: function InspectorObjectGroupManager(t0, t1) {
      var _ = this;
      _.inspectorService = t0;
      _.debugName = t1;
      _._pendingNext = _._inspector_service$_next = _._inspector_service$_current = null;
    },
    FlutterInspectorLibraryNotFound: function FlutterInspectorLibraryNotFound(t0) {
      this.candidateNames = t0;
    },
    _InspectorService_DisposableController_AutoDisposeControllerMixin: function _InspectorService_DisposableController_AutoDisposeControllerMixin() {
    },
    CanvasPaintEntry: function CanvasPaintEntry() {
    },
    IconPaintEntry0: function IconPaintEntry0(t0, t1) {
      this.iconRenderer = t0;
      this.x = t1;
    },
    IconPaintEntry_attach_closure: function IconPaintEntry_attach_closure(t0) {
      this.owner = t0;
    },
    IconPaintEntry_attach__closure: function IconPaintEntry_attach__closure() {
    },
    TextPaintEntry: function TextPaintEntry(t0, t1, t2, t3, t4) {
      var _ = this;
      _.width = t0;
      _.text = t1;
      _.color = t2;
      _.font = t3;
      _.x = t4;
    },
    InspectorTreeNodeRenderCanvasBuilder: function InspectorTreeNodeRenderCanvasBuilder(t0, t1, t2) {
      var _ = this;
      _.x = 0;
      _.color = _.font = _.lastStyle = null;
      _._inspector_tree_canvas$_entries = t0;
      _.level = t1;
      _.treeStyle = t2;
    },
    InspectorTreeNodeCanvasRender: function InspectorTreeNodeCanvasRender(t0, t1) {
      var _ = this;
      _.size = t0;
      _._owner = _._inspector_tree$_offset = null;
      _.entries = t1;
    },
    InspectorTreeNodeCanvas: function InspectorTreeNodeCanvas(t0) {
      var _ = this;
      _._renderObject = null;
      _._isDirty = true;
      _._shouldShow = null;
      _.selected = false;
      _._diagnostic = null;
      _._inspector_tree$_children = t0;
      _.allowExpandCollapse = _._isExpanded = true;
      _._childrenCount = _._inspector_tree$_parent = null;
    },
    InspectorTreeCanvas: function InspectorTreeCanvas(t0) {
      var _ = this;
      _._inspector_tree_canvas$_recomputeRows = false;
      _._inspector_tree_canvas$_viewportCanvas = null;
      _._computingHover = false;
      _.lastContentWidth = _._hover = _._config = _._selection = _._root = null;
      _.cachedRows = t0;
      _.currentHoverDiagnostic = null;
    },
    InspectorTreeCanvas_setState_closure: function InspectorTreeCanvas_setState_closure(t0) {
      this.$this = t0;
    },
    InspectorTreeCanvas_paintRow_isVisible: function InspectorTreeCanvas_paintRow_isVisible(t0, t1) {
      this._box_0 = t0;
      this.visible = t1;
    },
    InspectorTreeCanvas_paintRow__endPath: function InspectorTreeCanvas_paintRow__endPath(t0, t1) {
      this._box_0 = t0;
      this.canvas = t1;
    },
    InspectorTreeCanvas_paintRow__maybeStart: function InspectorTreeCanvas_paintRow__maybeStart(t0, t1, t2) {
      this._box_0 = t0;
      this._endPath = t1;
      this.canvas = t2;
    },
    _InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb: function _InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb() {
    },
    _InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController: function _InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController() {
    },
    _retrieveFullStringValue: function(service, isolateRef, stringRef) {
      return service.retrieveFullStringValue$3$onUnavailable(isolateRef.get$id(isolateRef), stringRef, new E._retrieveFullStringValue_closure(stringRef));
    },
    LoggingController__findFirstSummary: function(node) {
      var t1, t2, _i, summary;
      if (node.getLevelMember$2("level", C.DiagnosticLevel_3) === C.DiagnosticLevel_6)
        return node;
      if (node.get$inlineProperties() != null)
        for (t1 = node.get$inlineProperties(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          summary = E.LoggingController__findFirstSummary(t1[_i]);
          if (summary != null)
            return summary;
        }
      node._maybePopulateChildren$0();
      if (node._diagnostics_node$_children != null)
        for (node._maybePopulateChildren$0(), t1 = J.get$iterator$ax(node._diagnostics_node$_children); t1.moveNext$0();) {
          summary = E.LoggingController__findFirstSummary(t1.get$current(t1));
          if (summary != null)
            return summary;
        }
      return null;
    },
    _isNotNull: function(serviceRef) {
      return serviceRef != null && serviceRef.kind !== "Null";
    },
    _valueAsString: function(ref) {
      var t1;
      if (ref == null)
        return null;
      t1 = ref.valueAsString;
      if (t1 == null)
        return t1;
      if (ref.valueAsStringIsTruncated === true)
        return t1 + "...";
      else
        return t1;
    },
    LogData$: function(kind, _details, timestamp, detailsComputer, isError, node, summary, summaryHtml) {
      return new E.LogData(kind, timestamp, isError, summary, summaryHtml, node, _details, detailsComputer);
    },
    _retrieveFullStringValue_closure: function _retrieveFullStringValue_closure(t0) {
      this.stringRef = t0;
    },
    LoggingDetailsController: function LoggingDetailsController(t0, t1, t2) {
      var _ = this;
      _.data = null;
      _.onShowInspector = t0;
      _.onShowDetails = t1;
      _.createLoggingTree = t2;
      _.tree = null;
    },
    LoggingDetailsController_setData_closure: function LoggingDetailsController_setData_closure(t0) {
      this.$this = t0;
    },
    LoggingDetailsController_setData_closure0: function LoggingDetailsController_setData_closure0(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    LoggingController: function LoggingController(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._loggingTableModel = _.detailsController = null;
      _.isVisible = t0;
      _.onLogCountStatusChanged = t1;
      _._logStatusController = t2;
      _.inspectorService = null;
      _.data = t3;
      _._cachedFilteredData = null;
      _._logging_controller$_subscriptions = t4;
      _._lastScrollTime = null;
      _._hasPendingUiUpdates = false;
      _.onLogsUpdated = t5;
      _.objectGroup = null;
    },
    LoggingController_loggingTableModel_closure: function LoggingController_loggingTableModel_closure(t0) {
      this.$this = t0;
    },
    LoggingController_loggingTableModel_closure0: function LoggingController_loggingTableModel_closure0(t0) {
      this.$this = t0;
    },
    LoggingController__handleConnectionStart_closure: function LoggingController__handleConnectionStart_closure() {
    },
    LoggingController__handleConnectionStart_closure0: function LoggingController__handleConnectionStart_closure0() {
    },
    LoggingController__handleDeveloperLogEvent_closure: function LoggingController__handleDeveloperLogEvent_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.service = t0;
      _.e = t1;
      _.messageRef = t2;
      _.error = t3;
      _.stackTrace = t4;
    },
    LoggingController__handleBusEvents_closure: function LoggingController__handleBusEvents_closure(t0) {
      this.$this = t0;
    },
    LoggingController__handleBusEvents_closure0: function LoggingController__handleBusEvents_closure0(t0) {
      this.$this = t0;
    },
    LoggingController__handleBusEvents_closure1: function LoggingController__handleBusEvents_closure1() {
    },
    LoggingController__handleBusEvents_closure2: function LoggingController__handleBusEvents_closure2() {
    },
    _StdoutEventHandler: function _StdoutEventHandler(t0, t1, t2) {
      var _ = this;
      _.loggingController = t0;
      _.name = t1;
      _.isError = t2;
      _.timer = _.buffer = null;
    },
    _StdoutEventHandler_handle_closure: function _StdoutEventHandler_handle_closure(t0) {
      this.$this = t0;
    },
    LogData: function LogData(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.kind = t0;
      _.timestamp = t1;
      _.isError = t2;
      _.summary = t3;
      _.summaryHtml = t4;
      _.node = t5;
      _._details = t6;
      _.detailsComputer = t7;
    },
    LogKindColumn: function LogKindColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    LogWhenColumn: function LogWhenColumn(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    LogMessageColumn: function LogMessageColumn(t0, t1, t2, t3, t4) {
      var _ = this;
      _._logMessageToHtml = t0;
      _.title = t1;
      _.fixedWidthPx = t2;
      _.percentWidth = t3;
      _.alignment = t4;
    },
    CpuProfileData_parse: function(json) {
      var t3, t4, t5, t6, t7, t8,
        _s16_ = "timeOriginMicros",
        _s16_0 = "timeExtentMicros",
        t1 = J.getInterceptor$asx(json),
        t2 = t1.$index(json, "stackFrames");
      if (t2 == null) {
        t2 = type$.dynamic;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      }
      t3 = type$.Map_String_dynamic;
      t2 = t3._as(C.C_JsonCodec.decode$2$reviver(0, C.C_JsonCodec.encode$2$toEncodable(t2, null), null));
      t4 = t1.$index(json, "traceEvents");
      t3 = type$.List_Map_String_dynamic._as(J.cast$1$0$ax(t4 == null ? [] : t4, t3));
      t4 = t1.$index(json, "sampleCount");
      t4 = H._asIntS(t4 == null ? 0 : t4);
      t5 = H._asIntS(t1.$index(json, "samplePeriod"));
      t6 = H._asIntS(t1.$index(json, "stackDepth"));
      if (t1.$index(json, _s16_) != null && t1.$index(json, _s16_0) != null) {
        t7 = new B.TimeRange(true);
        t8 = P.Duration$(H._asIntS(t1.$index(json, _s16_)), 0);
        t7._utils$_start = t8;
        t1 = P.Duration$(H._asIntS(J.$add$ansx(t1.$index(json, _s16_), t1.$index(json, _s16_0))), 0);
        t7._utils$_end = t1;
        t1 = t7;
      } else
        t1 = null;
      t1 = new E.CpuProfileMetaData(t4, t5, t6, t1);
      t3 = new E.CpuProfileData(t2, t3, t1, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.CpuStackFrame));
      t3._cpuProfileRoot = E.CpuStackFrame$("Dart", "cpuProfile", "all", t1, "");
      return t3;
    },
    CpuStackFrame$: function(category, id, $name, profileMetaData, url) {
      return new E.CpuStackFrame(id, $name, category, url, profileMetaData, H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
    },
    CpuProfileData: function CpuProfileData(t0, t1, t2, t3) {
      var _ = this;
      _.processed = false;
      _.stackFramesJson = t0;
      _.stackTraceEvents = t1;
      _.profileMetaData = t2;
      _._cpuProfileRoot = null;
      _.stackFrames = t3;
    },
    CpuProfileMetaData: function CpuProfileMetaData(t0, t1, t2, t3) {
      var _ = this;
      _.sampleCount = t0;
      _.samplePeriod = t1;
      _.stackDepth = t2;
      _.time = t3;
    },
    CpuStackFrame: function CpuStackFrame(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.name = t1;
      _.category = t2;
      _.url = t3;
      _.profileMetaData = t4;
      _.exclusiveSampleCount = 0;
      _.parent = _._selfTime = _._selfTimeRatio = _._totalTime = _._totalTimeRatio = _._inclusiveSampleCount = null;
      _.children = t5;
      _.index = -1;
      _._depth = 0;
      _._trees$_level = _._trees$_root = null;
      _._trees$_isExpanded = false;
    },
    ToggleableServiceExtensionDescription$_: function(description, disabledTooltip, disabledValue, enabledTooltip, enabledValue, extension, gaItem, gaScreenName, icon, $T) {
      var t1 = H.setRuntimeTypeInfo([enabledTooltip, disabledTooltip], type$.JSArray_String),
        t2 = [enabledValue, disabledValue],
        t3 = H._arrayInstanceType(t2);
      t3 = new H.MappedListIterable(t2, t3._eval$1("String(1)")._as(new E.ServiceExtensionDescription_closure(type$.dynamic)), t3._eval$1("MappedListIterable<1,String>")).toList$0(0);
      return new E.ToggleableServiceExtensionDescription(extension, description, icon, t2, t3, t1, gaScreenName, gaItem, $T._eval$1("ToggleableServiceExtensionDescription<0>"));
    },
    ServiceExtensionDescription$: function(description, displayValues, extension, gaItem, gaScreenName, icon, tooltips, values, $T) {
      var t1;
      if (displayValues == null) {
        t1 = H._arrayInstanceType(values);
        t1 = new H.MappedListIterable(values, t1._eval$1("String(1)")._as(new E.ServiceExtensionDescription_closure($T)), t1._eval$1("MappedListIterable<1,String>")).toList$0(0);
      } else
        t1 = displayValues;
      return new E.ServiceExtensionDescription(extension, description, icon, values, t1, tooltips, gaScreenName, gaItem, $T._eval$1("ServiceExtensionDescription<0>"));
    },
    ToggleableServiceExtensionDescription: function ToggleableServiceExtensionDescription(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.extension = t0;
      _.description = t1;
      _.icon = t2;
      _.values = t3;
      _.displayValues = t4;
      _.tooltips = t5;
      _.gaScreenName = t6;
      _.gaItem = t7;
      _.$ti = t8;
    },
    ServiceExtensionDescription: function ServiceExtensionDescription(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.extension = t0;
      _.description = t1;
      _.icon = t2;
      _.values = t3;
      _.displayValues = t4;
      _.tooltips = t5;
      _.gaScreenName = t6;
      _.gaItem = t7;
      _.$ti = t8;
    },
    ServiceExtensionDescription_closure: function ServiceExtensionDescription_closure(t0) {
      this.T = t0;
    },
    closure: function closure() {
    },
    closure0: function closure0() {
    },
    computeDevToolsCustomGTagsData: function() {
      var splits, len, index, value, t1,
        platform = window.navigator.platform;
      platform.toString;
      H.stringReplaceAllUnchecked(platform, " ", "_");
      $._devtoolsPlatformType = platform;
      splits = window.navigator.appVersion.split(" ");
      len = splits.length;
      for (index = 0; index < len; ++index) {
        value = splits[index];
        if (J.getInterceptor$s(value).startsWith$1(value, "Chrome/") || C.JSString_methods.startsWith$1(value, "Crios/"))
          $._devtoolsChrome = value;
        else if (C.JSString_methods.startsWith$1(value, "Android")) {
          t1 = index + 1;
          if (t1 >= len)
            return H.ioore(splits, t1);
          $._devtoolsPlatformType = "Android_" + H.S(splits[t1]);
        } else if (value === "CrOS")
          $._devtoolsPlatformType = "CrOS_" + platform;
      }
    },
    computeFlutterClientId: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$temp1;
      var $async$computeFlutterClientId = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $;
              $async$goto = 2;
              return P._asyncAwait(F.flutterGAClientID(), $async$computeFlutterClientId);
            case 2:
              // returning from await.
              $async$temp1._flutterClientId = $async$result;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$computeFlutterClientId, $async$completer);
    },
    waitForDimensionsComputed: function(screenName) {
      P.Timer_Timer(C.Duration_100000, new E.waitForDimensionsComputed_closure(screenName));
    },
    setupAndGaScreen: function(screenName) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic);
      var $async$setupAndGaScreen = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (H.boolConversionCheck(self.gtagsEnabled()))
                if (!$._analyticsComputed) {
                  $._stillWaiting = $._stillWaiting + 1;
                  E.waitForDimensionsComputed(screenName);
                } else
                  F.screen(screenName);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$setupAndGaScreen, $async$completer);
    },
    setupDimensions: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        ideValue;
      var $async$setupDimensions = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp != null && H.boolConversionCheck(self.gtagsEnabled()) && !$._analyticsComputed && !$._computing ? 2 : 3;
              break;
            case 2:
              // then
              $._computing = true;
              $async$goto = 4;
              return P._asyncAwait(F.computeUserApplicationCustomGTagData(), $async$setupDimensions);
            case 4:
              // returning from await.
              E.computeDevToolsCustomGTagsData();
              $._ideLaunched = "CLI";
              ideValue = P.Uri_parse(J.toString$0$(window.location), 0, null).get$queryParameters().$index(0, "ide");
              if (ideValue != null)
                $._ideLaunched = ideValue;
              E.computeFlutterClientId();
              $._analyticsComputed = true;
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$setupDimensions, $async$completer);
    },
    waitForDimensionsComputed_closure: function waitForDimensionsComputed_closure(t0) {
      this.screenName = t0;
    },
    HeapSample: function HeapSample(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.timestamp = t0;
      _.rss = t1;
      _.capacity = t2;
      _.used = t3;
      _.external = t4;
      _.isGC = t5;
      _._adbMemoryInfo = null;
    },
    BaseClient: function BaseClient() {
    },
    ClientException: function ClientException(t0) {
      this.message = t0;
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    WebSocketChannelException: function WebSocketChannelException(t0) {
      this.message = t0;
    },
    FrameworkCore_initVmService: function(url, errorReporter, explicitUri) {
      return E.FrameworkCore_initVmService$body(url, errorReporter, explicitUri);
    },
    FrameworkCore_initVmService$body: function(url, errorReporter, explicitUri) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], uri, finishedCompleter, service, e, st, exception, t1, $async$exception;
      var $async$FrameworkCore_initVmService = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              if (t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection()) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              uri = explicitUri == null ? E.FrameworkCore__getUriFromQuerystring(url) : explicitUri;
              $async$goto = uri != null ? 3 : 5;
              break;
            case 3:
              // then
              finishedCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
              $async$handler = 7;
              $async$goto = 10;
              return P._asyncAwait(R.connect(uri, finishedCompleter), $async$FrameworkCore_initVmService);
            case 10:
              // returning from await.
              service = $async$result;
              $async$goto = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)) != null ? 11 : 13;
              break;
            case 11:
              // then
              $async$goto = 14;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vmServiceOpened$2$onClosed(service, finishedCompleter.future), $async$FrameworkCore_initVmService);
            case 14:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              errorReporter.call$2("Unable to connect to VM service at " + H.S(uri), null);
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // join
              $async$handler = 2;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              st = H.getTraceFromException($async$exception);
              B.log(H.S(e) + "\n" + H.S(st), C.LogLevel_2);
              errorReporter.call$2("Unable to connect to VM service at " + H.S(uri) + ": " + H.S(e), e);
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 9:
              // after finally
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$FrameworkCore_initVmService, $async$completer);
    },
    FrameworkCore__getUriFromQuerystring: function($location) {
      var uri, t1, port, _null = null,
        queryParams = P.Uri_parse($location, 0, _null).get$queryParameters();
      if (queryParams.$index(0, "uri") != null) {
        uri = P.Uri_tryParse(queryParams.$index(0, "uri"));
        if (uri != null)
          if (uri.get$isAbsolute())
            t1 = uri.isScheme$1("ws") || uri.isScheme$1("wss") || uri.isScheme$1("http") || uri.isScheme$1("https") || uri.isScheme$1("sse") || uri.isScheme$1("sses");
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return uri;
      }
      t1 = queryParams.$index(0, "port");
      port = H.Primitives_parseInt(t1 == null ? "" : t1, _null);
      if (port != null)
        return P.Uri_parse("ws://localhost:" + H.S(port) + "/ws", 0, _null);
      return _null;
    }
  },
  L = {ConnectedApp: function ConnectedApp() {
      this._isDartWebApp = this._isProfileBuild = this._isFlutterApp = null;
    },
    DevToolsServerConnection$_: function(sseClient) {
      var t1 = new L.DevToolsServerConnection(sseClient, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Completer_dynamic));
      t1.DevToolsServerConnection$_$1(sseClient);
      return t1;
    },
    DevToolsServerConnection_connect: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.DevToolsServerConnection),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], response, e, exception, baseUri, t1, uri, $async$exception;
      var $async$DevToolsServerConnection_connect = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              baseUri = P.Uri_base();
              t1 = baseUri.get$scheme();
              uri = P._Uri__Uri(baseUri.get$host(baseUri), "/api/ping", baseUri.get$port(baseUri), null, t1);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(G.get(uri).timeout$1(0, C.Duration_1000000), $async$DevToolsServerConnection_connect);
            case 7:
              // returning from await.
              response = $async$result;
              if (response.statusCode !== 200) {
                B.log("devtools server not available (" + H.S(response.statusCode) + ")", C.LogLevel_0);
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              B.log("devtools server not available (" + H.S(e) + ")", C.LogLevel_0);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = L.DevToolsServerConnection$_(M.SseClient$("/api/sse"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$DevToolsServerConnection_connect, $async$completer);
    },
    DevToolsServerConnection: function DevToolsServerConnection(t0, t1) {
      var _ = this;
      _.sseClient = t0;
      _._nextRequestId = 0;
      _._lastNotification = null;
      _._server_api_client$_completers = t1;
    },
    DevToolsServerConnection$__closure: function DevToolsServerConnection$__closure(t0) {
      this.$this = t0;
    },
    DevToolsServerConnection_initFrameworkController_closure: function DevToolsServerConnection_initFrameworkController_closure(t0) {
      this.$this = t0;
    },
    DevToolsServerConnection_initFrameworkController_closure0: function DevToolsServerConnection_initFrameworkController_closure0(t0) {
      this.$this = t0;
    },
    DevToolsServerConnection_initFrameworkController_closure1: function DevToolsServerConnection_initFrameworkController_closure1(t0) {
      this.$this = t0;
    },
    TraceEvent$: function(json) {
      var t1 = J.getInterceptor$asx(json);
      return new L.TraceEvent(json, H._asStringS(t1.$index(json, "name")), H._asStringS(t1.$index(json, "cat")), H._asStringS(t1.$index(json, "ph")), H._asIntS(t1.$index(json, "pid")), H._asIntS(t1.$index(json, "tid")), H._asIntS(t1.$index(json, "dur")), H._asIntS(t1.$index(json, "ts")), type$.Map_String_dynamic._as(t1.$index(json, "args")));
    },
    TraceEventWrapper$: function($event, timeReceived) {
      var t1 = $._traceEventWrapperId;
      $._traceEventWrapperId = t1 + 1;
      return new L.TraceEventWrapper($event, timeReceived, t1);
    },
    TraceEvent: function TraceEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.json = t0;
      _.name = t1;
      _.category = t2;
      _.phase = t3;
      _.processId = t4;
      _.threadId = t5;
      _.duration = t6;
      _.timestampMicros = t7;
      _.args = t8;
      _._type = null;
    },
    TraceEventWrapper: function TraceEventWrapper(t0, t1, t2) {
      this.event = t0;
      this.timeReceived = t1;
      this.id = t2;
    },
    TimelineEventType: function TimelineEventType(t0, t1) {
      this.index = t0;
      this._trace_event$_name = t1;
    },
    HeapSpace$_fromJson: function(json) {
      var t1 = J.getInterceptor$asx(json);
      return new L.HeapSpace(json, H._asDoubleS(t1.$index(json, "avgCollectionPeriodMillis")), H._asIntS(t1.$index(json, "capacity")), H._asIntS(t1.$index(json, "collections")), H._asIntS(t1.$index(json, "external")), H._asStringS(t1.$index(json, "name")), H._asDoubleS(t1.$index(json, "time")), H._asIntS(t1.$index(json, "used")));
    },
    HeapSpace: function HeapSpace(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.json = t0;
      _.avgCollectionPeriodMillis = t1;
      _.capacity = t2;
      _.collections = t3;
      _.external = t4;
      _.name = t5;
      _.time = t6;
      _.used = t7;
    },
    LogRecord0: function LogRecord0(t0, t1, t2, t3) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.loggerName = t2;
      _.time = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    Browser_getCurrentBrowser: function() {
      return C.JSArray_methods.firstWhere$2$orElse($.$get$Browser__knownBrowsers(), new L.Browser_getCurrentBrowser_closure(), new L.Browser_getCurrentBrowser_closure0());
    },
    Browser$: function($name, matchesNavigator, parseVersion, className) {
      return new L.Browser($name, matchesNavigator, parseVersion);
    },
    _Chrome__isChrome: function($navigator) {
      var vendor;
      type$.NavigatorProvider._as($navigator).toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Google");
    },
    _Chrome__getVersion: function($navigator) {
      var t1, match, major, minor, patch, _null = null;
      type$.NavigatorProvider._as($navigator);
      t1 = P.RegExp_RegExp("Chrome/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\s", false);
      $navigator.toString;
      match = t1.firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1], _null, _null);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        minor = P.int_parse(t1[2], _null, _null);
        if (3 >= t1.length)
          return H.ioore(t1, 3);
        patch = P.int_parse(t1[3], _null, _null);
        if (4 >= t1.length)
          return H.ioore(t1, 4);
        return T.Version_Version(major, minor, patch, t1[4]);
      } else
        return T.Version_Version(0, 0, 0, _null);
    },
    _Firefox__isFirefox: function($navigator) {
      type$.NavigatorProvider._as($navigator).toString;
      return J.contains$1$asx(window.navigator.userAgent, "Firefox");
    },
    _Firefox__getVersion: function($navigator) {
      var t1, major, _null = null;
      type$.NavigatorProvider._as($navigator);
      t1 = P.RegExp_RegExp("rv:(\\d+)\\.(\\d+)\\)", false);
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.userAgent)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1], _null, _null);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return T.Version_Version(major, P.int_parse(t1[2], _null, _null), 0, _null);
    },
    _Safari__isSafari: function($navigator) {
      var vendor;
      type$.NavigatorProvider._as($navigator).toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Apple") && J.contains$1$asx(window.navigator.appVersion, "Version");
    },
    _Safari__getVersion: function($navigator) {
      var t1, major, t2, minor, _null = null;
      type$.NavigatorProvider._as($navigator);
      t1 = P.RegExp_RegExp("Version/(\\d+)(\\.(\\d+))?(\\.(\\d+))?", false);
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.appVersion)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1], _null, _null);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t2 = t1[3];
      minor = P.int_parse(t2 == null ? "0" : t2, _null, _null);
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      t1 = t1[5];
      return T.Version_Version(major, minor, P.int_parse(t1 == null ? "0" : t1, _null, _null), _null);
    },
    _WKWebView__isWKWebView: function($navigator) {
      var vendor;
      type$.NavigatorProvider._as($navigator).toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Apple") && !J.contains$1$asx(window.navigator.appVersion, "Version");
    },
    _WKWebView__getVersion: function($navigator) {
      var t1, major, minor, _null = null;
      type$.NavigatorProvider._as($navigator);
      t1 = P.RegExp_RegExp("AppleWebKit/(\\d+)\\.(\\d+)\\.(\\d+)", false);
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.appVersion)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1], _null, _null);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      minor = P.int_parse(t1[2], _null, _null);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      return T.Version_Version(major, minor, P.int_parse(t1[3], _null, _null), _null);
    },
    _InternetExplorer__isInternetExplorer: function($navigator) {
      type$.NavigatorProvider._as($navigator).toString;
      return J.contains$1$asx(window.navigator.appName, "Microsoft") || J.contains$1$asx(window.navigator.appVersion, "Trident") || J.contains$1$asx(window.navigator.appVersion, "Edge");
    },
    _InternetExplorer__getVersion: function($navigator) {
      var t1, match, major, _null = null;
      type$.NavigatorProvider._as($navigator);
      t1 = P.RegExp_RegExp("MSIE (\\d+)\\.(\\d+);", false);
      $navigator.toString;
      match = t1.firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1], _null, _null);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2], _null, _null), 0, _null);
      }
      match = P.RegExp_RegExp("rv[: ](\\d+)\\.(\\d+)", false).firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1], _null, _null);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2], _null, _null), 0, _null);
      }
      match = P.RegExp_RegExp("Edge/(\\d+)\\.(\\d+)$", false).firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1], _null, _null);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2], _null, _null), 0, _null);
      }
      return T.Version_Version(0, 0, 0, _null);
    },
    Browser: function Browser(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    },
    Browser_getCurrentBrowser_closure: function Browser_getCurrentBrowser_closure() {
    },
    Browser_getCurrentBrowser_closure0: function Browser_getCurrentBrowser_closure0() {
    },
    _Chrome: function _Chrome(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    },
    _Firefox: function _Firefox(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    },
    _Safari: function _Safari(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    },
    _WKWebView: function _WKWebView(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    },
    _InternetExplorer: function _InternetExplorer(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._matchesNavigator = t1;
      _._parseVersion = t2;
      _._version = null;
    }
  },
  A = {BusEvent: function BusEvent(t0, t1) {
      this.type = t0;
      this.data = t1;
    }, MessageBus: function MessageBus() {
      this._controller = null;
    }, MessageBus_onEvent_closure: function MessageBus_onEvent_closure(t0) {
      this.type = t0;
    },
    HtmlConnectDialog$: function(framework) {
      var t1 = new A.HtmlConnectDialog(framework);
      t1.HtmlConnectDialog$1(framework);
      return t1;
    },
    HtmlAnalyticsOptInDialog$: function(framework) {
      var t1 = new A.HtmlAnalyticsOptInDialog();
      t1.HtmlAnalyticsOptInDialog$1(framework);
      return t1;
    },
    HtmlFramework: function HtmlFramework() {
    },
    HtmlFramework__initDragDrop_closure: function HtmlFramework__initDragDrop_closure(t0) {
      this.$this = t0;
    },
    HtmlFramework__initDragDrop_closure0: function HtmlFramework__initDragDrop_closure0(t0) {
      this.$this = t0;
    },
    HtmlFramework__onDrop_closure: function HtmlFramework__onDrop_closure(t0, t1) {
      this.$this = t0;
      this.reader = t1;
    },
    HtmlFramework__importTimeline_closure: function HtmlFramework__importTimeline_closure() {
    },
    HtmlFramework__importTimeline_closure0: function HtmlFramework__importTimeline_closure0() {
    },
    HtmlFramework_exitOfflineMode_closure: function HtmlFramework_exitOfflineMode_closure() {
    },
    HtmlFramework__hookupShortcuts_closure: function HtmlFramework__hookupShortcuts_closure(t0) {
      this.$this = t0;
    },
    HtmlFramework_loadScreenFromLocation_closure: function HtmlFramework_loadScreenFromLocation_closure(t0) {
      this.$this = t0;
    },
    HtmlFramework_loadScreenFromLocation__closure: function HtmlFramework_loadScreenFromLocation__closure() {
    },
    HtmlFramework_loadScreenFromLocation__closure0: function HtmlFramework_loadScreenFromLocation__closure0(t0) {
      this.$this = t0;
    },
    HtmlFramework_getScreen_closure: function HtmlFramework_getScreen_closure(t0, t1) {
      this.id = t0;
      this.onlyEnabled = t1;
    },
    HtmlFramework_getScreen_closure0: function HtmlFramework_getScreen_closure0() {
    },
    HtmlFramework_load_closure: function HtmlFramework_load_closure(t0) {
      this.$this = t0;
    },
    HtmlFramework_load__closure: function HtmlFramework_load__closure(t0) {
      this.$this = t0;
    },
    HtmlStatusLine: function HtmlStatusLine(t0, t1, t2) {
      this.element = t0;
      this._html_framework$_items = t1;
      this._defaultStatusItems = t2;
    },
    HtmlActionsContainer: function HtmlActionsContainer(t0, t1) {
      this.element = t0;
      this._actions = t1;
    },
    HtmlActionsContainer_removeAction_closure: function HtmlActionsContainer_removeAction_closure(t0) {
      this.id = t0;
    },
    HtmlScreen: function HtmlScreen() {
    },
    HtmlSetStateMixin: function HtmlSetStateMixin() {
    },
    HtmlSetStateMixin_setState_closure: function HtmlSetStateMixin_setState_closure(t0) {
      this.rebuild = t0;
    },
    HtmlStatusItem: function HtmlStatusItem(t0) {
      this.element = t0;
    },
    HtmlToast: function HtmlToast(t0, t1, t2) {
      var _ = this;
      _.title = t0;
      _.message = t1;
      _.toastAnimator = null;
      _.element = t2;
    },
    HtmlToastAnimator: function HtmlToastAnimator(t0) {
      this.element = t0;
    },
    HtmlToastAnimator_show_closure: function HtmlToastAnimator_show_closure(t0, t1) {
      this.$this = t0;
      this.hideDelay = t1;
    },
    HtmlConnectDialog: function HtmlConnectDialog(t0) {
      var _ = this;
      _.framework = t0;
      _.connectButton = _.textfield = _.parent = null;
    },
    HtmlConnectDialog_closure: function HtmlConnectDialog_closure(t0) {
      this.$this = t0;
    },
    HtmlConnectDialog_closure0: function HtmlConnectDialog_closure0(t0) {
      this.$this = t0;
    },
    HtmlConnectDialog__tryConnect_handleConnectError: function HtmlConnectDialog__tryConnect_handleConnectError(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    HtmlConnectDialog__tryConnect_closure: function HtmlConnectDialog__tryConnect_closure(t0) {
      this.handleConnectError = t0;
    },
    HtmlConnectDialog__tryConnect_closure0: function HtmlConnectDialog__tryConnect_closure0(t0) {
      this.handleConnectError = t0;
    },
    HtmlConnectDialog__connect_closure: function HtmlConnectDialog__connect_closure() {
    },
    HtmlSnapshotMessage: function HtmlSnapshotMessage() {
      this.parent = null;
    },
    HtmlAnalyticsOptInDialog: function HtmlAnalyticsOptInDialog() {
      this.dontAcceptButton = this.acceptButton = this.parent = null;
    },
    HtmlAnalyticsOptInDialog_closure: function HtmlAnalyticsOptInDialog_closure(t0) {
      this.$this = t0;
    },
    HtmlAnalyticsOptInDialog_closure0: function HtmlAnalyticsOptInDialog_closure0(t0) {
      this.$this = t0;
    },
    HtmlPopupListView$: function($T) {
      var t1 = new A.HtmlPopupListView($T._eval$1("HtmlPopupListView<0>"));
      t1.HtmlPopupListView$0($T);
      return t1;
    },
    ListDirection0: function ListDirection0(t0) {
      this._html_popup$_name = t0;
    },
    HtmlPopupListView: function HtmlPopupListView(t0) {
      var _ = this;
      _.highlightedItem = _.items = _._popupAutoCompleteView = null;
      _.$ti = t0;
    },
    HtmlPopupListView_closure: function HtmlPopupListView_closure(t0, t1) {
      this.$this = t0;
      this.T = t1;
    },
    HtmlPopupListView_setList_closure: function HtmlPopupListView_setList_closure(t0) {
      this.$this = t0;
    },
    HtmlPopupAutoCompleteView: function HtmlPopupAutoCompleteView(t0, t1, t2, t3, t4) {
      var _ = this;
      _._listView = t0;
      _._containerElement = t1;
      _._html_popup$_popupTextfield = t2;
      _._html_popup$_matcher = null;
      _._completeAction = t3;
      _.element = t4;
    },
    HtmlPopupAutoCompleteView__initialize_closure: function HtmlPopupAutoCompleteView__initialize_closure(t0) {
      this.$this = t0;
    },
    HtmlPopupAutoCompleteView__initialize_closure0: function HtmlPopupAutoCompleteView__initialize_closure0(t0) {
      this.$this = t0;
    },
    HtmlPopupAutoCompleteView__initialize__closure: function HtmlPopupAutoCompleteView__initialize__closure(t0) {
      this.$this = t0;
    },
    HtmlPopupAutoCompleteView__initialize_closure1: function HtmlPopupAutoCompleteView__initialize_closure1(t0) {
      this.$this = t0;
    },
    HtmlPopupAutoCompleteView__hookupListeners_closure: function HtmlPopupAutoCompleteView__hookupListeners_closure(t0) {
      this.$this = t0;
    },
    HtmlAutoCompleteMatcher: function HtmlAutoCompleteMatcher(t0, t1) {
      var _ = this;
      _._html_popup$_originalScrollTop = _._html_popup$_original = _._textField = _._listView = null;
      _.matchingState = t0;
      _._html_popup$_selectRow = -1;
      _._html_popup$_finishCallback = _._html_popup$_subscription = null;
      _.$ti = t1;
    },
    HtmlAutoCompleteMatcher_start_closure: function HtmlAutoCompleteMatcher_start_closure(t0, t1) {
      this.$this = t0;
      this.listView = t1;
    },
    HtmlAutoCompleteMatcher_reset_closure: function HtmlAutoCompleteMatcher_reset_closure(t0, t1) {
      this.$this = t0;
      this.originals = t1;
    },
    HtmlAutoCompleteMatcher__startMatching_closure: function HtmlAutoCompleteMatcher__startMatching_closure(t0) {
      this.$this = t0;
    },
    HtmlAutoCompleteMatcher_displayMatchingItems_closure: function HtmlAutoCompleteMatcher_displayMatchingItems_closure(t0, t1) {
      this.$this = t0;
      this.charsToMatch = t1;
    },
    HtmlAutoCompleteMatcher_displayMatchingItems_closure0: function HtmlAutoCompleteMatcher_displayMatchingItems_closure0(t0, t1) {
      this.$this = t0;
      this.matchingItems = t1;
    },
    HtmlMemoryDataView$: function(_memoryController, variableDescriber) {
      var t1 = new A.HtmlMemoryDataView(_memoryController);
      t1.HtmlMemoryDataView$2(_memoryController, variableDescriber);
      return t1;
    },
    HtmlMemoryDataView: function HtmlMemoryDataView(t0) {
      this._html_memory_data_view$_memoryController = t0;
      this._html_memory_data_view$_items = null;
    },
    HtmlMemoryDataView_closure: function HtmlMemoryDataView_closure(t0) {
      this.variableDescriber = t0;
    },
    HtmlMemoryDataView__closure: function HtmlMemoryDataView__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.variableDescriber = t1;
      _.field = t2;
      _.element = t3;
    },
    HtmlMemoryDataView___closure: function HtmlMemoryDataView___closure(t0) {
      this.element = t0;
    },
    MemoryDataChildProvider: function MemoryDataChildProvider(t0) {
      this._html_memory_data_view$_memoryController = t0;
    },
    HtmlCpuProfiler: function HtmlCpuProfiler() {
    },
    HtmlCpuProfiler_closure: function HtmlCpuProfiler_closure(t0) {
      this.$this = t0;
    },
    HtmlCpuProfiler__removeMessage_closure: function HtmlCpuProfiler__removeMessage_closure() {
    },
    HtmlCpuProfilerView: function HtmlCpuProfilerView() {
    },
    CpuProfilerViewType: function CpuProfilerViewType(t0) {
      this._html_cpu_profiler$_name = t0;
    },
    HtmlCpuProfilerTabNav: function HtmlCpuProfilerTabNav(t0, t1, t2) {
      var _ = this;
      _.cpuProfiler = t0;
      _.tabOrder = t1;
      _.treeTableToolbar = t2;
      _.selectedTab = _._html_cpu_profiler$_tabNav = null;
    },
    HtmlCpuProfilerTabNav__init_closure: function HtmlCpuProfilerTabNav__init_closure(t0) {
      this.$this = t0;
    },
    HtmlCpuProfilerTabNav__init_closure0: function HtmlCpuProfilerTabNav__init_closure0(t0) {
      this.$this = t0;
    },
    HtmlCpuProfilerTabNav__init_closure1: function HtmlCpuProfilerTabNav__init_closure1(t0) {
      this.$this = t0;
    },
    HtmlCpuProfilerTabNav__init_closure2: function HtmlCpuProfilerTabNav__init_closure2(t0) {
      this.$this = t0;
    },
    CpuProfilerTab: function CpuProfilerTab(t0, t1) {
      this.type = t0;
      this.element = t1;
    },
    CpuProfilerTabOrder: function CpuProfilerTabOrder(t0, t1, t2) {
      this.first = t0;
      this.second = t1;
      this.third = t2;
    },
    FrameBasedTimelineData$: function(cpuProfileData, displayRefreshRate, $frames, selectedEvent, selectedFrame, traceEvents) {
      var t1 = $frames == null ? H.setRuntimeTypeInfo([], type$.JSArray_TimelineFrame) : $frames,
        t2 = displayRefreshRate == null ? 60 : displayRefreshRate,
        t3 = traceEvents == null ? H.setRuntimeTypeInfo([], type$.JSArray_Map_String_dynamic) : traceEvents;
      return new A.FrameBasedTimelineData(t2, t1, selectedFrame, C.TimelineMode_0, t3, selectedEvent, cpuProfileData);
    },
    FullTimelineData$: function(cpuProfileData, selectedEvent, timelineEvents, traceEvents) {
      var t1 = P.SplayTreeMap$(A.html_timeline_model_FullTimelineData_eventGroupComparator$closure(), type$.String, type$.FullTimelineEventGroup),
        t2 = H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent),
        t3 = traceEvents == null ? H.setRuntimeTypeInfo([], type$.JSArray_Map_String_dynamic) : traceEvents;
      return new A.FullTimelineData(t2, t1, new B.TimeRange(true), C.TimelineMode_1, t3, selectedEvent, cpuProfileData);
    },
    FullTimelineData_eventGroupComparator: function(a, b) {
      var t1, t2;
      H._asStringS(a);
      H._asStringS(b);
      if (a == b)
        return 0;
      if (a === "Unknown")
        return 1;
      if (b === "Unknown")
        return -1;
      t1 = a === "UI";
      if (!(t1 && b === "GPU"))
        t2 = a === "GPU" && b === "UI";
      else
        t2 = true;
      if (t2)
        return -1 * J.compareTo$1$ns(a, b);
      if (t1 || a === "GPU")
        return 1;
      if (b === "UI" || b === "GPU")
        return -1;
      return J.compareTo$1$ns(a, b);
    },
    OfflineFrameBasedTimelineData$_: function(cpuProfileData, displayRefreshRate, $frames, selectedEvent, selectedFrame, selectedFrameId, traceEvents) {
      var t1 = $frames == null ? H.setRuntimeTypeInfo([], type$.JSArray_TimelineFrame) : $frames;
      return new A.OfflineFrameBasedTimelineData(selectedFrameId, displayRefreshRate, t1, selectedFrame, C.TimelineMode_0, traceEvents, selectedEvent, cpuProfileData);
    },
    OfflineTimelineEvent$: function(firstTrace) {
      var t1 = L.TraceEventWrapper$(L.TraceEvent$(firstTrace), 0),
        t2 = new B.TimeRange(true),
        t3 = t1.event;
      t1 = new A.OfflineTimelineEvent(H.setRuntimeTypeInfo([t1], type$.JSArray_TraceEventWrapper), t3.get$type(t3), t2, H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent));
      t3 = P.Duration$(t3.timestampMicros, 0);
      t2._utils$_start = t3;
      t1.OfflineTimelineEvent$1(firstTrace);
      return t1;
    },
    FrameBasedTimelineData: function FrameBasedTimelineData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.displayRefreshRate = t0;
      _.frames = t1;
      _.selectedFrame = t2;
      _.timelineMode = t3;
      _.traceEvents = t4;
      _.selectedEvent = t5;
      _.cpuProfileData = t6;
    },
    FullTimelineData: function FullTimelineData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.timelineEvents = t0;
      _.eventGroups = t1;
      _.time = t2;
      _._endTimestampMicros = -1;
      _._displayDepth = null;
      _.timelineMode = t3;
      _.traceEvents = t4;
      _.selectedEvent = t5;
      _.cpuProfileData = t6;
    },
    FullTimelineData_initializeEventGroups_closure: function FullTimelineData_initializeEventGroups_closure() {
    },
    FullTimelineData_initializeEventGroups_closure0: function FullTimelineData_initializeEventGroups_closure0() {
    },
    FullTimelineEventGroup: function FullTimelineEventGroup(t0) {
      this.rows = t0;
    },
    FullTimelineRowData: function FullTimelineRowData(t0) {
      this.events = t0;
      this.lastEvent = null;
    },
    TimelineData: function TimelineData() {
    },
    OfflineFrameBasedTimelineData: function OfflineFrameBasedTimelineData(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._selectedFrameId = t0;
      _.displayRefreshRate = t1;
      _.frames = t2;
      _.selectedFrame = t3;
      _.timelineMode = t4;
      _.traceEvents = t5;
      _.selectedEvent = t6;
      _.cpuProfileData = t7;
    },
    OfflineFullTimelineData: function OfflineFullTimelineData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.timelineEvents = t0;
      _.eventGroups = t1;
      _.time = t2;
      _._endTimestampMicros = -1;
      _._displayDepth = null;
      _.timelineMode = t3;
      _.traceEvents = t4;
      _.selectedEvent = t5;
      _.cpuProfileData = t6;
    },
    OfflineData: function OfflineData() {
    },
    OfflineTimelineEvent: function OfflineTimelineEvent(t0, t1, t2, t3) {
      var _ = this;
      _.traceEvents = t0;
      _.type = t1;
      _.time = t2;
      _._lowestDisplayChildRow = 1;
      _.parent = _._displayRows = _._lowestDisplayChild = null;
      _.children = t3;
      _.index = -1;
      _._depth = 0;
      _._trees$_level = _._trees$_root = null;
      _._trees$_isExpanded = false;
    },
    OfflineTimelineEvent_closure: function OfflineTimelineEvent_closure(t0) {
      this.firstTrace = t0;
    },
    OfflineTimelineEvent_closure0: function OfflineTimelineEvent_closure0() {
    },
    TimelineFrame: function TimelineFrame(t0, t1, t2, t3) {
      var _ = this;
      _.id = t0;
      _._addedToTimeline = null;
      _.eventFlows = t1;
      _.time = t2;
      _.pipelineItemTime = t3;
      _.pipelineItemEndTrace = _.pipelineItemStartTrace = null;
    },
    TimelineFrame_closure: function TimelineFrame_closure() {
    },
    TimelineFrame_findTimelineEvent_closure: function TimelineFrame_findTimelineEvent_closure(t0) {
      this.event = t0;
    },
    TimelineEvent0: function TimelineEvent0() {
    },
    TimelineEvent__isWellFormedDeep_closure: function TimelineEvent__isWellFormedDeep_closure() {
    },
    TimelineEvent_maybeRemoveDuplicate__maybeRemoveDuplicate: function TimelineEvent_maybeRemoveDuplicate__maybeRemoveDuplicate() {
    },
    TimelineEvent_addChild__putChildInTree: function TimelineEvent_addChild__putChildInTree(t0) {
      this.child = t0;
    },
    SyncTimelineEvent: function SyncTimelineEvent(t0, t1, t2, t3) {
      var _ = this;
      _.traceEvents = t0;
      _.type = t1;
      _.time = t2;
      _._lowestDisplayChildRow = 1;
      _.parent = _._displayRows = _._lowestDisplayChild = null;
      _.children = t3;
      _.index = -1;
      _._depth = 0;
      _._trees$_level = _._trees$_root = null;
      _._trees$_isExpanded = false;
    },
    SyncTimelineEvent_isUiEventFlow_closure: function SyncTimelineEvent_isUiEventFlow_closure() {
    },
    SyncTimelineEvent_isGpuEventFlow_closure: function SyncTimelineEvent_isGpuEventFlow_closure() {
    },
    AsyncTimelineEvent: function AsyncTimelineEvent(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.asyncId = t0;
      _.parentId = t1;
      _._maxEndMicros = null;
      _.traceEvents = t2;
      _.type = t3;
      _.time = t4;
      _._lowestDisplayChildRow = 1;
      _.parent = _._displayRows = _._lowestDisplayChild = null;
      _.children = t5;
      _.index = -1;
      _._depth = 0;
      _._trees$_level = _._trees$_root = null;
      _._trees$_isExpanded = false;
    },
    _OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData: function _OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData() {
    },
    _OfflineFullTimelineData_FullTimelineData_OfflineData: function _OfflineFullTimelineData_FullTimelineData_OfflineData() {
    },
    queryId: function(id) {
      var t1 = "#" + id;
      t1 = document.querySelector(t1);
      return t1;
    },
    a: function(href, target, text) {
      var t1 = A.CoreElement$("a", null, null, null, text),
        t2 = t1.element;
      t2.setAttribute("href", href);
      t2.setAttribute("target", target);
      return t1;
    },
    checkbox: function(a, c, text) {
      var t1 = A.CoreElement$("input", a, c, null, text);
      t1.element.setAttribute("type", "checkbox");
      return t1;
    },
    div: function(a, c, text) {
      return A.CoreElement$("div", a, c, null, text);
    },
    span: function(a, c, text) {
      return A.CoreElement$("span", a, c, null, text);
    },
    CoreElement$: function(tag, attributes, classes, html, text) {
      var t1 = new A.CoreElement(type$.Element._as(W._ElementFactoryProvider_createElement_tag(tag, null)));
      t1.CoreElement$5$attributes$classes$html$text(tag, attributes, classes, html, text);
      return t1;
    },
    CoreElement: function CoreElement(t0) {
      this.element = t0;
    },
    CoreElement_add_closure: function CoreElement_add_closure(t0) {
      this.$this = t0;
    },
    CoreElement_replace_closure: function CoreElement_replace_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    CoreElement_onClick_closure: function CoreElement_onClick_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onTouchStart_closure: function CoreElement_onTouchStart_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onTouchMove_closure: function CoreElement_onTouchMove_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onTouchEnd_closure: function CoreElement_onTouchEnd_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onFocus_closure: function CoreElement_onFocus_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onBlur_closure: function CoreElement_onBlur_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onMouseOver_closure: function CoreElement_onMouseOver_closure(t0) {
      this.$this = t0;
    },
    CoreElement_onMouseLeave_closure: function CoreElement_onMouseLeave_closure(t0) {
      this.$this = t0;
    },
    CoreElement_click_closure: function CoreElement_click_closure(t0, t1) {
      this.shiftHandle = t0;
      this.handle = t1;
    },
    CoreElement_dblclick_closure: function CoreElement_dblclick_closure(t0) {
      this.handle = t0;
    },
    CoreElement_focus_closure: function CoreElement_focus_closure(t0) {
      this.handle = t0;
    },
    CoreElement_blur_closure: function CoreElement_blur_closure(t0) {
      this.handle = t0;
    },
    TextField: function TextField(t0) {
      this.element = t0;
    },
    TextField_changed_closure: function TextField_changed_closure(t0, t1) {
      this.$this = t0;
      this.handle = t1;
    },
    TrustedHtmlTreeSanitizer: function TrustedHtmlTreeSanitizer() {
    },
    flexSplit: function(parts, gutterSize, horizontal, minSize, sizes) {
      var t1, t2, t3, t4;
      type$.List_Element._as(parts);
      t1 = type$.List_num;
      t1._as(sizes);
      t1._as(minSize);
      t1 = P.allowInterop(new A.flexSplit_closure(), type$.dynamic_Function_3_Object_and_Object_and_num_$opt_int);
      t2 = P.allowInterop(new A.flexSplit_closure0(), type$.dynamic_Function_Object_num_int);
      t3 = H.boolConversionCheck(horizontal) ? "horizontal" : "vertical";
      t4 = minSize == null ? null : minSize.length !== 0;
      return self.Split(parts, {elementStyle: t1, gutterStyle: t2, direction: t3, gutterSize: gutterSize, sizes: sizes, minSize: minSize, expandToMin: t4 === true});
    },
    fixedSplit: function(parts, gutterSize, horizontal, minSize, sizes) {
      var t1, t2, t3, t4;
      type$.List_Element._as(parts);
      t1 = type$.List_num;
      t1._as(sizes);
      t1._as(minSize);
      t1 = P.allowInterop(new A.fixedSplit_closure(horizontal), type$.dynamic_Function_3_Object_and_Object_and_num_$opt_int);
      t2 = P.allowInterop(new A.fixedSplit_closure0(horizontal), type$.dynamic_Function_Object_num_int);
      t3 = H.boolConversionCheck(horizontal) ? "horizontal" : "vertical";
      t4 = minSize == null ? null : minSize.length !== 0;
      return self.Split(parts, {elementStyle: t1, gutterStyle: t2, direction: t3, gutterSize: gutterSize, sizes: sizes, minSize: minSize, expandToMin: t4 === true});
    },
    _splitBidirectional: function(parts, gutterSize, horizontalSizes, minSize, splitterBuilder, verticalSizes) {
      var t2, t1 = {},
        mediaQueryList = window.matchMedia("(min-aspect-ratio: 1/1)");
      t1.splitter = null;
      t2 = new A._splitBidirectional_createSplitter(t1, mediaQueryList, splitterBuilder, parts, gutterSize, minSize, horizontalSizes, verticalSizes);
      t2.call$0();
      mediaQueryList.toString;
      t2 = type$.void_Function_Event._as(new A._splitBidirectional_closure(t1, t2));
      type$.void_Function._as(null);
      return W._EventStreamSubscription$(mediaQueryList, "change", t2, false, type$.Event);
    },
    _SplitOptions: function _SplitOptions() {
    },
    Splitter: function Splitter() {
    },
    flexSplit_closure: function flexSplit_closure() {
    },
    flexSplit_closure0: function flexSplit_closure0() {
    },
    fixedSplit_closure: function fixedSplit_closure(t0) {
      this.horizontal = t0;
    },
    fixedSplit_closure0: function fixedSplit_closure0(t0) {
      this.horizontal = t0;
    },
    _splitBidirectional_createSplitter: function _splitBidirectional_createSplitter(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.mediaQueryList = t1;
      _.splitterBuilder = t2;
      _.parts = t3;
      _.gutterSize = t4;
      _.minSize = t5;
      _.horizontalSizes = t6;
      _.verticalSizes = t7;
    },
    _splitBidirectional_closure: function _splitBidirectional_closure(t0, t1) {
      this._box_0 = t0;
      this.createSplitter = t1;
    }
  },
  S = {
    CallStackView$: function() {
      var t1 = new S.CallStackView();
      t1.CallStackView$0();
      return t1;
    },
    CallStackView: function CallStackView() {
      this._callstack_view$_items = null;
    },
    CallStackView_closure: function CallStackView_closure() {
    },
    DebuggerState: function DebuggerState(t0, t1, t2, t3, t4) {
      var _ = this;
      _.scripts = _.isolateRef = _._debugSubscription = _._service = null;
      _._scriptCache = t0;
      _._debugger_state$_isPaused = t1;
      _._hasFrames = t2;
      _.lastEvent = _._supportsStepping = null;
      _._breakpoints = t3;
      _._exceptionPauseMode = t4;
      _.rootLib = _.commonScriptPrefix = _._reportedException = null;
    },
    DebuggerState_supportsStepping_closure: function DebuggerState_supportsStepping_closure(t0) {
      this.$this = t0;
    },
    DebuggerState_supportsStepping_closure_update: function DebuggerState_supportsStepping_closure_update(t0, t1) {
      this.$this = t0;
      this.notifier = t1;
    },
    DebuggerState_clearBreakpoints_closure: function DebuggerState_clearBreakpoints_closure(t0) {
      this.$this = t0;
    },
    DebuggerState_addBreakpointByPathFragment_closure: function DebuggerState_addBreakpointByPathFragment_closure(t0) {
      this.path = t0;
    },
    DebuggerState_addBreakpointByPathFragment_closure0: function DebuggerState_addBreakpointByPathFragment_closure0() {
    },
    Category_forLabel: function(label) {
      var _i, category;
      if ($.Category__categories == null) {
        $.Category__categories = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Category);
        for (_i = 0; _i < 12; ++_i) {
          category = C.List_mya[_i];
          $.Category__categories.$indexSet(0, category.label, category);
        }
      }
      return $.Category__categories.$index(0, label);
    },
    FlutterWidget_initIcon: function(json) {
      var t1, category, icon,
        categories = type$.List_Object._as(J.$index$asx(json, "categories"));
      if (categories != null)
        for (t1 = J.get$iterator$ax(categories); t1.moveNext$0();) {
          category = S.Category_forLabel(H._asStringS(t1.get$current(t1)));
          if (category != null) {
            icon = category.icon;
            if (icon != null)
              return icon;
          }
        }
      return null;
    },
    Catalog__loadHelper: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Catalog),
        $async$returnValue, response;
      var $async$Catalog__loadHelper = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(G.get("widgets.json"), $async$Catalog__loadHelper);
            case 3:
              // returning from await.
              response = $async$result;
              $async$returnValue = $.Catalog__instance = S.Catalog_decode(B.encodingForCharset(J.$index$asx(U._contentTypeForHeaders(response.headers).parameters._collection$_map, "charset")).decode$1(0, response.bodyBytes));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$Catalog__loadHelper, $async$completer);
    },
    Catalog_decode: function(source) {
      var t1, t2, element, t3,
        widgets = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.FlutterWidget);
      for (t1 = J.get$iterator$ax(type$.List_Object._as(C.C_JsonCodec.decode$2$reviver(0, source, null))), t2 = type$.Map_String_Object; t1.moveNext$0();) {
        element = t2._as(t1.get$current(t1));
        t3 = S.FlutterWidget_initIcon(element);
        widgets.$indexSet(0, H._asStringS(J.$index$asx(element, "name")), new S.FlutterWidget(element, t3));
      }
      return new S.Catalog(widgets);
    },
    Category: function Category(t0, t1) {
      this.label = t0;
      this.icon = t1;
    },
    FlutterWidget: function FlutterWidget(t0, t1) {
      this.json = t0;
      this.icon = t1;
    },
    Catalog: function Catalog(t0) {
      this.widgets = t0;
    },
    Color$fromARGB: function(a, r, g, b) {
      return new S.Color((((a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | (b & 255) << 0) & 4294967295) >>> 0);
    },
    _Jenkins_combine: function(hash, o) {
      hash = 536870911 & hash + J.get$hashCode$(o);
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    hashValues: function(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13) {
      var hash,
        result = S._Jenkins_combine(S._Jenkins_combine(0, arg01), arg02);
      if (arg03 !== C.C__HashEnd) {
        result = S._Jenkins_combine(result, arg03);
        if (arg04 !== C.C__HashEnd) {
          result = S._Jenkins_combine(result, arg04);
          if (arg05 !== C.C__HashEnd) {
            result = S._Jenkins_combine(result, arg05);
            if (arg06 !== C.C__HashEnd) {
              result = S._Jenkins_combine(result, arg06);
              if (arg07 !== C.C__HashEnd) {
                result = S._Jenkins_combine(result, arg07);
                if (arg08 !== C.C__HashEnd) {
                  result = S._Jenkins_combine(result, arg08);
                  if (arg09 !== C.C__HashEnd) {
                    result = S._Jenkins_combine(result, arg09);
                    if (arg10 !== C.C__HashEnd) {
                      result = S._Jenkins_combine(result, arg10);
                      if (!J.$eq$(arg11, C.C__HashEnd)) {
                        result = S._Jenkins_combine(result, arg11);
                        if (arg12 !== C.C__HashEnd) {
                          result = S._Jenkins_combine(result, arg12);
                          if (arg13 !== C.C__HashEnd)
                            result = S._Jenkins_combine(result, arg13);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      hash = 536870911 & result + ((67108863 & result) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    Color: function Color(t0) {
      this.value = t0;
    },
    MaterialColor: function MaterialColor(t0, t1) {
      this._swatch = t0;
      this.value = t1;
    },
    MaterialAccentColor: function MaterialAccentColor(t0, t1) {
      this._swatch = t0;
      this.value = t1;
    },
    ColorSwatch: function ColorSwatch() {
    },
    OffsetBase: function OffsetBase() {
    },
    Offset: function Offset(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Size: function Size(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Rect: function Rect(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    _HashEnd: function _HashEnd() {
    },
    FontWeight: function FontWeight() {
    },
    CustomIconMaker$: function() {
      return new S.CustomIconMaker(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.CustomIcon));
    },
    DevToolsIcon: function DevToolsIcon() {
    },
    UrlIcon: function UrlIcon(t0, t1) {
      this.src = t0;
      this.invertDark = t1;
    },
    CustomIcon: function CustomIcon(t0, t1, t2) {
      this.kind = t0;
      this.text = t1;
      this.isAbstract = t2;
    },
    CustomIconMaker: function CustomIconMaker(t0) {
      this.iconCache = t0;
    },
    CustomIconMaker_getCustomIcon_closure: function CustomIconMaker_getCustomIcon_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.text = t1;
      this.isAbstract = t2;
    },
    IconKind: function IconKind(t0, t1, t2) {
      this.name = t0;
      this.icon = t1;
      this.abstractIcon = t2;
    },
    ColorIcon: function ColorIcon(t0) {
      this.color = t0;
    },
    ColorIconMaker: function ColorIconMaker(t0) {
      this.iconCache = t0;
    },
    ColorIconMaker_getCustomIcon_closure: function ColorIconMaker_getCustomIcon_closure(t0) {
      this.color = t0;
    }
  },
  G = {
    HtmlMessage$: function(messageType, children, id, message, title) {
      var _null = null,
        t1 = new N.PFlash(type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "flash", _null, _null);
      t1 = new G.HtmlMessage(messageType, id, message, title, children, t1, new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_HtmlMessage));
      t1._buildFlash$0();
      return t1;
    },
    HtmlMessageManager: function HtmlMessageManager(t0, t1, t2) {
      this._container = t0;
      this._messages = t1;
      this._dismissedMessageIds = t2;
    },
    HtmlMessageManager_removeAll_closure: function HtmlMessageManager_removeAll_closure() {
    },
    HtmlMessageManager_addMessage_closure: function HtmlMessageManager_addMessage_closure(t0, t1) {
      this.$this = t0;
      this.screenId = t1;
    },
    HtmlMessageManager_addMessage_closure0: function HtmlMessageManager_addMessage_closure0() {
    },
    HtmlMessage: function HtmlMessage(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.messageType = t0;
      _.id = t1;
      _.message = t2;
      _.title = t3;
      _.children = t4;
      _.flash = t5;
      _._dismissController = t6;
    },
    HtmlMessage__buildFlash_closure: function HtmlMessage__buildFlash_closure(t0) {
      this.$this = t0;
    },
    MessageType: function MessageType(t0) {
      this._html_message_manager$_name = t0;
    },
    HtmlSpinner_centered: function(classes) {
      var t2, _null = null,
        t1 = H.setRuntimeTypeInfo(["centered"], type$.JSArray_String);
      C.JSArray_methods.addAll$1(t1, classes);
      t2 = new G.HtmlSpinner(type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t2.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t2.clazz$1("spinner");
      C.JSArray_methods.forEach$1(t1, t2.get$clazz());
      return t2;
    },
    HtmlSelectableTree$: function($T) {
      var t4, _null = null,
        t1 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>")),
        t2 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<TreeNode<HtmlSelectableTreeNodeItem<0>>>")),
        t3 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("ul", _null));
      t2 = new G.HtmlSelectableTree(t1, t2, new P._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<0>")), t3, $T._eval$1("HtmlSelectableTree<0>"));
      t2.CoreElement$5$attributes$classes$html$text("ul", _null, _null, _null, _null);
      t3.tabIndex = 0;
      t3 = J.get$onKeyDown$x(t3);
      t1 = t3.$ti;
      t4 = t1._eval$1("~(1)")._as(t2.get$handleKeyPress());
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t3._target, t3._eventType, t4, false, t1._precomputed1);
      return t2;
    },
    HtmlTreeToggle$: function(empty, forceOpen) {
      var _null = null,
        t1 = new G.HtmlTreeToggle(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_bool), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "tree-toggle octicon", _null, _null);
      if (!empty) {
        t1.click$1(0, t1.get$toggle(t1));
        if (H.boolConversionCheck(forceOpen)) {
          t1._isOpen = true;
          t1.clazz$1("octicon-triangle-down");
        } else
          t1.clazz$1("octicon-triangle-right");
      }
      return t1;
    },
    _defaultRenderer: function(item, $T) {
      return A.CoreElement$("li", null, "list-item", null, J.toString$0$($T._as(item)));
    },
    HtmlActionButton$: function(id, icon, tooltip) {
      var t1 = new G.HtmlActionButton(id, icon, tooltip),
        t2 = A.CoreElement$("div", null, "masthead-item action-button", null, null);
      t2.element.title = tooltip;
      t2.add$1(0, new A.CoreElement(Y.getIconRenderer(icon).createElement$0(0)));
      t1._html_custom$_element = t2;
      return t1;
    },
    HtmlProgressElement: function HtmlProgressElement(t0) {
      this.element = t0;
    },
    HtmlSpinner: function HtmlSpinner(t0) {
      this.element = t0;
    },
    HtmlSelectableList: function HtmlSelectableList(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.items = t0;
      _._selectedElement = _.renderer = null;
      _._hadClicked = false;
      _._selectionController = t1;
      _._doubleClickController = t2;
      _._itemsChangedController = t3;
      _.element = t4;
      _.$ti = t5;
    },
    HtmlSelectableList_setItems_closure: function HtmlSelectableList_setItems_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.renderer = t1;
      _.selection = t2;
      _.scrollSelectionIntoView = t3;
    },
    HtmlSelectableList__hookup_closure: function HtmlSelectableList__hookup_closure(t0, t1, t2) {
      this.$this = t0;
      this.element = t1;
      this.item = t2;
    },
    HtmlSelectableList__hookup_closure0: function HtmlSelectableList__hookup_closure0(t0, t1) {
      this.$this = t0;
      this.item = t1;
    },
    ChildProvider: function ChildProvider() {
    },
    HtmlSelectableTreeNodeItem: function HtmlSelectableTreeNodeItem(t0, t1, t2) {
      this.element = t0;
      this.item = t1;
      this.$ti = t2;
    },
    HtmlSelectableTree: function HtmlSelectableTree(t0, t1, t2, t3, t4) {
      var _ = this;
      _.items = t0;
      _.treeNodes = t1;
      _._selectedItem = _.childProvider = _.renderer = null;
      _._selectionController = t2;
      _.element = t3;
      _.$ti = t4;
    },
    HtmlSelectableTree__addItemToTree_closure: function HtmlSelectableTree__addItemToTree_closure(t0, t1) {
      this.$this = t0;
      this.obj = t1;
    },
    HtmlSelectableTree__addItemToTree_closure0: function HtmlSelectableTree__addItemToTree_closure0(t0) {
      this.toggle = t0;
    },
    HtmlSelectableTree__addItemToTree_closure1: function HtmlSelectableTree__addItemToTree_closure1(t0) {
      this.toggle = t0;
    },
    HtmlSelectableTree__addItemToTree_closure2: function HtmlSelectableTree__addItemToTree_closure2(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.obj = t2;
      _.childContainer = t3;
      _.item = t4;
    },
    HtmlSelectableTree__addItemToTree__closure: function HtmlSelectableTree__addItemToTree__closure(t0, t1, t2) {
      this.$this = t0;
      this.childContainer = t1;
      this.obj = t2;
    },
    HtmlSelectableTree__addItemToTree__closure0: function HtmlSelectableTree__addItemToTree__closure0() {
    },
    HtmlSelectableTree__buildTree_closure: function HtmlSelectableTree__buildTree_closure(t0, t1) {
      this.$this = t0;
      this.container = t1;
    },
    HtmlSelectableTree__buildTree_closure0: function HtmlSelectableTree__buildTree_closure0(t0) {
      this.$this = t0;
    },
    HtmlTreeToggle: function HtmlTreeToggle(t0, t1) {
      this._isOpen = false;
      this._openController = t0;
      this.element = t1;
    },
    HtmlActionButton: function HtmlActionButton(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.icon = t1;
      _.tooltip = t2;
      _._html_custom$_element = null;
    },
    _HtmlSelectableTree_CoreElement_Tree: function _HtmlSelectableTree_CoreElement_Tree() {
    },
    _HtmlSelectableTree_CoreElement_Tree_TreeNavigator: function _HtmlSelectableTree_CoreElement_Tree_TreeNavigator() {
    },
    _HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator: function _HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator() {
    },
    get: function(url) {
      return G._withClient(new G.get_closure(url, null), type$.Response);
    },
    _withClient: function(fn, $T) {
      return G._withClient$body(fn, $T, $T);
    },
    _withClient$body: function(fn, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], t1, client;
      var $async$_withClient = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = new O.BrowserClient(P.LinkedHashSet_LinkedHashSet$_empty(type$.HttpRequest));
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait(fn.call$1(client), $async$_withClient);
            case 6:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              J.close$0$x(client);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_withClient, $async$completer);
    },
    get_closure: function get_closure(t0, t1) {
      this.url = t0;
      this.headers = t1;
    },
    BaseRequest: function BaseRequest() {
    },
    BaseRequest_closure: function BaseRequest_closure() {
    },
    BaseRequest_closure0: function BaseRequest_closure0() {
    },
    browser: function() {
      var t1 = $._browser;
      if (t1 == null) {
        $.Browser_navigator = new G._HtmlNavigator();
        t1 = $._browser = L.Browser_getCurrentBrowser();
      }
      return t1;
    },
    _HtmlNavigator: function _HtmlNavigator() {
    },
    NavigatorProvider: function NavigatorProvider() {
    },
    SourceSpanFormatException$: function(message, span, source) {
      return new G.SourceSpanFormatException(source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    }
  },
  Q = {
    HtmlTable_HtmlTable$virtual: function($T) {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<ColumnData<0>>")),
        t2 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>"));
      return Q.HtmlTable$_(new K.TableData(t1, t2, new P._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<0>")), new P._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<HoverCellData<0>>")), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), $T._eval$1("TableData<0>")), 29, true, false, $T);
    },
    HtmlTable$_: function(model, rowHeight, isVirtual, overflowAuto, $T) {
      var t2, t3, _null = null,
        t1 = A.CoreElement$("table", _null, _null, _null, _null);
      t1.clazz$1("full-width");
      t1.element.setAttribute("tabIndex", "0");
      t2 = A.CoreElement$("tr", _null, _null, _null, _null);
      t3 = t2.element.style;
      t3.display = "none";
      t3 = type$.CoreElement;
      t3 = new Q.HtmlTable(rowHeight, true, model, t1, t2, P.LinkedHashMap_LinkedHashMap$_empty($T._eval$1("ColumnData<0>"), t3), P.LinkedHashMap_LinkedHashMap$_empty(type$.Element, $T), P.LinkedHashMap_LinkedHashMap$_empty(type$.int, t3), $T._eval$1("HtmlTable<0>"));
      t3.HtmlTable$_$4$overflowAuto(model, rowHeight, true, overflowAuto, $T);
      return t3;
    },
    HtmlTreeTable_HtmlTreeTable$virtual: function($T) {
      var t3, t4, _null = null,
        t1 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<ColumnData<0>>")),
        t2 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>"));
      t1 = new K.TreeTableData(t1, t2, new P._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<0>")), new P._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<HoverCellData<0>>")), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), $T._eval$1("TreeTableData<0>"));
      t2 = A.CoreElement$("table", _null, _null, _null, _null);
      t2.clazz$1("full-width");
      t2.element.setAttribute("tabIndex", "0");
      t3 = A.CoreElement$("tr", _null, _null, _null, _null);
      t4 = t3.element.style;
      t4.display = "none";
      t4 = type$.CoreElement;
      t4 = new Q.HtmlTreeTable(29, true, t1, t2, t3, P.LinkedHashMap_LinkedHashMap$_empty($T._eval$1("ColumnData<0>"), t4), P.LinkedHashMap_LinkedHashMap$_empty(type$.Element, $T), P.LinkedHashMap_LinkedHashMap$_empty(type$.int, t4), $T._eval$1("HtmlTreeTable<0>"));
      t4.HtmlTable$_$4$overflowAuto(t1, 29, true, true, $T);
      return t4;
    },
    TreeTableToolbar$: function($T) {
      var t3, t4, t5, _null = null, _s6_ = "button",
        t1 = type$.Element,
        t2 = new Q.TreeTableToolbar(t1._as(W._ElementFactoryProvider_createElement_tag("div", _null)), $T._eval$1("TreeTableToolbar<0>"));
      t2.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t3 = A.CoreElement$("div", _null, "btn-group", _null, _null);
      t4 = t1._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t5 = new N.PButton(t4);
      t5.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Expand all");
      t4.setAttribute("type", _s6_);
      t5.clazz$1("btn-sm");
      t5.click$1(0, t2.get$_expandAll());
      t1 = t1._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t4 = new N.PButton(t1);
      t4.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Collapse all");
      t1.setAttribute("type", _s6_);
      t4.clazz$1("btn-sm");
      t4.click$1(0, t2.get$_collapseAll());
      t3.add$1(0, H.setRuntimeTypeInfo([t5, t4], type$.JSArray_PButton));
      t2.add$1(0, t3);
      return t2;
    },
    HtmlTable: function HtmlTable(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.rowHeight = t0;
      _.isVirtual = t1;
      _._resizeObserver = null;
      _.model = t2;
      _.element = null;
      _._table = t3;
      _._spacerAfterVisibleRows = _._spacerBeforeVisibleRows = _._tbody = _._thead = null;
      _._dummyRowToForceAlternatingColor = t4;
      _._spanForColumn = t5;
      _._dataForRow = t6;
      _._rowForIndex = t7;
      _.$ti = t8;
    },
    HtmlTable$__closure: function HtmlTable$__closure(t0) {
      this.$this = t0;
    },
    HtmlTable$__closure0: function HtmlTable$__closure0(t0) {
      this.$this = t0;
    },
    HtmlTable_onSetRows_closure: function HtmlTable_onSetRows_closure(t0) {
      this.$this = t0;
    },
    HtmlTable_onSetRows__closure: function HtmlTable_onSetRows__closure(t0, t1) {
      this.$this = t0;
      this.column = t1;
    },
    HtmlTable__rebuildVirtualTable_closure: function HtmlTable__rebuildVirtualTable_closure(t0) {
      this.$this = t0;
    },
    HtmlTable__rebuildVirtualTable__closure: function HtmlTable__rebuildVirtualTable__closure() {
    },
    HtmlTable__buildTableRows_selectRow: function HtmlTable__buildTableRows_selectRow(t0) {
      this.$this = t0;
    },
    HtmlTable__buildTableRows_closure: function HtmlTable__buildTableRows_closure(t0, t1, t2) {
      this.$this = t0;
      this.tableRow = t1;
      this.selectRow = t2;
    },
    HtmlColumnRenderer: function HtmlColumnRenderer(t0, t1) {
      this.model = t0;
      this.$ti = t1;
    },
    HtmlTreeColumnRenderer: function HtmlTreeColumnRenderer(t0, t1) {
      this.model = t0;
      this.$ti = t1;
    },
    HtmlTreeColumnRenderer_renderToElement_closure: function HtmlTreeColumnRenderer_renderToElement_closure(t0, t1) {
      this.$this = t0;
      this.dataObject = t1;
    },
    HtmlTreeTable: function HtmlTreeTable(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.rowHeight = t0;
      _.isVirtual = t1;
      _._resizeObserver = null;
      _.model = t2;
      _.element = null;
      _._table = t3;
      _._spacerAfterVisibleRows = _._spacerBeforeVisibleRows = _._tbody = _._thead = null;
      _._dummyRowToForceAlternatingColor = t4;
      _._spanForColumn = t5;
      _._dataForRow = t6;
      _._rowForIndex = t7;
      _.$ti = t8;
    },
    TreeTableToolbar: function TreeTableToolbar(t0, t1) {
      this.treeTable = null;
      this.element = t0;
      this.$ti = t1;
    },
    _HtmlTable_Object_HtmlSetStateMixin: function _HtmlTable_Object_HtmlSetStateMixin() {
    },
    createServiceObject: function(json, expectedTypes) {
      var t1, type, _null = null;
      if (json == null)
        return _null;
      if (type$.List_dynamic._is(json))
        return J.map$1$1$ax(json, new Q.createServiceObject_closure(expectedTypes), type$.Object).toList$0(0);
      else if (type$.Map_dynamic_dynamic._is(json)) {
        t1 = J.getInterceptor$asx(json);
        type = H._asStringS(t1.$index(json, "type"));
        if (type == null)
          if (expectedTypes.length === 1)
            type = (expectedTypes && C.JSArray_methods).get$first(expectedTypes);
          else
            return _null;
        else if (J.$eq$(t1.$index(json, "type"), "@Instance") && J.$eq$(t1.$index(json, "kind"), "Null") && !(expectedTypes && C.JSArray_methods).contains$1(expectedTypes, type))
          return _null;
        if ($._typeFactories.$index(0, type) == null)
          return _null;
        else
          return $._typeFactories.$index(0, type).call$1(json);
      } else
        return json;
    },
    _createSpecificObject: function(json, creator) {
      var t1, t2, t3, key;
      if (json == null)
        return null;
      if (type$.List_dynamic._is(json))
        return J.map$1$1$ax(json, new Q._createSpecificObject_closure(creator), type$.dynamic).toList$0(0);
      else if (type$.Map_dynamic_dynamic._is(json)) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
        for (t2 = J.getInterceptor$x(json), t3 = J.get$iterator$ax(t2.get$keys(json)); t3.moveNext$0();) {
          key = H._asStringS(t3.get$current(t3));
          t1.$indexSet(0, key, t2.$index(json, key));
        }
        return creator.call$1(t1);
      } else
        return json;
    },
    _setIfNotNull: function(json, key, value) {
      if (value == null)
        return;
      json.$indexSet(0, key, value);
    },
    VmService$: function(inStream, writeMessage, disposeHandler, log) {
      var _null = null,
        t1 = type$.String,
        t2 = type$._SyncBroadcastStreamController_String;
      t1 = new Q.VmService(P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Completer_dynamic), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Future_Map_String_dynamic_Function_Map_String_dynamic), new P._SyncBroadcastStreamController(_null, _null, t2), new P._SyncBroadcastStreamController(_null, _null, t2), new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic), P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.StreamController_Event));
      t1.VmService$5$disposeHandler$log$streamClosed(inStream, writeMessage, disposeHandler, log, _null);
      return t1;
    },
    ExtensionData_parse: function(json) {
      return json == null ? null : new Q.ExtensionData(json);
    },
    AllocationProfile_parse: function(json) {
      var t1, t2, t3, _null = null,
        _s24_ = "dateLastAccumulatorReset",
        _s17_ = "dateLastServiceGC";
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = _null;
      else {
        t1 = new Q.AllocationProfile(json);
        t1.type = H._asStringS(J.$index$asx(json, "type"));
        t2 = J.getInterceptor$asx(json);
        t3 = Q.createServiceObject(t2.$index(json, "members"), C.List_ClassHeapStats);
        if (t3 == null)
          t3 = [];
        t1.set$members(P.List_List$from(type$.Iterable_dynamic._as(t3), true, type$.ClassHeapStats));
        t1.memoryUsage = type$.MemoryUsage._as(Q.createServiceObject(t2.$index(json, "memoryUsage"), C.List_MemoryUsage));
        t1.dateLastAccumulatorReset = H._asIntS(typeof t2.$index(json, _s24_) == "string" ? P.int_parse(H._asStringS(t2.$index(json, _s24_)), _null, _null) : t2.$index(json, _s24_));
        t1.dateLastServiceGC = H._asIntS(typeof t2.$index(json, _s17_) == "string" ? P.int_parse(H._asStringS(t2.$index(json, _s17_)), _null, _null) : t2.$index(json, _s17_));
      }
      return t1;
    },
    AllocationProfile$_fromJson: function(json) {
      var t2, t3, _null = null,
        _s24_ = "dateLastAccumulatorReset",
        _s17_ = "dateLastServiceGC",
        t1 = new Q.AllocationProfile(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t3 = Q.createServiceObject(t2.$index(json, "members"), C.List_ClassHeapStats);
      if (t3 == null)
        t3 = [];
      t1.set$members(P.List_List$from(type$.Iterable_dynamic._as(t3), true, type$.ClassHeapStats));
      t1.memoryUsage = type$.MemoryUsage._as(Q.createServiceObject(t2.$index(json, "memoryUsage"), C.List_MemoryUsage));
      t1.dateLastAccumulatorReset = H._asIntS(typeof t2.$index(json, _s24_) == "string" ? P.int_parse(H._asStringS(t2.$index(json, _s24_)), _null, _null) : t2.$index(json, _s24_));
      t1.dateLastServiceGC = H._asIntS(typeof t2.$index(json, _s17_) == "string" ? P.int_parse(H._asStringS(t2.$index(json, _s17_)), _null, _null) : t2.$index(json, _s17_));
      return t1;
    },
    BoundField_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.BoundField(null, null);
      t2 = J.getInterceptor$asx(json);
      t1.decl = type$.FieldRef._as(Q.createServiceObject(t2.$index(json, "decl"), C.List_FieldRef));
      t1.value = Q.createServiceObject(t2.$index(json, "value"), C.List_InstanceRef_Sentinel);
      return t1;
    },
    BoundVariable_parse: function(json) {
      var t1, t2, _null = null;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.BoundVariable(_null, _null, _null, _null, _null, json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.value = Q.createServiceObject(t2.$index(json, "value"), C.List_PAk);
      t1.declarationTokenPos = H._asIntS(t2.$index(json, "declarationTokenPos"));
      t1.scopeStartTokenPos = H._asIntS(t2.$index(json, "scopeStartTokenPos"));
      t1.scopeEndTokenPos = H._asIntS(t2.$index(json, "scopeEndTokenPos"));
      return t1;
    },
    BoundVariable$: function(declarationTokenPos, $name, scopeEndTokenPos, scopeStartTokenPos, value) {
      return new Q.BoundVariable($name, value, declarationTokenPos, scopeStartTokenPos, scopeEndTokenPos, null);
    },
    Breakpoint_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Breakpoint(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.breakpointNumber = H._asIntS(t2.$index(json, "breakpointNumber"));
      t1.resolved = H._asBoolS(t2.$index(json, "resolved"));
      t1.isSyntheticAsyncContinuation = H._asBoolS(t2.$index(json, "isSyntheticAsyncContinuation"));
      t1.location = Q.createServiceObject(t2.$index(json, "location"), C.List_oqh);
      return t1;
    },
    ClassRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.ClassRef(json);
        t1.type = H._asStringS(J.$index$asx(json, "type"));
        t1.ObjRef$_fromJson$1(json);
        t1.name = H._asStringS(J.$index$asx(json, "name"));
      }
      return t1;
    },
    ClassRef$_fromJson: function(json) {
      var t1 = new Q.ClassRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.name = H._asStringS(J.$index$asx(json, "name"));
      return t1;
    },
    Class_parse: function(json) {
      var t1, t2, t3, t4, t5, t6;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Class(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.error = type$.ErrorRef._as(Q.createServiceObject(t2.$index(json, "error"), C.List_ErrorRef));
      t1.isAbstract = H._asBoolS(t2.$index(json, "abstract"));
      t1.isConst = H._asBoolS(t2.$index(json, "const"));
      t1.library = type$.LibraryRef._as(Q.createServiceObject(t2.$index(json, "library"), C.List_LibraryRef));
      t1.location = type$.SourceLocation._as(Q.createServiceObject(t2.$index(json, "location"), C.List_SourceLocation));
      t3 = type$.ClassRef;
      t1.superClass = t3._as(Q.createServiceObject(t2.$index(json, "super"), C.List_ClassRef));
      t4 = type$.InstanceRef;
      t1.superType = t4._as(Q.createServiceObject(t2.$index(json, "superType"), C.List_InstanceRef));
      t5 = Q.createServiceObject(t2.$index(json, "interfaces"), C.List_InstanceRef);
      if (t5 == null)
        t5 = [];
      t6 = type$.Iterable_dynamic;
      t1.set$interfaces(P.List_List$from(t6._as(t5), true, t4));
      t1.mixin = t4._as(Q.createServiceObject(t2.$index(json, "mixin"), C.List_InstanceRef));
      t4 = Q.createServiceObject(t2.$index(json, "fields"), C.List_FieldRef);
      t1.set$fields(P.List_List$from(t6._as(t4 == null ? [] : t4), true, type$.FieldRef));
      t4 = Q.createServiceObject(t2.$index(json, "functions"), C.List_FuncRef);
      t1.set$functions(P.List_List$from(t6._as(t4 == null ? [] : t4), true, type$.FuncRef));
      t2 = Q.createServiceObject(t2.$index(json, "subclasses"), C.List_ClassRef);
      t1.set$subclasses(P.List_List$from(t6._as(t2 == null ? [] : t2), true, t3));
      return t1;
    },
    ClassHeapStats_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ClassHeapStats(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.classRef = type$.ClassRef._as(Q.createServiceObject(t2.$index(json, "class"), C.List_ClassRef));
      t1.accumulatedSize = H._asIntS(t2.$index(json, "accumulatedSize"));
      t1.bytesCurrent = H._asIntS(t2.$index(json, "bytesCurrent"));
      t1.instancesAccumulated = H._asIntS(t2.$index(json, "instancesAccumulated"));
      t1.instancesCurrent = H._asIntS(t2.$index(json, "instancesCurrent"));
      return t1;
    },
    ClassList_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ClassList(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = Q.createServiceObject(J.$index$asx(json, "classes"), C.List_ClassRef);
      if (t2 == null)
        t2 = [];
      t1.set$classes(0, P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.ClassRef));
      return t1;
    },
    ClientName_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ClientName(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.name = H._asStringS(J.$index$asx(json, "name"));
      return t1;
    },
    CodeRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.CodeRef(null, null, json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      return t1;
    },
    Code_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Code(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      return t1;
    },
    ContextRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ContextRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.length = H._asIntS(J.$index$asx(json, "length"));
      return t1;
    },
    Context_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Context(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.length = H._asIntS(t2.$index(json, "length"));
      t1.parent = type$.Context._as(Q.createServiceObject(t2.$index(json, "parent"), C.List_Context));
      t2 = Q.createServiceObject(t2.$index(json, "variables"), C.List_ContextElement);
      if (t2 == null)
        t2 = [];
      t1.set$variables(P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.ContextElement));
      return t1;
    },
    ContextElement_parse: function(json) {
      var t1 = new Q.ContextElement();
      t1.value = Q.createServiceObject(J.$index$asx(type$.Map_String_dynamic._as(json), "value"), C.List_InstanceRef_Sentinel);
      return t1;
    },
    CpuSamples_parse: function(json) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.CpuSamples(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.samplePeriod = H._asIntS(t2.$index(json, "samplePeriod"));
      t1.maxStackDepth = H._asIntS(t2.$index(json, "maxStackDepth"));
      t1.sampleCount = H._asIntS(t2.$index(json, "sampleCount"));
      t1.timeSpan = H._asIntS(t2.$index(json, "timeSpan"));
      t1.timeOriginMicros = H._asIntS(t2.$index(json, "timeOriginMicros"));
      t1.timeExtentMicros = H._asIntS(t2.$index(json, "timeExtentMicros"));
      t1.pid = H._asIntS(t2.$index(json, "pid"));
      t3 = Q.createServiceObject(t2.$index(json, "functions"), C.List_ProfileFunction);
      if (t3 == null)
        t3 = [];
      t4 = type$.Iterable_dynamic;
      t1.set$functions(P.List_List$from(t4._as(t3), true, type$.ProfileFunction));
      t2 = Q.createServiceObject(t2.$index(json, "samples"), C.List_CpuSample);
      t1.set$samples(P.List_List$from(t4._as(t2 == null ? [] : t2), true, type$.CpuSample));
      return t1;
    },
    CpuSample_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.CpuSample();
      t2 = J.getInterceptor$asx(json);
      t1.tid = H._asIntS(t2.$index(json, "tid"));
      t1.timestamp = H._asIntS(t2.$index(json, "timestamp"));
      t1.vmTag = H._asStringS(t2.$index(json, "vmTag"));
      t1.userTag = H._asStringS(t2.$index(json, "userTag"));
      t1.truncated = H._asBoolS(t2.$index(json, "truncated"));
      t1.set$stack(P.List_List$from(type$.Iterable_dynamic._as(t2.$index(json, "stack")), true, type$.int));
      return t1;
    },
    ErrorRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ErrorRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.message = H._asStringS(t2.$index(json, "message"));
      return t1;
    },
    Error_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Error(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.message = H._asStringS(t2.$index(json, "message"));
      t3 = type$.InstanceRef;
      t1.exception = t3._as(Q.createServiceObject(t2.$index(json, "exception"), C.List_InstanceRef));
      t1.stacktrace = t3._as(Q.createServiceObject(t2.$index(json, "stacktrace"), C.List_InstanceRef));
      return t1;
    },
    Event_parse: function(json) {
      var t1, t2, t3,
        _s16_ = "pauseBreakpoints",
        _s14_ = "timelineEvents";
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Event(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.isolate = type$.IsolateRef._as(Q.createServiceObject(t2.$index(json, "isolate"), C.List_IsolateRef));
      t1.vm = type$.VMRef._as(Q.createServiceObject(t2.$index(json, "vm"), C.List_VMRef));
      t1.timestamp = H._asIntS(t2.$index(json, "timestamp"));
      t3 = type$.Breakpoint;
      t1.breakpoint = t3._as(Q.createServiceObject(t2.$index(json, "breakpoint"), C.List_Breakpoint));
      t1.set$pauseBreakpoints(t2.$index(json, _s16_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t2.$index(json, _s16_), C.List_Breakpoint)), true, t3));
      t1.topFrame = type$.Frame._as(Q.createServiceObject(t2.$index(json, "topFrame"), C.List_Frame));
      t3 = type$.InstanceRef;
      t1.exception = t3._as(Q.createServiceObject(t2.$index(json, "exception"), C.List_InstanceRef));
      t1.bytes = H._asStringS(t2.$index(json, "bytes"));
      t1.inspectee = t3._as(Q.createServiceObject(t2.$index(json, "inspectee"), C.List_InstanceRef));
      t1.extensionRPC = H._asStringS(t2.$index(json, "extensionRPC"));
      t1.extensionKind = H._asStringS(t2.$index(json, "extensionKind"));
      t3 = type$.Map_dynamic_dynamic._as(t2.$index(json, "extensionData"));
      t1.extensionData = t3 == null ? null : new Q.ExtensionData(t3);
      t1.set$timelineEvents(t2.$index(json, _s14_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t2.$index(json, _s14_), C.List_TimelineEvent)), true, type$.TimelineEvent));
      t1.atAsyncSuspension = H._asBoolS(t2.$index(json, "atAsyncSuspension"));
      t1.status = H._asStringS(t2.$index(json, "status"));
      t1.logRecord = type$.LogRecord._as(Q.createServiceObject(t2.$index(json, "logRecord"), C.List_LogRecord));
      t1.service = H._asStringS(t2.$index(json, "service"));
      t1.method = H._asStringS(t2.$index(json, "method"));
      t1.alias = H._asStringS(t2.$index(json, "alias"));
      t1.flag = H._asStringS(t2.$index(json, "flag"));
      t1.newValue = H._asStringS(t2.$index(json, "newValue"));
      t1.last = H._asBoolS(t2.$index(json, "last"));
      t1.data = type$.ByteData._as(t2.$index(json, "data"));
      return t1;
    },
    FieldRef_parse: function(json) {
      var t1, t2, _null = null;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.FieldRef(_null, _null, _null, _null, _null, _null, json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.owner = type$.ObjRef._as(Q.createServiceObject(t2.$index(json, "owner"), C.List_ObjRef));
      t1.declaredType = type$.InstanceRef._as(Q.createServiceObject(t2.$index(json, "declaredType"), C.List_InstanceRef));
      t1.isConst = H._asBoolS(t2.$index(json, "const"));
      t1.isFinal = H._asBoolS(t2.$index(json, "final"));
      t1.isStatic = H._asBoolS(t2.$index(json, "static"));
      return t1;
    },
    Field_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Field(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.owner = type$.ObjRef._as(Q.createServiceObject(t2.$index(json, "owner"), C.List_ObjRef));
      t3 = type$.InstanceRef;
      t1.declaredType = t3._as(Q.createServiceObject(t2.$index(json, "declaredType"), C.List_InstanceRef));
      t1.isConst = H._asBoolS(t2.$index(json, "const"));
      t1.isFinal = H._asBoolS(t2.$index(json, "final"));
      t1.isStatic = H._asBoolS(t2.$index(json, "static"));
      t1.staticValue = t3._as(Q.createServiceObject(t2.$index(json, "staticValue"), C.List_InstanceRef));
      t1.location = type$.SourceLocation._as(Q.createServiceObject(t2.$index(json, "location"), C.List_SourceLocation));
      return t1;
    },
    Flag_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.Flag();
        t2 = J.getInterceptor$asx(json);
        t1.name = H._asStringS(t2.$index(json, "name"));
        t1.comment = H._asStringS(t2.$index(json, "comment"));
        t1.modified = H._asBoolS(t2.$index(json, "modified"));
        t1.valueAsString = H._asStringS(t2.$index(json, "valueAsString"));
      }
      return t1;
    },
    Flag$_fromJson: function(json) {
      var t1 = new Q.Flag(),
        t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.comment = H._asStringS(t2.$index(json, "comment"));
      t1.modified = H._asBoolS(t2.$index(json, "modified"));
      t1.valueAsString = H._asStringS(t2.$index(json, "valueAsString"));
      return t1;
    },
    FlagList_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.FlagList(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = Q.createServiceObject(J.$index$asx(json, "flags"), C.List_Flag);
      if (t2 == null)
        t2 = [];
      t1.set$flags(P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.Flag));
      return t1;
    },
    Frame_parse: function(json) {
      var t1, t2, _null = null;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Frame(_null, _null, _null, _null, _null, json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.index = H._asIntS(t2.$index(json, "index"));
      t1.$function = type$.FuncRef._as(Q.createServiceObject(t2.$index(json, "function"), C.List_FuncRef));
      t1.code = type$.CodeRef._as(Q.createServiceObject(t2.$index(json, "code"), C.List_CodeRef));
      t1.location = type$.SourceLocation._as(Q.createServiceObject(t2.$index(json, "location"), C.List_SourceLocation));
      t1.set$vars(t2.$index(json, "vars") == null ? _null : P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t2.$index(json, "vars"), C.List_BoundVariable)), true, type$.BoundVariable));
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      return t1;
    },
    Frame$: function(code, $function, index, kind, $location) {
      return new Q.Frame(index, $function, code, $location, kind, null);
    },
    FuncRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.FuncRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.owner = Q.createServiceObject(t2.$index(json, "owner"), C.List_LibraryRef_ClassRef_FuncRef);
      t1.isStatic = H._asBoolS(t2.$index(json, "static"));
      t1.isConst = H._asBoolS(t2.$index(json, "const"));
      return t1;
    },
    Func_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Func(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.owner = Q.createServiceObject(t2.$index(json, "owner"), C.List_LibraryRef_ClassRef_FuncRef);
      t1.isStatic = H._asBoolS(t2.$index(json, "static"));
      t1.isConst = H._asBoolS(t2.$index(json, "const"));
      t1.location = type$.SourceLocation._as(Q.createServiceObject(t2.$index(json, "location"), C.List_SourceLocation));
      t1.code = type$.CodeRef._as(Q.createServiceObject(t2.$index(json, "code"), C.List_CodeRef));
      return t1;
    },
    InstanceRef_parse: function(json) {
      type$.Map_String_dynamic._as(json);
      return json == null ? null : Q.InstanceRef$_fromJson(json);
    },
    InstanceRef$_fromJson: function(json) {
      var t1 = new Q.InstanceRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.InstanceRef$_fromJson$1(json);
      return t1;
    },
    Instance_parse: function(json) {
      var t1 = Q.Instance$_fromJson(type$.Map_String_dynamic._as(json));
      return t1;
    },
    Instance$_fromJson: function(json) {
      var t1 = new Q.Instance(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t1.Instance$_fromJson$1(json);
      return t1;
    },
    IsolateRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.IsolateRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.id = H._asStringS(t2.$index(json, "id"));
      t1.number = H._asStringS(t2.$index(json, "number"));
      t1.name = H._asStringS(t2.$index(json, "name"));
      return t1;
    },
    Isolate_parse: function(json) {
      var t1, t2, t3, t4, t5,
        _s13_ = "extensionRPCs";
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Isolate(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.id = H._asStringS(t2.$index(json, "id"));
      t1.number = H._asStringS(t2.$index(json, "number"));
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.startTime = H._asIntS(t2.$index(json, "startTime"));
      t1.runnable = H._asBoolS(t2.$index(json, "runnable"));
      t1.livePorts = H._asIntS(t2.$index(json, "livePorts"));
      t1.pauseOnExit = H._asBoolS(t2.$index(json, "pauseOnExit"));
      t1.pauseEvent = type$.Event_2._as(Q.createServiceObject(t2.$index(json, "pauseEvent"), C.List_Event));
      t3 = type$.LibraryRef;
      t1.rootLib = t3._as(Q.createServiceObject(t2.$index(json, "rootLib"), C.List_LibraryRef));
      t4 = Q.createServiceObject(t2.$index(json, "libraries"), C.List_LibraryRef);
      if (t4 == null)
        t4 = [];
      t5 = type$.Iterable_dynamic;
      t1.set$libraries(P.List_List$from(t5._as(t4), true, t3));
      t3 = Q.createServiceObject(t2.$index(json, "breakpoints"), C.List_Breakpoint);
      t1.set$breakpoints(P.List_List$from(t5._as(t3 == null ? [] : t3), true, type$.Breakpoint));
      t1.error = type$.Error_2._as(Q.createServiceObject(t2.$index(json, "error"), C.List_Error));
      t1.exceptionPauseMode = H._asStringS(t2.$index(json, "exceptionPauseMode"));
      t1.set$extensionRPCs(t2.$index(json, _s13_) == null ? null : P.List_List$from(t5._as(t2.$index(json, _s13_)), true, type$.String));
      return t1;
    },
    IsolateGroupRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.IsolateGroupRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.id = H._asStringS(t2.$index(json, "id"));
      t1.number = H._asStringS(t2.$index(json, "number"));
      t1.name = H._asStringS(t2.$index(json, "name"));
      return t1;
    },
    IsolateGroup_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.IsolateGroup(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.id = H._asStringS(t2.$index(json, "id"));
      t1.number = H._asStringS(t2.$index(json, "number"));
      t1.name = H._asStringS(t2.$index(json, "name"));
      t2 = Q.createServiceObject(t2.$index(json, "isolates"), C.List_IsolateRef);
      if (t2 == null)
        t2 = [];
      t1.set$isolates(P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.IsolateRef));
      return t1;
    },
    InboundReferences_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.InboundReferences(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = Q.createServiceObject(J.$index$asx(json, "references"), C.List_InboundReference);
      if (t2 == null)
        t2 = [];
      t1.set$references(P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.InboundReference));
      return t1;
    },
    InboundReference_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.InboundReference();
      t2 = J.getInterceptor$asx(json);
      t1.source = type$.ObjRef._as(Q.createServiceObject(t2.$index(json, "source"), C.List_ObjRef));
      t1.parentListIndex = H._asIntS(t2.$index(json, "parentListIndex"));
      t1.parentField = type$.FieldRef._as(Q.createServiceObject(t2.$index(json, "parentField"), C.List_FieldRef));
      return t1;
    },
    InstanceSet_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.InstanceSet(json);
        t1.type = H._asStringS(J.$index$asx(json, "type"));
        t2 = J.getInterceptor$asx(json);
        t1.totalCount = H._asIntS(t2.$index(json, "totalCount"));
        t3 = t2.$index(json, "instances");
        t1.set$instances(P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t3 == null ? t2.$index(json, "samples") : t3, C.List_ObjRef)), true, type$.ObjRef));
      }
      return t1;
    },
    InstanceSet$_fromJson: function(json) {
      var t2, t3,
        t1 = new Q.InstanceSet(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.totalCount = H._asIntS(t2.$index(json, "totalCount"));
      t3 = t2.$index(json, "instances");
      t1.set$instances(P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t3 == null ? t2.$index(json, "samples") : t3, C.List_ObjRef)), true, type$.ObjRef));
      return t1;
    },
    LibraryRef_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.LibraryRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.uri = H._asStringS(t2.$index(json, "uri"));
      return t1;
    },
    Library_parse: function(json) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.Library(json);
        t1.type = H._asStringS(J.$index$asx(json, "type"));
        t1.Obj$_fromJson$1(json);
        t2 = J.getInterceptor$asx(json);
        t1.name = H._asStringS(t2.$index(json, "name"));
        t1.uri = H._asStringS(t2.$index(json, "uri"));
        t1.debuggable = H._asBoolS(t2.$index(json, "debuggable"));
        t3 = type$.Iterable_dynamic;
        t1.set$dependencies(P.List_List$from(t3._as(Q._createSpecificObject(t2.$index(json, "dependencies"), Q.vm_service_LibraryDependency_parse$closure())), true, type$.LibraryDependency));
        t4 = Q.createServiceObject(t2.$index(json, "scripts"), C.List_ScriptRef);
        t1.set$scripts(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.ScriptRef));
        t4 = Q.createServiceObject(t2.$index(json, "variables"), C.List_FieldRef);
        t1.set$variables(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.FieldRef));
        t4 = Q.createServiceObject(t2.$index(json, "functions"), C.List_FuncRef);
        t1.set$functions(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.FuncRef));
        t2 = Q.createServiceObject(t2.$index(json, "classes"), C.List_ClassRef);
        t1.set$classes(0, P.List_List$from(t3._as(t2 == null ? [] : t2), true, type$.ClassRef));
      }
      return t1;
    },
    Library$_fromJson: function(json) {
      var t2, t3, t4,
        t1 = new Q.Library(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.uri = H._asStringS(t2.$index(json, "uri"));
      t1.debuggable = H._asBoolS(t2.$index(json, "debuggable"));
      t3 = type$.Iterable_dynamic;
      t1.set$dependencies(P.List_List$from(t3._as(Q._createSpecificObject(t2.$index(json, "dependencies"), Q.vm_service_LibraryDependency_parse$closure())), true, type$.LibraryDependency));
      t4 = Q.createServiceObject(t2.$index(json, "scripts"), C.List_ScriptRef);
      t1.set$scripts(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.ScriptRef));
      t4 = Q.createServiceObject(t2.$index(json, "variables"), C.List_FieldRef);
      t1.set$variables(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.FieldRef));
      t4 = Q.createServiceObject(t2.$index(json, "functions"), C.List_FuncRef);
      t1.set$functions(P.List_List$from(t3._as(t4 == null ? [] : t4), true, type$.FuncRef));
      t2 = Q.createServiceObject(t2.$index(json, "classes"), C.List_ClassRef);
      t1.set$classes(0, P.List_List$from(t3._as(t2 == null ? [] : t2), true, type$.ClassRef));
      return t1;
    },
    LibraryDependency_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.LibraryDependency();
        t2 = J.getInterceptor$asx(json);
        t1.isImport = H._asBoolS(t2.$index(json, "isImport"));
        t1.isDeferred = H._asBoolS(t2.$index(json, "isDeferred"));
        t1.prefix = H._asStringS(t2.$index(json, "prefix"));
        t1.target = type$.LibraryRef._as(Q.createServiceObject(t2.$index(json, "target"), C.List_LibraryRef));
      }
      return t1;
    },
    LogRecord_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.LogRecord(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t3 = type$.InstanceRef;
      t1.message = t3._as(Q.createServiceObject(t2.$index(json, "message"), C.List_InstanceRef));
      t1.time = H._asIntS(t2.$index(json, "time"));
      t1.level = H._asIntS(t2.$index(json, "level"));
      t1.sequenceNumber = H._asIntS(t2.$index(json, "sequenceNumber"));
      t1.loggerName = t3._as(Q.createServiceObject(t2.$index(json, "loggerName"), C.List_InstanceRef));
      t1.zone = t3._as(Q.createServiceObject(t2.$index(json, "zone"), C.List_InstanceRef));
      t1.error = t3._as(Q.createServiceObject(t2.$index(json, "error"), C.List_InstanceRef));
      t1.stackTrace = t3._as(Q.createServiceObject(t2.$index(json, "stackTrace"), C.List_InstanceRef));
      return t1;
    },
    MapAssociation_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.MapAssociation();
        t2 = J.getInterceptor$asx(json);
        t1.key = Q.createServiceObject(t2.$index(json, "key"), C.List_InstanceRef_Sentinel);
        t1.value = Q.createServiceObject(t2.$index(json, "value"), C.List_InstanceRef_Sentinel);
      }
      return t1;
    },
    MemoryUsage_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.MemoryUsage(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.externalUsage = H._asIntS(t2.$index(json, "externalUsage"));
      t1.heapCapacity = H._asIntS(t2.$index(json, "heapCapacity"));
      t1.heapUsage = H._asIntS(t2.$index(json, "heapUsage"));
      return t1;
    },
    Message_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Message(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.index = H._asIntS(t2.$index(json, "index"));
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.messageObjectId = H._asStringS(t2.$index(json, "messageObjectId"));
      t1.size = H._asIntS(t2.$index(json, "size"));
      t1.handler = type$.FuncRef._as(Q.createServiceObject(t2.$index(json, "handler"), C.List_FuncRef));
      t1.location = type$.SourceLocation._as(Q.createServiceObject(t2.$index(json, "location"), C.List_SourceLocation));
      return t1;
    },
    NativeFunction_parse: function(json) {
      var t1 = new Q.NativeFunction();
      t1.name = H._asStringS(J.$index$asx(type$.Map_String_dynamic._as(json), "name"));
      return t1;
    },
    NullValRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.NullValRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.InstanceRef$_fromJson$1(json);
      t1.NullValRef_valueAsString = H._asStringS(J.$index$asx(json, "valueAsString"));
      return t1;
    },
    NullVal_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.NullVal(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t1.Instance$_fromJson$1(json);
      t1.NullVal_valueAsString = H._asStringS(J.$index$asx(json, "valueAsString"));
      return t1;
    },
    ObjRef_parse: function(json) {
      var t1 = Q.ObjRef$_fromJson(type$.Map_String_dynamic._as(json));
      return t1;
    },
    ObjRef$_fromJson: function(json) {
      var t1 = new Q.ObjRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      return t1;
    },
    Obj_parse: function(json) {
      var t1 = Q.Obj$_fromJson(type$.Map_String_dynamic._as(json));
      return t1;
    },
    Obj$_fromJson: function(json) {
      var t1 = new Q.Obj(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      return t1;
    },
    ProfileFunction_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ProfileFunction();
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.inclusiveTicks = H._asIntS(t2.$index(json, "inclusiveTicks"));
      t1.exclusiveTicks = H._asIntS(t2.$index(json, "exclusiveTicks"));
      t1.resolvedUrl = H._asStringS(t2.$index(json, "resolvedUrl"));
      t1.$function = Q.createServiceObject(t2.$index(json, "function"), C.List_dynamic);
      return t1;
    },
    ReloadReport_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ReloadReport(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.success = H._asBoolS(J.$index$asx(json, "success"));
      return t1;
    },
    RetainingObject_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.RetainingObject();
      t2 = J.getInterceptor$asx(json);
      t3 = type$.ObjRef;
      t1.value = t3._as(Q.createServiceObject(t2.$index(json, "value"), C.List_ObjRef));
      t1.parentListIndex = H._asIntS(t2.$index(json, "parentListIndex"));
      t1.parentMapKey = t3._as(Q.createServiceObject(t2.$index(json, "parentMapKey"), C.List_ObjRef));
      t1.parentField = H._asStringS(t2.$index(json, "parentField"));
      return t1;
    },
    RetainingPath_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.RetainingPath(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.length = H._asIntS(t2.$index(json, "length"));
      t1.gcRootType = H._asStringS(t2.$index(json, "gcRootType"));
      t2 = Q.createServiceObject(t2.$index(json, "elements"), C.List_RetainingObject);
      if (t2 == null)
        t2 = [];
      t1.set$elements(0, P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.RetainingObject));
      return t1;
    },
    Response_parse: function(json) {
      type$.Map_String_dynamic._as(json);
      return json == null ? null : Q.Response$_fromJson(json);
    },
    Response$_fromJson: function(json) {
      var t1 = new Q.Response(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      return t1;
    },
    Sentinel_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Sentinel(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.valueAsString = H._asStringS(t2.$index(json, "valueAsString"));
      return t1;
    },
    Sentinel$_fromJson: function(json) {
      var t2,
        t1 = new Q.Sentinel(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.kind = H._asStringS(t2.$index(json, "kind"));
      t1.valueAsString = H._asStringS(t2.$index(json, "valueAsString"));
      return t1;
    },
    ScriptRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ScriptRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.uri = H._asStringS(J.$index$asx(json, "uri"));
      return t1;
    },
    Script_parse: function(json) {
      var t1 = Q.Script$_fromJson(type$.Map_String_dynamic._as(json));
      return t1;
    },
    Script$_fromJson: function(json) {
      var t1 = type$.int;
      t1 = new Q.Script(P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t1.Script$_fromJson$1(json);
      return t1;
    },
    ScriptList_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.ScriptList(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = Q.createServiceObject(J.$index$asx(json, "scripts"), C.List_ScriptRef);
      if (t2 == null)
        t2 = [];
      t1.set$scripts(P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.ScriptRef));
      return t1;
    },
    SourceLocation_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.SourceLocation(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.script = type$.ScriptRef._as(Q.createServiceObject(t2.$index(json, "script"), C.List_ScriptRef));
      t1.tokenPos = H._asIntS(t2.$index(json, "tokenPos"));
      t1.endTokenPos = H._asIntS(t2.$index(json, "endTokenPos"));
      return t1;
    },
    SourceReport_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.SourceReport(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t3 = type$.Iterable_dynamic;
      t1.set$ranges(P.List_List$from(t3._as(Q._createSpecificObject(t2.$index(json, "ranges"), Q.vm_service_SourceReportRange_parse$closure())), true, type$.SourceReportRange));
      t2 = Q.createServiceObject(t2.$index(json, "scripts"), C.List_ScriptRef);
      t1.set$scripts(P.List_List$from(t3._as(t2 == null ? [] : t2), true, type$.ScriptRef));
      return t1;
    },
    SourceReportCoverage_parse: function(json) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.SourceReportCoverage();
        t2 = J.getInterceptor$asx(json);
        t3 = type$.Iterable_dynamic;
        t4 = type$.int;
        t1.set$hits(P.List_List$from(t3._as(t2.$index(json, "hits")), true, t4));
        t1.set$misses(P.List_List$from(t3._as(t2.$index(json, "misses")), true, t4));
      }
      return t1;
    },
    SourceReportRange_parse: function(json) {
      var t1, t2,
        _s19_ = "possibleBreakpoints";
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.SourceReportRange();
        t2 = J.getInterceptor$asx(json);
        t1.scriptIndex = H._asIntS(t2.$index(json, "scriptIndex"));
        t1.startPos = H._asIntS(t2.$index(json, "startPos"));
        t1.endPos = H._asIntS(t2.$index(json, "endPos"));
        t1.compiled = H._asBoolS(t2.$index(json, "compiled"));
        t1.error = type$.ErrorRef._as(Q.createServiceObject(t2.$index(json, "error"), C.List_ErrorRef));
        t1.coverage = type$.SourceReportCoverage._as(Q._createSpecificObject(t2.$index(json, "coverage"), Q.vm_service_SourceReportCoverage_parse$closure()));
        t1.set$possibleBreakpoints(t2.$index(json, _s19_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(t2.$index(json, _s19_)), true, type$.int));
      }
      return t1;
    },
    Stack_parse: function(json) {
      var t1, t2, t3, t4, t5,
        _s17_ = "asyncCausalFrames",
        _s13_ = "awaiterFrames";
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Stack(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t3 = Q.createServiceObject(t2.$index(json, "frames"), C.List_Frame);
      if (t3 == null)
        t3 = [];
      t4 = type$.Iterable_dynamic;
      t5 = type$.Frame;
      t1.set$frames(P.List_List$from(t4._as(t3), true, t5));
      t1.set$asyncCausalFrames(t2.$index(json, _s17_) == null ? null : P.List_List$from(t4._as(Q.createServiceObject(t2.$index(json, _s17_), C.List_Frame)), true, t5));
      t1.set$awaiterFrames(t2.$index(json, _s13_) == null ? null : P.List_List$from(t4._as(Q.createServiceObject(t2.$index(json, _s13_), C.List_Frame)), true, t5));
      t2 = Q.createServiceObject(t2.$index(json, "messages"), C.List_Message);
      t1.set$messages(P.List_List$from(t4._as(t2 == null ? [] : t2), true, type$.Message));
      return t1;
    },
    Success_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Success(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      return t1;
    },
    Timeline_parse: function(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      if (json == null)
        t1 = null;
      else {
        t1 = new Q.Timeline(json);
        t1.type = H._asStringS(J.$index$asx(json, "type"));
        t2 = J.getInterceptor$asx(json);
        t3 = Q.createServiceObject(t2.$index(json, "traceEvents"), C.List_TimelineEvent);
        if (t3 == null)
          t3 = [];
        t1.set$traceEvents(P.List_List$from(type$.Iterable_dynamic._as(t3), true, type$.TimelineEvent));
        t1.timeOriginMicros = H._asIntS(t2.$index(json, "timeOriginMicros"));
        t1.timeExtentMicros = H._asIntS(t2.$index(json, "timeExtentMicros"));
      }
      return t1;
    },
    Timeline$_fromJson: function(json) {
      var t2, t3,
        t1 = new Q.Timeline(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t3 = Q.createServiceObject(t2.$index(json, "traceEvents"), C.List_TimelineEvent);
      if (t3 == null)
        t3 = [];
      t1.set$traceEvents(P.List_List$from(type$.Iterable_dynamic._as(t3), true, type$.TimelineEvent));
      t1.timeOriginMicros = H._asIntS(t2.$index(json, "timeOriginMicros"));
      t1.timeExtentMicros = H._asIntS(t2.$index(json, "timeExtentMicros"));
      return t1;
    },
    TimelineEvent_parse: function(json) {
      type$.Map_String_dynamic._as(json);
      return new Q.TimelineEvent(json);
    },
    TimelineFlags_parse: function(json) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.TimelineFlags(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.recorderName = H._asStringS(t2.$index(json, "recorderName"));
      t3 = type$.Iterable_dynamic;
      t4 = type$.String;
      t1.set$availableStreams(P.List_List$from(t3._as(t2.$index(json, "availableStreams")), true, t4));
      t1.set$recordedStreams(P.List_List$from(t3._as(t2.$index(json, "recordedStreams")), true, t4));
      return t1;
    },
    Timestamp_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Timestamp(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.timestamp = H._asIntS(J.$index$asx(json, "timestamp"));
      return t1;
    },
    TypeArgumentsRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.TypeArgumentsRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.ObjRef$_fromJson$1(json);
      t1.name = H._asStringS(J.$index$asx(json, "name"));
      return t1;
    },
    TypeArguments_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.TypeArguments(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.Obj$_fromJson$1(json);
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t2 = Q.createServiceObject(t2.$index(json, "types"), C.List_InstanceRef);
      if (t2 == null)
        t2 = [];
      t1.set$types(0, P.List_List$from(type$.Iterable_dynamic._as(t2), true, type$.InstanceRef));
      return t1;
    },
    UnresolvedSourceLocation_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.UnresolvedSourceLocation(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.script = type$.ScriptRef._as(Q.createServiceObject(t2.$index(json, "script"), C.List_ScriptRef));
      t1.scriptUri = H._asStringS(t2.$index(json, "scriptUri"));
      t1.tokenPos = H._asIntS(t2.$index(json, "tokenPos"));
      t1.line = H._asIntS(t2.$index(json, "line"));
      t1.column = H._asIntS(t2.$index(json, "column"));
      return t1;
    },
    Version_parse: function(json) {
      var t1, t2;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.Version(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.major = H._asIntS(t2.$index(json, "major"));
      t1.minor = H._asIntS(t2.$index(json, "minor"));
      return t1;
    },
    VMRef_parse: function(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.VMRef(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t1.name = H._asStringS(J.$index$asx(json, "name"));
      return t1;
    },
    VM_parse: function(json) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(json);
      t1 = new Q.VM(json);
      t1.type = H._asStringS(J.$index$asx(json, "type"));
      t2 = J.getInterceptor$asx(json);
      t1.name = H._asStringS(t2.$index(json, "name"));
      t1.architectureBits = H._asIntS(t2.$index(json, "architectureBits"));
      t1.hostCPU = H._asStringS(t2.$index(json, "hostCPU"));
      t1.operatingSystem = H._asStringS(t2.$index(json, "operatingSystem"));
      t1.targetCPU = H._asStringS(t2.$index(json, "targetCPU"));
      t1.version = H._asStringS(t2.$index(json, "version"));
      t1.pid = H._asIntS(t2.$index(json, "pid"));
      t1.startTime = H._asIntS(t2.$index(json, "startTime"));
      t3 = Q.createServiceObject(t2.$index(json, "isolates"), C.List_IsolateRef);
      if (t3 == null)
        t3 = [];
      t4 = type$.Iterable_dynamic;
      t1.set$isolates(P.List_List$from(t4._as(t3), true, type$.IsolateRef));
      t2 = Q.createServiceObject(t2.$index(json, "isolateGroups"), C.List_IsolateGroupRef);
      t1.set$isolateGroups(P.List_List$from(t4._as(t2 == null ? [] : t2), true, type$.IsolateGroupRef));
      return t1;
    },
    createServiceObject_closure: function createServiceObject_closure(t0) {
      this.expectedTypes = t0;
    },
    _createSpecificObject_closure: function _createSpecificObject_closure(t0) {
      this.creator = t0;
    },
    VmService: function VmService(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._writeMessage = _._streamSub = null;
      _._id = 0;
      _._completers = t0;
      _._methodCalls = t1;
      _._services = t2;
      _._log = null;
      _._onSend = t3;
      _._onReceive = t4;
      _._onDoneCompleter = t5;
      _._eventControllers = t6;
      _._disposeHandler = null;
    },
    VmService_closure: function VmService_closure(t0) {
      this.$this = t0;
    },
    VmService_dispose_closure: function VmService_dispose_closure(t0) {
      this.$this = t0;
    },
    RPCError: function RPCError(t0, t1, t2, t3) {
      var _ = this;
      _.callingMethod = t0;
      _.code = t1;
      _.message = t2;
      _.data = t3;
    },
    SentinelException: function SentinelException(t0, t1) {
      this.callingMethod = t0;
      this.sentinel = t1;
    },
    ExtensionData: function ExtensionData(t0) {
      this.data = t0;
    },
    _NullLog: function _NullLog() {
    },
    AllocationProfile: function AllocationProfile(t0) {
      var _ = this;
      _.dateLastServiceGC = _.dateLastAccumulatorReset = _.memoryUsage = _.members = null;
      _.json = t0;
      _.type = null;
    },
    AllocationProfile_toJson_closure: function AllocationProfile_toJson_closure() {
    },
    BoundField: function BoundField(t0, t1) {
      this.decl = t0;
      this.value = t1;
    },
    BoundVariable: function BoundVariable(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.declarationTokenPos = t2;
      _.scopeStartTokenPos = t3;
      _.scopeEndTokenPos = t4;
      _.json = t5;
      _.type = null;
    },
    Breakpoint: function Breakpoint(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.location = _.isSyntheticAsyncContinuation = _.resolved = _.breakpointNumber = null;
      _.json = t0;
      _.type = null;
    },
    ClassRef: function ClassRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Class: function Class(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.subclasses = _.functions = _.fields = _.mixin = _.interfaces = _.superType = _.superClass = _.location = _.library = _.isConst = _.isAbstract = _.error = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Class_toJson_closure: function Class_toJson_closure() {
    },
    Class_toJson_closure0: function Class_toJson_closure0() {
    },
    Class_toJson_closure1: function Class_toJson_closure1() {
    },
    Class_toJson_closure2: function Class_toJson_closure2() {
    },
    ClassHeapStats: function ClassHeapStats(t0) {
      var _ = this;
      _.instancesCurrent = _.instancesAccumulated = _.bytesCurrent = _.accumulatedSize = _.classRef = null;
      _.json = t0;
      _.type = null;
    },
    ClassList: function ClassList(t0) {
      this.classes = null;
      this.json = t0;
      this.type = null;
    },
    ClassList_toJson_closure: function ClassList_toJson_closure() {
    },
    ClientName: function ClientName(t0) {
      this.name = null;
      this.json = t0;
      this.type = null;
    },
    CodeRef: function CodeRef(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _.kind = t1;
      _.fixedId = _.id = null;
      _.json = t2;
      _.type = null;
    },
    Code: function Code(t0) {
      var _ = this;
      _.fixedId = _.id = _.kind = _.name = null;
      _.json = t0;
      _.type = null;
    },
    ContextRef: function ContextRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.length = null;
      _.json = t0;
      _.type = null;
    },
    Context: function Context(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.variables = _.parent = _.length = null;
      _.json = t0;
      _.type = null;
    },
    Context_toJson_closure: function Context_toJson_closure() {
    },
    ContextElement: function ContextElement() {
      this.value = null;
    },
    CpuSamples: function CpuSamples(t0) {
      var _ = this;
      _.samples = _.functions = _.pid = _.timeExtentMicros = _.timeOriginMicros = _.timeSpan = _.sampleCount = _.maxStackDepth = _.samplePeriod = null;
      _.json = t0;
      _.type = null;
    },
    CpuSamples_toJson_closure: function CpuSamples_toJson_closure() {
    },
    CpuSamples_toJson_closure0: function CpuSamples_toJson_closure0() {
    },
    CpuSample: function CpuSample() {
      var _ = this;
      _.stack = _.truncated = _.userTag = _.vmTag = _.timestamp = _.tid = null;
    },
    CpuSample_toJson_closure: function CpuSample_toJson_closure() {
    },
    ErrorRef: function ErrorRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.message = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    Error: function Error(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.stacktrace = _.exception = _.message = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    Event: function Event(t0) {
      var _ = this;
      _.data = _.last = _.newValue = _.flag = _.alias = _.method = _.service = _.logRecord = _.status = _.atAsyncSuspension = _.timelineEvents = _.extensionData = _.extensionKind = _.extensionRPC = _.inspectee = _.bytes = _.exception = _.topFrame = _.pauseBreakpoints = _.breakpoint = _.timestamp = _.vm = _.isolate = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    Event_toJson_closure: function Event_toJson_closure() {
    },
    Event_toJson_closure0: function Event_toJson_closure0() {
    },
    FieldRef: function FieldRef(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.owner = t1;
      _.declaredType = t2;
      _.isConst = t3;
      _.isFinal = t4;
      _.isStatic = t5;
      _.fixedId = _.id = null;
      _.json = t6;
      _.type = null;
    },
    Field: function Field(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.location = _.staticValue = _.isStatic = _.isFinal = _.isConst = _.declaredType = _.owner = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Flag: function Flag() {
      var _ = this;
      _.valueAsString = _.modified = _.comment = _.name = null;
    },
    FlagList: function FlagList(t0) {
      this.flags = null;
      this.json = t0;
      this.type = null;
    },
    FlagList_toJson_closure: function FlagList_toJson_closure() {
    },
    Frame: function Frame(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.index = t0;
      _.$function = t1;
      _.code = t2;
      _.location = t3;
      _.vars = null;
      _.kind = t4;
      _.json = t5;
      _.type = null;
    },
    Frame_toJson_closure: function Frame_toJson_closure() {
    },
    FuncRef: function FuncRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.isConst = _.isStatic = _.owner = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Func: function Func(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.code = _.location = _.isConst = _.isStatic = _.owner = _.name = null;
      _.json = t0;
      _.type = null;
    },
    InstanceRef: function InstanceRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.closureContext = _.closureFunction = _.pattern = _.parameterizedClass = _.typeClass = _.name = _.length = _.valueAsStringIsTruncated = _.valueAsString = _.classRef = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    Instance: function Instance(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.bound = _.targetType = _.parameterIndex = _.typeArguments = _.propertyValue = _.propertyKey = _.isMultiLine = _.isCaseSensitive = _.closureContext = _.closureFunction = _.pattern = _.mirrorReferent = _.bytes = _.associations = _.elements = _.fields = _.parameterizedClass = _.typeClass = _.name = _.count = _.offset = _.length = _.valueAsStringIsTruncated = _.valueAsString = _.Instance_classRef = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    Instance_toJson_closure: function Instance_toJson_closure() {
    },
    Instance_toJson_closure0: function Instance_toJson_closure0() {
    },
    Instance_toJson_closure1: function Instance_toJson_closure1() {
    },
    IsolateRef: function IsolateRef(t0) {
      var _ = this;
      _.name = _.number = _.id = null;
      _.json = t0;
      _.type = null;
    },
    Isolate: function Isolate(t0) {
      var _ = this;
      _.extensionRPCs = _.exceptionPauseMode = _.error = _.breakpoints = _.libraries = _.rootLib = _.pauseEvent = _.pauseOnExit = _.livePorts = _.runnable = _.startTime = _.name = _.number = _.id = null;
      _.json = t0;
      _.type = null;
    },
    Isolate_toJson_closure: function Isolate_toJson_closure() {
    },
    Isolate_toJson_closure0: function Isolate_toJson_closure0() {
    },
    Isolate_toJson_closure1: function Isolate_toJson_closure1() {
    },
    IsolateGroupRef: function IsolateGroupRef(t0) {
      var _ = this;
      _.name = _.number = _.id = null;
      _.json = t0;
      _.type = null;
    },
    IsolateGroup: function IsolateGroup(t0) {
      var _ = this;
      _.isolates = _.name = _.number = _.id = null;
      _.json = t0;
      _.type = null;
    },
    IsolateGroup_toJson_closure: function IsolateGroup_toJson_closure() {
    },
    InboundReferences: function InboundReferences(t0) {
      this.references = null;
      this.json = t0;
      this.type = null;
    },
    InboundReferences_toJson_closure: function InboundReferences_toJson_closure() {
    },
    InboundReference: function InboundReference() {
      this.parentField = this.parentListIndex = this.source = null;
    },
    InstanceSet: function InstanceSet(t0) {
      var _ = this;
      _.instances = _.totalCount = null;
      _.json = t0;
      _.type = null;
    },
    InstanceSet_toJson_closure: function InstanceSet_toJson_closure() {
    },
    LibraryRef: function LibraryRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.uri = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Library: function Library(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.classes = _.functions = _.variables = _.scripts = _.dependencies = _.debuggable = _.uri = _.name = null;
      _.json = t0;
      _.type = null;
    },
    Library_toJson_closure: function Library_toJson_closure() {
    },
    Library_toJson_closure0: function Library_toJson_closure0() {
    },
    Library_toJson_closure1: function Library_toJson_closure1() {
    },
    Library_toJson_closure2: function Library_toJson_closure2() {
    },
    Library_toJson_closure3: function Library_toJson_closure3() {
    },
    LibraryDependency: function LibraryDependency() {
      var _ = this;
      _.target = _.prefix = _.isDeferred = _.isImport = null;
    },
    LogRecord: function LogRecord(t0) {
      var _ = this;
      _.stackTrace = _.error = _.zone = _.loggerName = _.sequenceNumber = _.level = _.time = _.message = null;
      _.json = t0;
      _.type = null;
    },
    MapAssociation: function MapAssociation() {
      this.value = this.key = null;
    },
    MemoryUsage: function MemoryUsage(t0) {
      var _ = this;
      _.heapUsage = _.heapCapacity = _.externalUsage = null;
      _.json = t0;
      _.type = null;
    },
    Message: function Message(t0) {
      var _ = this;
      _.location = _.handler = _.size = _.messageObjectId = _.name = _.index = null;
      _.json = t0;
      _.type = null;
    },
    NativeFunction: function NativeFunction() {
      this.name = null;
    },
    NullValRef: function NullValRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.closureContext = _.closureFunction = _.pattern = _.parameterizedClass = _.typeClass = _.name = _.length = _.valueAsStringIsTruncated = _.valueAsString = _.classRef = _.kind = _.NullValRef_valueAsString = null;
      _.json = t0;
      _.type = null;
    },
    NullVal: function NullVal(t0) {
      var _ = this;
      _.classRef = _.fixedId = _.id = _.bound = _.targetType = _.parameterIndex = _.typeArguments = _.propertyValue = _.propertyKey = _.isMultiLine = _.isCaseSensitive = _.closureContext = _.closureFunction = _.pattern = _.mirrorReferent = _.bytes = _.associations = _.elements = _.fields = _.parameterizedClass = _.typeClass = _.name = _.count = _.offset = _.length = _.valueAsStringIsTruncated = _.valueAsString = _.Instance_classRef = _.kind = _.NullVal_valueAsString = null;
      _.size = null;
      _.json = t0;
      _.type = null;
    },
    ObjRef: function ObjRef(t0) {
      var _ = this;
      _.fixedId = _.id = null;
      _.json = t0;
      _.type = null;
    },
    Obj: function Obj(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = null;
      _.json = t0;
      _.type = null;
    },
    ProfileFunction: function ProfileFunction() {
      var _ = this;
      _.$function = _.resolvedUrl = _.exclusiveTicks = _.inclusiveTicks = _.kind = null;
    },
    ReloadReport: function ReloadReport(t0) {
      this.success = null;
      this.json = t0;
      this.type = null;
    },
    RetainingObject: function RetainingObject() {
      var _ = this;
      _.parentField = _.parentMapKey = _.parentListIndex = _.value = null;
    },
    RetainingPath: function RetainingPath(t0) {
      var _ = this;
      _.elements = _.gcRootType = _.length = null;
      _.json = t0;
      _.type = null;
    },
    RetainingPath_toJson_closure: function RetainingPath_toJson_closure() {
    },
    Response: function Response(t0) {
      this.json = t0;
      this.type = null;
    },
    Sentinel: function Sentinel(t0) {
      var _ = this;
      _.valueAsString = _.kind = null;
      _.json = t0;
      _.type = null;
    },
    ScriptRef: function ScriptRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.uri = null;
      _.json = t0;
      _.type = null;
    },
    Script: function Script(t0, t1, t2) {
      var _ = this;
      _._tokenToLine = t0;
      _._tokenToColumn = t1;
      _.size = _.classRef = _.fixedId = _.id = _.tokenPosTable = _.source = _.columnOffset = _.lineOffset = _.library = _.uri = null;
      _.json = t2;
      _.type = null;
    },
    Script$_fromJson_closure: function Script$_fromJson_closure() {
    },
    Script_toJson_closure: function Script_toJson_closure() {
    },
    ScriptList: function ScriptList(t0) {
      this.scripts = null;
      this.json = t0;
      this.type = null;
    },
    ScriptList_toJson_closure: function ScriptList_toJson_closure() {
    },
    SourceLocation: function SourceLocation(t0) {
      var _ = this;
      _.endTokenPos = _.tokenPos = _.script = null;
      _.json = t0;
      _.type = null;
    },
    SourceReport: function SourceReport(t0) {
      var _ = this;
      _.scripts = _.ranges = null;
      _.json = t0;
      _.type = null;
    },
    SourceReport_toJson_closure: function SourceReport_toJson_closure() {
    },
    SourceReport_toJson_closure0: function SourceReport_toJson_closure0() {
    },
    SourceReportCoverage: function SourceReportCoverage() {
      this.misses = this.hits = null;
    },
    SourceReportCoverage_toJson_closure: function SourceReportCoverage_toJson_closure() {
    },
    SourceReportCoverage_toJson_closure0: function SourceReportCoverage_toJson_closure0() {
    },
    SourceReportRange: function SourceReportRange() {
      var _ = this;
      _.possibleBreakpoints = _.coverage = _.error = _.compiled = _.endPos = _.startPos = _.scriptIndex = null;
    },
    SourceReportRange_toJson_closure: function SourceReportRange_toJson_closure() {
    },
    Stack: function Stack(t0) {
      var _ = this;
      _.messages = _.awaiterFrames = _.asyncCausalFrames = _.frames = null;
      _.json = t0;
      _.type = null;
    },
    Stack_toJson_closure: function Stack_toJson_closure() {
    },
    Stack_toJson_closure0: function Stack_toJson_closure0() {
    },
    Stack_toJson_closure1: function Stack_toJson_closure1() {
    },
    Stack_toJson_closure2: function Stack_toJson_closure2() {
    },
    Success: function Success(t0) {
      this.json = t0;
      this.type = null;
    },
    Timeline: function Timeline(t0) {
      var _ = this;
      _.timeExtentMicros = _.timeOriginMicros = _.traceEvents = null;
      _.json = t0;
      _.type = null;
    },
    Timeline_toJson_closure: function Timeline_toJson_closure() {
    },
    TimelineEvent: function TimelineEvent(t0) {
      this.json = t0;
    },
    TimelineFlags: function TimelineFlags(t0) {
      var _ = this;
      _.recordedStreams = _.availableStreams = _.recorderName = null;
      _.json = t0;
      _.type = null;
    },
    TimelineFlags_toJson_closure: function TimelineFlags_toJson_closure() {
    },
    TimelineFlags_toJson_closure0: function TimelineFlags_toJson_closure0() {
    },
    Timestamp: function Timestamp(t0) {
      this.timestamp = null;
      this.json = t0;
      this.type = null;
    },
    TypeArgumentsRef: function TypeArgumentsRef(t0) {
      var _ = this;
      _.fixedId = _.id = _.name = null;
      _.json = t0;
      _.type = null;
    },
    TypeArguments: function TypeArguments(t0) {
      var _ = this;
      _.size = _.classRef = _.fixedId = _.id = _.types = _.name = null;
      _.json = t0;
      _.type = null;
    },
    TypeArguments_toJson_closure: function TypeArguments_toJson_closure() {
    },
    UnresolvedSourceLocation: function UnresolvedSourceLocation(t0) {
      var _ = this;
      _.column = _.line = _.tokenPos = _.scriptUri = _.script = null;
      _.json = t0;
      _.type = null;
    },
    Version: function Version(t0) {
      var _ = this;
      _.minor = _.major = null;
      _.json = t0;
      _.type = null;
    },
    VMRef: function VMRef(t0) {
      this.name = null;
      this.json = t0;
      this.type = null;
    },
    VM: function VM(t0) {
      var _ = this;
      _.isolateGroups = _.isolates = _.startTime = _.pid = _.version = _.targetCPU = _.operatingSystem = _.hostCPU = _.architectureBits = _.name = null;
      _.json = t0;
      _.type = null;
    },
    VM_toJson_closure: function VM_toJson_closure() {
    },
    VM_toJson_closure0: function VM_toJson_closure0() {
    }
  },
  D = {
    HtmlInfoScreen$: function() {
      var _s28_ = "This screen is not available",
        _s12_ = "octicon-info",
        _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_HtmlStatusItem);
      !Y.hiddenPages().contains$1(0, "none");
      t1 = new D.HtmlInfoScreen("", "info", _s12_, _s28_, false, false, _null, new B.Property(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_bool), false, type$.Property_bool), t1);
      t1.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(_s28_, true, _s12_, "info", "", _null, false);
      t1.HtmlInfoScreen$0();
      return t1;
    },
    HtmlFlagDetails: function HtmlFlagDetails(t0) {
      this.element = t0;
    },
    HtmlInfoScreen: function HtmlInfoScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._html_info_screen$_controller = _._versionContainer = _._flutterVersionContainer = _._flagList = null;
      _.name = t0;
      _.id = t1;
      _.iconClass = t2;
      _.disabledTooltip = t3;
      _.disabled = t4;
      _.showTab = t5;
      _._helpStatus = null;
      _.shortcutCallback = t6;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t7;
      _.statusItems = t8;
    },
    HtmlInfoScreen_closure0: function HtmlInfoScreen_closure0(t0) {
      this.$this = t0;
    },
    HtmlInfoScreen__closure: function HtmlInfoScreen__closure() {
    },
    HtmlInfoScreen_closure: function HtmlInfoScreen_closure(t0) {
      this.$this = t0;
    },
    HtmlInspectorScreen: function HtmlInspectorScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.refreshTreeButton = null;
      _.inspectorStateMixin = t0;
      _.splitterSubscription = _.expandCollapseButtonGroup = _.inspectorContainer = _.inspectorController = _.inspectorService = null;
      _.displayedWidgetTrackingNotice = false;
      _.name = t1;
      _.id = t2;
      _.iconClass = t3;
      _.disabledTooltip = t4;
      _.disabled = t5;
      _.showTab = t6;
      _._helpStatus = null;
      _.shortcutCallback = t7;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t8;
      _.statusItems = t9;
    },
    HtmlInspectorScreen_createContent_closure: function HtmlInspectorScreen_createContent_closure(t0, t1) {
      this.$this = t0;
      this.expandButton = t1;
    },
    HtmlInspectorScreen_createContent_closure0: function HtmlInspectorScreen_createContent_closure0(t0, t1) {
      this.$this = t0;
      this.resetButton = t1;
    },
    HtmlInspectorScreen__handleConnectionStart_closure: function HtmlInspectorScreen__handleConnectionStart_closure() {
    },
    HtmlInspectorScreen__handleConnectionStart_createTree: function HtmlInspectorScreen__handleConnectionStart_createTree() {
    },
    HtmlInspectorScreen__handleConnectionStart_closure0: function HtmlInspectorScreen__handleConnectionStart_closure0(t0) {
      this.$this = t0;
    },
    HtmlInspectorScreen__onExpandCollapseSupported_closure: function HtmlInspectorScreen__onExpandCollapseSupported_closure(t0) {
      this.$this = t0;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    current: function() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = P.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(H.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : C.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    }
  },
  Z = {
    textStyleForLevel: function(level) {
      switch (level) {
        case C.DiagnosticLevel_0:
          return $.$get$unimportant();
        case C.DiagnosticLevel_4:
          return $.$get$warning();
        case C.DiagnosticLevel_7:
          return $.$get$error();
        case C.DiagnosticLevel_2:
        case C.DiagnosticLevel_3:
        case C.DiagnosticLevel_1:
        default:
          return C.TextStyle_Ure;
      }
    },
    InspectorController$: function(detailsTree, inspectorService, inspectorTree, isSummaryTree, onExpandCollapseSupported, $parent, treeType) {
      var t1 = type$.JSArray_of_void_Function,
        t2 = H.setRuntimeTypeInfo([], t1);
      t1 = new Z.InspectorController(t2, new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_void), isSummaryTree, onExpandCollapseSupported, $parent, inspectorTree, treeType, inspectorService, new E.InspectorObjectGroupManager(inspectorService, "tree"), new E.InspectorObjectGroupManager(inspectorService, "selection"), P.LinkedHashMap_LinkedHashMap$_empty(type$.InspectorInstanceRef, type$.InspectorTreeNode), new K.Disposer(H.setRuntimeTypeInfo([], type$.JSArray_StreamSubscription_dynamic), H.setRuntimeTypeInfo([], type$.JSArray_Listenable), H.setRuntimeTypeInfo([], t1)));
      t1.InspectorController$8$detailsTree$inspectorService$inspectorTree$isSummaryTree$onExpandCollapseSupported$onLayoutExplorerSupported$parent$treeType(detailsTree, inspectorService, inspectorTree, isSummaryTree, onExpandCollapseSupported, null, $parent, treeType);
      return t1;
    },
    InspectorController: function InspectorController(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _._selectionListeners = t0;
      _._clientCount = 0;
      _._treeNodeSelectedController = t1;
      _.isSummaryTree = t2;
      _.onExpandCollapseSupported = t3;
      _.parent = t4;
      _.details = null;
      _.inspectorTree = t5;
      _.treeType = t6;
      _.inspectorService = t7;
      _.flutterIsolateSubscription = null;
      _._inspector_controller$_disposed = false;
      _._refreshRateLimiter = null;
      _._treeGroups = t8;
      _._selectionGroups = t9;
      _.treeLoadStarted = _.flutterAppFrameReady = false;
      _.subtreeRoot = null;
      _.programaticSelectionChangeInProgress = false;
      _.selectedNode = null;
      _.isActive = false;
      _.valueToInspectorTreeNode = t10;
      _.visibleToUser = false;
      _.AutoDisposeControllerMixin__delegate = t11;
    },
    InspectorController_closure: function InspectorController_closure(t0) {
      this.$this = t0;
    },
    InspectorController_closure0: function InspectorController_closure0(t0) {
      this.$this = t0;
    },
    InspectorController__onVersionSupported_closure: function InspectorController__onVersionSupported_closure(t0, t1, t2) {
      this.flutterVersionServiceListenable = t0;
      this.version = t1;
      this.callback = t2;
    },
    _InspectorController_DisposableController_AutoDisposeControllerMixin: function _InspectorController_DisposableController_AutoDisposeControllerMixin() {
    },
    HtmlLoggingScreen$: function() {
      var _s28_ = "This screen is not available",
        _s14_ = "octicon-clippy",
        _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_HtmlStatusItem);
      !Y.hiddenPages().contains$1(0, "none");
      t1 = new Z.HtmlLoggingScreen("Logging", "logging", _s14_, _s28_, false, true, _null, new B.Property(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_bool), false, type$.Property_bool), t1);
      t1.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(_s28_, true, _s14_, "logging", "Logging", _null, true);
      t1.HtmlLoggingScreen$0();
      return t1;
    },
    logMessageToHtml: function(message) {
      var t1, _null = null;
      H._asStringS(message);
      t1 = A.CoreElement$("div", _null, _null, _null, _null);
      t1.add$1(0, Z.logMessageToElements(message));
      return J.get$innerHtml$x(t1.element);
    },
    logMessageToElements: function($async$message) {
      return P._makeSyncStarIterable(function() {
        var message = $async$message;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, style, t3, element;
        return function $async$logMessageToElements($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new O.AnsiUp(), t1._setupPalettes$0(), t1.bold = false, t1 = O.decodeAnsiColorEscapeCodes(message, t1), t1 = new P._SyncStarIterator(t1._outerHelper(), t1.$ti._eval$1("_SyncStarIterator<1>"));
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                t2 = t1.get$current(t1);
                style = t2.get$style(t2);
                t3 = t2.url;
                t2 = t2.text;
                element = t3 != null ? A.a(t3, "_blank;", t2) : A.CoreElement$("span", null, null, null, t2);
                if (style.length !== 0)
                  element.element.setAttribute("style", style);
                $async$goto = 4;
                return element;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.CoreElement);
    },
    HtmlLoggingScreen: function HtmlLoggingScreen(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.logCountStatus = _.logDetailsUI = _.controller = _._loggingTable = null;
      _.name = t0;
      _.id = t1;
      _.iconClass = t2;
      _.disabledTooltip = t3;
      _.disabled = t4;
      _.showTab = t5;
      _._helpStatus = null;
      _.shortcutCallback = t6;
      _.needsResizing = false;
      _.framework = null;
      _._visible = t7;
      _.statusItems = t8;
    },
    HtmlLoggingScreen_closure: function HtmlLoggingScreen_closure(t0) {
      this.$this = t0;
    },
    HtmlLoggingScreen_closure0: function HtmlLoggingScreen_closure0(t0) {
      this.$this = t0;
    },
    HtmlLoggingScreen_createContent_closure: function HtmlLoggingScreen_createContent_closure(t0) {
      this.$this = t0;
    },
    HtmlLoggingScreen_createContent_closure0: function HtmlLoggingScreen_createContent_closure0(t0) {
      this.framework = t0;
    },
    HtmlLogDetails: function HtmlLogDetails(t0) {
      this.message = this.content = null;
      this.element = t0;
    },
    HtmlLogDetails_createLoggingTree_closure: function HtmlLogDetails_createLoggingTree_closure(t0) {
      this.$this = t0;
    },
    MemoryColumnClassName: function MemoryColumnClassName(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    MemoryColumnSize: function MemoryColumnSize(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    MemoryColumnInstanceCount: function MemoryColumnInstanceCount(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    MemoryColumnInstanceAccumulatedCount: function MemoryColumnInstanceAccumulatedCount(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.fixedWidthPx = t1;
      _.percentWidth = t2;
      _.alignment = t3;
    },
    CpuProfilerService: function CpuProfilerService() {
    },
    HtmlCpuFlameChart$: function(profileDataProvider) {
      var t2, t3, t4, _null = null,
        t1 = new Z.HtmlCpuFlameChart(C.CpuProfilerViewType_0, profileDataProvider, type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, "fill-section", _null, _null);
      t2 = A.CoreElement$("div", _null, "event-details-heading stack-frame-details", _null, _null);
      t3 = t2.element.style;
      t4 = Y.colorToCss(C.ThemedColor_Color_4294375158_Color_4280295716);
      t3.backgroundColor = t4;
      t2.attribute$2("hidden", true);
      t1.stackFrameDetails = t2;
      t1.add$1(0, t2);
      return t1;
    },
    HtmlCpuFlameChart: function HtmlCpuFlameChart(t0, t1, t2) {
      var _ = this;
      _.stackFrameDetails = _.canvas = null;
      _.type = t0;
      _.profileDataProvider = t1;
      _.viewNeedsRebuild = false;
      _.element = t2;
    },
    HtmlCpuFlameChart_rebuildView_closure: function HtmlCpuFlameChart_rebuildView_closure(t0) {
      this.$this = t0;
    },
    CpuFlameChartCanvas: function CpuFlameChartCanvas(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._colorOffset = 0;
      _._dragScroll = t0;
      _._viewportCanvas = null;
      _._maxZoomLevel = t1;
      _.data = t2;
      _.duration = t3;
      _.startInset = t4;
      _.width = t5;
      _.height = t6;
      _._nodeSelectedController = t7;
      _.selectedNode = null;
      _.rows = t8;
      _.sections = t9;
      _.timelineGrid = t10;
      _.zoomLevel = 1;
      _.floatingPointScrollLeft = 0;
    },
    CpuFlameChartCanvas_initUiElements_leftForStackFrame: function CpuFlameChartCanvas_initUiElements_leftForStackFrame(t0, t1) {
      this.stackFrameLefts = t0;
      this.totalWidth = t1;
    },
    CpuFlameChartCanvas_initUiElements_createChartNodes: function CpuFlameChartCanvas_initUiElements_createChartNodes(t0, t1, t2) {
      this.$this = t0;
      this.totalWidth = t1;
      this.leftForStackFrame = t2;
    },
    CpuFlameChartCanvas_initUiElements_createChartNodes_closure: function CpuFlameChartCanvas_initUiElements_createChartNodes_closure(t0) {
      this.stackFrame = t0;
    },
    HtmlEventDetails$: function(_timelineController) {
      var _null = null,
        t1 = new Z.HtmlEventDetails(_timelineController, C.ThemedColor_Color_4294375158_Color_4281151025, C.ThemedColor_Color_4278190080_Color_4293980400, type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t1.HtmlEventDetails$1(_timelineController);
      return t1;
    },
    HtmlEventDetails: function HtmlEventDetails(t0, t1, t2, t3) {
      var _ = this;
      _._timelineController = t0;
      _._eventSummary = _._html_event_details$_cpuProfiler = _._title = _._html_event_details$_content = _._summaryTabNav = _._cpuProfilerTabNav = null;
      _.titleBackgroundColor = t1;
      _.titleTextColor = t2;
      _.element = t3;
    },
    HtmlEventDetails_closure: function HtmlEventDetails_closure(t0) {
      this.$this = t0;
    },
    HtmlEventDetails__initContent_closure: function HtmlEventDetails__initContent_closure(t0) {
      this.$this = t0;
    },
    HtmlEventDetails__initContent_closure0: function HtmlEventDetails__initContent_closure0(t0) {
      this.$this = t0;
    },
    HtmlEventDetails__initListeners_closure: function HtmlEventDetails__initListeners_closure(t0) {
      this.$this = t0;
    },
    HtmlEventDetails__initListeners_closure0: function HtmlEventDetails__initListeners_closure0(t0) {
      this.$this = t0;
    },
    HtmlEventDetails__initListeners_closure1: function HtmlEventDetails__initListeners_closure1(t0) {
      this.$this = t0;
    },
    _CpuProfiler: function _CpuProfiler(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._timelineController = t0;
      _.flameChart = t1;
      _.bottomUp = t2;
      _.callTree = t3;
      _.defaultView = t4;
      _._selectedViewType = _.views = null;
      _.showingMessage = false;
      _.element = t5;
    },
    _CpuProfiler_maybeShowMessageOnUpdate_closure: function _CpuProfiler_maybeShowMessageOnUpdate_closure(t0) {
      this.$this = t0;
    },
    HtmlEventSummary: function HtmlEventSummary(t0, t1) {
      var _ = this;
      _.selectedEventProvider = t0;
      _.connectedEvents = _.args = _.asyncId = _.process = _.thread = _.category = _.time = null;
      _.element = t1;
    },
    HtmlEventSummary_update_closure: function HtmlEventSummary_update_closure() {
    },
    FramesBarPlotly: function FramesBarPlotly(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._html_frames_bar_plotly$_domName = t0;
      _._html_frames_bar_plotly$_chart = t1;
      _.useLogScale = t2;
      _.showRangeSlider = t3;
      _.displayRefreshRate = t4;
      _._yAxisLogScale = t5;
      _._yAxisLinearScale = t6;
    },
    SelectTrace: function SelectTrace(t0, t1, t2, t3) {
      var _ = this;
      _.traceIndex = t0;
      _.ptNumber = t1;
      _.xValue = t2;
      _.yValue = t3;
    },
    Selection: function Selection(t0, t1, t2) {
      this._html_frames_bar_plotly$_domName = t0;
      this._html_frames_bar_plotly$_data = t1;
      this.selectInfo = t2;
    },
    ByteStream: function ByteStream(t0) {
      this._stream = t0;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    CaseInsensitiveMap$from: function(other, $V) {
      var t1 = type$.$env_1_1_String;
      t1 = new Z.CaseInsensitiveMap(new Z.CaseInsensitiveMap$from_closure(), new Z.CaseInsensitiveMap$from_closure0(), new H.JsLinkedHashMap(t1._bind$1(t1._bind$1($V)._eval$1("Pair<1,2>"))._eval$1("JsLinkedHashMap<1,2>")), $V._eval$1("CaseInsensitiveMap<0>"));
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2, t3) {
      var _ = this;
      _._canonicalize = t0;
      _._isValidKeyFn = t1;
      _._base = t2;
      _.$ti = t3;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    CaseInsensitiveMap$from_closure0: function CaseInsensitiveMap$from_closure0() {
    }
  },
  V = {
    BottomUpProfileTransformer_getRoots: function(node, currentBottomUpRoot, bottomUpRoots) {
      var t1, t2, _i,
        copy = node.shallowCopy$1$resetInclusiveSampleCount(true);
      if (currentBottomUpRoot != null)
        copy.addChild$1(currentBottomUpRoot.deepCopy$0());
      if (node.exclusiveSampleCount > 0)
        C.JSArray_methods.add$1(bottomUpRoots, copy);
      for (t1 = node.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        V.BottomUpProfileTransformer_getRoots(t1[_i], copy, bottomUpRoots);
      return bottomUpRoots;
    },
    BottomUpProfileTransformer_cascadeSampleCounts: function(stackFrame) {
      var t1, t2, _i, child;
      type$.CpuStackFrame._as(stackFrame);
      stackFrame._inclusiveSampleCount = stackFrame.exclusiveSampleCount;
      for (t1 = stackFrame.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        child.exclusiveSampleCount = stackFrame.exclusiveSampleCount;
        V.BottomUpProfileTransformer_cascadeSampleCounts(child);
      }
    },
    mergeProfileRoots: function(roots) {
      var t1, t2, t3, t4, _i, root, matchingRoots, t5, _i0, match, t6, t7,
        rootsCopy = P.List_List$from(roots, true, type$.CpuStackFrame);
      for (t1 = rootsCopy.length, t2 = H._arrayInstanceType(roots), t3 = t2._eval$1("bool(1)"), t2 = t2._eval$1("WhereIterable<1>"), t4 = t2._eval$1("Iterable.E"), _i = 0; _i < rootsCopy.length; rootsCopy.length === t1 || (0, H.throwConcurrentModificationError)(rootsCopy), ++_i) {
        root = rootsCopy[_i];
        if (!C.JSArray_methods.contains$1(roots, root))
          continue;
        matchingRoots = P.List_List$from(new H.WhereIterable(roots, t3._as(new V.mergeProfileRoots_closure(root)), t2), true, t4);
        t5 = matchingRoots.length;
        if (t5 === 0)
          continue;
        for (_i0 = 0; _i0 < matchingRoots.length; matchingRoots.length === t5 || (0, H.throwConcurrentModificationError)(matchingRoots), ++_i0) {
          match = matchingRoots[_i0];
          C.JSArray_methods.forEach$1(match.children, root.get$addChild());
          root.exclusiveSampleCount = root.exclusiveSampleCount + match.exclusiveSampleCount;
          t6 = root._inclusiveSampleCount;
          if (t6 == null)
            t6 = root._calculateInclusiveSampleCount$0();
          t7 = match._inclusiveSampleCount;
          if (t7 == null)
            t7 = match._calculateInclusiveSampleCount$0();
          if (typeof t6 !== "number")
            return t6.$add();
          if (typeof t7 !== "number")
            return H.iae(t7);
          root._inclusiveSampleCount = t6 + t7;
          C.JSArray_methods.remove$1(roots, match);
          V.mergeProfileRoots(root.children);
        }
      }
      for (t1 = roots.length, _i = 0; _i < roots.length; roots.length === t1 || (0, H.throwConcurrentModificationError)(roots), ++_i) {
        root = roots[_i];
        root.index = C.JSArray_methods.indexOf$1(roots, root);
      }
    },
    CpuProfileTransformer: function CpuProfileTransformer(t0) {
      var _ = this;
      _._progressNotifier = t0;
      _._stackFrameValues = _._stackFrameKeys = _._stackFramesCount = null;
      _._stackFramesProcessed = 0;
    },
    mergeProfileRoots_closure: function mergeProfileRoots_closure(t0) {
      this.root = t0;
    },
    SourceLocation$: function(offset, column, line, sourceUrl) {
      var t1 = line == null,
        t2 = t1 ? 0 : line;
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (!t1 && line < 0)
        H.throwExpression(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column < 0)
        H.throwExpression(P.RangeError$("Column may not be negative, was " + column + "."));
      return new V.SourceLocation0(sourceUrl, offset, t2, column);
    },
    SourceLocation0: function SourceLocation0(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceSpan: function SourceSpan() {
    },
    SourceSpanBase: function SourceSpanBase() {
    }
  };
  var holders = [C, H, J, P, W, O, X, R, M, U, Y, B, N, K, F, T, E, L, A, S, G, Q, D, Z, V];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      H._asBoolS(other);
      return other && receiver;
    },
    $or: function(receiver, other) {
      H._asBoolS(other);
      return other || receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, type$.Invocation._as(invocation));
    },
    $isNull: 1
  };
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isData: 1,
    $isLayout: 1,
    $isShape: 1,
    $isLegend: 1,
    $isAxisLayout: 1,
    $isDataEvent: 1,
    $isHoverFX: 1,
    $isSplitter: 1,
    get$value: function(obj) {
      return obj.value;
    },
    get$x: function(obj) {
      return obj.x;
    },
    get$y: function(obj) {
      return obj.y;
    },
    get$name: function(obj) {
      return obj.name;
    },
    set$visible: function(obj, v) {
      return obj.visible = v;
    },
    set$hoverinfo: function(obj, v) {
      return obj.hoverinfo = v;
    },
    get$shapes: function(obj) {
      return obj.shapes;
    },
    get$points: function(obj) {
      return obj.points;
    },
    get$curveNumber: function(obj) {
      return obj.curveNumber;
    },
    get$data: function(obj) {
      return obj.data;
    },
    get$pointNumber: function(obj) {
      return obj.pointNumber;
    },
    setSizes$1: function(receiver, p0) {
      return receiver.setSizes(p0);
    },
    destroy$2: function(receiver, p0, p1) {
      return receiver.destroy(p0, p1);
    },
    destroy$0: function(receiver) {
      return receiver.destroy();
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, H._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      if (!H._isInt(index))
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      if (!H._isInt(index))
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var insertionLength, t1, end;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      this.set$length(receiver, t1 + insertionLength);
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2: function(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!H.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1: function(receiver, f) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, n, H._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var end, i, element,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    lastWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()")._as(orElse);
      $length = receiver.length;
      for (i = $length - 1; i >= 0; --i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], H._arrayInstanceType(receiver));
      return H.setRuntimeTypeInfo(receiver.slice(start, end), H._arrayInstanceType(receiver));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    removeRange$2: function(receiver, start, end) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t2, i,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        t1._eval$1("List<1>")._as(iterable);
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1: function(receiver, test) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t2,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)")._as(compare);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      t2 = compare == null ? J._interceptors_JSArray__compareAny$closure() : compare;
      H.Sort_sort(receiver, t2, t1._precomputed1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1: function(receiver, element) {
      var i;
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), H._arrayInstanceType(receiver));
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (!H._isInt(newLength))
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var t2, t3, totalLength,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t2 = receiver.length;
      t3 = J.get$length$asx(other);
      if (typeof t3 !== "number")
        return H.iae(t3);
      totalLength = t2 + t3;
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    set$last: function(receiver, element) {
      var t1;
      H._arrayInstanceType(receiver)._precomputed1._as(element);
      t1 = receiver.length;
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      this.$indexSet(receiver, t1 - 1, element);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H._asNumS(b);
      if (typeof b != "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      H._asNumS(other);
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver / other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      H._asNumS(other);
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      H._asStringS(other);
      if (typeof other != "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      if (typeof other != "string")
        H.throwExpression(H.argumentErrorValue(other));
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    splitMapJoin$2$onMatch: function(receiver, from, onMatch) {
      return H.stringReplaceAllFuncUnchecked(receiver, from, type$.String_Function_Match._as(onMatch), type$.String_Function_String._as(null));
    },
    replaceFirst$2: function(receiver, from, to) {
      P.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return H.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1: function(receiver, pattern) {
      var t1 = H.setRuntimeTypeInfo(receiver.split(pattern), type$.JSArray_String);
      return t1;
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      if (!H._isInt(end))
        H.throwExpression(H.argumentErrorValue(end));
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (!H._isInt(index))
        H.throwExpression(H.argumentErrorValue(index));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var _null = null;
      if (!H._isInt(startIndex))
        H.throwExpression(H.argumentErrorValue(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, _null, _null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, _null, _null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, _null, _null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0: function(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padLeft$1: function($receiver, width) {
      return this.padLeft$2($receiver, width, " ");
    },
    padRight$1: function(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw H.wrapException(P.RangeError$range(startIndex, 0, t1, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H._asStringS(other);
      if (typeof other != "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  H.CastStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("~(2)")._as(onData);
      t2 = this._source.listen$3$cancelOnError$onDone(null, cancelOnError, type$.void_Function._as(onDone));
      t1 = new H.CastStreamSubscription(t2, $.Zone__current, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastStreamSubscription<1,2>"));
      t2.onData$1(t1.get$__internal$_onData());
      t1.onData$1(onData);
      t1.onError$1(0, onError);
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    cast$1$0: function(_, $R) {
      return new H.CastStream(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastStream<1,2>"));
    }
  };
  H.CastStreamSubscription.prototype = {
    cancel$0: function(_) {
      return this._source.cancel$0(0);
    },
    onData$1: function(handleData) {
      var t1 = this.$ti;
      t1._eval$1("~(2)")._as(handleData);
      this.set$__internal$_handleData(handleData == null ? null : this.__internal$_zone.registerUnaryCallback$2$1(handleData, type$.dynamic, t1._rest[1]));
    },
    onError$1: function(_, handleError) {
      var t1, t2, t3, _this = this;
      _this._source.onError$1(0, handleError);
      if (handleError == null)
        _this.__internal$_handleError = null;
      else {
        t1 = type$.dynamic;
        t2 = type$.Object;
        t3 = _this.__internal$_zone;
        if (type$.dynamic_Function_Null_Null._is(handleError))
          _this.__internal$_handleError = t3.registerBinaryCallback$3$1(type$.dynamic_Function_Object_StackTrace._as(handleError), t1, t2, type$.StackTrace);
        else
          _this.__internal$_handleError = t3.registerUnaryCallback$2$1(type$.dynamic_Function_Object._as(handleError), t1, t2);
      }
    },
    __internal$_onData$1: function(data) {
      var targetData, error, stack, t2, exception, t3, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this.__internal$_handleData;
      if (t2 == null)
        return;
      targetData = null;
      try {
        targetData = t1._rest[1]._as(data);
      } catch (exception) {
        error = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        t1 = _this.__internal$_handleError;
        if (t1 == null)
          _this.__internal$_zone.handleUncaughtError$2(error, stack);
        else {
          t2 = type$.dynamic;
          t3 = _this.__internal$_zone;
          if (type$.dynamic_Function_Null_Null._is(t1))
            t3.runBinaryGuarded$2$3(type$.void_Function_dynamic_StackTrace._as(t1), error, stack, t2, type$.StackTrace);
          else
            t3.runUnaryGuarded$1$2(type$.void_Function_dynamic._as(t1), error, t2);
        }
        return;
      }
      _this.__internal$_zone.runUnaryGuarded$1$2(t2, targetData, t1._rest[1]);
    },
    pause$1: function(_, resumeSignal) {
      this._source.pause$1(0, resumeSignal);
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      this._source.resume$0(0);
    },
    set$__internal$_handleData: function(_handleData) {
      this.__internal$_handleData = this.$ti._eval$1("~(2)")._as(_handleData);
    },
    $isStreamSubscription: 1
  };
  H.CastStreamTransformer.prototype = {
    cast$2$0: function(_, RS, RT) {
      var t1 = this.$ti;
      return new H.CastStreamTransformer(this._source, t1._eval$1("@<1>")._bind$1(t1._rest[1])._bind$1(RS)._bind$1(RT)._eval$1("CastStreamTransformer<1,2,3,4>"));
    }
  };
  H.CastConverter.prototype = {
    convert$1: function(input) {
      var t1 = this.$ti;
      return t1._rest[3]._as(this._source.convert$1(t1._precomputed1._as(t1._rest[2]._as(input))));
    },
    cast$2$0: function(_, RS, RT) {
      var t1 = this.$ti;
      return new H.CastConverter(this._source, t1._eval$1("@<1>")._bind$1(t1._rest[1])._bind$1(RS)._bind$1(RT)._eval$1("CastConverter<1,2,3,4>"));
    }
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1: function(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1: function(_, index) {
      return H._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first: function(_) {
      return H._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last: function(_) {
      return H._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._source;
      return this.$ti._rest[1]._as(t1.get$current(t1));
    },
    $isIterator: 1
  };
  H.CastIterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this._source, H._instanceType(this)._precomputed1, $R);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, H._asIntS(index)));
    },
    $indexSet: function(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, H._asIntS(index), t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length: function(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1: function(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1: function(_, values) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(values), t1._rest[1], t1._precomputed1));
    },
    sort$1: function(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)")._as(compare);
      t1 = compare == null ? null : new H._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    insert$2: function(_, index, element) {
      var t1 = this.$ti;
      J.insert$2$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(element)));
    },
    removeAt$1: function(_, index) {
      return this.$ti._rest[1]._as(J.removeAt$1$ax(this._source, index));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  H._CastListBase_sort_closure.prototype = {
    call$2: function(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  H.CastList.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CastSet.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastSet(this._source, this._emptySet, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastSet<1,2>"));
    },
    add$1: function(_, value) {
      var t1 = this.$ti;
      return this._source.add$1(0, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1: function(_, elements) {
      var t1 = this.$ti;
      this._source.addAll$1(0, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    remove$1: function(_, object) {
      return this._source.remove$1(0, object);
    },
    removeWhere$1: function(_, test) {
      this._source.removeWhere$1(0, new H.CastSet_removeWhere_closure(this, this.$ti._eval$1("bool(2)")._as(test)));
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_source: function() {
      return this._source;
    }
  };
  H.CastSet_removeWhere_closure.prototype = {
    call$1: function(element) {
      var t1 = this.$this.$ti;
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  H.CastMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      var t1 = this.$ti;
      return new H.CastMap(this._source, t1._eval$1("@<1>")._bind$1(t1._rest[1])._bind$1(RK)._bind$1(RV)._eval$1("CastMap<1,2,3,4>"));
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._source, key);
    },
    $index: function(_, key) {
      return this.$ti._rest[3]._as(J.$index$asx(this._source, key));
    },
    $indexSet: function(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      J.$indexSet$ax(this._source, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    addAll$1: function(_, other) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, new H.CastMap(t1._eval$1("Map<3,4>")._as(other), t1._eval$1("@<3>")._bind$1(t1._rest[3])._bind$1(t1._precomputed1)._bind$1(t1._rest[1])._eval$1("CastMap<1,2,3,4>")));
    },
    forEach$1: function(_, f) {
      J.forEach$1$ax(this._source, new H.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys: function(_) {
      var t1 = this.$ti;
      return H.CastIterable_CastIterable(J.get$keys$x(this._source), t1._precomputed1, t1._rest[2]);
    },
    get$values: function(_) {
      var t1 = this.$ti;
      return H.CastIterable_CastIterable(J.get$values$x(this._source), t1._rest[1], t1._rest[3]);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._source);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._source);
    },
    get$entries: function(_) {
      return J.get$entries$x(this._source).map$1$1(0, new H.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    }
  };
  H.CastMap_forEach_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1,2)");
    }
  };
  H.CastMap_entries_closure.prototype = {
    call$1: function(e) {
      var t2,
        t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      t2 = t1._rest[3];
      return new P.MapEntry(t1._rest[2]._as(e.key), t2._as(e.value), t1._eval$1("@<3>")._bind$1(t2)._eval$1("MapEntry<1,2>"));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  H.CastQueue.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastQueue(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    addAll$1: function(_, elements) {
      var t1 = this.$ti;
      this._source.addAll$1(0, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    get$_source: function() {
      return this._source;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this.__internal$_string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this.__internal$_string, H._asIntS(i));
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      var t1, _this = this;
      if (_this.get$length(_this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this.get$length(_this);
      if (typeof t1 !== "number")
        return t1.$sub();
      return _this.elementAt$1(0, t1 - 1);
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length != _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = first;
        i = 1;
        for (; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        t1 = "";
        for (; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(f), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    reduce$1: function(_, combine) {
      var $length, value, i, _this = this;
      H._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1: function(_, count) {
      return H.SubListIterable$(this, 0, count, H._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable: function(_, growable) {
      var i, t1, _this = this,
        result = H.setRuntimeTypeInfo([], H._instanceType(_this)._eval$1("JSArray<ListIterable.E>"));
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || t2 >= $length)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, _this = this,
        t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      t1 = _this._endOrLength;
      if (t1 != null && newStart >= t1)
        return new H.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, _this.$ti._precomputed1);
    },
    take$1: function(_, count) {
      var t1, t2, newEnd, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._endOrLength;
      t2 = _this._start;
      newEnd = t2 + count;
      if (t1 == null)
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, _this.$ti._precomputed1);
      else {
        if (t1 < newEnd)
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable: function(_, growable) {
      var t3, $length, result, t4, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        end0 = _this._endOrLength;
      if (end0 != null) {
        if (typeof end !== "number")
          return H.iae(end);
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = _this.$ti._eval$1("JSArray<1>");
      if (growable) {
        result = H.setRuntimeTypeInfo([], t3);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t4 = new Array($length);
        t4.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t4, t3);
      }
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length != $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last: function(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function(_) {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._rest[1]._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1: function(_, f, $T) {
      var t1 = this.$ti;
      return new H.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this.$ti;
      return new H.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, C.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current(t1))));
        } else
          return false;
      }
      t1 = _this._currentExpansion;
      _this.set$__internal$_current(t1.get$current(t1));
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>")._as(_currentExpansion);
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._rest[1]._as(_current);
    },
    $isIterator: 1
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, H._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function(_) {
      var t1;
      if (this._remaining < 0)
        return null;
      t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.ArgumentError_checkNotNull(count, "count", type$.int);
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this.__internal$_iterable, this._skipCount + count, H._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, H._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length,
        t1 = J.get$length$asx(this.__internal$_iterable);
      if (typeof t1 !== "number")
        return t1.$sub();
      $length = t1 - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.ArgumentError_checkNotNull(count, "count", type$.int);
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    join$1: function(_, separator) {
      return "";
    },
    map$1$1: function(_, f, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(f);
      return new H.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t2,
        t1 = this.$ti._eval$1("JSArray<1>");
      if (growable)
        t1 = H.setRuntimeTypeInfo([], t1);
      else {
        t2 = new Array(0);
        t2.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t2, t1);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function(_) {
      return null;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._asIntS(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, element) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(element);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      H._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)")._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    removeAt$1: function(_, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1),
        t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      var t1 = H._instanceType(this);
      return P.Map_castFrom(this, t1._precomputed1, t1._rest[1], RK, RV);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(val);
      return H.ConstantMap__throwUnmodifiable();
    },
    addAll$1: function(_, other) {
      H._instanceType(this)._eval$1("Map<1,2>")._as(other);
      return H.ConstantMap__throwUnmodifiable();
    },
    get$entries: function(_) {
      return this.entries$body$ConstantMap(_, H._instanceType(this)._eval$1("MapEntry<1,2>"));
    },
    entries$body$ConstantMap: function($async$_, $async$type) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var _ = $async$_;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, key;
        return function $async$get$entries($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys($async$self), t1 = t1.get$iterator(t1), t2 = H._instanceType($async$self), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current(t1);
                $async$goto = 4;
                return new P.MapEntry(key, $async$self.$index(0, key), t2);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    map$2$1: function(_, transform, K2, V2) {
      var result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new H.ConstantMap_map_closure(this, H._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  H.ConstantMap_map_closure.prototype = {
    call$2: function(key, value) {
      var t1 = H._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(1,2)");
    }
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return null;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H._asStringS(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(f);
      keys = this.__js_helper$_keys;
      for (t2 = keys.length, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, t1._as(this._fetch$1(key)));
      }
    },
    get$keys: function(_) {
      return new H._ConstantMapKeyIterable(this, H._instanceType(this)._eval$1("_ConstantMapKeyIterable<1>"));
    },
    get$values: function(_) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      return t2._rest[1]._as(t1._fetch$1(t2._precomputed1._as(key)));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map.__js_helper$_keys;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length: function(_) {
      return this._map.__js_helper$_keys.length;
    }
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var t1, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = new H.JsLinkedHashMap(t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("JsLinkedHashMap<1,2>"));
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function(_) {
      var t1 = this._getMap$0();
      return t1.get$keys(t1);
    },
    get$values: function(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.Instantiation.prototype = {
    Instantiation$1: function(_genericClosure) {
      if (false)
        H.instantiatedGenericFunctionType(0, 0);
    },
    toString$0: function(_) {
      var types = "<" + C.JSArray_methods.join$1([H.createRuntimeType(this.$ti._precomputed1)], ", ") + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    call$1: function(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$2: function(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$0: function() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$4: function(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature: function() {
      return H.instantiatedGenericFunctionType(H.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol(t3), t2[t4]);
      }
      return new H.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  H.Primitives_initTicker_closure.prototype = {
    call$0: function() {
      return C.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 82
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H._asStringS($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 29
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this.__js_helper$_message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this.__js_helper$_message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 4
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values: function(_) {
      var _this = this,
        t1 = H._instanceType(_this);
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1: function(_, key) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H._instanceType(this)._eval$1("Map<1,2>")._as(other), new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(0, key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this.__js_helper$_removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3ffffff) === key)
        return _this.__js_helper$_removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return null;
      this.__js_helper$_unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H._instanceType(t1)._precomputed1._as(each));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(1,2)");
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      this.$ti._eval$1("~(1)")._as(f);
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 4
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 288
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asStringS(tag));
    },
    $signature: 138
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string != "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new H._MatchImplementation(m);
    },
    stringMatch$1: function(string) {
      var t1,
        match = this.firstMatch$1(string);
      if (match != null) {
        t1 = match._match;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return t1[0];
      }
      return null;
    },
    allMatches$2: function(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new H._MatchImplementation(match);
    },
    _execAnchored$2: function(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new H._MatchImplementation(match);
    },
    matchAsPrefix$2: function(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    get$start: function(_) {
      return this._match.index;
    },
    get$end: function(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index: function(_, index) {
      var t1;
      H._asIntS(index);
      t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t2, t3, match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      t2 = _this._nextIndex;
      if (t2 <= t1.length) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(t1, t2);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t2 = t1 + 1;
              t3 = _this._string;
              if (t2 < t3.length) {
                t1 = J.getInterceptor$s(t3).codeUnitAt$1(t3, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(t3, t2);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  H.StringMatch.prototype = {
    get$end: function(_) {
      return this.start + this.pattern.length;
    },
    $index: function(_, g) {
      H._asIntS(g);
      if (g !== 0)
        H.throwExpression(P.RangeError$value(g, null, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start: function(receiver) {
      return this.start;
    }
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first: function(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new H.StringMatch(index, t1);
      throw H.wrapException(H.IterableElementError_noElement());
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new H.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    $isIterator: 1
  };
  H.NativeByteBuffer.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      if (!H._isInt(position))
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    },
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asDoubleS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asIntS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    }
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    }
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    toString$0: function(_) {
      return H._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  H._Error.prototype = {
    toString$0: function(_) {
      return this._message;
    }
  };
  H._TypeError.prototype = {
    get$message: function(_) {
      return this._message;
    }
  };
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 2
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 148
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(H.convertDartClosureToJS(new P._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    cancel$0: function(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0: function() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(_, value) {
      var t2, t3,
        t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      t2 = !this.isSync || t1._eval$1("Future<1>")._is(value);
      t3 = this._future;
      if (t2)
        t3._asyncComplete$1(value);
      else
        t3._completeWithValue$1(t1._precomputed1._as(value));
    },
    completeError$2: function(e, st) {
      var t1;
      if (st == null)
        st = P.AsyncError_defaultStackTrace(e);
      t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    completeError$1: function(e) {
      return this.completeError$2(e, null);
    },
    $isCompleter: 1
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 9
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H._asIntS(errorCode), result);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 183
  };
  P._IterationMarker.prototype = {
    toString$0: function(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  P._SyncStarIterator.prototype = {
    get$current: function(_) {
      var t1 = this._nestedIterator;
      if (t1 == null)
        return this._async$_current;
      return this.$ti._precomputed1._as(t1.get$current(t1));
    },
    moveNext$0: function() {
      var t1, value, state, inner, _this = this;
      for (; true;) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            _this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            t1 = _this._suspendedBodies;
            if (t1 == null || t1.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            _this._body = t1.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (inner instanceof P._SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null)
                  t1 = _this._suspendedBodies = [];
                C.JSArray_methods.add$1(t1, _this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current: function(_current) {
      this._async$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator: function(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  P._BroadcastStream.prototype = {};
  P._BroadcastSubscription.prototype = {
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    set$_async$_next: function(_next) {
      this._async$_next = this.$ti._as(_next);
    },
    set$_async$_previous: function(_previous) {
      this._async$_previous = this.$ti._as(_previous);
    }
  };
  P._BroadcastStreamController.prototype = {
    get$stream: function(_) {
      return new P._BroadcastStream(this, H._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$_mayAddEvent: function() {
      return this._state < 4;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      return this._doneFuture = new P._Future($.Zone__current, type$._Future_dynamic);
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      H._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, oldLast, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)")._as(onData);
      type$.void_Function._as(onDone);
      if ((_this._state & 4) !== 0) {
        if (onDone == null)
          onDone = P.async___nullDoneHandler$closure();
        t1 = new P._DoneStreamSubscription($.Zone__current, onDone, t1._eval$1("_DoneStreamSubscription<1>"));
        t1._schedule$0();
        return t1;
      }
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new P._BroadcastSubscription(_this, t2, t3, t4);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1._precomputed1);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t4._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        P._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1: function(sub) {
      var _this = this,
        t1 = H._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1: function(subscription) {
      H._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1: function(subscription) {
      H._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: function(_, data) {
      var _this = this;
      H._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2: function(error, stackTrace) {
      var replacement;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      if (!this.get$_mayAddEvent())
        throw H.wrapException(this._addEventError$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      this._sendError$2(error, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    close$0: function(_) {
      var doneFuture, _this = this;
      if ((_this._state & 4) !== 0)
        return _this._doneFuture;
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    get$done: function() {
      return this._ensureDoneFuture$0();
    },
    _forEachListener$1: function(action) {
      var t1, subscription, id, next, _this = this;
      H._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      var _this = this;
      if ((_this._state & 4) !== 0 && _this._doneFuture._state === 0)
        _this._doneFuture._asyncComplete$1(null);
      P._runGuarded(_this.onCancel);
    },
    set$_firstSubscription: function(_firstSubscription) {
      this._firstSubscription = H._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(_firstSubscription);
    },
    set$_lastSubscription: function(_lastSubscription) {
      this._lastSubscription = H._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(_lastSubscription);
    },
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent: function() {
      return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0: function() {
      if ((this._state & 2) !== 0)
        return new P.StateError("Cannot fire new event. Controller is already firing an event");
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1: function(data) {
      var t1, _this = this;
      H._instanceType(_this)._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._async$_add$1(0, data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  P._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1: function(subscription) {
      H._instanceType(this.$this)._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._async$_add$1(0, this.data);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(_BufferingStreamSubscription<1>)");
    }
  };
  P._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1: function(subscription) {
      H._instanceType(this.$this)._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(_BufferingStreamSubscription<1>)");
    }
  };
  P._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1: function(subscription) {
      H._instanceType(this.$this)._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._close$0();
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(_BufferingStreamSubscription<1>)");
    }
  };
  P._AsyncBroadcastStreamController.prototype = {
    _sendData$1: function(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new P._DelayedData(data, t1));
    },
    _sendError$2: function(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  P._AsBroadcastStreamController.prototype = {
    get$_hasPending: function() {
      var t1 = this._pending;
      return t1 != null && t1.lastPendingEvent != null;
    },
    _addPendingEvent$1: function($event) {
      var _this = this;
      if (_this._pending == null)
        _this.set$_pending(new P._StreamImplEvents(_this.$ti._eval$1("_StreamImplEvents<1>")));
      _this._pending.add$1(0, $event);
    },
    add$1: function(_, data) {
      var t2, $event, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this._state;
      if ((t2 & 4) === 0 && (t2 & 2) !== 0) {
        _this._addPendingEvent$1(new P._DelayedData(data, t1._eval$1("_DelayedData<1>")));
        return;
      }
      _this.super$_BroadcastStreamController$add(0, data);
      while (true) {
        t1 = _this._pending;
        if (!(t1 != null && t1.lastPendingEvent != null))
          break;
        t1.toString;
        t1.$ti._eval$1("_EventDispatch<1>")._as(_this);
        $event = t1.firstPendingEvent;
        t2 = $event.get$next($event);
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(_this);
      }
    },
    addError$2: function(error, stackTrace) {
      var t1, $event, t2, _this = this;
      type$.StackTrace._as(stackTrace);
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1 = _this._state;
      if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
        _this._addPendingEvent$1(new P._DelayedError(error, stackTrace));
        return;
      }
      if (!(P._BroadcastStreamController.prototype.get$_mayAddEvent.call(_this) && (_this._state & 2) === 0))
        throw H.wrapException(_this._addEventError$0());
      _this._sendError$2(error, stackTrace);
      while (true) {
        t1 = _this._pending;
        if (!(t1 != null && t1.lastPendingEvent != null))
          break;
        t1.toString;
        t1.$ti._eval$1("_EventDispatch<1>")._as(_this);
        $event = t1.firstPendingEvent;
        t2 = $event.get$next($event);
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(_this);
      }
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
        _this._addPendingEvent$1(C.C__DelayedDone);
        _this._state |= 4;
        return P._BroadcastStreamController.prototype.get$done.call(_this);
      }
      return _this.super$_BroadcastStreamController$close(0);
    },
    _callOnCancel$0: function() {
      var t1, _this = this;
      if (_this.get$_hasPending()) {
        t1 = _this._pending;
        if (t1._state === 1)
          t1._state = 3;
        t1.firstPendingEvent = t1.lastPendingEvent = null;
        _this.set$_pending(null);
      }
      _this.super$_BroadcastStreamController$_callOnCancel();
    },
    set$_pending: function(_pending) {
      this._pending = this.$ti._eval$1("_StreamImplEvents<1>")._as(_pending);
    }
  };
  P.Future.prototype = {};
  P.Future_Future$delayed_closure.prototype = {
    call$0: function() {
      this.result._complete$1(null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Future_wait_handleError.prototype = {
    call$2: function(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this.result._completeError$2(theError, theStackTrace);
        else {
          t1.error = theError;
          t1.stackTrace = theStackTrace;
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this.result._completeError$2(t1.error, t1.stackTrace);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 172
  };
  P.Future_wait_closure.prototype = {
    call$1: function(value) {
      var t1, t2, _this = this;
      _this.T._as(value);
      t1 = _this._box_0;
      --t1.remaining;
      t2 = t1.values;
      if (t2 != null) {
        C.JSArray_methods.$indexSet(t2, _this.pos, value);
        if (t1.remaining === 0)
          _this.result._completeWithValue$1(t1.values);
      } else if (t1.remaining === 0 && !_this.eagerError)
        _this.result._completeError$2(t1.error, t1.stackTrace);
    },
    $signature: function() {
      return this.T._eval$1("Null(0)");
    }
  };
  P.Future_forEach_closure.prototype = {
    call$0: function() {
      var result,
        t1 = this.iterator;
      if (!t1.moveNext$0())
        return false;
      result = this.action.call$1(t1._current);
      if (type$.Future_dynamic._is(result))
        return result.then$1$1(P.async_Future__kTrue$closure(), type$.bool);
      return true;
    },
    $signature: 187
  };
  P.Future_doWhile_closure.prototype = {
    call$1: function(keepGoing) {
      var result, error, stackTrace, t1, t2, exception, error0, stackTrace0, replacement, _this = this;
      H._asBoolS(keepGoing);
      for (t1 = type$.Future_bool, t2 = _this.action; H.boolConversionCheck(keepGoing);) {
        result = null;
        try {
          result = t2.call$0();
        } catch (exception) {
          error = H.unwrapException(exception);
          stackTrace = H.getTraceFromException(exception);
          error0 = error;
          stackTrace0 = stackTrace;
          replacement = $.Zone__current.errorCallback$2(error0, stackTrace0);
          if (replacement != null) {
            error = replacement.error;
            if (error == null)
              error = new P.NullThrownError();
            stackTrace = replacement.stackTrace;
          } else {
            stackTrace = stackTrace0;
            error = error0;
          }
          if (stackTrace == null)
            stackTrace = P.AsyncError_defaultStackTrace(error);
          _this.doneSignal._asyncCompleteError$2(error, stackTrace);
          return;
        }
        if (t1._is(result)) {
          result.then$1$2$onError(_this._box_0.nextIteration, _this.doneSignal.get$_completeError(), type$.void);
          return;
        }
        keepGoing = H._asBoolS(result);
      }
      _this.doneSignal._complete$1(null);
    },
    $signature: 11
  };
  P.TimeoutException.prototype = {
    toString$0: function(_) {
      var result = "TimeoutException after " + this.duration.toString$0(0);
      result = result + ": " + this.message;
      return result;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.Completer.prototype = {};
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var replacement;
      type$.StackTrace._as(stackTrace);
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      this._completeError$2(error, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      this.$ti._eval$1("1/")._as(value);
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      this.$ti._eval$1("1/")._as(value);
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = this.$ti._eval$1("2/"),
        t4 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t3._as(t4.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t3._as(t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), asyncError.error, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new P._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      type$.bool_Function_dynamic._as(test);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new P._Future(t2, t1);
      if (t2 !== C.C__RootZone) {
        onError = P._registerErrorHandler(onError, t2);
        if (test != null)
          test = t2.registerUnaryCallback$2$1(test, type$.bool, type$.dynamic);
      }
      t2 = test == null ? 2 : 6;
      this._addListener$1(new P._FutureListener(result, t2, test, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, t2, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new P._Future(t2, t1);
      if (t2 !== C.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(new P._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$._FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$._FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = type$._FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state = 1;
      _this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (value._state === 8) {
          _this._state = 1;
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    timeout$1: function(_, timeLimit) {
      var onTimeout, t2, result, _this = this, t1 = {};
      t1.onTimeout = onTimeout;
      t1.onTimeout = null;
      t2 = _this.$ti;
      t2._eval$1("1/()")._as(onTimeout);
      if (_this._state >= 4) {
        t1 = new P._Future($.Zone__current, t2);
        t1._asyncComplete$1(_this);
        return t1;
      }
      result = new P._Future($.Zone__current, t2);
      t1.timer = null;
      t1.timer = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(result, timeLimit));
      _this.then$1$2$onError(new P._Future_timeout_closure0(t1, _this, result), new P._Future_timeout_closure1(t1, result), type$.Null);
      return result;
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 128
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners).error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 142
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = t1.$ti;
        t3 = t2._precomputed1;
        t4 = t3._as(_this.sourceResult);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(t2._eval$1("2/(1)")._as(t1.callback), t4, t2._eval$1("2/"), t3);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future_timeout_closure.prototype = {
    call$0: function() {
      this.result._completeError$1(new P.TimeoutException("Future not completed", this.timeLimit));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future_timeout_closure0.prototype = {
    call$1: function(v) {
      var t1;
      this.$this.$ti._precomputed1._as(v);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0(0);
        this.result._completeWithValue$1(v);
      }
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  P._Future_timeout_closure1.prototype = {
    call$2: function(e, s) {
      var t1;
      type$.StackTrace._as(s);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0(0);
        this.result._completeError$2(e, s);
      }
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    map$1$1: function(_, convert, $S) {
      var t1 = H._instanceType(this);
      return new P._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1: function($receiver, convert) {
      return this.map$1$1($receiver, convert, type$.dynamic);
    },
    contains$1: function(_, needle) {
      var t1 = {},
        future = new P._Future($.Zone__current, type$._Future_bool);
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    cast$1$0: function(_, $R) {
      return new H.CastStream(this, H._instanceType(this)._eval$1("@<Stream.T>")._bind$1($R)._eval$1("CastStream<1,2>"));
    },
    toList$0: function(_) {
      var t1 = H._instanceType(this),
        result = H.setRuntimeTypeInfo([], t1._eval$1("JSArray<Stream.T>")),
        future = new P._Future($.Zone__current, t1._eval$1("_Future<List<Stream.T>>"));
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(future, result), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, H._instanceType(this)._eval$1("_Future<Stream.T>"));
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_Stream$fromIterable_closure.prototype = {
    call$0: function() {
      var t1 = this.elements;
      return new P._IterablePendingEvents(new J.ArrayIterator(t1, 1, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")), this.T._eval$1("_IterablePendingEvents<0>"));
    },
    $signature: function() {
      return this.T._eval$1("_IterablePendingEvents<0>()");
    }
  };
  P.Stream_contains_closure.prototype = {
    call$1: function(element) {
      var _this = this,
        t1 = _this._box_0,
        t2 = _this.future;
      P._runUserCode(new P.Stream_contains__closure(H._instanceType(_this.$this)._eval$1("Stream.T")._as(element), _this.needle), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription, t2), type$.bool);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(Stream.T)");
    }
  };
  P.Stream_contains__closure.prototype = {
    call$0: function() {
      return J.$eq$(this.element, this.needle);
    },
    $signature: 28
  };
  P.Stream_contains__closure0.prototype = {
    call$1: function(isMatch) {
      if (H.boolConversionCheck(H._asBoolS(isMatch)))
        P._cancelAndValue(this._box_0.subscription, this.future, true);
    },
    $signature: 11
  };
  P.Stream_contains_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(false);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(Stream.T)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_toList_closure.prototype = {
    call$1: function(data) {
      C.JSArray_methods.add$1(this.result, H._instanceType(this.$this)._eval$1("Stream.T")._as(data));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(Stream.T)");
    }
  };
  P.Stream_toList_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this.result);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_first_closure.prototype = {
    call$1: function(value) {
      H._instanceType(this.$this)._eval$1("Stream.T")._as(value);
      P._cancelAndValue(this._box_0.subscription, this.future, value);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(Stream.T)");
    }
  };
  P.Stream_first_closure0.prototype = {
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this.future, e, s);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(H._instanceType(this)._eval$1("~(StreamView.T)")._as(onData), cancelOnError, type$.void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    }
  };
  P.StreamTransformerBase.prototype = {
    cast$2$0: function(_, RS, RT) {
      var t1 = H._instanceType(this);
      return new H.CastStreamTransformer(this, t1._eval$1("@<StreamTransformerBase.S>")._bind$1(t1._eval$1("StreamTransformerBase.T"))._bind$1(RS)._bind$1(RT)._eval$1("CastStreamTransformer<1,2,3,4>"));
    },
    $isStreamTransformer: 1
  };
  P.StreamController.prototype = {$isStreamSink: 1};
  P._StreamController.prototype = {
    get$stream: function(_) {
      return new P._ControllerStream(this, H._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$_pendingEvents: function() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return H._instanceType(_this)._eval$1("_PendingEvents<1>")._as(_this._varData);
      t1 = H._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$varData());
    },
    _ensurePendingEvents$0: function() {
      var t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        t1 = _this._varData;
        if (t1 == null)
          t1 = _this._varData = new P._StreamImplEvents(H._instanceType(_this)._eval$1("_StreamImplEvents<1>"));
        return H._instanceType(_this)._eval$1("_StreamImplEvents<1>")._as(t1);
      }
      t1 = H._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      state.get$varData();
      return t1._eval$1("_StreamImplEvents<1>")._as(state.get$varData());
    },
    get$_subscription: function() {
      var t1, _this = this;
      if ((_this._state & 8) !== 0) {
        t1 = H._instanceType(_this);
        return t1._eval$1("_ControllerSubscription<1>")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$varData());
      }
      return H._instanceType(_this)._eval$1("_ControllerSubscription<1>")._as(_this._varData);
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    get$done: function() {
      return this._ensureDoneFuture$0();
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future($.Zone__current, type$._Future_dynamic);
      return t1;
    },
    add$1: function(_, value) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if (t2 >= 4)
        throw H.wrapException(_this._badEventState$0());
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    addError$2: function(error, stackTrace) {
      var replacement, t1, _this = this;
      type$.StackTrace._as(stackTrace);
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      if (_this._state >= 4)
        throw H.wrapException(_this._badEventState$0());
      if (error == null)
        error = new P.NullThrownError();
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1 = _this._state;
      if ((t1 & 1) !== 0)
        _this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, subscription, pendingEvents, addState, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)")._as(onData);
      type$.void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      subscription = new P._ControllerSubscription(_this, t2, t3, t1._eval$1("_ControllerSubscription<1>"));
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t3 = _this._state |= 1;
      if ((t3 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.set$varData(subscription);
        addState.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, result0, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = C.JSNull_methods.cancel$0(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData));
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      t1 = _this.onCancel;
      if (t1 != null)
        if (result == null)
          try {
            result = type$.Future_dynamic._as(_this.onCancel.call$0());
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            result0 = new P._Future($.Zone__current, type$._Future_dynamic);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(t1);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1: function(subscription) {
      var _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        C.JSNull_methods.pause$0(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData));
      P._runGuarded(_this.onPause);
    },
    _recordResume$1: function(subscription) {
      var _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        C.JSNull_methods.resume$0(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData));
      P._runGuarded(_this.onResume);
    },
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var t1 = this.$this._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._SyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._async$_add$1(0, data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  };
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new P._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  };
  P._AsyncStreamController.prototype = {};
  P._SyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(H._instanceType(this)._eval$1("~(1)")._as(onData), onError, type$.void_Function._as(onDone), cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      this._async$_controller._recordPause$1(this);
    },
    _onResume$0: function() {
      this._async$_controller._recordResume$1(this);
    }
  };
  P._StreamSinkWrapper.prototype = {
    add$1: function(_, data) {
      this._async$_target.add$1(0, this.$ti._precomputed1._as(data));
    },
    get$done: function() {
      return this._async$_target.get$done();
    },
    $isStreamSink: 1
  };
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var handleDone, _this = this;
      _this.onData$1(onData);
      _this.onError$1(0, onError);
      type$.void_Function._as(onDone);
      handleDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      _this.set$_onDone(_this._zone.registerCallback$1$1(handleDone, type$.void));
    },
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        _this._state = (_this._state | 64) >>> 0;
        _this._pending.schedule$1(_this);
      }
    },
    onData$1: function(handleData) {
      var t1 = H._instanceType(this);
      t1._eval$1("~(_BufferingStreamSubscription.T)")._as(handleData);
      if (handleData == null)
        handleData = P.async___nullDataHandler$closure();
      this.set$_async$_onData(this._zone.registerUnaryCallback$2$1(handleData, type$.dynamic, t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1: function(_, handleError) {
      var _this = this;
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        _this._onError = _this._zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      else if (type$.void_Function_Object._is(handleError))
        _this._onError = _this._zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      else
        throw H.wrapException(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
    },
    pause$1: function(_, resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128 && _this._pending != null) {
        t3 = _this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = _this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            _this._pending.schedule$1(_this);
          else {
            t1 = (_this._state & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    asFuture$1$1: function(futureValue, $E) {
      var result;
      $E._as(futureValue);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this.set$_onDone(new P._BufferingStreamSubscription_asFuture_closure(result, futureValue));
      this._onError = new P._BufferingStreamSubscription_asFuture_closure0(this, result);
      return result;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return null;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = H._instanceType(_this)._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>"),
        pending = t1._as(_this._pending);
      if (pending == null) {
        pending = new P._StreamImplEvents(t1);
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2, _this = this;
      type$.StackTrace._as(stackTrace);
      t1 = _this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        t1 = _this._cancelFuture;
        if (t1 != null && t1 !== $.$get$Future__nullFuture())
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t2, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      t2 = _this._cancelFuture;
      if (t2 != null && t2 !== $.$get$Future__nullFuture())
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      if ((_this._state & 64) !== 0) {
        t1 = _this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = _this._state = (_this._state & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = _this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._state = (_this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = _this._state;
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        _this._state = (_this._state & 4294967263) >>> 0;
      }
      t1 = _this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData: function(_onData) {
      this._async$_onData = H._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_onDone: function(_onDone) {
      this._onDone = type$.void_Function._as(_onDone);
    },
    set$_pending: function(_pending) {
      this._pending = H._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription_asFuture_closure.prototype = {
    call$0: function() {
      this.result._complete$1(this.futureValue);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._BufferingStreamSubscription_asFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      var cancelFuture, t1;
      type$.StackTrace._as(stackTrace);
      cancelFuture = this.$this.cancel$0(0);
      t1 = this.result;
      if (cancelFuture != $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._BufferingStreamSubscription_asFuture__closure(t1, error, stackTrace));
      else
        t1._completeError$2(error, stackTrace);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  P._BufferingStreamSubscription_asFuture__closure.prototype = {
    call$0: function() {
      this.result._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(H._instanceType(this)._eval$1("~(1)")._as(onData), onError, type$.void_Function._as(onDone), true === cancelOnError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H._instanceType(this);
      return P._BufferingStreamSubscription$(t1._eval$1("~(1)")._as(onData), onError, type$.void_Function._as(onDone), cancelOnError, t1._precomputed1);
    }
  };
  P._GeneratedStreamImpl.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)")._as(onData);
      type$.void_Function._as(onDone);
      if (_this._isUsed)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1._precomputed1);
      t1._setPendingEvents$1(_this._pending.call$0());
      return t1;
    }
  };
  P._IterablePendingEvents.prototype = {
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var hasMore, e, s, t1, exception, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No events pending."));
      hasMore = null;
      try {
        hasMore = t1.moveNext$0();
        if (H.boolConversionCheck(hasMore)) {
          t1 = _this._async$_iterator;
          dispatch._sendData$1(t1.get$current(t1));
        } else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (hasMore == null) {
          _this.set$_async$_iterator(C.C_EmptyIterator);
          dispatch._sendError$2(e, s);
        } else
          dispatch._sendError$2(e, s);
      }
    },
    set$_async$_iterator: function(_iterator) {
      this._async$_iterator = this.$ti._eval$1("Iterator<1>")._as(_iterator);
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(_, next) {
      this.next = type$._DelayedEvent_dynamic._as(next);
    },
    get$next: function(receiver) {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function(_) {
      return null;
    },
    set$next: function(_, _0) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      H._instanceType(_this)._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var _this = this,
        t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        t1.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      $event = _this.firstPendingEvent;
      t1 = $event.get$next($event);
      _this.firstPendingEvent = t1;
      if (t1 == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  };
  P._DoneStreamSubscription.prototype = {
    _schedule$0: function() {
      var _this = this;
      if ((_this._state & 2) !== 0)
        return;
      _this._zone.scheduleMicrotask$1(_this.get$_sendDone());
      _this._state = (_this._state | 2) >>> 0;
    },
    onData$1: function(handleData) {
      this.$ti._eval$1("~(1)")._as(handleData);
    },
    onError$1: function(_, handleError) {
    },
    pause$1: function(_, resumeSignal) {
      this._state += 4;
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function(_) {
      return $.$get$Future__nullFuture();
    },
    asFuture$1$1: function(futureValue, $E) {
      var result;
      $E._as(futureValue);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this.set$_onDone(new P._DoneStreamSubscription_asFuture_closure(result, futureValue));
      return result;
    },
    _sendDone$0: function() {
      var _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      t1 = _this._onDone;
      if (t1 != null)
        _this._zone.runGuarded$1(t1);
    },
    set$_onDone: function(_onDone) {
      this._onDone = type$.void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  P._DoneStreamSubscription_asFuture_closure.prototype = {
    call$0: function() {
      this.result._completeWithValue$1(this.futureValue);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsBroadcastStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)")._as(onData);
      type$.void_Function._as(onDone);
      t2 = _this._async$_controller;
      if (t2 == null || (t2._state & 4) !== 0) {
        t1 = new P._DoneStreamSubscription($.Zone__current, onDone, t1._eval$1("_DoneStreamSubscription<1>"));
        t1._schedule$0();
        return t1;
      }
      if (_this._subscription == null) {
        t1 = t2.get$add(t2);
        t3 = t2.get$addError();
        _this.set$_subscription(_this._async$_source.listen$3$onDone$onError(t1, t2.get$close(t2), t3));
      }
      return _this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    _onCancel$0: function() {
      var t2, _this = this,
        t1 = _this._async$_controller,
        shutdown = t1 == null || (t1._state & 4) !== 0;
      t1 = _this._onCancelHandler;
      if (t1 != null) {
        t2 = _this.$ti._eval$1("_BroadcastSubscriptionWrapper<1>");
        _this._zone.runUnary$2$2(t1, new P._BroadcastSubscriptionWrapper(_this, t2), type$.void, t2);
      }
      if (shutdown) {
        t1 = _this._subscription;
        if (t1 != null) {
          t1.cancel$0(0);
          _this.set$_subscription(null);
        }
      }
    },
    _onListen$0: function() {
      var t2, _this = this,
        t1 = _this._onListenHandler;
      if (t1 != null) {
        t2 = _this.$ti._eval$1("_BroadcastSubscriptionWrapper<1>");
        _this._zone.runUnary$2$2(t1, new P._BroadcastSubscriptionWrapper(_this, t2), type$.void, t2);
      }
    },
    _cancelSubscription$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      this.set$_subscription(null);
      this.set$_async$_controller(null);
      t1.cancel$0(0);
    },
    set$_async$_controller: function(_controller) {
      this._async$_controller = this.$ti._eval$1("_AsBroadcastStreamController<1>")._as(_controller);
    },
    set$_subscription: function(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>")._as(_subscription);
    }
  };
  P._BroadcastSubscriptionWrapper.prototype = {
    cancel$0: function(_) {
      this._stream._cancelSubscription$0();
      return $.$get$Future__nullFuture();
    },
    $isStreamSubscription: 1
  };
  P._StreamIterator.prototype = {
    get$current: function(_) {
      var _this = this;
      if (_this._subscription != null && _this._isPaused)
        return _this.$ti._precomputed1._as(_this._stateData);
      return null;
    },
    moveNext$0: function() {
      var future, _this = this,
        t1 = _this._subscription;
      if (t1 != null) {
        if (_this._isPaused) {
          future = new P._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._isPaused = false;
          t1.resume$0(0);
          return future;
        }
        throw H.wrapException(P.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0: function() {
      var _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this._subscription = _this.$ti._eval$1("Stream<1>")._as(stateData).listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_onDone(), _this.get$_onError());
        return _this._stateData = new P._Future($.Zone__current, type$._Future_bool);
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0: function(_) {
      var _this = this,
        subscription = _this.$ti._eval$1("StreamSubscription<1>")._as(_this._subscription),
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this._subscription = null;
        if (!_this._isPaused)
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        return subscription.cancel$0(0);
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1: function(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._isPaused = true;
      moveNextFuture._complete$1(true);
      t1 = _this._subscription;
      if (t1 != null && _this._isPaused)
        t1.pause$0(0);
    },
    _onError$2: function(error, stackTrace) {
      var moveNextFuture;
      type$.StackTrace._as(stackTrace);
      moveNextFuture = type$._Future_bool._as(this._stateData);
      this._stateData = this._subscription = null;
      moveNextFuture._completeError$2(error, stackTrace);
    },
    _onError$1: function(error) {
      return this._onError$2(error, null);
    },
    _onDone$0: function() {
      var moveNextFuture = type$._Future_bool._as(this._stateData);
      this._stateData = this._subscription = null;
      moveNextFuture._complete$1(false);
    }
  };
  P._cancelAndError_closure.prototype = {
    call$0: function() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._cancelAndErrorClosure_closure.prototype = {
    call$2: function(error, stackTrace) {
      P._cancelAndError(this.subscription, this.future, error, type$.StackTrace._as(stackTrace));
    },
    $signature: 30
  };
  P._cancelAndValue_closure.prototype = {
    call$0: function() {
      return this.future._complete$1(this.value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = H._instanceType(this);
      t1._eval$1("~(_ForwardingStream.T)")._as(onData);
      type$.void_Function._as(onDone);
      cancelOnError = true === cancelOnError;
      t2 = t1._eval$1("_ForwardingStream.T");
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      t1 = new P._ForwardingStreamSubscription(this, t3, t4, t1._eval$1("@<_ForwardingStream.S>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
      t1.set$_subscription(this._async$_source.listen$3$onDone$onError(t1.get$_handleData(), t1.get$_handleDone(), t1.get$_handleError()));
      return t1;
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    _handleData$2: function(data, sink) {
      var t1 = H._instanceType(this);
      t1._eval$1("_ForwardingStream.S")._as(data);
      t1._eval$1("_EventSink<_ForwardingStream.T>")._as(sink)._async$_add$1(0, t1._eval$1("_ForwardingStream.T")._as(data));
    },
    _handleError$3: function(error, stackTrace, sink) {
      H._instanceType(this)._eval$1("_EventSink<_ForwardingStream.T>")._as(sink)._addError$2(error, stackTrace);
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _async$_add$1: function(_, data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(0, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0(0);
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this.set$_subscription(null);
        return t1.cancel$0(0);
      }
      return null;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2: function(error, stackTrace) {
      this._stream._handleError$3(error, type$.StackTrace._as(stackTrace), this);
    },
    _handleDone$0: function() {
      H._instanceType(this._stream)._eval$1("_EventSink<_ForwardingStream.T>")._as(this)._close$0();
    },
    set$_subscription: function(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>")._as(_subscription);
    }
  };
  P._WhereStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var satisfies, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<1>")._as(sink);
      satisfies = null;
      try {
        satisfies = this._test.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }
      if (H.boolConversionCheck(satisfies))
        J._async$_add$1$x(sink, inputEvent);
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }
      J._async$_add$1$x(sink, outputEvent);
    }
  };
  P._HandleErrorStream.prototype = {
    _handleError$3: function(error, stackTrace, sink) {
      var matches, e, s, exception, t1;
      this.$ti._eval$1("_EventSink<1>")._as(sink);
      matches = true;
      if (H.boolConversionCheck(matches))
        try {
          P._invokeErrorHandler(this._transform, error, stackTrace);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = e;
          if (t1 == null ? error == null : t1 === error)
            sink._addError$2(error, stackTrace);
          else
            P._addErrorWithReplacement(sink, e, s);
          return;
        }
      else
        sink._addError$2(error, stackTrace);
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError0: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._ZoneFunction.prototype = {};
  P._RunNullaryZoneFunction.prototype = {};
  P._RunUnaryZoneFunction.prototype = {};
  P._RunBinaryZoneFunction.prototype = {};
  P._RegisterNullaryZoneFunction.prototype = {};
  P._RegisterUnaryZoneFunction.prototype = {};
  P._RegisterBinaryZoneFunction.prototype = {};
  P.ZoneSpecification.prototype = {};
  P._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  P._Zone.prototype = {$isZone: 1};
  P._CustomZone.prototype = {
    get$_delegate: function() {
      var t1 = this._delegateCache;
      if (t1 != null)
        return t1;
      return this._delegateCache = new P._ZoneDelegate(this);
    },
    get$errorZone: function() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._CustomZone_bindCallback_closure(this, this.registerCallback$1$1($R._eval$1("0()")._as(f), $R), $R);
    },
    bindUnaryCallback$2$1: function(f, $R, $T) {
      return new P._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1($R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $R, $T), $T, $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(type$.void_Function._as(f), type$.void));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1($T._eval$1("~(0)")._as(f), type$.void, $T), $T);
    },
    $index: function(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(0, key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var implementation, t1, parentDelegate;
      type$.StackTrace._as(stackTrace);
      implementation = this._handleUncaughtError;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone,
        parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, specification, zoneValues);
    },
    run$1$1: function(f, $R) {
      var implementation, t1, parentDelegate;
      $R._eval$1("0()")._as(f);
      implementation = this._run;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$1$4(t1, parentDelegate, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      var implementation, t1, parentDelegate;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      implementation = this._runUnary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$2$5(t1, parentDelegate, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$3$6(t1, parentDelegate, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(callback, $R) {
      var implementation, t1, parentDelegate;
      $R._eval$1("0()")._as(callback);
      implementation = this._registerCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$1$4(t1, parentDelegate, this, callback, $R);
    },
    registerUnaryCallback$2$1: function(callback, $R, $T) {
      var implementation, t1, parentDelegate;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(callback);
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$2$4(t1, parentDelegate, this, callback, $R, $T);
    },
    registerBinaryCallback$3$1: function(callback, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(callback);
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$3$4(t1, parentDelegate, this, callback, $R, T1, T2);
    },
    errorCallback$2: function(error, stackTrace) {
      var implementation, implementationZone, parentDelegate;
      type$.StackTrace._as(stackTrace);
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === C.C__RootZone)
        return null;
      parentDelegate = P._parentDelegate(implementationZone);
      return implementation.$function.call$5(implementationZone, parentDelegate, this, error, stackTrace);
    },
    scheduleMicrotask$1: function(f) {
      var implementation, t1, parentDelegate;
      type$.void_Function._as(f);
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, f);
    },
    createTimer$2: function(duration, f) {
      var implementation, t1, parentDelegate;
      type$.void_Function._as(f);
      implementation = this._createTimer;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
    },
    createPeriodicTimer$2: function(duration, f) {
      var implementation, t1, parentDelegate;
      type$.void_Function_Timer._as(f);
      implementation = this._createPeriodicTimer;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
    },
    print$1: function(_, line) {
      var implementation = this._print,
        t1 = implementation.zone,
        parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, line);
    },
    set$_errorCallback: function(_errorCallback) {
      this._errorCallback = type$._ZoneFunction_of_AsyncError_Function_Zone_ZoneDelegate_Zone_Object_StackTrace._as(_errorCallback);
    },
    set$_scheduleMicrotask: function(_scheduleMicrotask) {
      this._scheduleMicrotask = type$._ZoneFunction_of_void_Function_4_Zone_and_ZoneDelegate_and_Zone_and_void_Function._as(_scheduleMicrotask);
    },
    set$_createTimer: function(_createTimer) {
      this._createTimer = type$._ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function._as(_createTimer);
    },
    set$_createPeriodicTimer: function(_createPeriodicTimer) {
      this._createPeriodicTimer = type$._ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function_Timer._as(_createPeriodicTimer);
    },
    set$_print: function(_print) {
      this._print = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String._as(_print);
    },
    set$_fork: function(_fork) {
      this._fork = type$._ZoneFunction_of_Zone_Function_5_Zone_and_ZoneDelegate_and_Zone_and_ZoneSpecification_and_Map_dynamic_dynamic._as(_fork);
    },
    set$_handleUncaughtError: function(_handleUncaughtError) {
      this._handleUncaughtError = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace._as(_handleUncaughtError);
    },
    get$_run: function() {
      return this._run;
    },
    get$_runUnary: function() {
      return this._runUnary;
    },
    get$_runBinary: function() {
      return this._runBinary;
    },
    get$_registerCallback: function() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback: function() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback: function() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback: function() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask: function() {
      return this._scheduleMicrotask;
    },
    get$_createTimer: function() {
      return this._createTimer;
    },
    get$_createPeriodicTimer: function() {
      return this._createPeriodicTimer;
    },
    get$_print: function() {
      return this._print;
    },
    get$_fork: function() {
      return this._fork;
    },
    get$_handleUncaughtError: function() {
      return this._handleUncaughtError;
    },
    get$parent: function(receiver) {
      return this.parent;
    },
    get$_async$_map: function() {
      return this._async$_map;
    }
  };
  P._CustomZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1: function(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, t1._as(arg), _this.R, t1);
    },
    $signature: function() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  P._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.registered);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1.error);
      error = H.wrapException(t1.error);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    get$_run: function() {
      return C._RunNullaryZoneFunction__RootZone__rootRun;
    },
    get$_runUnary: function() {
      return C._RunUnaryZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary: function() {
      return C._RunBinaryZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback: function() {
      return C._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback: function() {
      return C._RegisterUnaryZoneFunction_Bqo;
    },
    get$_registerBinaryCallback: function() {
      return C._RegisterBinaryZoneFunction_kGu;
    },
    get$_errorCallback: function() {
      return C._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask: function() {
      return C._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer: function() {
      return C._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer: function() {
      return C._ZoneFunction_3bB;
    },
    get$_print: function() {
      return C._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork: function() {
      return C._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError: function() {
      return C._ZoneFunction_NMc;
    },
    get$parent: function(_) {
      return null;
    },
    get$_async$_map: function() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate: function() {
      var t1 = $._RootZone__rootDelegate;
      if (t1 != null)
        return t1;
      return $._RootZone__rootDelegate = new P._ZoneDelegate(this);
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index: function(_, key) {
      return null;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createTimer$2: function(duration, f) {
      return P.Timer__createTimer(duration, type$.void_Function._as(f));
    },
    createPeriodicTimer$2: function(duration, f) {
      return P.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(f));
    },
    print$1: function(_, line) {
      H.printString(line);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function(_) {
      return new P._HashMapKeyIterable(this, H._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values: function(_) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(new P._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new P._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    addAll$1: function(_, other) {
      H._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._collection$_computeKeys$0();
      for ($length = keys.length, t1 = t1._precomputed1, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(t1._as(key), _this.$index(0, key));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _collection$_computeKeys$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._keys;
      if (t1 != null)
        return t1;
      result = new Array(_this._collection$_length);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  P._HashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H._instanceType(t1)._precomputed1._as(each));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  P._HashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(1,2)");
    }
  };
  P._IdentityHashMap.prototype = {
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._CustomHashMap.prototype = {
    $index: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_get(0, key);
    },
    $indexSet: function(_, key, value) {
      var t1 = this.$ti;
      this.super$_HashMap$_set(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; i += 2)
        if (H.boolConversionCheck(t2.call$2(bucket[i], t1._as(key))))
          return i;
      return -1;
    }
  };
  P._CustomHashMap_closure.prototype = {
    call$1: function(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P._HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1: function(_, element) {
      return this._collection$_map.containsKey$1(0, element);
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._LinkedCustomHashMap.prototype = {
    $index: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet: function(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1: function(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (H.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1: function(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  P._LinkedHashSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return new P._LinkedHashSet($R._eval$1("_LinkedHashSet<0>"));
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, H._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$._LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$._LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)")._as(action);
      cell = _this._collection$_first;
      modifications = _this._collection$_modifications;
      for (t1 = t1._precomputed1; cell != null;) {
        action.call$1(t1._as(cell._collection$_element));
        if (modifications !== _this._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    get$first: function(_) {
      var t1 = this._collection$_first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H._instanceType(this)._precomputed1._as(t1._collection$_element);
    },
    get$last: function(_) {
      var t1 = this._collection$_last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H._instanceType(this)._precomputed1._as(t1._collection$_element);
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._collection$_remove$1(0, object);
    },
    _collection$_remove$1: function(_, object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    removeWhere$1: function(_, test) {
      this._filterWhere$2(H._instanceType(this)._eval$1("bool(1)")._as(test), true);
    },
    _filterWhere$2: function(test, removeMatching) {
      var cell, element, next, modifications, t2, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("bool(1)")._as(test);
      cell = _this._collection$_first;
      for (t1 = t1._precomputed1; cell != null; cell = next) {
        element = t1._as(cell._collection$_element);
        next = cell._collection$_next;
        modifications = _this._collection$_modifications;
        t2 = test.call$1(element);
        if (modifications !== _this._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        if (true === t2)
          _this.remove$1(0, element);
      }
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H._instanceType(this)._precomputed1._as(element);
      if (type$._LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$._LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._collection$_element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(_this.$ti._precomputed1._as(t1._collection$_element));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 17
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      var t1;
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      return this.$index(receiver, t1 - 1);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element,
        t1 = H.instanceType(receiver);
      t1._eval$1("bool(ListMixin.E)")._as(test);
      t1._eval$1("ListMixin.E()")._as(orElse);
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    join$1: function(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = P.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    where$1: function(receiver, test) {
      var t1 = H.instanceType(receiver);
      return new H.WhereIterable(receiver, t1._eval$1("bool(ListMixin.E)")._as(test), t1._eval$1("WhereIterable<ListMixin.E>"));
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.instanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListMixin.E)")._as(combine);
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    take$1: function(receiver, count) {
      return H.SubListIterable$(receiver, 0, count, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable: function(receiver, growable) {
      var i, t1,
        result = H.setRuntimeTypeInfo([], H.instanceType(receiver)._eval$1("JSArray<ListMixin.E>"));
      C.JSArray_methods.set$length(result, this.get$length(receiver));
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, t2, element, i0;
      H.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable);
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable._source), t2 = H._instanceType(iterable), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1])._rest[1]; t1.moveNext$0(); i = i0) {
        element = t2._as(t1.get$current(t1));
        if (typeof i !== "number")
          return i.$add();
        i0 = i + 1;
        this.set$length(receiver, i0);
        this.$indexSet(receiver, i, element);
      }
    },
    _closeGap$2: function(receiver, start, end) {
      var size, i, _this = this,
        $length = _this.get$length(receiver);
      if (typeof start !== "number")
        return H.iae(start);
      size = end - start;
      if (typeof $length !== "number")
        return H.iae($length);
      i = end;
      for (; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    removeWhere$1: function(receiver, test) {
      this._filter$2(receiver, H.instanceType(receiver)._eval$1("bool(ListMixin.E)")._as(test), false);
    },
    _filter$2: function(receiver, test, retainMatching) {
      var retained, $length, i, element, _this = this,
        t1 = H.instanceType(receiver);
      t1._eval$1("bool(ListMixin.E)")._as(test);
      retained = H.setRuntimeTypeInfo([], t1._eval$1("JSArray<ListMixin.E>"));
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = _this.$index(receiver, i);
        if (J.$eq$(test.call$1(element), false))
          C.JSArray_methods.add$1(retained, element);
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (retained.length !== _this.get$length(receiver)) {
        _this.setRange$3(receiver, 0, retained.length, retained);
        _this.set$length(receiver, retained.length);
      }
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, H.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1: function(receiver, compare) {
      var t2,
        t1 = H.instanceType(receiver);
      t1._eval$1("int(ListMixin.E,ListMixin.E)")._as(compare);
      t2 = compare == null ? P.collection_ListMixin__compareAny$closure() : compare;
      H.Sort_sort(receiver, t2, t1._eval$1("ListMixin.E"));
    },
    $add: function(receiver, other) {
      var result, t2,
        t1 = H.instanceType(receiver);
      t1._eval$1("List<ListMixin.E>")._as(other);
      result = H.setRuntimeTypeInfo([], t1._eval$1("JSArray<ListMixin.E>"));
      t1 = this.get$length(receiver);
      t2 = J.get$length$asx(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.set$length(result, t1 + t2);
      C.JSArray_methods.setRange$3(result, 0, this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, this.get$length(receiver), result.length, other);
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(fill);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t2, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    indexOf$1: function(receiver, element) {
      var t1, i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq$(this.$index(receiver, i), element))
          return i;
        ++i;
      }
      return -1;
    },
    insert$2: function(receiver, index, element) {
      var t1, _this = this;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      P.ArgumentError_checkNotNull(index, "index", type$.int);
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      if (index == _this.get$length(receiver)) {
        _this.add$1(receiver, element);
        return;
      }
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$length(receiver, t1 + 1);
      if (typeof index !== "number")
        return index.$add();
      _this.setRange$4(receiver, index + 1, _this.get$length(receiver), receiver, index);
      _this.$indexSet(receiver, index, element);
    },
    removeAt$1: function(receiver, index) {
      var result = this.$index(receiver, index);
      if (typeof index !== "number")
        return index.$add();
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 17
  };
  P.MapMixin.prototype = {
    cast$2$0: function(receiver, RK, RV) {
      var t1 = H.instanceType(receiver);
      return P.Map_castFrom(receiver, t1._eval$1("MapMixin.K"), t1._eval$1("MapMixin.V"), RK, RV);
    },
    forEach$1: function(receiver, action) {
      var t1, key;
      H.instanceType(receiver)._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        action.call$2(key, this.$index(receiver, key));
      }
    },
    addAll$1: function(receiver, other) {
      var t1, key;
      H.instanceType(receiver)._eval$1("Map<MapMixin.K,MapMixin.V>")._as(other);
      for (t1 = other.get$keys(other), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current(t1);
        this.$indexSet(receiver, key, other.$index(0, key));
      }
    },
    get$entries: function(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new P.MapMixin_entries_closure(receiver), H.instanceType(receiver)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    map$2$1: function(receiver, transform, K2, V2) {
      var result, t1, key, entry;
      H.instanceType(receiver)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapMixin.K,MapMixin.V)")._as(transform);
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        entry = transform.call$2(key, this.$index(receiver, key));
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    get$isNotEmpty: function(receiver) {
      return J.get$isNotEmpty$asx(this.get$keys(receiver));
    },
    get$values: function(receiver) {
      var t1 = H.instanceType(receiver);
      return new P._MapBaseValueIterable(receiver, t1._eval$1("@<MapMixin.K>")._bind$1(t1._eval$1("MapMixin.V"))._eval$1("_MapBaseValueIterable<1,2>"));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this,
        t2 = H.instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      return new P.MapEntry(key, J.$index$asx(t1, key), t2._eval$1("@<MapMixin.K>")._bind$1(t2._eval$1("MapMixin.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature: function() {
      return H.instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$first: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$first$ax(t2.get$keys(t1)));
    },
    get$last: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$last$ax(t2.get$keys(t1)));
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map,
        t2 = this.$ti;
      return new P._MapBaseValueIterator(J.get$iterator$ax(J.get$keys$x(t1)), t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current(t1)));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function(_) {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._rest[1]._as(_current);
    },
    $isIterator: 1
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1: function(_, other) {
      H._instanceType(this)._eval$1("Map<1,2>")._as(other);
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return J.cast$2$0$ax(this._collection$_map, RK, RV);
    },
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      var t1 = H._instanceType(this);
      J.$indexSet$ax(this._collection$_map, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    addAll$1: function(_, other) {
      J.addAll$1$ax(this._collection$_map, H._instanceType(this)._eval$1("Map<1,2>")._as(other));
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._collection$_map, key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._collection$_map);
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values: function(_) {
      return J.get$values$x(this._collection$_map);
    },
    get$entries: function(_) {
      return J.get$entries$x(this._collection$_map);
    },
    map$2$1: function(_, transform, K2, V2) {
      return J.map$2$1$ax(this._collection$_map, H._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return new P.UnmodifiableMapView(J.cast$2$0$ax(this._collection$_map, RK, RV), RK._eval$1("@<0>")._bind$1(RV)._eval$1("UnmodifiableMapView<1,2>"));
    }
  };
  P.ListQueue.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastQueue(this, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    get$iterator: function(_) {
      var _this = this;
      return new P._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._collection$_table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t2,
        t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._collection$_table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t3,
        t1 = this._head,
        t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this._collection$_table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3, _this = this,
        $length = _this.get$length(_this);
      if (typeof index !== "number")
        return H.iae(index);
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, _this, "index", null, $length));
      t1 = _this._collection$_table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    toList$1$growable: function(_, growable) {
      var _this = this,
        list = H.setRuntimeTypeInfo([], _this.$ti._eval$1("JSArray<1>"));
      C.JSArray_methods.set$length(list, _this.get$length(_this));
      _this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, value) {
      this._add$1(0, this.$ti._precomputed1._as(value));
    },
    addAll$1: function(_, elements) {
      var addCount, $length, t2, t3, t4, newCapacity, newTable, endSpace, preSpace, _this = this,
        t1 = _this.$ti;
      t1._eval$1("Iterable<1>")._as(elements);
      if (t1._eval$1("List<1>")._is(elements)) {
        addCount = elements.length;
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._collection$_table;
        t4 = t3.length;
        if (t2 >= t4) {
          newCapacity = P.ListQueue__nextPowerOf2(t2 + (t2 >>> 1));
          if (typeof newCapacity !== "number")
            return H.iae(newCapacity);
          t3 = new Array(newCapacity);
          t3.fixed$length = Array;
          newTable = H.setRuntimeTypeInfo(t3, t1._eval$1("JSArray<1>"));
          _this._tail = _this._writeToList$1(newTable);
          _this.set$_collection$_table(newTable);
          _this._head = 0;
          C.JSArray_methods.setRange$4(_this._collection$_table, $length, t2, elements, 0);
          _this._tail += addCount;
        } else {
          t1 = _this._tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            C.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            C.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            C.JSArray_methods.setRange$4(_this._collection$_table, 0, preSpace, elements, endSpace);
            _this._tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          _this._add$1(0, t1.get$current(t1));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._collection$_table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      result = t2[t1];
      C.JSArray_methods.$indexSet(t2, t1, null);
      _this._head = (_this._head + 1 & _this._collection$_table.length - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t2, t3, newTable, split, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(element);
      C.JSArray_methods.$indexSet(_this._collection$_table, _this._tail, element);
      t2 = _this._tail;
      t3 = _this._collection$_table.length;
      t2 = (t2 + 1 & t3 - 1) >>> 0;
      _this._tail = t2;
      if (_this._head === t2) {
        t2 = new Array(t3 * 2);
        t2.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t2, t1._eval$1("JSArray<1>"));
        t1 = _this._collection$_table;
        t2 = _this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._collection$_table, 0);
        _this._head = 0;
        _this._tail = _this._collection$_table.length;
        _this.set$_collection$_table(newTable);
      }
      ++_this._modificationCount;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize, _this = this;
      _this.$ti._eval$1("List<1>")._as(target);
      t1 = _this._head;
      t2 = _this._tail;
      t3 = _this._collection$_table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this._tail, _this._collection$_table, 0);
        return _this._tail + firstPartSize;
      }
    },
    set$_collection$_table: function(_table) {
      this._collection$_table = this.$ti._eval$1("List<1>")._as(_table);
    },
    $isQueue: 1
  };
  P._ListQueueIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._collection$_table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._collection$_table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    cast$1$0: function(_, $R) {
      return P.Set_castFrom(this, null, H._instanceType(this)._eval$1("SetMixin.E"), $R);
    },
    addAll$1: function(_, elements) {
      var t1;
      H._instanceType(this)._eval$1("Iterable<SetMixin.E>")._as(elements);
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    removeWhere$1: function(_, test) {
      var toRemove, t1, element;
      H._instanceType(this)._eval$1("bool(SetMixin.E)")._as(test);
      toRemove = [];
      for (t1 = this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();) {
        element = t1._collection$_current;
        if (H.boolConversionCheck(test.call$1(element)))
          toRemove.push(element);
      }
      this.removeAll$1(toRemove);
    },
    toList$1$growable: function(_, growable) {
      var t1, i, i0, _this = this,
        result = H.setRuntimeTypeInfo([], H._instanceType(_this)._eval$1("JSArray<SetMixin.E>"));
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (t1 = _this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(SetMixin.E)")._as(f), t1._eval$1("@<SetMixin.E>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      H._instanceType(this)._eval$1("~(SetMixin.E)")._as(f);
      for (t1 = this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    join$1: function(_, separator) {
      var t1 = this.readClasses$0(),
        iterator = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator._collection$_current);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    take$1: function(_, n) {
      return H.TakeIterable_TakeIterable(this, n, H._instanceType(this)._eval$1("SetMixin.E"));
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H._instanceType(this)._eval$1("SetMixin.E"));
    },
    get$first: function(_) {
      var t1 = this.readClasses$0(),
        it = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it._collection$_current;
    },
    get$last: function(_) {
      var result,
        t1 = this.readClasses$0(),
        it = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it._collection$_current;
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      P.ArgumentError_checkNotNull(index, _s5_, type$.int);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1), elementIndex = 0; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    }
  };
  P.SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P._SetBase.prototype = {
    cast$1$0: function(_, $R) {
      return P.Set_castFrom(this, this.get$_newSimilarSet(), H._instanceType(this)._precomputed1, $R);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    removeAll$1: function(elements) {
      var t1, _i;
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        this.remove$1(0, elements[_i]);
    },
    removeWhere$1: function(_, test) {
      var toRemove, t1, element, _this = this;
      H._instanceType(_this)._eval$1("bool(1)")._as(test);
      toRemove = [];
      for (t1 = _this.get$iterator(_this); t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (H.boolConversionCheck(test.call$1(element)))
          toRemove.push(element);
      }
      _this.removeAll$1(toRemove);
    },
    toList$1$growable: function(_, growable) {
      var t1, i, i0, _this = this,
        result = H.setRuntimeTypeInfo([], H._instanceType(_this)._eval$1("JSArray<1>"));
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (t1 = _this.get$iterator(_this), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1.get$current(t1));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      H._instanceType(this)._eval$1("~(1)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    join$1: function(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current(iterator));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    take$1: function(_, n) {
      return H.TakeIterable_TakeIterable(this, n, H._instanceType(this)._precomputed1);
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H._instanceType(this)._precomputed1);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      P.ArgumentError_checkNotNull(index, _s5_, type$.int);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return P.LinkedHashSet_LinkedHashSet($R);
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    contains$1: function(_, element) {
      return J.containsKey$1$x(this._collection$_map, element);
    },
    get$iterator: function(_) {
      return J.get$iterator$ax(J.get$keys$x(this._collection$_map));
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    add$1: function(_, value) {
      this.$ti._precomputed1._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    },
    addAll$1: function(_, elements) {
      this.$ti._eval$1("Iterable<1>")._as(elements);
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    },
    removeAll$1: function(elements) {
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    },
    removeWhere$1: function(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    },
    remove$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    }
  };
  P._SplayTreeNode.prototype = {
    set$left: function(_, left) {
      this.left = this.$ti._eval$1("_SplayTreeNode<_SplayTreeNode.K>")._as(left);
    },
    set$right: function(_, right) {
      this.right = this.$ti._eval$1("_SplayTreeNode<_SplayTreeNode.K>")._as(right);
    },
    get$key: function(receiver) {
      return this.key;
    }
  };
  P._SplayTreeMapNode.prototype = {
    set$value: function(_, value) {
      this.value = this.$ti._rest[1]._as(value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  P._SplayTree.prototype = {
    _splay$1: function(key) {
      var current, left, t2, right, left0, comp, t3, t4, t5, tmp, current0, _this = this,
        t1 = _this.$ti;
      t1._eval$1("_SplayTree.K")._as(key);
      current = _this._collection$_root;
      if (current == null)
        return -1;
      left = _this._dummy;
      for (t2 = t1._eval$1("_SplayTree.1"), t1 = t1._precomputed1, right = left, left0 = right, comp = null; true;) {
        t3 = t1._as(current.key);
        t1._as(key);
        t4 = _this._comparator;
        t3 = t4.call$2(t3, key);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          t5 = current.left;
          if (t5 == null) {
            comp = t3;
            break;
          }
          t3 = t4.call$2(t1._as(t5.key), key);
          if (typeof t3 !== "number")
            return t3.$gt();
          if (t3 > 0) {
            tmp = current.left;
            current.set$left(0, tmp.right);
            tmp.set$right(0, current);
            t2._as(tmp);
            if (tmp.left == null) {
              comp = t3;
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.set$left(0, current);
          current0 = t2._as(current.left);
          comp = t3;
          right = current;
          current = current0;
        } else {
          if (t3 < 0) {
            t5 = current.right;
            if (t5 == null) {
              comp = t3;
              break;
            }
            t3 = t4.call$2(t1._as(t5.key), key);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < 0) {
              tmp = t2._as(current.right);
              current.set$right(0, tmp.left);
              tmp.set$left(0, current);
              if (tmp.right == null) {
                comp = t3;
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.set$right(0, current);
            current0 = t2._as(current.right);
          } else {
            comp = t3;
            break;
          }
          comp = t3;
          left0 = current;
          current = current0;
        }
      }
      left0.set$right(0, current.left);
      right.set$left(0, current.right);
      current.set$left(0, left.right);
      current.set$right(0, left.left);
      _this.set$_collection$_root(current);
      left.set$right(0, null);
      left.set$left(0, null);
      ++_this._splayCount;
      return comp;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, _this = this;
      _this.$ti._eval$1("_SplayTree.1")._as(node);
      ++_this._count;
      ++_this._modificationCount;
      t1 = _this._collection$_root;
      if (t1 == null) {
        _this.set$_collection$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(0, t1);
        node.set$right(0, _this._collection$_root.right);
        _this._collection$_root.set$right(0, null);
      } else {
        node.set$right(0, t1);
        node.set$left(0, _this._collection$_root.left);
        _this._collection$_root.set$left(0, null);
      }
      _this.set$_collection$_root(node);
    },
    _collection$_clear$0: function(_) {
      this.set$_collection$_root(null);
      this._count = 0;
      ++this._modificationCount;
    }
  };
  P.SplayTreeMap.prototype = {
    $index: function(_, key) {
      var _this = this;
      if (!H.boolConversionCheck(_this._validKey.call$1(key)))
        return null;
      if (_this._collection$_root != null)
        if (_this._splay$1(_this.$ti._precomputed1._as(key)) === 0)
          return _this._collection$_root.value;
      return null;
    },
    $indexSet: function(_, key, value) {
      var t2, comp, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t2 = t1._rest[1];
      t2._as(value);
      if (key == null)
        throw H.wrapException(P.ArgumentError$(key));
      comp = _this._splay$1(key);
      if (comp === 0) {
        _this._collection$_root.set$value(0, value);
        return;
      }
      _this._addNewRoot$2(new P._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t2)._eval$1("_SplayTreeMapNode<1,2>")), comp);
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var comp, modificationCount, splayCount, value, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (key == null)
        throw H.wrapException(P.ArgumentError$(key));
      comp = _this._splay$1(key);
      if (comp === 0)
        return _this._collection$_root.value;
      modificationCount = _this._modificationCount;
      splayCount = _this._splayCount;
      value = ifAbsent.call$0();
      if (modificationCount !== _this._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(_this));
      if (splayCount !== _this._splayCount)
        comp = _this._splay$1(key);
      _this._addNewRoot$2(new P._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>")), comp);
      return value;
    },
    addAll$1: function(_, other) {
      this.$ti._eval$1("Map<1,2>")._as(other).forEach$1(0, new P.SplayTreeMap_addAll_closure(this));
    },
    get$isEmpty: function(_) {
      return this._collection$_root == null;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_root != null;
    },
    forEach$1: function(_, f) {
      var nodes, node, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      nodes = new P._SplayTreeNodeIterator(_this, H.setRuntimeTypeInfo([], t1._eval$1("JSArray<_SplayTreeNode<1>>")), _this._modificationCount, _this._splayCount, t1._eval$1("_SplayTreeNodeIterator<1>"));
      nodes._findLeftMostDescendent$1(_this._collection$_root);
      for (t1 = t1._eval$1("_SplayTreeMapNode<1,2>"); nodes.moveNext$0();) {
        node = t1._as(nodes.get$current(nodes));
        f.call$2(node.key, node.value);
      }
    },
    get$length: function(_) {
      return this._count;
    },
    containsKey$1: function(_, key) {
      return H.boolConversionCheck(this._validKey.call$1(key)) && this._splay$1(this.$ti._precomputed1._as(key)) === 0;
    },
    get$keys: function(_) {
      return new P._SplayTreeKeyIterable(this, this.$ti._eval$1("_SplayTreeKeyIterable<1>"));
    },
    get$values: function(_) {
      var t1 = this.$ti;
      return new P._SplayTreeValueIterable(this, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeValueIterable<1,2>"));
    },
    set$_collection$_root: function(_root) {
      this._collection$_root = this.$ti._eval$1("_SplayTreeMapNode<1,2>")._as(_root);
    },
    $isMap: 1
  };
  P.SplayTreeMap_closure.prototype = {
    call$1: function(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  P.SplayTreeMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1,2)");
    }
  };
  P._SplayTreeIterator.prototype = {
    get$current: function(_) {
      var t1 = this._currentNode;
      if (t1 == null)
        return null;
      return this._getValue$1(t1);
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      H._instanceType(this)._eval$1("_SplayTreeNode<_SplayTreeIterator.K>")._as(node);
      for (t1 = this._workList; node != null;) {
        C.JSArray_methods.add$1(t1, node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (_this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      if (t2.length === 0) {
        _this.set$_currentNode(null);
        return false;
      }
      if (t1._splayCount !== _this._splayCount && _this._currentNode != null) {
        t3 = H._instanceType(_this)._eval$1("_SplayTreeNode<_SplayTreeIterator.K>")._as(_this._currentNode);
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          _this._findLeftMostDescendent$1(t1._collection$_root);
        else {
          t1._splay$1(t3.key);
          _this._findLeftMostDescendent$1(t1._collection$_root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      _this.set$_currentNode(t2.pop());
      _this._findLeftMostDescendent$1(_this._currentNode.right);
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = H._instanceType(this)._eval$1("_SplayTreeNode<_SplayTreeIterator.K>")._as(_currentNode);
    },
    $isIterator: 1
  };
  P._SplayTreeKeyIterable.prototype = {
    get$length: function(_) {
      return this._tree._count;
    },
    get$isEmpty: function(_) {
      return this._tree._count === 0;
    },
    get$iterator: function(_) {
      var t1 = this._tree,
        t2 = this.$ti;
      t2 = new P._SplayTreeKeyIterator(t1, H.setRuntimeTypeInfo([], t2._eval$1("JSArray<_SplayTreeNode<1>>")), t1._modificationCount, t1._splayCount, t2._eval$1("_SplayTreeKeyIterator<1>"));
      t2._findLeftMostDescendent$1(t1._collection$_root);
      return t2;
    }
  };
  P._SplayTreeValueIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._count;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._count === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map,
        t2 = this.$ti;
      t2 = new P._SplayTreeValueIterator(t1, H.setRuntimeTypeInfo([], t2._eval$1("JSArray<_SplayTreeNode<1>>")), t1._modificationCount, t1._splayCount, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeValueIterator<1,2>"));
      t2._findLeftMostDescendent$1(t1._collection$_root);
      return t2;
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    _getValue$1: function(node) {
      return this.$ti._eval$1("_SplayTreeNode<1>")._as(node).key;
    }
  };
  P._SplayTreeValueIterator.prototype = {
    _getValue$1: function(node) {
      var t1 = this.$ti;
      return t1._eval$1("_SplayTreeMapNode<1,2>")._as(t1._eval$1("_SplayTreeNode<1>")._as(node)).value;
    }
  };
  P._SplayTreeNodeIterator.prototype = {
    _getValue$1: function(node) {
      return this.$ti._eval$1("_SplayTreeNode<1>")._as(node);
    }
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._SetBase_Object_SetMixin.prototype = {};
  P._SplayTreeMap__SplayTree_MapMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) > 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    get$values: function(_) {
      var t1, _this = this;
      if (_this._processed == null) {
        t1 = _this._data;
        return t1.get$values(t1);
      }
      return H.MappedIterable_MappedIterable(_this._computeKeys$0(), new P._JsonMap_values_closure(_this), type$.String, type$.dynamic);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H._asStringS(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(0, key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      type$.Map_String_dynamic._as(other).forEach$1(0, new P._JsonMap_addAll_closure(this));
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._data.containsKey$1(0, key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var keys = type$.List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = H.setRuntimeTypeInfo(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  P._JsonMap_values_closure.prototype = {
    call$1: function(each) {
      return this.$this.$index(0, each);
    },
    $signature: 4
  };
  P._JsonMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      this.$this.$indexSet(0, H._asStringS(key), value);
    },
    $signature: 29
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      return t1._processed == null ? t1.get$keys(t1).elementAt$1(0, index) : C.JSArray_methods.$index(t1._computeKeys$0(), index);
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(0, key);
    }
  };
  P.AsciiCodec.prototype = {
    get$name: function(_) {
      return "us-ascii";
    },
    encode$1: function(source) {
      return C.AsciiEncoder_127.convert$1(source);
    },
    decode$1: function(_, bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = C.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var end, $length, result, t1, t2, t3, i, codeUnit;
      H._asStringS(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      result = new Uint8Array($length);
      for (t1 = result.length, t2 = ~this._subsetMask, t3 = J.getInterceptor$s(string), i = 0; i < $length; ++i) {
        codeUnit = t3._codeUnitAt$1(string, i);
        if ((codeUnit & t2) !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= t1)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  P.AsciiEncoder.prototype = {};
  P._UnicodeSubsetDecoder.prototype = {
    convert$1: function(bytes) {
      var byteCount, t1, i, byte;
      type$.List_int._as(bytes);
      byteCount = bytes.length;
      P.RangeError_checkValidRange(0, null, byteCount);
      for (t1 = ~this._subsetMask, i = 0; i < byteCount; ++i) {
        byte = bytes[i];
        if (typeof byte !== "number")
          return byte.$and();
        if ((byte & t1) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw H.wrapException(P.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, byteCount);
        }
      }
      return P.String_String$fromCharCodes(bytes, 0, byteCount);
    },
    _convertInvalid$3: function(bytes, start, end) {
      var t1, i, t2, value;
      type$.List_int._as(bytes);
      for (t1 = ~this._subsetMask, i = start, t2 = ""; i < end; ++i) {
        if (i >= bytes.length)
          return H.ioore(bytes, i);
        value = bytes[i];
        if (typeof value !== "number")
          return value.$and();
        if ((value & t1) >>> 0 !== 0)
          value = 65533;
        t2 += H.Primitives_stringFromCharCode(value);
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    }
  };
  P.AsciiDecoder.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return C.C_Base64Encoder;
    },
    normalize$3: function(_, source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      for (; i < end; i = i0) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= inverseAlphabet.length)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            buffer._contents += H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      var t1;
      type$.List_int._as(input);
      t1 = input.length;
      if (t1 === 0)
        return "";
      return P.String_String$fromCharCodes(new P._Base64Encoder("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").encode$4(input, 0, t1, true), 0, null);
    }
  };
  P._Base64Encoder.prototype = {
    createBuffer$1: function(_, bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4: function(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(0, bufferLength);
      _this._convert$_state = P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  P.Base64Decoder.prototype = {
    convert$1: function(input) {
      var end, decoder, buffer;
      H._asStringS(input);
      end = P.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return new Uint8Array(0);
      decoder = new P._Base64Decoder();
      buffer = decoder.decode$3(0, input, 0, end);
      decoder.close$2(0, input, end);
      return buffer;
    }
  };
  P._Base64Decoder.prototype = {
    decode$3: function(_, input, start, end) {
      var buffer, _this = this,
        t1 = _this._convert$_state;
      if (t1 < 0) {
        _this._convert$_state = P._Base64Decoder__checkPadding(input, start, end, t1);
        return null;
      }
      if (start === end)
        return new Uint8Array(0);
      buffer = P._Base64Decoder__allocateBuffer(input, start, end, t1);
      _this._convert$_state = P._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state);
      return buffer;
    },
    close$2: function(_, input, end) {
      var t1 = this._convert$_state;
      if (t1 < -1)
        throw H.wrapException(P.FormatException$("Missing padding character", input, end));
      if (t1 > 0)
        throw H.wrapException(P.FormatException$("Invalid length, must be multiple of four", input, end));
      this._convert$_state = -1;
    }
  };
  P.ByteConversionSink.prototype = {};
  P.ByteConversionSinkBase.prototype = {};
  P._ByteCallbackSink.prototype = {
    add$1: function(_, chunk) {
      var t1, t2, t3, t4, v, grown, _this = this;
      type$.Iterable_int._as(chunk);
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      t4 = t3.get$length(chunk);
      if (typeof t4 !== "number")
        return t4.$gt();
      if (t4 > t1.length - t2) {
        t1 = _this._buffer;
        t2 = t3.get$length(chunk);
        if (typeof t2 !== "number")
          return t2.$add();
        v = t2 + t1.length - 1;
        v |= C.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._buffer;
        C.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_buffer(grown);
      }
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      t4 = t3.get$length(chunk);
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.NativeUint8List_methods.setRange$3(t1, t2, t2 + t4, chunk);
      t4 = _this._bufferIndex;
      t3 = t3.get$length(chunk);
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._bufferIndex = t4 + t3;
    },
    close$0: function(_) {
      this._convert$_callback.call$1(C.NativeUint8List_methods.sublist$2(this._buffer, 0, this._bufferIndex));
    },
    set$_buffer: function(_buffer) {
      this._buffer = type$.List_int._as(_buffer);
    }
  };
  P.ChunkedConversionSink.prototype = {};
  P.Codec.prototype = {
    encode$1: function(input) {
      H._instanceType(this)._eval$1("Codec.S")._as(input);
      return this.get$encoder().convert$1(input);
    }
  };
  P.Converter.prototype = {
    cast$2$0: function(_, RS, RT) {
      var t1 = H._instanceType(this);
      return new H.CastConverter(this, t1._eval$1("@<Converter.S>")._bind$1(t1._eval$1("Converter.T"))._bind$1(RS)._bind$1(RT)._eval$1("CastConverter<1,2,3,4>"));
    }
  };
  P.Encoding.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1;
      type$.dynamic_Function_Object_Object._as(reviver);
      t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    decode$1: function($receiver, source) {
      return this.decode$2$reviver($receiver, source, null);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1;
      type$.dynamic_Function_dynamic._as(toEncodable);
      t1 = this.get$encoder();
      t1 = P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      var t1,
        output = new P.StringBuffer("");
      P._JsonStringStringifier_printOn(object, output, this._toEncodable, this.indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.JsonDecoder.prototype = {
    convert$1: function(input) {
      return P._parseJson(H._asStringS(input), this._reviver);
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, offset, i, charCode, t2, t3, _this = this,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t2 = charCode & 64512;
            if (t2 === 55296) {
              t3 = i + 1;
              t3 = !(t3 < $length && (C.JSString_methods._codeUnitAt$1(s, t3) & 64512) === 56320);
            } else
              t3 = false;
            if (!t3)
              if (t2 === 56320) {
                t2 = i - 1;
                t2 = !(t2 >= 0 && (C.JSString_methods.codeUnitAt$1(s, t2) & 64512) === 55296);
              } else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t2 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              t2 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              t2 = charCode & 15;
              _this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t2 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              t2 = charCode & 15;
              _this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1: function(list) {
      var t1, i, t2, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H._asStringS(keyValueList[i]));
        _this.writeString$1('":');
        t1 = i + 1;
        if (t1 >= t2)
          return H.ioore(keyValueList, t1);
        _this.writeObject$1(keyValueList[t1]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 17
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var i, t2, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t2; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(H._asStringS(keyValueList[i]));
        _this.writeString$1('": ');
        t1 = i + 1;
        if (t1 >= t2)
          return H.ioore(keyValueList, t1);
        _this.writeObject$1(keyValueList[t1]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 17
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._sink.write$1(0, C.JSNumber_methods.toString$0(number));
    },
    writeString$1: function(string) {
      this._sink.write$1(0, string);
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(0, C.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(charCode);
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2.write$1(0, t1);
    }
  };
  P.Latin1Codec.prototype = {
    get$name: function(_) {
      return "iso-8859-1";
    },
    encode$1: function(source) {
      return C.Latin1Encoder_255.convert$1(source);
    },
    decode$1: function(_, bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = C.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Latin1Decoder.prototype = {};
  P.Utf8Codec.prototype = {
    get$name: function(_) {
      return "utf-8";
    },
    decode$1: function(_, codeUnits) {
      type$.List_int._as(codeUnits);
      return C.Utf8Decoder_false.convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, t1, encoder;
      H._asStringS(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, end - 1), 0);
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  P._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0: function() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (t3 >= t4)
        return H.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 240 | rune >>> 18;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = 192 | codeUnit >>> 6;
            _this._bufferIndex = t4 + 1;
            t1[t4] = 128 | codeUnit & 63;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = 224 | codeUnit >>> 12;
            t3 = _this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 128 | codeUnit >>> 6 & 63;
            _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = 128 | codeUnit & 63;
          }
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new P._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  P._Utf8Decoder.prototype = {
    convertGeneral$4: function(codeUnits, start, maybeEnd, single) {
      var end, bytes, errorOffset, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = P.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = P._Utf8Decoder__makeUint8List(codeUnits, start, end);
        if (typeof end !== "number")
          return end.$sub();
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this.decodeGeneral$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = P._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        t1 = _this._charOrIndex;
        if (typeof t1 !== "number")
          return H.iae(t1);
        throw H.wrapException(P.FormatException$(message, codeUnits, errorOffset + t1));
      }
      return result;
    },
    decodeGeneral$4: function(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new P.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (start >= t1)
        return H.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = C.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            if (state <= 32)
              char = byte & 61694 >>> type;
            else {
              if (typeof char !== "number")
                return char.$shl();
              char = (byte & 63 | char << 6) >>> 0;
            }
            state = C.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += H.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + H.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (i < 0 || i >= t1)
            return H.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            if (typeof end !== "number")
              return H.iae(end);
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (m >= t1)
                  return H.ioore(bytes, m);
                buffer._contents += H.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += P.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += H.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  P._symbolMapToStringMap_closure.prototype = {
    call$2: function(key, value) {
      this.result.$indexSet(0, type$.Symbol._as(key).__internal$_name, value);
    },
    $signature: 115
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 115
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._core$_value === other._core$_value && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._core$_value, type$.DateTime._as(other)._core$_value);
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var t2,
        t1 = this._core$_value;
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + t1));
      P.ArgumentError_checkNotNull(this.isUtc, "isUtc", type$.bool);
    },
    get$hashCode: function(_) {
      var t1 = this._core$_value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $add: function(_, other) {
      return new P.Duration(this._duration + type$.Duration._as(other)._duration);
    },
    $sub: function(_, other) {
      return new P.Duration(this._duration - type$.Duration._as(other)._duration);
    },
    $lt: function(_, other) {
      return this._duration < type$.Duration._as(other)._duration;
    },
    $gt: function(_, other) {
      return this._duration > type$.Duration._as(other)._duration;
    },
    $ge: function(_, other) {
      return this._duration >= type$.Duration._as(other)._duration;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 40
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 40
  };
  P.Error0.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var _this = this;
      if (_this.get$message(_this) != null)
        return "Assertion failed: " + P.Error_safeToString(_this.get$message(_this));
      return "Assertion failed";
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    }
  };
  P.IndexError.prototype = {
    get$start: function(_) {
      return 0;
    },
    get$end: function(_) {
      var t1 = this.length;
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - 1;
    },
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H._asIntS(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(_this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError0: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError0: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    },
    get$source: function(receiver) {
      return this.source;
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  P.Expando.prototype = {
    $index: function(_, object) {
      var t2, values,
        t1 = this._jsWeakMapOrKey;
      if (typeof t1 != "string") {
        if (object != null)
          t2 = typeof object == "number" || typeof object == "string";
        else
          t2 = true;
        if (t2)
          H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
        return t1.get(object);
      }
      values = H.Primitives_getProperty(object, "expando$values");
      t1 = values == null ? null : H.Primitives_getProperty(values, t1);
      return this.$ti._precomputed1._as(t1);
    },
    $indexSet: function(_, object, value) {
      var t1, values,
        _s14_ = "expando$values";
      this.$ti._precomputed1._as(value);
      t1 = this._jsWeakMapOrKey;
      if (typeof t1 != "string")
        t1.set(object, value);
      else {
        values = H.Primitives_getProperty(object, _s14_);
        if (values == null) {
          values = new P.Object();
          H.Primitives_setProperty(object, _s14_, values);
        }
        H.Primitives_setProperty(values, t1, value);
      }
    },
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this, H._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(f), t1._eval$1("Iterable.E"), $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    where$1: function(_, test) {
      var t1 = H._instanceType(this);
      return new H.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      H._instanceType(this)._eval$1("~(Iterable.E)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      H._instanceType(this)._bind$1($T)._eval$1("1(1,Iterable.E)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current(t1));
      return value;
    },
    join$1: function(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current(iterator));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    take$1: function(_, count) {
      return H.TakeIterable_TakeIterable(this, count, H._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    get$single: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current(it);
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var element,
        t1 = H._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()")._as(orElse);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
      }
      return orElse.call$0();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      P.ArgumentError_checkNotNull(index, _s5_, type$.int);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {
    toString$0: function(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    },
    get$key: function(receiver) {
      return this.key;
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1};
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      type$.Invocation._as(invocation);
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Match.prototype = {};
  P.RegExp.prototype = {$isPattern: 1};
  P.RegExpMatch.prototype = {$isMatch: 1};
  P.Set.prototype = {};
  P.StackTrace.prototype = {};
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.Stopwatch.prototype = {
    get$elapsedMicroseconds: function() {
      var t2, ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = H._asIntS($.Primitives_timerTicks.call$0());
      t2 = this._core$_start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      ticks = t1 - t2;
      if ($.Stopwatch__frequency === 1000000)
        return ticks;
      return ticks * 1000;
    },
    start$0: function(_) {
      var t1, t2, t3, _this = this;
      if (_this._stop != null) {
        t1 = _this._core$_start;
        t2 = H._asIntS($.Primitives_timerTicks.call$0());
        t3 = _this._stop;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t1 !== "number")
          return t1.$add();
        _this._core$_start = t1 + (t2 - t3);
        _this._stop = null;
      }
    },
    stop$0: function(_) {
      if (this._stop == null)
        this._stop = H._asIntS($.Primitives_timerTicks.call$0());
    }
  };
  P.String.prototype = {$isComparable: 1, $isPattern: 1};
  P.Runes.prototype = {
    get$iterator: function(_) {
      return new P.RuneIterator(this.string);
    },
    get$last: function(_) {
      var code, previousCode,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0)
        throw H.wrapException(P.StateError$("No elements."));
      code = C.JSString_methods.codeUnitAt$1(t1, t2 - 1);
      if ((code & 64512) === 56320 && t2 > 1) {
        previousCode = C.JSString_methods.codeUnitAt$1(t1, t2 - 2);
        if ((previousCode & 64512) === 55296)
          return P._combineSurrogatePair(previousCode, code);
      }
      return code;
    }
  };
  P.RuneIterator.prototype = {
    get$current: function(_) {
      return this._currentCodePoint;
    },
    moveNext$0: function() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = C.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = C.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(_, obj) {
      this._contents += H.S(obj);
    },
    writeCharCode$1: function(charCode) {
      this._contents += H.Primitives_stringFromCharCode(charCode);
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri.prototype = {};
  P.Uri_splitQueryString_closure.prototype = {
    call$2: function(map, element) {
      var index, key, value, t1;
      type$.Map_String_String._as(map);
      H._asStringS(element);
      index = J.getInterceptor$asx(element).indexOf$1(element, "=");
      if (index === -1) {
        if (element !== "")
          J.$indexSet$ax(map, P._Uri__uriDecode(element, 0, element.length, this.encoding, true), "");
      } else if (index !== 0) {
        key = C.JSString_methods.substring$2(element, 0, index);
        value = C.JSString_methods.substring$1(element, index + 1);
        t1 = this.encoding;
        J.$indexSet$ax(map, P._Uri__uriDecode(key, 0, key.length, t1, true), P._Uri__uriDecode(value, 0, value.length, t1, true));
      }
      return map;
    },
    $signature: 176
  };
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 225
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $signature: 134
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 162
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var t1 = this._host;
      if (t1 == null)
        return "";
      if (C.JSString_methods.startsWith$1(t1, "["))
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1: function(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return P._Uri__compareScheme(scheme, thisScheme);
    },
    replace$3$path$queryParameters$scheme: function(_, path, queryParameters, scheme) {
      var scheme0, schemeChanged, isFile, userInfo, port, host, hasAuthority, t1, query, _this = this;
      type$.Iterable_String._as(null);
      type$.Map_String_dynamic._as(queryParameters);
      scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = P._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      if (schemeChanged)
        port = P._Uri__makePort(port, scheme);
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      hasAuthority = host != null;
      t1 = path == null;
      if (!t1 || false)
        path = P._Uri__makePath(path, 0, t1 ? 0 : path.length, null, scheme, hasAuthority);
      else {
        path = _this.path;
        if (!isFile)
          t1 = hasAuthority && path.length !== 0;
        else
          t1 = true;
        if (t1 && !C.JSString_methods.startsWith$1(path, "/"))
          path = "/" + path;
      }
      if (queryParameters != null)
        query = P._Uri__makeQuery(null, 0, 0, queryParameters);
      else
        query = _this._query;
      return new P._Uri(scheme, userInfo, host, port, path, query, _this._fragment);
    },
    replace$1$queryParameters: function($receiver, queryParameters) {
      return this.replace$3$path$queryParameters$scheme($receiver, null, queryParameters, null);
    },
    replace$2$path$scheme: function($receiver, path, scheme) {
      return this.replace$3$path$queryParameters$scheme($receiver, path, null, scheme);
    },
    replace$1$scheme: function($receiver, scheme) {
      return this.replace$3$path$queryParameters$scheme($receiver, null, null, scheme);
    },
    replace$1$path: function($receiver, path) {
      return this.replace$3$path$queryParameters$scheme($receiver, path, null, null);
    },
    removeFragment$0: function() {
      var _this = this;
      if (_this._fragment == null)
        return _this;
      return new P._Uri(_this.scheme, _this._userInfo, _this._host, _this._port, _this.path, _this._query, null);
    },
    get$pathSegments: function() {
      var pathToSplit,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (pathToSplit.length !== 0 && C.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      result = pathToSplit === "" ? C.List_empty0 : P.List_List$unmodifiable(new H.MappedListIterable(H.setRuntimeTypeInfo(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(P.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
      this.set$_pathSegments(result);
      return result;
    },
    get$queryParameters: function() {
      var t1, _this = this;
      if (_this._queryParameters == null) {
        t1 = _this._query;
        _this.set$_queryParameters(new P.UnmodifiableMapView(P.Uri_splitQueryString(t1 == null ? "" : t1), type$.UnmodifiableMapView_String_String));
      }
      return _this._queryParameters;
    },
    get$isAbsolute: function() {
      if (this.scheme !== "") {
        var t1 = this._fragment;
        t1 = (t1 == null ? "" : t1) === "";
      } else
        t1 = false;
      return t1;
    },
    _mergePaths$2: function(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference, 0, null));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, mergedPath, t2, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (reference.get$path(reference) === "") {
            targetPath = _this.path;
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _this._query;
          } else {
            if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else {
              t1 = _this.path;
              if (t1.length === 0)
                if (targetHost == null)
                  targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
                else
                  targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
              else {
                mergedPath = _this._mergePaths$2(t1, reference.get$path(reference));
                t2 = targetScheme.length === 0;
                if (!t2 || targetHost != null || C.JSString_methods.startsWith$1(t1, "/"))
                  targetPath = P._Uri__removeDotSegments(mergedPath);
                else
                  targetPath = P._Uri__normalizeRelativePath(mergedPath, !t2 || targetHost != null);
              }
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
          }
        }
      }
      return new P._Uri(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host(_this) !== "")
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        pathSegments = _this.get$pathSegments();
        P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = P.StringBuffer__writeAll(C.JSString_methods.startsWith$1(_this.path, "/") ? "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0: function(_) {
      var t2, t3, t4, _this = this,
        t1 = _this._text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = _this._text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme == other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo == other.get$userInfo())
              if (_this.get$host(_this) == other.get$host(other))
                if (_this.get$port(_this) == other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this.toString$0(0)) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = type$.List_String._as(_pathSegments);
    },
    set$_queryParameters: function(_queryParameters) {
      this._queryParameters = type$.Map_String_String._as(_queryParameters);
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, this.portStart + 1));
    },
    $signature: 8
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H._asStringS(segment);
      if (J.contains$1$asx(segment, "/"))
        if (this.argumentError)
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 8
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, s, C.C_Utf8Codec, false);
    },
    $signature: 5
  };
  P._Uri__makeQuery_writeParameter.prototype = {
    call$2: function(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = t1._contents += H.S(P._Uri__uriEncode(C.List_nxB, key, C.C_Utf8Codec, true));
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t1._contents += H.S(P._Uri__uriEncode(C.List_nxB, value, C.C_Utf8Codec, true));
      }
    },
    $signature: 32
  };
  P._Uri__makeQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H._asStringS(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, H._asStringS(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, H._asStringS(t1.get$current(t1)));
    },
    $signature: 29
  };
  P.UriData.prototype = {
    get$uri: function() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      t1 = _this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = _this._text;
      t1 = t1[0] + 1;
      queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
      end = t2.length;
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = _null;
      return _this._uriCache = new P._DataUri("data", _null, _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      return new Uint8Array(96);
    },
    $signature: 261
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      J.fillRange$3$x(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 273
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, t3;
      for (t1 = chars.length, t2 = target.length, i = 0; i < t1; ++i) {
        t3 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t3 >= t2)
          return H.ioore(target, t3);
        target[t3] = transition;
      }
    },
    $signature: 85
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1, t2;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1), t1 = target.length; i <= n; ++i) {
        t2 = (i ^ 96) >>> 0;
        if (t2 >= t1)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 85
  };
  P._SimpleUri.prototype = {
    get$hasAuthority: function() {
      return this._hostStart > 0;
    },
    get$hasPort: function() {
      var t1, t2;
      if (this._hostStart > 0) {
        t1 = this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._pathStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hasQuery: function() {
      var t1 = this._queryStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < this._fragmentStart;
    },
    get$hasFragment: function() {
      return this._fragmentStart < this._uri.length;
    },
    get$_isFile: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "file");
    },
    get$_isHttp: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "http");
    },
    get$_isHttps: function() {
      return this._schemeEnd === 5 && C.JSString_methods.startsWith$1(this._uri, "https");
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$isAbsolute: function() {
      return this._schemeEnd > 0 && this._fragmentStart >= this._uri.length;
    },
    isScheme$1: function(scheme) {
      var t1 = scheme.length;
      if (t1 === 0)
        return this._schemeEnd < 0;
      if (t1 !== this._schemeEnd)
        return false;
      return P._Uri__compareScheme(scheme, this._uri);
    },
    get$scheme: function() {
      var t2, _this = this,
        _s7_ = "package",
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (_this.get$_isFile()) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, _s7_)) {
        _this._schemeCache = _s7_;
        t1 = _s7_;
      } else {
        t1 = C.JSString_methods.substring$2(_this._uri, 0, t1);
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, _this = this;
      if (_this.get$hasPort()) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return P.int_parse(C.JSString_methods.substring$2(_this._uri, t1 + 1, _this._pathStart), null, null);
      }
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return C.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < t2 ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments: function() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (C.JSString_methods.startsWith$2(t1, "/", start)) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty0;
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (C.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, type$.String);
    },
    get$queryParameters: function() {
      var _this = this,
        t1 = _this._queryStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 >= _this._fragmentStart)
        return C.Map_empty0;
      return new P.UnmodifiableMapView(P.Uri_splitQueryString(_this.get$query(_this)), type$.UnmodifiableMapView_String_String);
    },
    _isPort$1: function(port) {
      var portDigitStart,
        t1 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      portDigitStart = t1 + 1;
      return portDigitStart + port.length === this._pathStart && C.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new P._SimpleUri(C.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$3$path$queryParameters$scheme: function(_, path, queryParameters, scheme) {
      var schemeChanged, isFile, t1, userInfo, port, host, hasAuthority, query, t2, fragment, _this = this, _null = null;
      type$.Iterable_String._as(null);
      type$.Map_String_dynamic._as(queryParameters);
      if (scheme != null) {
        scheme = P._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = !(_this._schemeEnd === scheme.length && C.JSString_methods.startsWith$1(_this._uri, scheme));
      } else {
        scheme = _this.get$scheme();
        schemeChanged = false;
      }
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? C.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port(_this) : _null;
      if (schemeChanged)
        port = P._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (t1 > 0)
        host = C.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      hasAuthority = host != null;
      t1 = path == null;
      if (!t1 || false)
        path = P._Uri__makePath(path, 0, t1 ? 0 : path.length, null, scheme, hasAuthority);
      else {
        path = C.JSString_methods.substring$2(_this._uri, _this._pathStart, _this._queryStart);
        if (!isFile)
          t1 = hasAuthority && path.length !== 0;
        else
          t1 = true;
        if (t1 && !C.JSString_methods.startsWith$1(path, "/"))
          path = "/" + path;
      }
      if (queryParameters != null)
        query = P._Uri__makeQuery(_null, 0, 0, queryParameters);
      else {
        t1 = _this._queryStart;
        t2 = _this._fragmentStart;
        if (typeof t1 !== "number")
          return t1.$lt();
        query = t1 < t2 ? C.JSString_methods.substring$2(_this._uri, t1 + 1, t2) : _null;
      }
      t1 = _this._fragmentStart;
      t2 = _this._uri;
      fragment = t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragment);
    },
    replace$1$queryParameters: function($receiver, queryParameters) {
      return this.replace$3$path$queryParameters$scheme($receiver, null, queryParameters, null);
    },
    replace$2$path$scheme: function($receiver, path, scheme) {
      return this.replace$3$path$queryParameters$scheme($receiver, path, null, scheme);
    },
    replace$1$scheme: function($receiver, scheme) {
      return this.replace$3$path$queryParameters$scheme($receiver, null, null, scheme);
    },
    replace$1$path: function($receiver, path) {
      return this.replace$3$path$queryParameters$scheme($receiver, path, null, null);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference, 0, null));
    },
    resolveUri$1: function(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var t2, t3, isSimple, delta, newUri, t4, t5, refStart, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        if (base.get$_isFile())
          isSimple = ref._pathStart != ref._queryStart;
        else if (base.get$_isHttp())
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !base.get$_isHttps() || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          newUri = C.JSString_methods.substring$2(base._uri, 0, delta) + C.JSString_methods.substring$1(ref._uri, t1 + 1);
          t1 = ref._portStart;
          if (typeof t1 !== "number")
            return t1.$add();
          t4 = ref._pathStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = ref._queryStart;
          if (typeof t5 !== "number")
            return t5.$add();
          return new P._SimpleUri(newUri, t3, t2 + delta, t1 + delta, t4 + delta, t5 + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart == t1) {
        t2 = ref._fragmentStart;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < t2) {
          t3 = base._queryStart;
          if (typeof t3 !== "number")
            return t3.$sub();
          delta = t3 - t1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (C.JSString_methods.startsWith$2(t2, "/", refStart)) {
        t3 = base._pathStart;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = t3 - refStart;
        newUri = C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, t3, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart == baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, "../", refStart);) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        if (typeof baseStart !== "number")
          return baseStart.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = baseStart - refStart + 1;
        newUri = C.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      for (baseStart0 = baseStart; C.JSString_methods.startsWith$2(baseUri, "../", baseStart0);) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(refStart0 <= t1 && C.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !C.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(C.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0: function() {
      var t1, t2, windows, t3, _this = this;
      if (_this._schemeEnd >= 0 && !_this.get$_isFile())
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        t3 = _this._portStart;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (_this._hostStart < t3)
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        t1 = C.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      if (typeof t6 !== "number")
        return t6.$lt();
      t6 = t6 < t8 ? _this.get$query(_this) : _null;
      return new P._Uri(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  W.HtmlElement.prototype = {};
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.Animation.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.ApplicationCacheErrorEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BackgroundFetchEvent.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.BackgroundFetchRegistration.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BluetoothRemoteGattDescriptor.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.BodyElement.prototype = {
    get$onBlur: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "blur", false, type$._ElementEventStreamImpl_Event);
    },
    get$onFocus: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "focus", false, type$._ElementEventStreamImpl_Event);
    },
    get$onResize: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "resize", false, type$._ElementEventStreamImpl_Event);
    },
    get$onScroll: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "scroll", false, type$._ElementEventStreamImpl_Event);
    },
    $isBodyElement: 1
  };
  W.BroadcastChannel.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ButtonElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CanvasElement.prototype = {
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    $isCanvasElement: 1,
    $isCanvasImageSource: 1
  };
  W.CanvasRenderingContext2D.prototype = {
    fillText$4: function(receiver, text, x, y, maxWidth) {
      if (maxWidth != null)
        receiver.fillText(text, x, y, maxWidth);
      else
        receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    $isCanvasRenderingContext2D: 1
  };
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Client.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.Credential.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.CredentialUserData.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.CssKeyframesRule.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.CssKeywordValue.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CssNumericValue.prototype = {};
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssStyleDeclaration.prototype = {
    _browserPropertyName$1: function(receiver, propertyName) {
      var t1 = $.$get$CssStyleDeclaration__propertyCache(),
        $name = t1[propertyName];
      if (typeof $name == "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      t1[propertyName] = $name;
      return $name;
    },
    _supportedBrowserPropertyName$1: function(receiver, propertyName) {
      var prefixed;
      if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      }) in receiver)
        return propertyName;
      prefixed = P.Device_cssPrefix() + propertyName;
      if (prefixed in receiver)
        return prefixed;
      return propertyName;
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      receiver.setProperty(propertyName, value, priority);
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnitValue.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataElement.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.DataTransferItem.prototype = {
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  W.DataTransferItemList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      return receiver[H._asIntS(index)];
    }
  };
  W.DeprecationReport.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.DivElement.prototype = {};
  W.Document.prototype = {$isDocument: 1};
  W.DomError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.DomException.prototype = {
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (H.boolConversionCheck(P.Device_isWebKit()) && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (H.boolConversionCheck(P.Device_isWebKit()) && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    get$message: function(receiver) {
      return receiver.message;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Rectangle_num._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other))
        if (receiver.left == other.left)
          if (receiver.top == other.top) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) == t1.get$width(other) && this.get$height(receiver) == t1.get$height(other);
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(J.get$hashCode$(receiver.left), J.get$hashCode$(receiver.top), J.get$hashCode$(this.get$width(receiver)), J.get$hashCode$(this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asStringS(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.DomTokenList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$value: function(receiver) {
      return receiver.value;
    },
    contains$1: function(receiver, token) {
      return receiver.contains(token);
    }
  };
  W._ChildrenElementList.prototype = {
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      return type$.Element._as(J.$index$asx(this._childElements, H._asIntS(index)));
    },
    $indexSet: function(_, index, value) {
      H._asIntS(index);
      this._element.replaceChild(type$.Element._as(value), J.$index$asx(this._childElements, index));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      type$.Element._as(value);
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      type$.Iterable_Element._as(iterable);
      for (t1 = iterable.get$iterator(iterable), t2 = this._element; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1));
    },
    sort$1: function(_, compare) {
      type$.int_Function_Element_Element._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    removeWhere$1: function(_, test) {
      this._html$_filter$2(0, type$.bool_Function_Element._as(test), false);
    },
    _html$_filter$2: function(_, test, retainMatching) {
      var t1, t2;
      type$.bool_Function_Element._as(test);
      t1 = J.get$children$x(this._element);
      t2 = H._instanceType(t1);
      t2._eval$1("bool(ListMixin.E)")._as(test);
      for (t1 = t1.get$iterator(t1), t2 = new H.WhereIterator(t1, test, t2._eval$1("WhereIterator<ListMixin.E>")); t2.moveNext$0();)
        J.remove$0$ax(t1.get$current(t1));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      type$.Iterable_Element._as(iterable);
      throw H.wrapException(P.UnimplementedError$(null));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    remove$1: function(_, object) {
      var t1;
      if (type$.Element._is(object)) {
        t1 = this._element;
        if (object.parentNode === t1) {
          t1.removeChild(object);
          return true;
        }
      }
      return false;
    },
    insert$2: function(_, index, element) {
      var t2, t3, t4, _this = this,
        t1 = type$.Element;
      t1._as(element);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > _this._childElements.length)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
      t2 = _this._childElements;
      t3 = t2.length;
      t4 = _this._element;
      if (index === t3)
        t4.appendChild(element);
      else {
        if (index < 0 || index >= t3)
          return H.ioore(t2, index);
        t4.insertBefore(element, t1._as(t2[index]));
      }
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._element);
    },
    removeAt$1: function(_, index) {
      var result = type$.Element._as(J.$index$asx(this._childElements, index));
      this._element.removeChild(result);
      return result;
    },
    removeLast$0: function(_) {
      var result = this.get$last(this);
      this._element.removeChild(result);
      return result;
    },
    get$first: function(_) {
      var result = this._element.firstElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._element.lastElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    }
  };
  W._FrozenElementList.prototype = {
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      return this.$ti._precomputed1._as(C.NodeList_methods.$index(this._nodeList, H._asIntS(index)));
    },
    $indexSet: function(_, index, value) {
      H._asIntS(index);
      this.$ti._precomputed1._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      this.$ti._eval$1("int(1,1)")._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    get$first: function(_) {
      return this.$ti._precomputed1._as(C.NodeList_methods.get$first(this._nodeList));
    },
    get$last: function(_) {
      return this.$ti._precomputed1._as(C.NodeList_methods.get$last(this._nodeList));
    }
  };
  W.Element.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    getComputedStyle$0: function(receiver) {
      return window.getComputedStyle(receiver, "");
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    scrollIntoView$1: function(receiver, alignment) {
      var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
      if (alignment === C.ScrollAlignment_TOP)
        receiver.scrollIntoView(true);
      else if (alignment === C.ScrollAlignment_BOTTOM)
        receiver.scrollIntoView(false);
      else if (hasScrollIntoViewIfNeeded)
        if (alignment === C.ScrollAlignment_CENTER)
          receiver.scrollIntoViewIfNeeded(true);
        else
          receiver.scrollIntoViewIfNeeded();
      else
        receiver.scrollIntoView();
    },
    scrollIntoView$0: function($receiver) {
      return this.scrollIntoView$1($receiver, null);
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], type$.JSArray_NodeValidator);
          t2 = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        type$.BaseElement._as(t2);
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = type$.BodyElement._as(t2);
      }
      t1 = $.Element__parseDocument;
      if (type$.BodyElement._is(receiver))
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    set$innerHtml: function(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$2$treeSanitizer: function(receiver, html, treeSanitizer) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, null));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$2$treeSanitizer($receiver, html, null);
    },
    get$innerHtml: function(receiver) {
      return receiver.innerHTML;
    },
    click$0: function(receiver) {
      return receiver.click();
    },
    focus$0: function(receiver) {
      return receiver.focus();
    },
    get$id: function(receiver) {
      return receiver.id;
    },
    get$tagName: function(receiver) {
      return receiver.tagName;
    },
    scrollTo$2: function(receiver, options_OR_x, y) {
      if (options_OR_x == null && y == null) {
        receiver.scrollTo();
        return;
      }
      if (type$.Map_dynamic_dynamic._is(options_OR_x) && y == null) {
        receiver.scrollTo(P.convertDartToNative_Dictionary(options_OR_x));
        return;
      }
      if (y != null && typeof options_OR_x == "number") {
        receiver.scrollTo(options_OR_x, y);
        return;
      }
      throw H.wrapException(P.ArgumentError$("Incorrect number or type of arguments"));
    },
    scrollTo$1: function($receiver, options_OR_x) {
      return this.scrollTo$2($receiver, options_OR_x, null);
    },
    get$onBlur: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "blur", false, type$._ElementEventStreamImpl_Event);
    },
    get$onChange: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "change", false, type$._ElementEventStreamImpl_Event);
    },
    get$onClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onDoubleClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "dblclick", false, type$._ElementEventStreamImpl_Event);
    },
    get$onFocus: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "focus", false, type$._ElementEventStreamImpl_Event);
    },
    get$onKeyDown: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "keydown", false, type$._ElementEventStreamImpl_KeyboardEvent);
    },
    get$onKeyUp: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "keyup", false, type$._ElementEventStreamImpl_KeyboardEvent);
    },
    get$onMouseDown: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousedown", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseLeave: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mouseleave", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousemove", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseOver: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mouseover", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseWheel: function(receiver) {
      W.Element__determineMouseWheelEventType(receiver);
      return new W._ElementEventStreamImpl(receiver, H._asStringS(W.Element__determineMouseWheelEventType(receiver)), false, type$._ElementEventStreamImpl_WheelEvent);
    },
    get$onResize: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "resize", false, type$._ElementEventStreamImpl_Event);
    },
    get$onScroll: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "scroll", false, type$._ElementEventStreamImpl_Event);
    },
    get$onTouchEnd: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchend", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    get$onTouchMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchmove", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    get$onTouchStart: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchstart", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    $isElement: 1
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return type$.Element._is(type$.Node._as(e));
    },
    $signature: 86
  };
  W.ScrollAlignment.prototype = {
    toString$0: function(_) {
      return "ScrollAlignment." + this._html$_value;
    }
  };
  W.EmbedElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Entry.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    _remove$2: function(receiver, successCallback, errorCallback) {
      type$.void_Function._as(successCallback);
      type$.void_Function_DomException._as(errorCallback);
      return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
    },
    remove$0: function(receiver) {
      var t1 = new P._Future($.Zone__current, type$._Future_dynamic),
        completer = new P._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
      this._remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
      return t1;
    }
  };
  W.Entry_remove_closure.prototype = {
    call$0: function() {
      this.completer.complete$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  W.Entry_remove_closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$1(type$.DomException._as(error));
    },
    $signature: 325
  };
  W.ErrorEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    },
    $isErrorEvent: 1
  };
  W.Event0.prototype = {$isEvent0: 1};
  W.EventSource.prototype = {$isEventSource: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      type$.dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.dynamic_Function_Event._as(listener), 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(type$.dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.ExtendableEvent.prototype = {};
  W.FederatedCredential.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.FieldSetElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.File.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    $isFile: 1
  };
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.File._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1,
    $isFileList: 1
  };
  W.FileReader.prototype = {
    get$result: function(receiver) {
      var res = receiver.result;
      if (type$.ByteBuffer._is(res))
        return H.NativeUint8List_NativeUint8List$view(res, 0, null);
      return res;
    },
    readAsText$1: function(receiver, blob) {
      return receiver.readAsText(blob);
    }
  };
  W.FileSystem.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FontFace.prototype = {$isFontFace: 1};
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Gamepad.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    $isGamepad: 1
  };
  W.GamepadButton.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1,
    $isHtmlCollection: 1
  };
  W.HttpRequest.prototype = {
    get$responseHeaders: function(receiver) {
      var headersList, _i, header, t2, splitIdx, key, value,
        t1 = type$.String,
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersString = receiver.getAllResponseHeaders();
      if (headersString == null)
        return headers;
      headersList = headersString.split("\r\n");
      for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
        header = headersList[_i];
        header.toString;
        t2 = J.getInterceptor$asx(header);
        if (t2.get$length(header) === 0)
          continue;
        splitIdx = t2.indexOf$1(header, ": ");
        if (splitIdx === -1)
          continue;
        key = t2.substring$2(header, 0, splitIdx).toLowerCase();
        value = t2.substring$1(header, splitIdx + 2);
        if (headers.containsKey$1(0, key))
          headers.$indexSet(0, key, H.S(headers.$index(0, key)) + ", " + value);
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    open$3$async: function(receiver, method, url, async) {
      return receiver.open(method, url, true);
    },
    send$1: function(receiver, body_OR_data) {
      return receiver.send(body_OR_data);
    },
    setRequestHeader$2: function(receiver, $name, value) {
      return receiver.setRequestHeader(H._asStringS($name), H._asStringS(value));
    },
    $isHttpRequest: 1
  };
  W.HttpRequest_request_closure.prototype = {
    call$1: function(e) {
      var t1, t2, accepted, unknownRedirect, t3;
      type$.ProgressEvent._as(e);
      t1 = this.xhr;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      accepted = t2 >= 200 && t2 < 300;
      unknownRedirect = t2 > 307 && t2 < 400;
      t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
      t3 = this.completer;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    },
    $signature: 25
  };
  W.HttpRequestEventTarget.prototype = {};
  W.IFrameElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ImageData.prototype = {$isImageData: 1};
  W.ImageElement.prototype = {$isImageElement: 1, $isCanvasImageSource: 1};
  W.InputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    },
    $isInputElement: 1,
    $isCheckboxInputElement: 1
  };
  W.InterventionReport.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.KeyboardEvent.prototype = {
    get$key: function(receiver) {
      return receiver.key;
    },
    $isKeyboardEvent: 1
  };
  W.LIElement.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MapElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MediaDeviceInfo.prototype = {
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  W.MediaElement.prototype = {};
  W.MediaError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.MediaKeyMessageEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.MediaKeySession.prototype = {
    remove$0: function(receiver) {
      return P.promiseToFuture(receiver.remove(), type$.dynamic);
    }
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MediaRecorder.prototype = {
    start$1: function(receiver, timeslice) {
      return receiver.start(H._asIntS(timeslice));
    },
    start$0: function($receiver) {
      return $receiver.start();
    }
  };
  W.MediaStream.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.MediaStreamTrack.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      type$.dynamic_Function_Event._as(listener);
      if (type === "message")
        receiver.start();
      this.super$EventTarget$addEventListener(receiver, type, listener, false);
    },
    $isMessagePort: 1
  };
  W.MetaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MeterElement.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.MidiInputMap.prototype = {
    addAll$1: function(receiver, other) {
      type$.Map_String_dynamic._as(other);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asStringS(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new W.MidiInputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.size !== 0;
    },
    $indexSet: function(receiver, key, value) {
      H._asStringS(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 18
  };
  W.MidiInputMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 18
  };
  W.MidiOutputMap.prototype = {
    addAll$1: function(receiver, other) {
      type$.Map_String_dynamic._as(other);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asStringS(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new W.MidiOutputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.size !== 0;
    },
    $indexSet: function(receiver, key, value) {
      H._asStringS(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 18
  };
  W.MidiOutputMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 18
  };
  W.MidiPort.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    get$name: function(receiver) {
      return receiver.name;
    },
    get$version: function(receiver) {
      return receiver.version;
    }
  };
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.MimeType._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.NavigatorUserMediaError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W._ChildNodeListLazy.prototype = {
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$single: function(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(type$.Node._as(value));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      type$.Iterable_Node._as(iterable);
      if (iterable instanceof W._ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = iterable.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1));
    },
    insert$2: function(_, index, node) {
      var t1, t2, t3, _this = this;
      type$.Node._as(node);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > _this._this.childNodes.length)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
      t1 = _this._this;
      t2 = t1.childNodes;
      t3 = t2.length;
      if (index === t3)
        t1.appendChild(node);
      else {
        if (index < 0 || index >= t3)
          return H.ioore(t2, index);
        t1.insertBefore(node, t2[index]);
      }
    },
    removeAt$1: function(_, index) {
      var t1 = this._this,
        result = C.NodeList_methods.$index(t1.childNodes, index);
      t1.removeChild(result);
      return result;
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._this);
    },
    $indexSet: function(_, index, value) {
      var t1;
      H._asIntS(index);
      t1 = this._this;
      t1.replaceChild(type$.Node._as(value), C.NodeList_methods.$index(t1.childNodes, index));
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, H.instanceType(t1)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    sort$1: function(_, compare) {
      type$.int_Function_Node_Node._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      type$.Iterable_Node._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      H._asIntS(index);
      return C.NodeList_methods.$index(this._this.childNodes, index);
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    append$1: function(receiver, node) {
      return receiver.appendChild(node);
    },
    contains$1: function(receiver, other) {
      return receiver.contains(type$.Node._as(other));
    },
    _replaceChild$2: function(receiver, node, child) {
      return receiver.replaceChild(node, child);
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.Notification0.prototype = {$isNotification0: 1};
  W.Notification_requestPermission_closure.prototype = {
    call$1: function(value) {
      this.completer.complete$1(0, H._asStringS(value));
    },
    $signature: 8
  };
  W.OListElement.prototype = {
    get$start: function(receiver) {
      return receiver.start;
    }
  };
  W.ObjectElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.OptionElement.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    },
    $isOptionElement: 1
  };
  W.OutputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.OverconstrainedError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ParamElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.PasswordCredential.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.PaymentRequest.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.PerformanceEntry.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.PerformanceServerTiming.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Plugin.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    },
    $isPlugin: 1
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Plugin._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.PositionError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.PresentationAvailability.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.PresentationConnection.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    $isPresentationConnection: 1
  };
  W.PresentationConnectionCloseEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.PresentationRequest.prototype = {
    start$0: function(receiver) {
      return P.promiseToFuture(receiver.start(), type$.PresentationConnection);
    }
  };
  W.ProgressElement.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.RelatedApplication.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.ReportBody.prototype = {};
  W.ResizeObserver.prototype = {$isResizeObserver: 1};
  W.RtcDataChannel.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.RtcDataChannelEvent.prototype = {
    get$channel: function(receiver) {
      return receiver.channel;
    }
  };
  W.RtcLegacyStatsReport.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.RtcStatsReport.prototype = {
    addAll$1: function(receiver, other) {
      type$.Map_String_dynamic._as(other);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asStringS(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new W.RtcStatsReport_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.size !== 0;
    },
    $indexSet: function(receiver, key, value) {
      H._asStringS(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 18
  };
  W.RtcStatsReport_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 18
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    },
    $isSelectElement: 1
  };
  W.Sensor.prototype = {
    start$0: function(receiver) {
      return receiver.start();
    }
  };
  W.SharedWorkerGlobalScope.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SlotElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.SourceBuffer._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.SpeechGrammar._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.SpeechRecognition.prototype = {
    start$0: function(receiver) {
      return receiver.start();
    }
  };
  W.SpeechRecognitionError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.SpeechRecognitionResult.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  W.SpeechSynthesisEvent.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SpeechSynthesisVoice.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Storage.prototype = {
    addAll$1: function(receiver, other) {
      type$.Map_String_String._as(other).forEach$1(0, new W.Storage_addAll_closure(receiver));
    },
    containsKey$1: function(receiver, key) {
      return receiver.getItem(key) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(H._asStringS(key));
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(H._asStringS(key), H._asStringS(value));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      type$.void_Function_String_String._as(f);
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.Storage_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.key(0) != null;
    },
    $isMap: 1
  };
  W.Storage_addAll_closure.prototype = {
    call$2: function(k, v) {
      this.$this.setItem(H._asStringS(k), H._asStringS(v));
    },
    $signature: 49
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 32
  };
  W.Storage_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 32
  };
  W.StorageEvent.prototype = {
    get$key: function(receiver) {
      return receiver.key;
    }
  };
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.TableColElement.prototype = {
    get$span: function(receiver) {
      return receiver.span;
    }
  };
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {
    setInnerHtml$2$treeSanitizer: function(receiver, html, treeSanitizer) {
      var t1, fragment;
      receiver.textContent = null;
      t1 = receiver.content;
      t1.toString;
      J._clearChildren$0$x(t1);
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, null);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$2$treeSanitizer($receiver, html, null);
    },
    $isTemplateElement: 1
  };
  W.TextAreaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.TextTrack.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    get$kind: function(receiver) {
      return receiver.kind;
    },
    $isTextTrack: 1
  };
  W.TextTrackCue.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    $isTextTrackCue: 1
  };
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.TextTrackCue._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.TextTrack._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    end$1: function(receiver, index) {
      return receiver.end(H._asIntS(index));
    },
    start$1: function(receiver, index) {
      return receiver.start(H._asIntS(index));
    }
  };
  W.Touch.prototype = {$isTouch: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Touch._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.TrackElement.prototype = {
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  W.UIEvent.prototype = {};
  W.UnderlyingSourceBase.prototype = {
    start$1: function(receiver, stream) {
      return P.promiseToFuture(receiver.start(stream), type$.dynamic);
    }
  };
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VRSession.prototype = {
    end$0: function(receiver) {
      return P.promiseToFuture(receiver.end(), type$.dynamic);
    }
  };
  W.VideoElement.prototype = {$isCanvasImageSource: 1};
  W.VideoTrack.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.VttRegion.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    }
  };
  W.WebSocket.prototype = {$isWebSocket: 1};
  W.WheelEvent.prototype = {
    get$deltaY: function(receiver) {
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    get$deltaX: function(receiver) {
      if (receiver.deltaX !== undefined)
        return receiver.deltaX;
      throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
    },
    $isWheelEvent: 1
  };
  W.Window.prototype = {
    get$animationFrame: function(receiver) {
      var t1 = new P._Future($.Zone__current, type$._Future_num);
      this.requestAnimationFrame$1(receiver, new W.Window_animationFrame_closure(new P._SyncCompleter(t1, type$._SyncCompleter_num)));
      return t1;
    },
    open$2: function(receiver, url, $name) {
      var t1 = W._DOMWindowCrossFrame__createSafe(receiver.open(url, $name));
      return t1;
    },
    requestAnimationFrame$1: function(receiver, callback) {
      type$.void_Function_num._as(callback);
      this._ensureRequestAnimationFrame$0(receiver);
      return this._requestAnimationFrame$1(receiver, W._wrapZone(callback, type$.num));
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(type$.void_Function_num._as(callback), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$name: function(receiver) {
      return receiver.name;
    },
    $isWindow: 1,
    $isWindowBase: 1
  };
  W.Window_animationFrame_closure.prototype = {
    call$1: function(time) {
      this.completer.complete$1(0, H._asNumS(time));
    },
    $signature: 95
  };
  W.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  W._Attr.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$value: function(receiver) {
      return receiver.value;
    },
    $is_Attr: 1
  };
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.CssRule._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other))
        if (receiver.left == other.left)
          if (receiver.top == other.top) {
            t1 = J.getInterceptor$x(other);
            t1 = receiver.width == t1.get$width(other) && receiver.height == t1.get$height(other);
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(J.get$hashCode$(receiver.left), J.get$hashCode$(receiver.top), J.get$hashCode$(receiver.width), J.get$hashCode$(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Gamepad._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.SpeechRecognitionResult._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.StyleSheet._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._AttributeMap.prototype = {
    addAll$1: function(_, other) {
      type$.Map_String_String._as(other).forEach$1(0, new W._AttributeMap_addAll_closure(this));
    },
    cast$2$0: function(_, $K, $V) {
      var t1 = type$.String;
      return P.Map_castFrom(this, t1, t1, $K, $V);
    },
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, t4;
      type$.void_Function_String_String._as(f);
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t4 = H._asStringS(t1[_i]);
        f.call$2(t4, t3.getAttribute(t4));
      }
    },
    get$keys: function(_) {
      var len, t1, i, attr,
        attributes = this._element.attributes,
        keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (len = attributes.length, t1 = type$._Attr, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = t1._as(attributes[i]);
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    get$values: function(_) {
      var len, t1, i, attr,
        attributes = this._element.attributes,
        values = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (len = attributes.length, t1 = type$._Attr, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = t1._as(attributes[i]);
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(values, attr.value);
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$keys(this).length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$keys(this).length !== 0;
    }
  };
  W._AttributeMap_addAll_closure.prototype = {
    call$2: function(k, v) {
      this.$this._element.setAttribute(H._asStringS(k), H._asStringS(v));
    },
    $signature: 49
  };
  W._ElementAttributeMap.prototype = {
    containsKey$1: function(_, key) {
      return this._element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._element.getAttribute(H._asStringS(key));
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(H._asStringS(key), H._asStringS(value));
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    }
  };
  W.CanvasImageSource.prototype = {};
  W._ElementCssClassSet.prototype = {
    readClasses$0: function() {
      var t1, t2, _i, trimmed,
        s = P.LinkedHashSet_LinkedHashSet(type$.String);
      for (t1 = this._element.className.split(" "), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        trimmed = J.trim$0$s(t1[_i]);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._element.className = type$.Set_String._as(s).join$1(0, " ");
    },
    get$length: function(_) {
      return this._element.classList.length;
    },
    get$isEmpty: function(_) {
      return this._element.classList.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._element.classList.length !== 0;
    },
    clear$0: function(_) {
      this._element.className = "";
    },
    contains$1: function(_, value) {
      return typeof value == "string" && this._element.classList.contains(value);
    },
    add$1: function(_, value) {
      var list, t1;
      H._asStringS(value);
      list = this._element.classList;
      t1 = list.contains(value);
      list.add(value);
      return !t1;
    },
    remove$1: function(_, value) {
      var list, removed, t1;
      if (typeof value == "string") {
        list = this._element.classList;
        removed = list.contains(value);
        list.remove(value);
        t1 = removed;
      } else
        t1 = false;
      return t1;
    },
    toggle$2: function(_, value, shouldAdd) {
      var t1 = this._element;
      return shouldAdd == null ? t1.classList.toggle(value) : W._ElementCssClassSet__toggleOnOff(t1, value, shouldAdd);
    },
    addAll$1: function(_, iterable) {
      W._ElementCssClassSet__addAll(this._element, type$.Iterable_String._as(iterable));
    },
    removeAll$1: function(iterable) {
      W._ElementCssClassSet__removeAll(this._element, iterable);
    },
    removeWhere$1: function(_, test) {
      W._ElementCssClassSet__removeWhere(this._element, type$.bool_Function_String._as(test), true);
    }
  };
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H._instanceType(this);
      t1._eval$1("~(1)")._as(onData);
      type$.void_Function._as(onDone);
      return W._EventStreamSubscription$(this._target, this._eventType, onData, false, t1._precomputed1);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    }
  };
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {
    cancel$0: function(_) {
      var _this = this;
      if (_this._target == null)
        return null;
      _this._unlisten$0();
      _this._target = null;
      _this.set$_onData(null);
      return null;
    },
    onData$1: function(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)")._as(handleData);
      if (_this._target == null)
        throw H.wrapException(P.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = W._wrapZone(new W._EventStreamSubscription_onData_closure(handleData), type$.Event);
      _this.set$_onData(t1);
      _this._tryResume$0();
    },
    onError$1: function(_, handleError) {
    },
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var _this = this;
      if (_this._target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0)
        J.addEventListener$3$x(_this._target, _this._eventType, t1, false);
    },
    _unlisten$0: function() {
      var t3,
        t1 = this._onData,
        t2 = t1 != null;
      if (t2) {
        t3 = this._target;
        t3.toString;
        type$.dynamic_Function_Event._as(t1);
        if (t2)
          J._removeEventListener$3$x(t3, this._eventType, t1, false);
      }
    },
    set$_onData: function(_onData) {
      this._onData = type$.dynamic_Function_Event._as(_onData);
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 96
  };
  W._EventStreamSubscription_onData_closure.prototype = {
    call$1: function(e) {
      return this.handleData.call$1(type$.Event._as(e));
    },
    $signature: 96
  };
  W._CustomEventStreamProvider.prototype = {};
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators.get$isEmpty($._Html5NodeValidator__attributeValidators)) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, H.S(W.Element__safeTagName(element)) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H._asBoolS(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("ImmutableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      H.instanceType(receiver)._eval$1("Iterable<ImmutableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      H.instanceType(receiver)._eval$1("int(ImmutableListMixin.E,ImmutableListMixin.E)")._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    insert$2: function(receiver, index, element) {
      H.instanceType(receiver)._eval$1("ImmutableListMixin.E")._as(element);
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.instanceType(receiver)._eval$1("Iterable<ImmutableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  W.NodeValidatorBuilder.prototype = {
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return type$.NodeValidator._as(v).allowsElement$1(this.element);
    },
    $signature: 97
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return type$.NodeValidator._as(v).allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 97
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty0);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var _this = this,
        tagName = W.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t1 = _this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H._asStringS(x));
    },
    $signature: 21
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H._asStringS(x));
    },
    $signature: 21
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H._asStringS(attr));
    },
    $signature: 5
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1;
      if (type$.ScriptElement._is(element))
        return false;
      t1 = type$.SvgElement._is(element);
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function(_) {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = this.$ti._precomputed1._as(_current);
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      var _this = this,
        walk = new W._ValidatingTreeSanitizer_sanitizeTree_walk(_this);
      _this.modifiedTree = false;
      walk.call$2(node, null);
      for (; _this.modifiedTree;) {
        _this.modifiedTree = false;
        walk.call$2(node, null);
      }
    },
    _removeNode$2: function(node, $parent) {
      var t1 = this.modifiedTree = true;
      if ($parent != null ? $parent !== node.parentNode : t1)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corruptedTest1, elementText, elementTagName, exception, t1,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._element.getAttribute("is");
        type$.Element._as(element);
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          if (element.id == 'lastChild' || element.name == 'lastChild' || element.id == 'previousSibling' || element.name == 'previousSibling' || element.id == 'children' || element.name == 'children')
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'previousSibling' || child.name == 'previousSibling' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = H.boolConversionCheck(corruptedTest1) ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(type$.Element._as(element), $parent, corrupted, elementText, elementTagName, type$.Map_dynamic_dynamic._as(attrs), H._asStringS(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys(attrs);
      keys = H.setRuntimeTypeInfo(t1.slice(0), H._arrayInstanceType(t1)._eval$1("JSArray<1>"));
      for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        t2 = _this.validator;
        t3 = J.toLowerCase$0$s($name);
        H._asStringS($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (type$.TemplateElement._is(element))
        _this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, t2, t3, t4, exception,
        t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t2 = type$.Node; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
          if (nextChild != null) {
            t3 = nextChild.nextSibling;
            t4 = child;
            t4 = t3 == null ? t4 != null : t3 !== t4;
            t3 = t4;
          } else
            t3 = false;
          if (t3) {
            t3 = P.StateError$("Corrupt HTML");
            throw H.wrapException(t3);
          }
        } catch (exception) {
          H.unwrapException(exception);
          t3 = t2._as(child);
          t1.modifiedTree = true;
          t4 = t3.parentNode;
          t4 = node == null ? t4 != null : node !== t4;
          if (t4) {
            t4 = t3.parentNode;
            if (t4 != null)
              t4.removeChild(t3);
          } else
            node.removeChild(t3);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = nextChild;
      }
    },
    $signature: 185
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var slot, t2, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof P.DateTime)
        return new Date(e._core$_value);
      if (type$.RegExp._is(e))
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (type$.FileList._is(e))
        return e;
      if (type$.ImageData._is(e))
        return e;
      if (type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        J.forEach$1$ax(e, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 17
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 17
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, t2, l, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        t1 = new P.DateTime(millisSinceEpoch, true);
        t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
        return t1;
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, type$.dynamic);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = mustCopy;
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 99
  };
  P.convertDartToNative_Dictionary_closure.prototype = {
    call$2: function(key, value) {
      this.object[key] = value;
    },
    $signature: 17
  };
  P._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.CssClassSetImpl.prototype = {
    _validateToken$1: function(value) {
      var t1;
      H._asStringS(value);
      t1 = $.$get$CssClassSetImpl__validTokenRE()._nativeRegExp;
      if (typeof value != "string")
        H.throwExpression(H.argumentErrorValue(value));
      if (t1.test(value))
        return value;
      throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
    },
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    toggle$2: function(_, value, shouldAdd) {
      var s, result;
      this._validateToken$1(value);
      s = this.readClasses$0();
      if (shouldAdd == null ? !s.contains$1(0, value) : shouldAdd) {
        s.add$1(0, value);
        result = true;
      } else {
        s.remove$1(0, value);
        result = false;
      }
      this.writeClasses$1(s);
      return result;
    },
    get$iterator: function(_) {
      var t1 = this.readClasses$0();
      return P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1);
    },
    forEach$1: function(_, f) {
      type$.void_Function_String._as(f);
      this.readClasses$0().forEach$1(0, f);
    },
    join$1: function(_, separator) {
      return this.readClasses$0().join$1(0, separator);
    },
    map$1$1: function(_, f, $T) {
      var t1, t2;
      $T._eval$1("0(String)")._as(f);
      t1 = this.readClasses$0();
      t2 = H._instanceType(t1);
      return new H.EfficientLengthMappedIterable(t1, t2._bind$1($T)._eval$1("1(2)")._as(f), t2._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    contains$1: function(_, value) {
      if (typeof value != "string")
        return false;
      this._validateToken$1(value);
      return this.readClasses$0().contains$1(0, value);
    },
    add$1: function(_, value) {
      var t1;
      H._asStringS(value);
      this._validateToken$1(value);
      t1 = this.modify$1(0, new P.CssClassSetImpl_add_closure(value));
      return H._asBoolS(t1 == null ? false : t1);
    },
    remove$1: function(_, value) {
      var s, result;
      H._asStringS(value);
      this._validateToken$1(value);
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    addAll$1: function(_, iterable) {
      this.modify$1(0, new P.CssClassSetImpl_addAll_closure(this, type$.Iterable_String._as(iterable)));
    },
    removeAll$1: function(iterable) {
      this.modify$1(0, new P.CssClassSetImpl_removeAll_closure(iterable));
    },
    removeWhere$1: function(_, test) {
      this.modify$1(0, new P.CssClassSetImpl_removeWhere_closure(type$.bool_Function_String._as(test)));
    },
    get$first: function(_) {
      var t1 = this.readClasses$0();
      return t1.get$first(t1);
    },
    get$last: function(_) {
      var t1 = this.readClasses$0();
      return t1.get$last(t1);
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, true);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    take$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.TakeIterable_TakeIterable(t1, n, H._instanceType(t1)._precomputed1);
    },
    skip$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H._instanceType(t1)._precomputed1);
    },
    elementAt$1: function(_, index) {
      return this.readClasses$0().elementAt$1(0, index);
    },
    clear$0: function(_) {
      this.modify$1(0, new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(_, f) {
      var s, ret;
      type$.dynamic_Function_Set_String._as(f);
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    }
  };
  P.CssClassSetImpl_add_closure.prototype = {
    call$1: function(s) {
      return type$.Set_String._as(s).add$1(0, this.value);
    },
    $signature: 195
  };
  P.CssClassSetImpl_addAll_closure.prototype = {
    call$1: function(s) {
      return type$.Set_String._as(s).addAll$1(0, J.map$1$1$ax(this.iterable, this.$this.get$_validateToken(), type$.String));
    },
    $signature: 37
  };
  P.CssClassSetImpl_removeAll_closure.prototype = {
    call$1: function(s) {
      return type$.Set_String._as(s).removeAll$1(this.iterable);
    },
    $signature: 37
  };
  P.CssClassSetImpl_removeWhere_closure.prototype = {
    call$1: function(s) {
      type$.Set_String._as(s);
      s._filterWhere$2(H._instanceType(s)._eval$1("bool(1)")._as(this.test), true);
      return null;
    },
    $signature: 37
  };
  P.CssClassSetImpl_clear_closure.prototype = {
    call$1: function(s) {
      return type$.Set_String._as(s).clear$0(0);
    },
    $signature: 37
  };
  P.FilteredElementList.prototype = {
    get$_html_common$_iterable: function() {
      var t1 = this._childNodes,
        t2 = H._instanceType(t1);
      return new H.MappedIterable(new H.WhereIterable(t1, t2._eval$1("bool(ListMixin.E)")._as(new P.FilteredElementList__iterable_closure()), t2._eval$1("WhereIterable<ListMixin.E>")), t2._eval$1("Element(ListMixin.E)")._as(new P.FilteredElementList__iterable_closure0()), t2._eval$1("MappedIterable<ListMixin.E,Element>"));
    },
    $indexSet: function(_, index, value) {
      var t1;
      H._asIntS(index);
      type$.Element._as(value);
      t1 = this.get$_html_common$_iterable();
      J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index)), value);
    },
    set$length: function(_, newLength) {
      var len = J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
      if (typeof len !== "number")
        return H.iae(len);
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(type$.Element._as(value));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, t3;
      type$.Iterable_Element._as(iterable);
      for (t1 = J.get$iterator$ax(iterable._source), t2 = H._instanceType(iterable), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1])._rest[1], t3 = this._childNodes._this; t1.moveNext$0();)
        t3.appendChild(t2._as(t1.get$current(t1)));
    },
    contains$1: function(_, needle) {
      if (!type$.Element._is(needle))
        return false;
      return needle.parentNode === this._node;
    },
    sort$1: function(_, compare) {
      type$.int_Function_Element_Element._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      type$.Iterable_Element._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2: function(_, start, end) {
      var t1 = this.get$_html_common$_iterable();
      t1 = H.SkipIterable_SkipIterable(t1, start, t1.$ti._eval$1("Iterable.E"));
      if (typeof end !== "number")
        return end.$sub();
      C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H._instanceType(t1)._eval$1("Iterable.E")), true, type$.dynamic), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    removeLast$0: function(_) {
      var t1 = this.get$_html_common$_iterable(),
        result = t1._f.call$1(J.get$last$ax(t1.__internal$_iterable));
      if (result != null)
        J.remove$0$ax(result);
      return result;
    },
    insert$2: function(_, index, value) {
      var t1, element;
      type$.Element._as(value);
      if (index == J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable))
        this._childNodes._this.appendChild(value);
      else {
        t1 = this.get$_html_common$_iterable();
        element = t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
        element.parentNode.insertBefore(value, element);
      }
    },
    removeAt$1: function(_, index) {
      var t1 = this.get$_html_common$_iterable();
      t1 = t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
      J.remove$0$ax(t1);
      return t1;
    },
    remove$1: function(_, element) {
      if (!type$.Element._is(element))
        return false;
      if (this.contains$1(0, element)) {
        J.remove$0$ax(element);
        return true;
      } else
        return false;
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
    },
    $index: function(_, index) {
      var t1;
      H._asIntS(index);
      t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
    },
    get$iterator: function(_) {
      var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, type$.Element);
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    }
  };
  P.FilteredElementList__iterable_closure.prototype = {
    call$1: function(n) {
      return type$.Element._is(type$.Node._as(n));
    },
    $signature: 86
  };
  P.FilteredElementList__iterable_closure0.prototype = {
    call$1: function(n) {
      return type$.Element._as(type$.Node._as(n));
    },
    $signature: 201
  };
  P.FilteredElementList_removeRange_closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $signature: 4
  };
  P.Cursor.prototype = {
    get$key: function(receiver) {
      return receiver.key;
    }
  };
  P.CursorWithValue.prototype = {
    get$value: function(receiver) {
      return new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(receiver.value, false);
    }
  };
  P.Database.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    },
    get$version: function(receiver) {
      return receiver.version;
    }
  };
  P.Index.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.ObjectStore.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  P.Observation.prototype = {
    get$key: function(receiver) {
      return receiver.key;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.JsObject__convertDataTree__convert.prototype = {
    call$1: function(o) {
      var convertedMap, t2, key, convertedList,
        t1 = this._convertedObjects;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.getInterceptor$x(o), t2 = J.get$iterator$ax(t1.get$keys(o)); t2.moveNext$0();) {
          key = t2.get$current(t2);
          convertedMap[key] = this.call$1(t1.$index(o, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return P._convertToJS(o);
    },
    $signature: 4
  };
  P._convertToJS_closure.prototype = {
    call$1: function(o) {
      var jsFunction;
      type$.Function._as(o);
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 4
  };
  P._convertToJS_closure0.prototype = {
    call$1: function(o) {
      return new this.ctor(o);
    },
    $signature: 4
  };
  P._wrapToDart_closure.prototype = {
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $signature: 208
  };
  P._wrapToDart_closure0.prototype = {
    call$1: function(o) {
      return new P.JsArray(o, type$.JsArray_dynamic);
    },
    $signature: 218
  };
  P._wrapToDart_closure1.prototype = {
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $signature: 221
  };
  P.JsObject.prototype = {
    $index: function(_, property) {
      if (typeof property != "string" && typeof property != "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property != "string" && typeof property != "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = this.super$Object$toString(0);
        return t1;
      }
    },
    callMethod$2: function(method, args) {
      var t1, t2;
      if (typeof method != "string" && true)
        throw H.wrapException(P.ArgumentError$("method is not a String or num"));
      t1 = this._js$_jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = H._arrayInstanceType(args);
        t2 = P.List_List$from(new H.MappedListIterable(args, t2._eval$1("@(1)")._as(P.js___convertToJS$closure()), t2._eval$1("MappedListIterable<1,@>")), true, type$.dynamic);
      }
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    },
    get$hashCode: function(_) {
      return 0;
    }
  };
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {
    _checkIndex$1: function(index) {
      var t1, _this = this;
      if (H._isInt(index))
        t1 = index < 0 || index >= _this.get$length(_this);
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index: function(_, index) {
      if (typeof index == "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H._asIntS(index));
      return this.$ti._precomputed1._as(this.super$JsObject$$index(0, index));
    },
    $indexSet: function(_, index, value) {
      this.$ti._precomputed1._as(value);
      if (typeof index == "number" && index === C.JSNumber_methods.toInt$0(index))
        this._checkIndex$1(H._asIntS(index));
      this.super$JsObject$$indexSet(0, index, value);
    },
    get$length: function(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      this.super$JsObject$$indexSet(0, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [this.$ti._precomputed1._as(value)]);
    },
    addAll$1: function(_, iterable) {
      var list;
      this.$ti._eval$1("Iterable<1>")._as(iterable);
      list = iterable instanceof Array ? iterable : P.List_List$from(iterable, true, type$.dynamic);
      this.callMethod$2("push", type$.List_dynamic._as(list));
    },
    insert$2: function(_, index, element) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(element);
      if (H._isInt(index))
        t1 = index < 0 || index >= _this.get$length(_this) + 1;
      else
        t1 = false;
      if (t1)
        H.throwExpression(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
      _this.callMethod$2("splice", [index, 0, element]);
    },
    removeAt$1: function(_, index) {
      this._checkIndex$1(index);
      return this.$ti._precomputed1._as(J.$index$asx(this.callMethod$2("splice", [index, 1]), 0));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var $length, args, _this = this;
      _this.$ti._eval$1("Iterable<1>")._as(iterable);
      P.JsArray__checkRange(start, end, _this.get$length(_this));
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length === 0)
        return;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      args = [start, $length];
      C.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
      _this.callMethod$2("splice", args);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    sort$1: function(_, compare) {
      this.$ti._eval$1("int(1,1)")._as(compare);
      this.callMethod$2("sort", compare == null ? [] : [compare]);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._JsArray_JsObject_ListMixin.prototype = {};
  P._convertDataTree__convert.prototype = {
    call$1: function(o) {
      var convertedMap, t2, key, convertedList,
        t1 = this._convertedObjects;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.getInterceptor$x(o), t2 = J.get$iterator$ax(t1.get$keys(o)); t2.moveNext$0();) {
          key = t2.get$current(t2);
          convertedMap[key] = this.call$1(t1.$index(o, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 4
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      return this.completer.complete$1(0, this.T._eval$1("0/")._as(r));
    },
    $signature: 9
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      return this.completer.completeError$1(e);
    },
    $signature: 9
  };
  P._JSRandom.prototype = {
    nextDouble$0: function() {
      return Math.random();
    }
  };
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Point && this.x == other.x && this.y == other.y;
    },
    get$hashCode: function(_) {
      var hash,
        t1 = J.get$hashCode$(this.x),
        t2 = J.get$hashCode$(this.y);
      t2 = P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2);
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    $add: function(_, other) {
      var t2, t3, t4, t5,
        t1 = this.$ti;
      t1._as(other);
      t2 = this.x;
      t3 = other.x;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t5 = other.y;
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      return new P.Point(t2 + t3, t4 + t5, t1);
    },
    $sub: function(_, other) {
      var t2, t3, t4,
        t1 = this.$ti;
      t1._as(other);
      t2 = this.x;
      t3 = other.get$x(other);
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = C.JSNumber_methods.$sub(t2, t3);
      t2 = this.y;
      t4 = other.get$y(other);
      if (typeof t2 !== "number")
        return t2.$sub();
      return new P.Point(t3, C.JSNumber_methods.$sub(t2, t4), t1);
    }
  };
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.Angle.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    },
    get$valueAsString: function(receiver) {
      return receiver.valueAsString;
    }
  };
  P.Length.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    },
    get$valueAsString: function(receiver) {
      return receiver.valueAsString;
    },
    $isLength: 1
  };
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Length._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    clear$0: function(receiver) {
      return receiver.clear();
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.Number.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    },
    $isNumber: 1
  };
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Number._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    clear$0: function(receiver) {
      return receiver.clear();
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.ScriptElement0.prototype = {$isScriptElement0: 1};
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asStringS(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    clear$0: function(receiver) {
      return receiver.clear();
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.AttributeClassSet.prototype = {
    readClasses$0: function() {
      var t1, t2, _i, trimmed,
        classname = this._svg$_element.getAttribute("class"),
        s = P.LinkedHashSet_LinkedHashSet(type$.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        trimmed = J.trim$0$s(t1[_i]);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  };
  P.SvgElement.prototype = {
    get$classes: function(receiver) {
      return new P.AttributeClassSet(receiver);
    },
    get$children: function(receiver) {
      return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    },
    get$innerHtml: function(receiver) {
      var container = document.createElement("div"),
        cloned = type$.SvgElement._as(receiver.cloneNode(true)),
        t1 = container.children;
      cloned.toString;
      new W._ChildrenElementList(container, t1).addAll$1(0, new P.FilteredElementList(cloned, new W._ChildNodeListLazy(cloned)));
      return container.innerHTML;
    },
    set$innerHtml: function(receiver, value) {
      this.setInnerHtml$1(receiver, value);
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, t2, fragment, svgFragment, root;
      if (treeSanitizer == null) {
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_NodeValidator);
        C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
        C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
        C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
        treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
      }
      html = '<svg version="1.1">' + H.S(svg) + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    click$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke click SVG."));
    },
    focus$0: function(receiver) {
      return receiver.focus();
    },
    get$onBlur: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "blur", false, type$._ElementEventStreamImpl_Event);
    },
    get$onChange: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "change", false, type$._ElementEventStreamImpl_Event);
    },
    get$onClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onDoubleClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "dblclick", false, type$._ElementEventStreamImpl_Event);
    },
    get$onFocus: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "focus", false, type$._ElementEventStreamImpl_Event);
    },
    get$onKeyDown: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "keydown", false, type$._ElementEventStreamImpl_KeyboardEvent);
    },
    get$onKeyUp: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "keyup", false, type$._ElementEventStreamImpl_KeyboardEvent);
    },
    get$onMouseDown: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousedown", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseLeave: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mouseleave", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousemove", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseOver: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mouseover", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    get$onMouseWheel: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousewheel", false, type$._ElementEventStreamImpl_WheelEvent);
    },
    get$onResize: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "resize", false, type$._ElementEventStreamImpl_Event);
    },
    get$onScroll: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "scroll", false, type$._ElementEventStreamImpl_Event);
    },
    get$onTouchEnd: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchend", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    get$onTouchMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchmove", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    get$onTouchStart: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "touchstart", false, type$._ElementEventStreamImpl_TouchEvent);
    },
    $isSvgElement: 1
  };
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Transform._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    clear$0: function(receiver) {
      return receiver.clear();
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.ByteBuffer.prototype = {};
  P.ByteData.prototype = {$isTypedData: 1};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Int16List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Int32List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Float32List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.Float64List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1, $isTypedData: 1};
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioBufferSourceNode.prototype = {
    start$3: function(receiver, when, grainOffset, grainDuration) {
      return receiver.start(H._asNumS(when), H._asNumS(grainOffset), H._asNumS(grainDuration));
    },
    start$1: function($receiver, when) {
      return $receiver.start(when);
    },
    start$2: function($receiver, when, grainOffset) {
      return $receiver.start(when, grainOffset);
    },
    start$0: function($receiver) {
      return $receiver.start();
    }
  };
  P.AudioNode.prototype = {};
  P.AudioParam.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.AudioParamMap.prototype = {
    addAll$1: function(receiver, other) {
      type$.Map_String_dynamic._as(other);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asStringS(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new P.AudioParamMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.size !== 0;
    },
    $indexSet: function(receiver, key, value) {
      H._asStringS(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 18
  };
  P.AudioParamMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 18
  };
  P.AudioScheduledSourceNode.prototype = {};
  P.AudioTrack.prototype = {
    get$id: function(receiver) {
      return receiver.id;
    },
    get$kind: function(receiver) {
      return receiver.kind;
    }
  };
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.ActiveInfo.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  P.SqlDatabase.prototype = {
    get$version: function(receiver) {
      return receiver.version;
    }
  };
  P.SqlError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asIntS(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      type$.Map_dynamic_dynamic._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  O.AnsiUp.prototype = {
    _setupPalettes$0: function() {
      var t3, levels, r, g, b, greyLevel, i, _this = this,
        t1 = type$.JSArray_int,
        t2 = type$.JSArray_AnsiUpColor;
      _this.set$ansiColors(H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([new O.AnsiUpColor(H.setRuntimeTypeInfo([0, 0, 0], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([187, 0, 0], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([0, 187, 0], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([187, 187, 0], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([0, 0, 187], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([187, 0, 187], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([0, 187, 187], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([255, 255, 255], t1))], t2), H.setRuntimeTypeInfo([new O.AnsiUpColor(H.setRuntimeTypeInfo([85, 85, 85], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([255, 85, 85], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([0, 255, 0], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([255, 255, 85], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([85, 85, 255], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([255, 85, 255], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([85, 255, 255], t1)), new O.AnsiUpColor(H.setRuntimeTypeInfo([255, 255, 255], t1))], t2)], type$.JSArray_List_AnsiUpColor));
      _this.set$palette256(H.setRuntimeTypeInfo([], t2));
      t2 = _this.ansiColors;
      t3 = _this.palette256;
      (t2 && C.JSArray_methods).forEach$1(t2, (t3 && C.JSArray_methods).get$addAll(t3));
      levels = [0, 95, 135, 175, 215, 255];
      for (r = 0; r < 6; ++r)
        for (g = 0; g < 6; ++g)
          for (b = 0; b < 6; ++b) {
            t2 = _this.palette256;
            (t2 && C.JSArray_methods).add$1(t2, new O.AnsiUpColor(H.setRuntimeTypeInfo([levels[r], levels[g], levels[b]], t1)));
          }
      for (greyLevel = 8, i = 0; i < 24; ++i, greyLevel += 10) {
        t2 = _this.palette256;
        (t2 && C.JSArray_methods).add$1(t2, new O.AnsiUpColor(H.setRuntimeTypeInfo([greyLevel, greyLevel, greyLevel], t1)));
      }
    },
    _getNextPacket$0: function() {
      var pos, nextChar, t2, spacesAndComments, match, t3, match1, match3, rpos, _this = this,
        pkt = new O.TextPacket(C.PacketKind_0, "", ""),
        t1 = _this._ansi_up$_text,
        len = t1.length;
      if (len === 0)
        return pkt;
      pos = J.indexOf$1$asx(t1, "\x1b");
      if (pos === -1) {
        pkt.kind = C.PacketKind_1;
        pkt.text = t1;
        _this._ansi_up$_text = "";
        return pkt;
      }
      if (pos > 0) {
        pkt.kind = C.PacketKind_1;
        pkt.text = C.JSString_methods.substring$2(t1, 0, pos);
        _this._ansi_up$_text = C.JSString_methods.substring$1(t1, pos);
        return pkt;
      }
      if (pos === 0) {
        if (len === 1) {
          pkt.kind = C.PacketKind_2;
          return pkt;
        }
        if (1 >= len)
          return H.ioore(t1, 1);
        nextChar = t1[1];
        t2 = nextChar === "[";
        if (!t2 && nextChar !== "]") {
          pkt.kind = C.PacketKind_3;
          pkt.text = C.JSString_methods.substring$2(t1, 0, 1);
          _this._ansi_up$_text = C.JSString_methods.substring$1(t1, 1);
          return pkt;
        }
        if (t2) {
          t1 = _this._csiRegex;
          if (t1 == null) {
            spacesAndComments = P.RegExp_RegExp("^\\s+|\\s+\\n|\\s*#[\\s\\S]*?\\n|\\n", true);
            t1 = _this._csiRegex = P.RegExp_RegExp(H.stringReplaceAllUnchecked("\n                        ^                           # beginning of line\n                                                    #\n                                                    # First attempt\n                        (?:                         # legal sequence\n                          \\x1b\\[                      # CSI\n                          ([\\x3c-\\x3f]?)              # private-mode char\n                          ([\\d;]*)                    # any digits or semicolons\n                          ([\\x20-\\x2f]?               # an intermediate modifier\n                          [\\x40-\\x7e])                # the command\n                        )\n                        |                           # alternate (second attempt)\n                        (?:                         # illegal sequence\n                          \\x1b\\[                      # CSI\n                          [\\x20-\\x7e]*                # anything legal\n                          ([\\x00-\\x1f:])              # anything illegal\n                        )\n                    ", spacesAndComments, ""), false);
          }
          match = t1.firstMatch$1(_this._ansi_up$_text);
          if (match == null) {
            pkt.kind = C.PacketKind_2;
            return pkt;
          }
          t1 = match._match;
          t2 = t1.length;
          t3 = t2 - 1;
          if (t3 > 4) {
            pkt.kind = C.PacketKind_3;
            t1 = _this._ansi_up$_text;
            pkt.text = J.substring$2$s(t1, 0, 1);
            _this._ansi_up$_text = C.JSString_methods.substring$1(t1, 1);
            return pkt;
          }
          if (t3 > 1) {
            if (1 >= t2)
              return H.ioore(t1, 1);
            match1 = t1[1];
          } else
            match1 = null;
          if (t3 > 3) {
            if (3 >= t2)
              return H.ioore(t1, 3);
            match3 = t1[3];
          } else
            match3 = null;
          if (match1 !== "" || match3 !== "m")
            pkt.kind = C.PacketKind_4;
          else
            pkt.kind = C.PacketKind_5;
          if (t3 > 2) {
            if (2 >= t2)
              return H.ioore(t1, 2);
            t3 = t1[2];
          } else
            t3 = null;
          pkt.text = t3;
          if (0 >= t2)
            return H.ioore(t1, 0);
          rpos = t1[0].length;
          _this._ansi_up$_text = J.substring$1$s(_this._ansi_up$_text, rpos);
          return pkt;
        }
      }
      return pkt;
    },
    _processAnsi$1: function(textPacket) {
      var t1, index, t2, index0, num, t3, modeCmd, paletteIndex, t4, r, g, b, c, _this = this,
        sgrCmds = textPacket.text.split(";");
      for (t1 = type$.JSArray_int, index = 0; t2 = sgrCmds.length, index < t2;) {
        index0 = index + 1;
        num = H.Primitives_parseInt(sgrCmds[index], 10);
        if (num == null || num === 0) {
          _this.fg = _this.bg = null;
          _this.bold = false;
          index = index0;
        } else if (num === 1) {
          _this.bold = true;
          index = index0;
        } else if (num === 22) {
          _this.bold = false;
          index = index0;
        } else if (num === 39) {
          _this.fg = null;
          index = index0;
        } else if (num === 49) {
          _this.bg = null;
          index = index0;
        } else {
          if (typeof num !== "number")
            return num.$ge();
          if (num >= 30 && num < 38) {
            t2 = _this.ansiColors[0];
            t3 = num - 30;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            _this.set$fg(t2[t3]);
            index = index0;
          } else if (num >= 40 && num < 48) {
            t2 = _this.ansiColors[0];
            t3 = num - 40;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            _this.set$bg(t2[t3]);
            index = index0;
          } else if (num >= 90 && num < 98) {
            t2 = _this.ansiColors[1];
            t3 = num - 90;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            _this.set$fg(t2[t3]);
            index = index0;
          } else if (num >= 100 && num < 108) {
            t2 = _this.ansiColors[1];
            t3 = num - 100;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            _this.set$bg(t2[t3]);
            index = index0;
          } else {
            t3 = num === 38;
            if (t3 || num === 48)
              if (index0 < t2) {
                index = index0 + 1;
                modeCmd = sgrCmds[index0];
                if (modeCmd === "5" && index < t2) {
                  index0 = index + 1;
                  if (index >= t2)
                    return H.ioore(sgrCmds, index);
                  paletteIndex = H.Primitives_parseInt(sgrCmds[index], 10);
                  if (typeof paletteIndex !== "number")
                    return paletteIndex.$ge();
                  if (paletteIndex >= 0 && paletteIndex <= 255) {
                    t4 = _this.palette256;
                    if (t3) {
                      if (paletteIndex < 0 || paletteIndex >= t4.length)
                        return H.ioore(t4, paletteIndex);
                      _this.set$fg(t4[paletteIndex]);
                    } else {
                      if (paletteIndex < 0 || paletteIndex >= t4.length)
                        return H.ioore(t4, paletteIndex);
                      _this.set$bg(t4[paletteIndex]);
                    }
                  }
                  index = index0;
                }
                if (modeCmd === "2" && index + 2 < t2) {
                  index0 = index + 1;
                  if (index >= t2)
                    return H.ioore(sgrCmds, index);
                  r = H.Primitives_parseInt(sgrCmds[index], 10);
                  index = index0 + 1;
                  if (index0 >= t2)
                    return H.ioore(sgrCmds, index0);
                  g = H.Primitives_parseInt(sgrCmds[index0], 10);
                  index0 = index + 1;
                  if (index >= t2)
                    return H.ioore(sgrCmds, index);
                  b = H.Primitives_parseInt(sgrCmds[index], 10);
                  if (typeof r !== "number")
                    return r.$ge();
                  if (r >= 0)
                    if (r <= 255) {
                      if (typeof g !== "number")
                        return g.$ge();
                      if (g >= 0)
                        if (g <= 255) {
                          if (typeof b !== "number")
                            return b.$ge();
                          t2 = b >= 0 && b <= 255;
                        } else
                          t2 = false;
                      else
                        t2 = false;
                    } else
                      t2 = false;
                  else
                    t2 = false;
                  if (t2) {
                    c = new O.AnsiUpColor(H.setRuntimeTypeInfo([r, g, b], t1));
                    if (t3)
                      _this.fg = c;
                    else
                      _this.bg = c;
                  }
                  index = index0;
                }
              } else
                index = index0;
            else
              index = index0;
          }
        }
      }
    },
    set$ansiColors: function(ansiColors) {
      this.ansiColors = type$.List_List_AnsiUpColor._as(ansiColors);
    },
    set$palette256: function(palette256) {
      this.palette256 = type$.List_AnsiUpColor._as(palette256);
    },
    set$fg: function(fg) {
      this.fg = type$.AnsiUpColor._as(fg);
    },
    set$bg: function(bg) {
      this.bg = type$.AnsiUpColor._as(bg);
    }
  };
  O.AnsiUpColor.prototype = {};
  O.PacketKind.prototype = {
    toString$0: function(_) {
      return this._ansi_up$_name;
    }
  };
  O.TextPacket.prototype = {
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  O.StyledText.prototype = {
    get$style: function(_) {
      var t3, t4, _this = this,
        t1 = _this.fgColor,
        t2 = t1 == null;
      if (t2 && _this.bgColor == null && !_this.bold)
        return "";
      t3 = H.setRuntimeTypeInfo([], type$.JSArray_String);
      t4 = _this.bgColor;
      if (t4 != null)
        C.JSArray_methods.add$1(t3, "background-color: " + ("rgb(" + C.JSArray_methods.join$1(t4, ",") + ")"));
      if (!t2)
        C.JSArray_methods.add$1(t3, "color: " + ("rgb(" + C.JSArray_methods.join$1(t1, ",") + ")"));
      if (_this.bold)
        C.JSArray_methods.add$1(t3, "font-weight: bold");
      return C.JSArray_methods.join$1(t3, ";");
    }
  };
  O.DelegatingStreamSink.prototype = {
    get$done: function() {
      return this._stream_sink$_sink.get$done();
    },
    add$1: function(_, data) {
      this._stream_sink$_sink.add$1(0, H._instanceType(this)._eval$1("DelegatingStreamSink.T")._as(data));
    },
    $isStreamSink: 1
  };
  X.CodeMirror.prototype = {
    getDoc$0: function() {
      var t1 = this._doc;
      return t1 == null ? this._doc = new X.Doc(type$.JsObject._as(this.jsProxy.callMethod$1("getDoc")), P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.JsEventListener_dynamic)) : t1;
    },
    setReadOnly$1: function(value) {
      this.jsProxy.callMethod$2("setOption", ["readOnly", true]);
    },
    removeLineClass$3: function(line, where, cssClass) {
      var t1 = type$.JsObject._as(this.jsProxy.callMethod$2("removeLineClass", [line, where, cssClass]));
      return new X.LineHandle(t1, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.JsEventListener_dynamic));
    },
    scrollIntoView$3$margin: function(_, line, ch, margin) {
      var _s14_ = "scrollIntoView",
        t1 = type$.String,
        t2 = type$.int,
        t3 = this.jsProxy;
      if (margin != null)
        t3.callMethod$2(_s14_, [P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["line", line, "ch", ch], t1, t2)), margin]);
      else
        t3.callMethod$2(_s14_, [P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["line", line, "ch", ch], t1, t2))]);
    },
    scrollIntoView$2: function($receiver, line, ch) {
      return this.scrollIntoView$3$margin($receiver, line, ch, null);
    }
  };
  X.Doc.prototype = {
    getAllMarks$0: function() {
      var result = this.jsProxy.callMethod$1("getAllMarks");
      if (!type$.List_dynamic._is(result))
        return H.setRuntimeTypeInfo([], type$.JSArray_TextMarker);
      return P.List_List$from(J.map$1$ax(result, new X.Doc_getAllMarks_closure()), true, type$.TextMarker);
    }
  };
  X.Doc_getAllMarks_closure.prototype = {
    call$1: function(mark) {
      return new X.TextMarker(type$.JsObject._as(mark), P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.JsEventListener_dynamic));
    },
    $signature: 250
  };
  X.Position.prototype = {
    toProxy$0: function() {
      return P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["line", this.line, "ch", this.ch], type$.String, type$.int));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof X.Position && this.line == other.line && this.ch == other.ch;
    },
    get$hashCode: function(_) {
      var t2,
        t1 = this.line;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this.ch;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return C.JSInt_methods.get$hashCode((t1 << 8 | t2) >>> 0);
    },
    compareTo$1: function(_, other) {
      var t1, t2;
      type$.Position._as(other);
      t1 = this.line;
      t2 = other.line;
      if (t1 == t2) {
        t1 = this.ch;
        t2 = other.ch;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 - t2;
      }
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 - t2;
    },
    $lt: function(_, other) {
      return this.compareTo$1(0, type$.Position._as(other)) < 0;
    },
    $ge: function(_, other) {
      return this.compareTo$1(0, type$.Position._as(other)) >= 0;
    },
    $gt: function(_, other) {
      return this.compareTo$1(0, type$.Position._as(other)) > 0;
    },
    toString$0: function(_) {
      return "[" + H.S(this.line) + ":" + H.S(this.ch) + "]";
    },
    $isComparable: 1
  };
  X.TextMarker.prototype = {
    find$0: function(_) {
      var t1, exception,
        result = this.jsProxy.callMethod$1("find");
      if (!(result instanceof P.JsObject))
        return null;
      try {
        t1 = type$.JSArray_Position;
        if ("from" in result._js$_jsObject) {
          t1 = H.setRuntimeTypeInfo([X.Position$fromProxy(J.$index$asx(result, "from")), X.Position$fromProxy(J.$index$asx(result, "to"))], t1);
          return t1;
        } else {
          t1 = H.setRuntimeTypeInfo([X.Position$fromProxy(result)], t1);
          return t1;
        }
      } catch (exception) {
        H.unwrapException(exception);
        return null;
      }
    }
  };
  X.LineHandle.prototype = {};
  X.ProxyHolder.prototype = {
    call$1: function(methodName) {
      return this.jsProxy.callMethod$1(H._asStringS(methodName));
    },
    onEvent$1$2$argCount: function(eventName, argCount, $T) {
      var t2, t3, _this = this,
        t1 = _this._events;
      if (!t1.containsKey$1(0, eventName))
        if (argCount === 4)
          t1.$indexSet(0, eventName, new R.JsEventListener(_this.jsProxy, eventName, new X.ProxyHolder_onEvent_closure(), argCount, $T._eval$1("JsEventListener<0>")));
        else if (argCount === 3)
          t1.$indexSet(0, eventName, new R.JsEventListener(_this.jsProxy, eventName, new X.ProxyHolder_onEvent_closure0(), argCount, $T._eval$1("JsEventListener<0>")));
        else {
          t2 = $T._eval$1("JsEventListener<0>");
          t3 = _this.jsProxy;
          if (argCount === 2)
            t1.$indexSet(0, eventName, new R.JsEventListener(t3, eventName, null, argCount, t2));
          else
            t1.$indexSet(0, eventName, new R.JsEventListener(t3, eventName, null, 1, t2));
        }
      t1 = t1.$index(0, eventName);
      return $T._eval$1("Stream<0>")._as(t1.get$stream(t1));
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.jsProxy);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof X.ProxyHolder && J.$eq$(this.jsProxy, other.jsProxy);
    }
  };
  X.ProxyHolder_onEvent_closure.prototype = {
    call$3: function(a, b, c) {
      return a;
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 253
  };
  X.ProxyHolder_onEvent_closure0.prototype = {
    call$2: function(a, b) {
      return a;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 99
  };
  R.JsEventListener.prototype = {
    get$stream: function(_) {
      var t1, _this = this;
      if (_this._js_utils$_controller == null)
        _this.set$_js_utils$_controller(new P._SyncBroadcastStreamController(new R.JsEventListener_stream_closure(_this), new R.JsEventListener_stream_closure0(_this), _this.$ti._eval$1("_SyncBroadcastStreamController<1>")));
      t1 = _this._js_utils$_controller;
      t1.toString;
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    set$_js_utils$_controller: function(_controller) {
      this._js_utils$_controller = this.$ti._eval$1("StreamController<1>")._as(_controller);
    }
  };
  R.JsEventListener_stream_closure.prototype = {
    call$0: function() {
      var t3, t4, t5, _s2_ = "on",
        t1 = this.$this,
        t2 = t1.argCount;
      if (t2 === 4)
        t1._callback = type$.JsFunction._as(t1._proxy.callMethod$2(_s2_, [t1._js_utils$_name, new R.JsEventListener_stream__closure(t1)]));
      else if (t2 === 3)
        t1._callback = type$.JsFunction._as(t1._proxy.callMethod$2(_s2_, [t1._js_utils$_name, new R.JsEventListener_stream__closure0(t1)]));
      else {
        t3 = type$.JsFunction;
        t4 = t1._proxy;
        t5 = t1._js_utils$_name;
        if (t2 === 2)
          t1._callback = t3._as(t4.callMethod$2(_s2_, [t5, new R.JsEventListener_stream__closure1(t1)]));
        else
          t1._callback = t3._as(t4.callMethod$2(_s2_, [t5, new R.JsEventListener_stream__closure2(t1)]));
      }
    },
    $signature: 0
  };
  R.JsEventListener_stream__closure.prototype = {
    call$4: function(obj, a, b, c) {
      var t1 = this.$this,
        t2 = t1._js_utils$_controller,
        t3 = t1.cvtEvent;
      t3 = t3 == null ? a : t3.call$3(a, b, c);
      t2.add$1(0, t1.$ti._precomputed1._as(t3));
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 254
  };
  R.JsEventListener_stream__closure0.prototype = {
    call$3: function(obj, a, b) {
      var t1 = this.$this,
        t2 = t1._js_utils$_controller,
        t3 = t1.cvtEvent;
      t3 = t3 == null ? a : t3.call$2(a, b);
      t2.add$1(0, t1.$ti._precomputed1._as(t3));
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 255
  };
  R.JsEventListener_stream__closure1.prototype = {
    call$2: function(obj, a) {
      var t1 = this.$this,
        t2 = t1._js_utils$_controller,
        t3 = t1.cvtEvent;
      t3 = t3 == null ? a : t3.call$1(a);
      t2.add$1(0, t1.$ti._precomputed1._as(t3));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 17
  };
  R.JsEventListener_stream__closure2.prototype = {
    call$1: function(obj) {
      var t1 = this.$this,
        t2 = t1._js_utils$_controller,
        t3 = t1.cvtEvent;
      t3 = t3 == null ? null : t3.call$1(obj);
      t2.add$1(0, t1.$ti._precomputed1._as(t3));
    },
    $signature: 2
  };
  R.JsEventListener_stream_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._proxy.callMethod$2("off", [t1._js_utils$_name, t1._callback]);
      t1._callback = null;
    },
    $signature: 0
  };
  M.CanonicalizedMap.prototype = {
    $index: function(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return null;
      pair = _this._base.$index(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
      return pair == null ? null : pair.last;
    },
    $indexSet: function(_, key, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(key);
      t2 = t1._eval$1("CanonicalizedMap.V");
      t2._as(value);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new B.Pair(key, value, t1._eval$1("@<CanonicalizedMap.K>")._bind$1(t2)._eval$1("Pair<1,2>")));
    },
    addAll$1: function(_, other) {
      this.$ti._eval$1("Map<CanonicalizedMap.K,CanonicalizedMap.V>")._as(other).forEach$1(0, new M.CanonicalizedMap_addAll_closure(this));
    },
    cast$2$0: function(_, K2, V2) {
      var t1 = this._base;
      return t1.cast$2$0(t1, K2, V2);
    },
    containsKey$1: function(_, key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
    },
    get$entries: function(_) {
      var t1 = this._base;
      return t1.get$entries(t1).map$1$1(0, new M.CanonicalizedMap_entries_closure(this), this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>"));
    },
    forEach$1: function(_, f) {
      this._base.forEach$1(0, new M.CanonicalizedMap_forEach_closure(this, this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)")._as(f)));
    },
    get$isEmpty: function(_) {
      var t1 = this._base;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty: function(_) {
      var t1 = this._base;
      return t1.get$isNotEmpty(t1);
    },
    get$keys: function(_) {
      var t2, t3,
        t1 = this._base;
      t1 = t1.get$values(t1);
      t2 = this.$ti._eval$1("CanonicalizedMap.K");
      t3 = H._instanceType(t1);
      return H.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new M.CanonicalizedMap_keys_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    get$length: function(_) {
      var t1 = this._base;
      return t1.get$length(t1);
    },
    map$2$1: function(_, transform, K2, V2) {
      var t1 = this._base;
      return t1.map$2$1(t1, new M.CanonicalizedMap_map_closure(this, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.K,CanonicalizedMap.V)")._as(transform), K2, V2), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    get$values: function(_) {
      var t2, t3,
        t1 = this._base;
      t1 = t1.get$values(t1);
      t2 = this.$ti._eval$1("CanonicalizedMap.V");
      t3 = H._instanceType(t1);
      return H.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new M.CanonicalizedMap_values_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    toString$0: function(_) {
      var result, _this = this, t1 = {};
      if (M._isToStringVisiting0(_this))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting0, _this);
        result._contents += "{";
        t1.first = true;
        _this.forEach$1(0, new M.CanonicalizedMap_toString_closure(t1, _this, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting0.length)
          return H.ioore($._toStringVisiting0, -1);
        $._toStringVisiting0.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isValidKey$1: function(key) {
      var t1;
      if (key == null || this.$ti._eval$1("CanonicalizedMap.K")._is(key))
        t1 = H.boolConversionCheck(this._isValidKeyFn.call$1(key));
      else
        t1 = false;
      return t1;
    },
    $isMap: 1
  };
  M.CanonicalizedMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("CanonicalizedMap.K")._as(key);
      t2._eval$1("CanonicalizedMap.V")._as(value);
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("CanonicalizedMap.V(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  M.CanonicalizedMap_entries_closure.prototype = {
    call$1: function(e) {
      var t1 = this.$this.$ti,
        t2 = t1._eval$1("MapEntry<CanonicalizedMap.C,Pair<CanonicalizedMap.K,CanonicalizedMap.V>>")._as(e).value;
      return new P.MapEntry(t2.first, t2.last, t1._eval$1("@<CanonicalizedMap.K>")._bind$1(t1._eval$1("CanonicalizedMap.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>(MapEntry<CanonicalizedMap.C,Pair<CanonicalizedMap.K,CanonicalizedMap.V>>)");
    }
  };
  M.CanonicalizedMap_forEach_closure.prototype = {
    call$2: function(key, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(key);
      t1._eval$1("Pair<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.f.call$2(pair.first, pair.last);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.C,Pair<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  M.CanonicalizedMap_keys_closure.prototype = {
    call$1: function(pair) {
      return this.$this.$ti._eval$1("Pair<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).first;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("CanonicalizedMap.K(Pair<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  M.CanonicalizedMap_map_closure.prototype = {
    call$2: function(_, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(_);
      t1._eval$1("Pair<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.transform.call$2(pair.first, pair.last);
    },
    $signature: function() {
      return this.$this.$ti._bind$1(this.K2)._bind$1(this.V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.C,Pair<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  M.CanonicalizedMap_values_closure.prototype = {
    call$1: function(pair) {
      return this.$this.$ti._eval$1("Pair<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).last;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("CanonicalizedMap.V(Pair<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  M.CanonicalizedMap_toString_closure.prototype = {
    call$2: function(k, v) {
      var _this = this,
        t1 = _this.$this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(k);
      t1._eval$1("CanonicalizedMap.V")._as(v);
      t1 = _this._box_0;
      if (!t1.first)
        _this.result._contents += ", ";
      t1.first = false;
      _this.result._contents += H.S(k) + ": " + H.S(v);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  M._isToStringVisiting_closure.prototype = {
    call$1: function(e) {
      return this.o === e;
    },
    $signature: 14
  };
  U.DefaultEquality.prototype = {
    equals$2: function(e1, e2) {
      return J.$eq$(e1, e2);
    },
    hash$1: function(_, e) {
      return J.get$hashCode$(e);
    },
    $isEquality: 1
  };
  U.IterableEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti._eval$1("Iterable<1>");
      t1._as(elements1);
      t1._as(elements2);
      if (elements1 === elements2)
        return true;
      it1 = J.get$iterator$ax(elements1);
      it2 = J.get$iterator$ax(elements2);
      for (t1 = this._elementEquality; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!t1.equals$2(it1.get$current(it1), it2.get$current(it2)))
          return false;
      }
    },
    hash$1: function(_, elements) {
      var t1, t2, hash;
      this.$ti._eval$1("Iterable<1>")._as(elements);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();) {
        hash = hash + t2.hash$1(0, t1.get$current(t1)) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  U.ListEquality.prototype = {
    equals$2: function(list1, list2) {
      var $length, t2, t3, i,
        t1 = this.$ti._eval$1("List<1>");
      t1._as(list1);
      t1._as(list2);
      if (list1 === list2)
        return true;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length != t2.get$length(list2))
        return false;
      if (typeof $length !== "number")
        return H.iae($length);
      t3 = this._elementEquality;
      i = 0;
      for (; i < $length; ++i)
        if (!t3.equals$2(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1: function(_, list) {
      var t1, t2, hash, i, t3;
      this.$ti._eval$1("List<1>")._as(list);
      t1 = J.getInterceptor$asx(list);
      t2 = this._elementEquality;
      hash = 0;
      i = 0;
      while (true) {
        t3 = t1.get$length(list);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        hash = hash + t2.hash$1(0, t1.$index(list, i)) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
        ++i;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  U._UnorderedEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var counts, $length, e, count,
        t1 = H._instanceType(this),
        t2 = t1._eval$1("_UnorderedEquality.T");
      t2._as(elements1);
      t2._as(elements2);
      if (elements1 === elements2)
        return true;
      t2 = this._elementEquality;
      counts = P.HashMap_HashMap(t2.get$equals(), t2.get$hash(t2), t2.get$isValidKey(), t1._eval$1("_UnorderedEquality.E"), type$.int);
      for (t1 = J.get$iterator$ax(elements1), $length = 0; t1.moveNext$0();) {
        e = t1.get$current(t1);
        count = counts.$index(0, e);
        counts.$indexSet(0, e, (count == null ? 0 : count) + 1);
        ++$length;
      }
      for (t1 = J.get$iterator$ax(elements2); t1.moveNext$0();) {
        e = t1.get$current(t1);
        count = counts.$index(0, e);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        counts.$indexSet(0, e, count - 1);
        --$length;
      }
      return $length === 0;
    },
    hash$1: function(_, elements) {
      var t1, t2, hash;
      H._instanceType(this)._eval$1("_UnorderedEquality.T")._as(elements);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();)
        hash = hash + t2.hash$1(0, t1.get$current(t1)) & 2147483647;
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  U.SetEquality.prototype = {};
  U._MapEntry.prototype = {
    get$hashCode: function(_) {
      var t1 = this.equality;
      return 3 * t1._keyEquality.hash$1(0, this.key) + 7 * t1._valueEquality.hash$1(0, this.value) & 2147483647;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof U._MapEntry) {
        t1 = this.equality;
        t1 = t1._keyEquality.equals$2(this.key, other.key) && t1._valueEquality.equals$2(this.value, other.value);
      } else
        t1 = false;
      return t1;
    },
    get$key: function(receiver) {
      return this.key;
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  U.MapEquality.prototype = {
    equals$2: function(map1, map2) {
      var t2, equalElementCounts, t3, key, entry, count,
        t1 = this.$ti._eval$1("Map<1,2>");
      t1._as(map1);
      t1._as(map2);
      if (map1 === map2)
        return true;
      t1 = J.getInterceptor$asx(map1);
      t2 = J.getInterceptor$asx(map2);
      if (t1.get$length(map1) != t2.get$length(map2))
        return false;
      equalElementCounts = P.HashMap_HashMap(null, null, null, type$._MapEntry, type$.int);
      for (t3 = J.get$iterator$ax(t1.get$keys(map1)); t3.moveNext$0();) {
        key = t3.get$current(t3);
        entry = new U._MapEntry(this, key, t1.$index(map1, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = J.get$iterator$ax(t2.get$keys(map2)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        entry = new U._MapEntry(this, key, t2.$index(map2, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1: function(_, map) {
      var t1, t2, t3, t4, hash, key;
      this.$ti._eval$1("Map<1,2>")._as(map);
      for (t1 = J.getInterceptor$x(map), t2 = J.get$iterator$ax(t1.get$keys(map)), t3 = this._keyEquality, t4 = this._valueEquality, hash = 0; t2.moveNext$0();) {
        key = t2.get$current(t2);
        hash = hash + 3 * t3.hash$1(0, key) + 7 * t4.hash$1(0, t1.$index(map, key)) & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  U.DeepCollectionEquality.prototype = {
    equals$2: function(e1, e2) {
      var _this = this,
        t1 = type$.Set_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new U.SetEquality(_this, type$.SetEquality_dynamic).equals$2(e1, e2);
      t1 = type$.Map_dynamic_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new U.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).equals$2(e1, e2);
      t1 = type$.List_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new U.ListEquality(_this, type$.ListEquality_dynamic).equals$2(e1, e2);
      t1 = type$.Iterable_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && H.boolConversionCheck(new U.IterableEquality(_this, type$.IterableEquality_dynamic).equals$2(e1, e2));
      return J.$eq$(e1, e2);
    },
    hash$1: function(_, o) {
      var _this = this;
      if (type$.Set_dynamic._is(o))
        return new U.SetEquality(_this, type$.SetEquality_dynamic).hash$1(0, o);
      if (type$.Map_dynamic_dynamic._is(o))
        return new U.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).hash$1(0, o);
      if (type$.List_dynamic._is(o))
        return new U.ListEquality(_this, type$.ListEquality_dynamic).hash$1(0, o);
      if (type$.Iterable_dynamic._is(o))
        return new U.IterableEquality(_this, type$.IterableEquality_dynamic).hash$1(0, o);
      return J.get$hashCode$(o);
    },
    isValidKey$1: function(o) {
      !type$.Iterable_dynamic._is(o);
      return true;
    },
    $isEquality: 1
  };
  Y.groupBy_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], this.S._eval$1("JSArray<0>"));
    },
    $signature: function() {
      return this.S._eval$1("List<0>()");
    }
  };
  Y.HeapPriorityQueue.prototype = {
    addAll$1: function(_, elements) {
      var t1;
      this.$ti._eval$1("Iterable<1>")._as(elements);
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        this._priority_queue$_add$1(0, t1.get$current(t1));
    },
    contains$1: function(_, object) {
      return this._locate$1(this.$ti._precomputed1._as(object)) >= 0;
    },
    get$length: function(_) {
      return this._priority_queue$_length;
    },
    toString$0: function(_) {
      var t1 = this._priority_queue$_queue;
      return P.IterableBase_iterableToShortString(H.SubListIterable$(t1, 0, this._priority_queue$_length, H._arrayInstanceType(t1)._precomputed1), "(", ")");
    },
    _priority_queue$_add$1: function(_, element) {
      var t2, t3, newCapacity, newQueue, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(element);
      t2 = _this._priority_queue$_length;
      t3 = _this._priority_queue$_queue.length;
      if (t2 === t3) {
        newCapacity = t3 * 2 + 1;
        if (newCapacity < 7)
          newCapacity = 7;
        t2 = new Array(newCapacity);
        t2.fixed$length = Array;
        newQueue = H.setRuntimeTypeInfo(t2, t1._eval$1("JSArray<1>"));
        C.JSArray_methods.setRange$3(newQueue, 0, _this._priority_queue$_length, _this._priority_queue$_queue);
        _this.set$_priority_queue$_queue(newQueue);
      }
      _this._bubbleUp$2(element, _this._priority_queue$_length++);
    },
    _locate$1: function(object) {
      var t1, position, index, t2, comp, leftChildPosition, _this = this;
      _this.$ti._precomputed1._as(object);
      if (_this._priority_queue$_length === 0)
        return -1;
      t1 = _this.comparison;
      position = 1;
      do
        c$0: {
          index = position - 1;
          t2 = _this._priority_queue$_queue;
          if (index < 0 || index >= t2.length)
            return H.ioore(t2, index);
          comp = t1.call$2(t2[index], object);
          if (comp === 0)
            return index;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            leftChildPosition = position * 2;
            if (leftChildPosition <= _this._priority_queue$_length) {
              position = leftChildPosition;
              break c$0;
            }
          }
          t2 = _this._priority_queue$_length;
          do {
            for (; (position & 1) === 1;)
              position = position >>> 1;
            ++position;
          } while (position > t2);
        }
      while (position !== 1);
      return -1;
    },
    _bubbleUp$2: function(element, index) {
      var t1, parentIndex, t2, $parent, _this = this;
      _this.$ti._precomputed1._as(element);
      for (t1 = _this.comparison; index > 0; index = parentIndex) {
        parentIndex = C.JSInt_methods._tdivFast$1(index - 1, 2);
        t2 = _this._priority_queue$_queue;
        if (parentIndex < 0 || parentIndex >= t2.length)
          return H.ioore(t2, parentIndex);
        $parent = t2[parentIndex];
        t2 = t1.call$2(element, $parent);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 0)
          break;
        C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, $parent);
      }
      C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
    },
    _bubbleDown$2: function(element, index) {
      var rightChildIndex, t1, t2, leftChildIndex, t3, leftChild, rightChild, comp, minChild, minChildIndex, child, _this = this;
      _this.$ti._precomputed1._as(element);
      rightChildIndex = index * 2 + 2;
      for (t1 = _this.comparison; t2 = _this._priority_queue$_length, rightChildIndex < t2; index = minChildIndex) {
        leftChildIndex = rightChildIndex - 1;
        t2 = _this._priority_queue$_queue;
        t3 = t2.length;
        if (leftChildIndex < 0 || leftChildIndex >= t3)
          return H.ioore(t2, leftChildIndex);
        leftChild = t2[leftChildIndex];
        if (rightChildIndex < 0 || rightChildIndex >= t3)
          return H.ioore(t2, rightChildIndex);
        rightChild = t2[rightChildIndex];
        comp = t1.call$2(leftChild, rightChild);
        if (typeof comp !== "number")
          return comp.$lt();
        if (comp < 0) {
          minChild = leftChild;
          minChildIndex = leftChildIndex;
        } else {
          minChild = rightChild;
          minChildIndex = rightChildIndex;
        }
        comp = t1.call$2(element, minChild);
        if (typeof comp !== "number")
          return comp.$le();
        if (comp <= 0) {
          C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
          return;
        }
        C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, minChild);
        rightChildIndex = minChildIndex * 2 + 2;
      }
      leftChildIndex = rightChildIndex - 1;
      if (leftChildIndex < t2) {
        t2 = _this._priority_queue$_queue;
        if (leftChildIndex < 0 || leftChildIndex >= t2.length)
          return H.ioore(t2, leftChildIndex);
        child = t2[leftChildIndex];
        comp = t1.call$2(element, child);
        if (typeof comp !== "number")
          return comp.$gt();
        if (comp > 0) {
          C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, child);
          index = leftChildIndex;
        }
      }
      C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
    },
    set$_priority_queue$_queue: function(_queue) {
      this._priority_queue$_queue = this.$ti._eval$1("List<1>")._as(_queue);
    }
  };
  B.Pair.prototype = {};
  B.defaultCompare_closure.prototype = {
    call$2: function(value1, value2) {
      var t1 = this.T;
      t1._as(value1);
      t1._as(value2);
      return J.compareTo$1$ns(type$.Comparable_dynamic._as(value1), value2);
    },
    $signature: function() {
      return this.T._eval$1("int(0,0)");
    }
  };
  N.HexCodec.prototype = {
    get$encoder: function() {
      return C.C_HexEncoder;
    }
  };
  R.HexEncoder.prototype = {
    convert$1: function(bytes) {
      type$.List_int._as(bytes);
      return R._convert(bytes, 0, bytes.length);
    }
  };
  U.main_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], framework, e, t6, t7, t8, isolateManager, serviceExtensionManager, t9, framework0, app, exception, t1, t2, t3, t4, t5, $async$exception, $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.Zone__current;
              t2 = type$.String;
              t3 = type$.List_String;
              t4 = type$.JSArray_of_void_Function;
              t5 = H.setRuntimeTypeInfo([], t4);
              t1 = new R.ServiceConnectionManager(new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_VmServiceWrapper), new P._AsyncCompleter(new P._Future(t1, type$._Future_VmService), type$._AsyncCompleter_VmService), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ImmediateValueNotifier_bool), P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), new R.VmFlagManager(new U.ValueNotifier(null, t5, type$.ValueNotifier_FlagList), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ValueNotifier_Flag)), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_bool), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_void), new U.ValueNotifier(false, H.setRuntimeTypeInfo([], t4), type$.ValueNotifier_bool));
              t4 = H.setRuntimeTypeInfo([], type$.JSArray_IsolateRef);
              t5 = type$._AsyncBroadcastStreamController_IsolateRef;
              t6 = $.Zone__current;
              t7 = type$._Future_void;
              t8 = type$._AsyncCompleter_void;
              isolateManager = new R.IsolateManager(t4, new P._AsyncBroadcastStreamController(null, null, t5), new P._AsyncBroadcastStreamController(null, null, t5), new P._AsyncBroadcastStreamController(null, null, t5), new P._AsyncCompleter(new P._Future(t6, t7), t8));
              serviceExtensionManager = isolateManager._serviceExtensionManager = new R.ServiceExtensionManager(P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.StreamController_bool), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.StreamController_ServiceExtensionState), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ValueListenable_bool), P.LinkedHashSet_LinkedHashSet$_empty(t2), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ServiceExtensionState), P.LinkedHashSet_LinkedHashSet$_empty(t2), new P._AsyncCompleter(new P._Future(t6, t7), t8));
              t1._isolateManager = serviceExtensionManager._isolateManager = isolateManager;
              t1._serviceExtensionManager = serviceExtensionManager;
              $.globals.$indexSet(0, C.Type_ServiceConnectionManager_qdG, t1);
              t1 = new A.MessageBus();
              t1.set$_controller(new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_BusEvent));
              $.globals.$indexSet(0, C.Type_MessageBus_MAi, t1);
              t1 = type$._AsyncBroadcastStreamController_String;
              t4 = new O.FrameworkController(new P._AsyncBroadcastStreamController(null, null, t1), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_ConnectVmEvent), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_Uri), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_dynamic), new P._AsyncBroadcastStreamController(null, null, t1));
              t4._init$0();
              $.globals.$indexSet(0, C.Type_FrameworkController_QHx, t4);
              H.S(window.location);
              B.log("DevTools version 0.2.5.", C.LogLevel_0);
              window.gaDevToolsEnabled = P.allowInterop(F.analytics__gaEnabled$closure(), type$.bool_Function);
              $async$goto = H.boolConversionCheck(self.gtagsReset()) ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(F.resetDevToolsFile(), $async$call$0);
            case 5:
              // returning from await.
            case 4:
              // join
              t4 = H.setRuntimeTypeInfo([], type$.JSArray_HtmlScreen);
              t7 = new P._Future($.Zone__current, t7);
              t5 = A.queryId("messages-container");
              t6 = H.setRuntimeTypeInfo([], type$.JSArray_String);
              t9 = A.CoreElement$("span", null, null, null, null);
              t9.add$1(0, A.CoreElement$("span", null, "optional-700", null, "DevTools Docs"));
              framework0 = new F.HtmlPerfToolFramework(t4, P.LinkedHashMap_LinkedHashMap$_empty(type$.HtmlScreen, type$.CoreElement), new P._AsyncCompleter(t7, t8), new G.HtmlMessageManager(new A.CoreElement(t5), P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Set_HtmlMessage), t6), new P._AsyncBroadcastStreamController(null, null, t1), Y.createLinkStatusItem(t9, "https://flutter.dev/docs/development/tools/devtools/overview", "Documentation on using Dart DevTools"));
              framework0.HtmlFramework$0();
              t9 = window;
              t1 = type$.void_Function_Event._as(framework0.get$_gAReportExceptions());
              type$.void_Function._as(null);
              W._EventStreamSubscription$(t9, "error", t1, false, type$.Event);
              framework0.initDevToolsServerConnection$0();
              framework0.initGlobalUI$0();
              app = new R.HtmlApp(framework0, P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Future_dynamic_Function_dynamic));
              t1 = app.get$devToolsReady();
              t9 = type$.void;
              app._register$1$2("devToolsReady", t1, t9);
              app._register$1$2("echo", app.get$echo(), t9);
              app._register$1$2("switchPage", app.get$switchPage(), t9);
              app._register$1$2("currentPageId", app.get$currentPageId(), t2);
              app._register$1$2("connectDialog.isVisible", app.get$connectDialogIsVisible(), t9);
              app._register$1$2("connectDialog.connectTo", app.get$connectDialogConnectTo(), t9);
              app._register$1$2("logging.clearLogs", app.get$logsClearLogs(), t9);
              app._register$1$2("logging.logCount", app.get$logsLogCount(), type$.int);
              app._register$1$2("debugger.getState", app.get$debuggerGetState(), t2);
              app._register$1$2("debugger.getLocation", app.get$debuggerGetLocation(), t2);
              app._register$1$2("debugger.resume", app.get$debuggerResume(), t9);
              app._register$1$2("debugger.pause", app.get$debuggerPause(), t9);
              app._register$1$2("debugger.step", app.get$debuggerStep(), t9);
              app._register$1$2("debugger.clearBreakpoints", app.get$debuggerClearBreakpoints(), t9);
              app._register$1$2("debugger.addBreakpoint", app.get$debuggerAddBreakpoint(), t9);
              app._register$1$2("debugger.setExceptionPauseMode", app.get$debuggerSetExceptionPauseMode(), t9);
              app._register$1$2("debugger.getBreakpoints", app.get$debuggerGetBreakpoints(), t3);
              app._register$1$2("debugger.supportsScripts", app.get$debuggerSupportsScripts(), type$.bool);
              app._register$1$2("debugger.getScripts", app.get$debuggerGetScripts(), t3);
              app._register$1$2("debugger.getCallStackFrames", app.get$debuggerGetCallStackFrames(), t3);
              app._register$1$2("debugger.getVariables", app.get$debuggerGetVariables(), t3);
              app._register$1$2("debugger.getConsoleContents", app.get$debuggerGetConsoleContents(), t2);
              app._html_model$_bind$0();
              t7.then$1$1(t1, t9);
              framework = framework0;
              try {
                window.localStorage.clear();
              } catch (exception) {
                H.unwrapException(exception);
              }
              $async$handler = 7;
              $async$goto = H.boolConversionCheck(self.gtagsEnabled()) ? 10 : 11;
              break;
            case 10:
              // then
              $async$temp1 = H;
              $async$goto = 15;
              return P._asyncAwait(F.isFirstRun(), $async$call$0);
            case 15:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 12 : 14;
              break;
            case 12:
              // then
              t1 = framework.analyticsDialog;
              t2 = t1.parent.element.style;
              t2.display = "initial";
              J.focus$0$x(t1.acceptButton.element);
              // goto join
              $async$goto = 13;
              break;
            case 14:
              // else
              $async$temp1 = H;
              $async$goto = 16;
              return P._asyncAwait(F.isEnabled(), $async$call$0);
            case 16:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                self.initializeGA();
                self.hookupListenerForGA();
              }
            case 13:
              // join
            case 11:
              // join
              $async$handler = 2;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              if (typeof console != "undefined")
                window.console.error(e);
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 9:
              // after finally
              t1 = G.browser();
              t1.toString;
              if (t1 !== $.$get$chrome()) {
                t1 = G.browser();
                t1.toString;
                framework.disableAppWithError$2("ERROR: You are running DevTools on " + (t1 === $.$get$internetExplorer() || G.browser() == $.$get$Browser_UnknownBrowser() ? "an unsupported browser" : G.browser().name) + ", but DevTools only runs on Chrome.", "Reopen this url in a Chrome browser to use DevTools.");
                // goto return
                $async$goto = 1;
                break;
              }
              E.FrameworkCore_initVmService(J.toString$0$(window.location), new U.main__closure(framework), null).then$1$1(new U.main__closure0(framework), t9);
              framework.loadScreenFromLocation$0();
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 15
  };
  U.main__closure.prototype = {
    call$2: function(title, error) {
      this.framework.showError$2(title, error);
    },
    $signature: 29
  };
  U.main__closure0.prototype = {
    call$1: function(connected) {
      var t1, t2;
      if (!H.boolConversionCheck(H._asBoolS(connected))) {
        t1 = this.framework;
        t2 = t1.connectDialog.parent.element.style;
        t2.display = "initial";
        t1 = t1.snapshotMessage.parent.element.style;
        t1.display = "initial";
        J.get$children$x(A.queryId("content")).clear$0(0);
      }
    },
    $signature: 11
  };
  K.Disposer.prototype = {
    autoDispose$1: function(subscription) {
      C.JSArray_methods.add$1(this._subscriptions, subscription);
    },
    addAutoDisposeListener$2: function(listenable, listener) {
      type$.void_Function._as(listener);
      if (listenable == null || false)
        return;
      C.JSArray_methods.add$1(this._listenables, listenable);
      C.JSArray_methods.add$1(this._auto_dispose$_listeners, listener);
      listenable.addListener$1(0, listener);
    },
    cancel$0: function(_) {
      var t1, t2, _i, i, t3;
      for (t1 = this._subscriptions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].cancel$0(0);
      C.JSArray_methods.set$length(t1, 0);
      for (t1 = this._listenables, t2 = this._auto_dispose$_listeners, i = 0; i < t1.length; ++i) {
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t3.removeListener$1(0, t2[i]);
      }
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.set$length(t2, 0);
    }
  };
  K.DisposableController.prototype = {
    dispose$0: function() {
    }
  };
  K.AutoDisposeControllerMixin.prototype = {};
  F.FlameChart.prototype = {
    get$zoomMultiplier: function() {
      return this.zoomLevel * 0.003;
    },
    initUiElements$0: function() {
      C.JSArray_methods.set$length(this.rows, 0);
      C.JSArray_methods.set$length(this.sections, 0);
    },
    expandRows$1: function(newRowLength) {
      var t2, i,
        t1 = this.rows,
        currentLength = t1.length;
      for (t2 = type$.JSArray_FlameChartNode_dynamic, i = currentLength; i < newRowLength; ++i)
        C.JSArray_methods.add$1(t1, new F.FlameChartRow(H.setRuntimeTypeInfo([], t2), i));
    },
    selectNodeAtOffset$1: function(offset) {
      var t1, _this = this,
        node = _this.nodeAtOffset$1(offset);
      if (node == null || node === _this.selectedNode)
        return;
      t1 = _this.selectedNode;
      if (t1 != null)
        t1.selected = false;
      node.selected = true;
      _this.selectedNode = node;
      _this._nodeSelectedController.add$1(0, node);
    },
    nodeAtOffset$1: function(offset) {
      var rowIndex = this.rowIndexForY$1(offset._dy);
      if (rowIndex < 0 || rowIndex >= this.rows.length)
        return null;
      return this.nodeInRow$2(rowIndex, offset._dx);
    },
    nodeInRow$2: function(rowIndex, x) {
      var nodes,
        t1 = this.rows;
      if (rowIndex < 0 || rowIndex >= t1.length)
        return H.ioore(t1, rowIndex);
      nodes = t1[rowIndex].nodes;
      return nodes.length === 0 ? null : new F.FlameChart_nodeInRow_binarySearchForNode(nodes, x).call$0();
    },
    relativeYPosition$1: function(absoluteY) {
      return absoluteY - 27;
    },
    rowIndexForY$1: function(y) {
      if (y < 27)
        return -1;
      return Math.max(C.JSNumber_methods._tdivFast$1(this.relativeYPosition$1(y), 27), 0);
    },
    sectionLabel$4$top$width: function(title, backgroundColor, $top, width) {
      var t1 = title === "GPU" ? C.Color_4294967295 : C.Color_4278190080;
      return F.FlameChartNode$(new S.Rect(2, $top, width, $top + 25), backgroundColor, t1, C.Color_4278190080, null, new F.FlameChart_sectionLabel_closure(title), this.startInset, type$.TimelineEvent_2);
    }
  };
  F.FlameChart_nodeInRow_binarySearchForNode.prototype = {
    call$0: function() {
      var t2, max0, min, mid, node, t3, t4,
        t1 = this.nodes,
        max = t1.length;
      for (t2 = this.x, max0 = max, min = 0; min < max0;) {
        mid = min + C.JSInt_methods._shrOtherPositive$1(max0 - min, 1);
        if (mid < 0 || mid >= max)
          return H.ioore(t1, mid);
        node = t1[mid];
        t3 = node.rect;
        t4 = t3.left;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t2 >= t4 && t2 <= t3.right)
          return node;
        if (t2 < t4)
          max0 = mid;
        if (t2 > t3.right)
          min = mid + 1;
      }
      return null;
    },
    $signature: 304
  };
  F.FlameChart_sectionLabel_closure.prototype = {
    call$1: function(_) {
      type$.TimelineEvent_2._as(_);
      return this.title;
    },
    $signature: 53
  };
  F.FlameChartCanvas.prototype = {
    FlameChartCanvas$7$classes$data$duration$height$maxZoomLevel$startInset$width: function(classes, data, duration, height, maxZoomLevel, startInset, width, $T) {
      var t2, dragged, t3, t4, _this = this,
        t1 = _this.get$paintCallback();
      t1 = T.ViewportCanvas$("fill-section " + H.S(classes), null, null, null, _this.get$_onTap(), t1);
      t2 = t1._viewport_canvas$_element.element.style;
      t2.overflow = "hidden";
      _this._viewportCanvas = t1;
      t1.setContentSize$2(width, height);
      t1 = _this._dragScroll;
      dragged = _this._viewportCanvas._viewport_canvas$_element.element;
      t1._handleMouseDrags$1(dragged);
      t1._handleTouchDrags$1(dragged);
      t2 = type$.void_Function;
      t1.set$_onVerticalScroll(t2._as(new F.FlameChartCanvas_closure(_this)));
      t1 = J.get$onMouseWheel$x(_this._viewportCanvas._viewport_canvas$_element.element);
      t3 = t1.$ti;
      t4 = t3._eval$1("~(1)")._as(_this.get$_handleMouseWheel());
      t2._as(null);
      W._EventStreamSubscription$(t1._target, t1._eventType, t4, false, t3._precomputed1);
      _this._initAsciiMeasurements$0();
    },
    _initAsciiMeasurements$0: function() {
      if ($._asciiMeasurements != null)
        return;
      var measurementCanvas = W.CanvasElement_CanvasElement(null, null).getContext("2d");
      measurementCanvas.font = Y.fontStyleToCss(C.TextStyle_w66);
      $._asciiMeasurements = P.List_List$generate(128, new F.FlameChartCanvas__initAsciiMeasurements_closure(measurementCanvas), true, type$.num);
    },
    paintCallback$2: function(canvas, visible) {
      var _this = this;
      _this.paintSections$2(canvas, visible);
      _this.paintRows$2(canvas, visible);
      _this.timelineGrid.paint$3(canvas, _this._viewportCanvas._viewport, visible);
    },
    paintSections$2: function(canvas, visible) {
      var _i, section, t4,
        t1 = this.sections,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>"),
        oddSections = P.List_List$from(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new F.FlameChartCanvas_paintSections_closure()), t3), true, t3._eval$1("Iterable.E"));
      for (t1 = oddSections.length, _i = 0; _i < oddSections.length; oddSections.length === t1 || (0, H.throwConcurrentModificationError)(oddSections), ++_i) {
        section = oddSections[_i];
        canvas.fillStyle = Y.colorToCss(C.ThemedColor_Color_4294375158_Color_4281151025);
        t2 = visible.left;
        t3 = section.absStartY;
        t4 = visible.right;
        if (typeof t2 !== "number")
          return H.iae(t2);
        canvas.fillRect(t2, t3, t4 - t2, Math.min(visible.bottom, (section.endRow - section.startRow) * 27 + 15));
      }
    },
    paintRows$2: function(canvas, visible) {
      var i, _this = this,
        startRow = Math.max(_this.rowIndexForY$1(visible.top), 0),
        endRow = Math.min(_this.rowIndexForY$1(visible.bottom) + 1, _this.rows.length);
      for (i = startRow; i < endRow; ++i)
        _this.paintRow$3(canvas, i, visible);
    },
    paintRow$3: function(canvas, index, visible) {
      var t2, t3, t4, _i, node, t5, t6,
        t1 = this.rows;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      for (t1 = t1[index].nodes, t2 = t1.length, t3 = visible.right, t4 = visible.left, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        node = t1[_i];
        t5 = node.rect;
        t6 = t5.left;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t6 + (t5.right - t6) < t4)
          continue;
        if (t6 > t3)
          break;
        node.paint$1(canvas);
      }
    },
    _onTap$1: function(offset) {
      if (!this._dragScroll.wasDragged) {
        this.selectNodeAtOffset$1(offset);
        this._viewportCanvas.rebuild$1$force(true);
      }
    },
    _handleMouseWheel$1: function(e) {
      var t1, t2, t3;
      type$.WheelEvent._as(e);
      e.preventDefault();
      t1 = C.WheelEvent_methods.get$deltaY(e);
      if (typeof t1 !== "number")
        return t1.abs$0();
      t2 = C.WheelEvent_methods.get$deltaX(e);
      if (typeof t2 !== "number")
        return t2.abs$0();
      t3 = this._viewportCanvas;
      if (Math.abs(t1) >= Math.abs(t2)) {
        t1 = e.clientX;
        e.clientY;
        t3 = t3._viewport_canvas$_element.element.getBoundingClientRect().left;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._zoom$2(C.WheelEvent_methods.get$deltaY(e), t1 - t3);
      } else {
        t1 = t3._viewport_canvas$_element.element;
        t1.scrollLeft = C.JSInt_methods.round$0(C.JSNumber_methods.round$0(t1.scrollLeft) + J.round$0$n(C.WheelEvent_methods.get$deltaX(e)));
      }
    },
    _zoom$2: function(deltaY, mouseX) {
      var newZoomLevel, t1, lastScrollLeft, lastScrollLeft0, t2, fixedX, _this = this;
      deltaY = J.clamp$2$n(deltaY, -20, 20);
      newZoomLevel = C.JSNumber_methods.clamp$2(_this.zoomLevel + deltaY * _this.get$zoomMultiplier(), 1, _this._maxZoomLevel);
      t1 = _this.zoomLevel;
      if (newZoomLevel === t1)
        return;
      lastScrollLeft = C.JSNumber_methods.round$0(_this._viewportCanvas._viewport_canvas$_element.element.scrollLeft);
      lastScrollLeft0 = _this.floatingPointScrollLeft;
      if (Math.abs(lastScrollLeft0 - lastScrollLeft) < 0.5)
        lastScrollLeft = lastScrollLeft0;
      t2 = _this.startInset;
      fixedX = mouseX + lastScrollLeft - t2;
      if (fixedX >= 0)
        _this.floatingPointScrollLeft = fixedX * newZoomLevel / t1 + t2 - mouseX;
      else
        _this.floatingPointScrollLeft = lastScrollLeft;
      _this.zoomLevel = newZoomLevel;
      _this.updateChartForZoom$0();
    },
    updateChartForZoom$0: function() {
      var _this = this;
      _this.updateNodesForZoom$0();
      _this.timelineGrid.updateForZoom$2(_this.zoomLevel, _this.get$calculatedWidth());
      _this.rebuildAndPositionAfterZoom$0();
    },
    updateNodesForZoom$0: function() {
      var t1, t2, _i, t3, t4, _i0;
      for (t1 = this.rows, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t3 = t1[_i].nodes, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i0)
          t3[_i0].updateForZoom$1$zoom(this.zoomLevel);
    },
    rebuildAndPositionAfterZoom$0: function() {
      var t1, t2, _this = this;
      _this.forceRebuildForSize$2(_this.get$calculatedWidth() + _this.startInset + 70, _this.height);
      t1 = _this._viewportCanvas._viewport_canvas$_element.element;
      t2 = Math.max(0, C.JSNumber_methods.round$0(_this.floatingPointScrollLeft));
      t1.toString;
      t1.scrollLeft = C.JSInt_methods.round$0(H._asIntS(t2));
    },
    forceRebuildForSize$2: function(width, height) {
      var _this = this;
      _this.width = width;
      _this.height = height;
      _this._viewportCanvas.setContentSize$2(width, height);
      _this._viewportCanvas.rebuild$1$force(true);
    }
  };
  F.FlameChartCanvas_closure.prototype = {
    call$0: function() {
      this.$this._viewportCanvas.rebuild$1$force(true);
    },
    $signature: 0
  };
  F.FlameChartCanvas__initAsciiMeasurements_closure.prototype = {
    call$1: function(i) {
      return this.measurementCanvas.measureText(C.C_AsciiCodec.decode$1(0, H.setRuntimeTypeInfo([i], type$.JSArray_int))).width;
    },
    $signature: 119
  };
  F.FlameChartCanvas_paintSections_closure.prototype = {
    call$1: function(s) {
      return C.JSInt_methods.$mod(type$.FlameChartSection._as(s).index, 2) === 1;
    },
    $signature: 104
  };
  F.FlameChartRow.prototype = {
    addNode$2$index: function(node, index) {
      var t1, t2;
      if (index != null)
        t1 = index < this.nodes.length;
      else
        t1 = false;
      t2 = this.nodes;
      if (t1)
        C.JSArray_methods.insert$2(t2, index, node);
      else
        C.JSArray_methods.add$1(t2, node);
      node.row = this;
    },
    addNode$1: function(node) {
      return this.addNode$2$index(node, null);
    }
  };
  F.FlameChartSection.prototype = {};
  F.FlameChartNode.prototype = {
    paint$1: function(canvas) {
      var t1, t2, t3, displayText, textWidth, t4, _this = this;
      canvas.fillStyle = Y.colorToCss(_this.selected ? C.ThemedColor_Color_4292138970_Color_4292138970 : _this.backgroundColor);
      t1 = _this.rect;
      t2 = t1.left;
      t3 = t1.top;
      if (typeof t2 !== "number")
        return H.iae(t2);
      canvas.fillRect(t2, t3, t1.right - t2, t1.bottom - t3);
      if (_this.selected) {
        canvas.strokeStyle = Y.colorToCss(C.ThemedColor_Color_1511726883_Color_1511726883);
        canvas.lineWidth = 1;
        canvas.stroke();
      }
      t1 = _this.rect;
      t2 = t1.left;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1.right - t2 > 20) {
        canvas.fillStyle = Y.colorToCss(_this.selected ? _this.selectedTextColor : _this.textColor);
        canvas.font = Y.fontStyleToCss(C.TextStyle_w66);
        t1 = _this.data;
        t2 = _this.displayTextProvider;
        displayText = t2.call$1(t1);
        t3 = _this.textMeasurements;
        textWidth = t3.$index(0, displayText);
        if (textWidth == null) {
          textWidth = canvas.measureText(displayText).width;
          t3.$indexSet(0, displayText, textWidth);
        }
        t3 = _this.rect;
        t4 = t3.left;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof textWidth !== "number")
          return textWidth.$le();
        if (!(textWidth <= t3.right - t4 - 8)) {
          t1 = t2.call$1(t1);
          t2 = _this.rect;
          t3 = t2.left;
          if (typeof t3 !== "number")
            return H.iae(t3);
          displayText = B.longestFittingSubstring(t1, t2.right - t3 - 8, $._asciiMeasurements, new F.FlameChartNode_paint_closure(canvas));
        }
        t1 = _this.rect;
        t2 = t1.left;
        if (typeof t2 !== "number")
          return t2.$add();
        C.CanvasRenderingContext2D_methods.fillText$4(canvas, displayText, t2 + 4, t1.top + 18, t1.right - t2 - 8);
      }
    },
    updateForZoom$1$zoom: function(zoom) {
      var t1, t2, newLeft, _this = this;
      if (_this.data == null)
        return;
      t1 = _this.startingLeft;
      t2 = _this.chartStartInset;
      if (typeof t1 !== "number")
        return t1.$sub();
      newLeft = (t1 - t2) * zoom + t2;
      t2 = _this.rect;
      t1 = t2.top;
      _this.rect = new S.Rect(newLeft, t1, newLeft + _this.startingWidth * zoom, t1 + (t2.bottom - t1));
    }
  };
  F.FlameChartNode_paint_closure.prototype = {
    call$1: function(value) {
      return this.canvas.measureText(H.Primitives_stringFromCharCode(value)).width;
    },
    $signature: 119
  };
  F.TimelineGrid.prototype = {
    paint$3: function(canvas, viewport, visible) {
      var t1, t2, t3, left, left0, t4, firstGridNodeText, t5, t6, t7, t8, timestampText, _this = this;
      canvas.fillStyle = Y.colorToCss(C.ThemedColor_Color_4294375158_Color_4281151025);
      t1 = visible.left;
      t2 = viewport.top;
      t3 = visible.right;
      if (typeof t1 !== "number")
        return H.iae(t1);
      canvas.fillRect(t1, t2, t3 - t1, 25);
      left = _this._chartStartInset;
      if (t1 === 0)
        left0 = left;
      else {
        t4 = _this.currentInterval;
        left0 = C.JSNumber_methods.$tdiv(t1 - left, t4) * t4 + left;
      }
      firstGridNodeText = B.msText(C.Duration_0, 1);
      canvas.font = Y.fontStyleToCss(C.TextStyle_w66);
      canvas.fillStyle = Y.colorToCss(C.ThemedColor_Color_4280559918_Color_4294638588);
      t4 = t2 + 18;
      C.CanvasRenderingContext2D_methods.fillText$3(canvas, firstGridNodeText, _this._timestampLeft$4(firstGridNodeText, 0, left, canvas), t4);
      canvas.strokeStyle = Y.colorToCss(C.ThemedColor_Color_4291611852_Color_4283979864);
      canvas.lineWidth = 0.4;
      canvas.beginPath();
      canvas.moveTo(left, visible.top);
      canvas.lineTo(left, visible.bottom);
      canvas.closePath();
      canvas.stroke();
      for (t5 = viewport.bottom, t6 = _this._flame_chart_canvas$_duration._duration; left0 < t3;) {
        t7 = left0 + _this.currentInterval;
        if (t7 < t1 || left0 > t3)
          return;
        t7 = P.Duration$(C.JSDouble_methods.round$0((t7 - left) / _this._flameChartWidth * t6), 0)._duration;
        t8 = t7 === 0 ? 1 : 3;
        t8 = C.JSDouble_methods.toStringAsFixed$1(t7 / 1000, t8);
        timestampText = t8 + " ms";
        t7 = _this.currentInterval;
        t8 = canvas.measureText(timestampText).width;
        if (typeof t8 !== "number")
          return H.iae(t8);
        canvas.fillText(timestampText, left0 + t7 - t8 - 6, t4);
        canvas.beginPath();
        canvas.moveTo(left0 + _this.currentInterval, t2);
        canvas.lineTo(left0 + _this.currentInterval, t5);
        canvas.closePath();
        canvas.stroke();
        left0 += _this.currentInterval;
      }
    },
    _timestampLeft$4: function(timestampText, left, width, canvas) {
      var t1 = canvas.measureText(timestampText).width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return left + width - t1 - 6;
    },
    updateForZoom$2: function(newZoomLevel, newFlameChartWidth) {
      var _this = this;
      if (_this._zoomLevel === newZoomLevel)
        return;
      _this._flameChartWidth = newFlameChartWidth;
      _this.currentInterval = 150 / Math.pow(2, C.JSDouble_methods.floor$0(Math.log(newZoomLevel) / Math.log(2))) * newZoomLevel;
      _this._zoomLevel = newZoomLevel;
    }
  };
  T.allowedError_closure.prototype = {
    call$1: function(error) {
      var t1, errorLines;
      if (this.logError) {
        t1 = J.getInterceptor$(error);
        errorLines = H.setRuntimeTypeInfo(t1.toString$0(error).split("\n"), type$.JSArray_String);
        window;
        t1 = "[" + t1.get$runtimeType(error).toString$0(0) + "] " + H.S(C.JSArray_methods.get$first(errorLines));
        if (typeof console != "undefined")
          window.console.groupCollapsed(t1);
        window;
        t1 = H.SubListIterable$(errorLines, 1, null, type$.String).join$1(0, "\n");
        if (typeof console != "undefined")
          window.console.log(t1);
        window;
        if (typeof console != "undefined")
          window.console.groupEnd();
      }
    },
    $signature: 192
  };
  F.LogLevel.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  E.Notification.prototype = {};
  L.ConnectedApp.prototype = {
    get$isFlutterApp: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1;
      var $async$get$isFlutterApp = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isFlutterApp;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).libraryUriAvailable$1("package:flutter/src/widgets/binding.dart"), $async$get$isFlutterApp);
            case 5:
              // returning from await.
              t1 = $async$result;
              $async$self.set$_isFlutterApp(t1);
            case 4:
              // join
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$isFlutterApp, $async$completer);
    },
    get$isProfileBuild: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1;
      var $async$get$isProfileBuild = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isProfileBuild;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self._connectedToProfileBuild$0(), $async$get$isProfileBuild);
            case 5:
              // returning from await.
              t1 = $async$result;
              $async$self.set$_isProfileBuild(t1);
            case 4:
              // join
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$isProfileBuild, $async$completer);
    },
    get$isDartWebApp: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1;
      var $async$get$isDartWebApp = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isDartWebApp;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).libraryUriAvailable$1("dart:html"), $async$get$isDartWebApp);
            case 5:
              // returning from await.
              t1 = $async$result;
              $async$self.set$_isDartWebApp(t1);
            case 4:
              // join
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$isDartWebApp, $async$completer);
    },
    get$isDartCliApp: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$get$isDartCliApp = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vm.name !== "ChromeDebugProxy";
              if ($async$temp1) {
                // goto then
                $async$goto = 3;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 4;
              break;
            case 3:
              // then
              $async$temp1 = H;
              $async$goto = 5;
              return P._asyncAwait($async$self.get$isFlutterApp(), $async$get$isDartCliApp);
            case 5:
              // returning from await.
              $async$result = !$async$temp1.boolConversionCheck($async$result);
            case 4:
              // join
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$isDartCliApp, $async$completer);
    },
    _connectedToProfileBuild$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$_connectedToProfileBuild$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              $async$temp1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vm.name === "ChromeDebugProxy";
              if ($async$temp1)
                $async$result = $async$temp1;
              else {
                // goto then
                $async$goto = 3;
                break;
              }
              // goto join
              $async$goto = 4;
              break;
            case 3:
              // then
              $async$temp1 = H;
              $async$goto = 5;
              return P._asyncAwait($async$self.get$isFlutterApp(), $async$_connectedToProfileBuild$0);
            case 5:
              // returning from await.
              $async$result = !$async$temp1.boolConversionCheck($async$result);
            case 4:
              // join
              if ($async$result) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.extensionStatesUpdated.future, $async$_connectedToProfileBuild$0);
            case 6:
              // returning from await.
              $async$returnValue = !t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.isServiceExtensionAvailable$1($.$get$debugAllowBanner().extension);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_connectedToProfileBuild$0, $async$completer);
    },
    initializeValues$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$initializeValues$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(P.Future_wait(H.setRuntimeTypeInfo([$async$self.get$isFlutterApp(), $async$self.get$isProfileBuild(), $async$self.get$isDartWebApp()], type$.JSArray_Future_bool), type$.bool), $async$initializeValues$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$initializeValues$0, $async$completer);
    },
    set$_isFlutterApp: function(_isFlutterApp) {
      this._isFlutterApp = H._asBoolS(_isFlutterApp);
    },
    set$_isProfileBuild: function(_isProfileBuild) {
      this._isProfileBuild = H._asBoolS(_isProfileBuild);
    },
    set$_isDartWebApp: function(_isDartWebApp) {
      this._isDartWebApp = H._asBoolS(_isDartWebApp);
    }
  };
  A.BusEvent.prototype = {
    toString$0: function(_) {
      return this.type;
    }
  };
  A.MessageBus.prototype = {
    onEvent$1$type: function(type) {
      var t1 = this._controller,
        t2 = H._instanceType(t1);
      if (type == null)
        return new P._BroadcastStream(t1, t2._eval$1("_BroadcastStream<1>"));
      else {
        t2 = t2._eval$1("_BroadcastStream<1>");
        return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.MessageBus_onEvent_closure(type)), new P._BroadcastStream(t1, t2), t2._eval$1("_WhereStream<Stream.T>"));
      }
    },
    onEvent$0: function() {
      return this.onEvent$1$type(null);
    },
    set$_controller: function(_controller) {
      this._controller = type$.StreamController_BusEvent._as(_controller);
    }
  };
  A.MessageBus_onEvent_closure.prototype = {
    call$1: function($event) {
      return type$.BusEvent._as($event).type === this.type;
    },
    $signature: 59
  };
  F._breakpointComparator_getRef.prototype = {
    call$1: function($location) {
      if ($location instanceof Q.SourceLocation)
        return $location.script;
      else if ($location instanceof Q.UnresolvedSourceLocation)
        return $location.script;
      else
        return null;
    },
    $signature: 213
  };
  F._breakpointComparator_getPos.prototype = {
    call$1: function($location) {
      var t1;
      if ($location instanceof Q.SourceLocation) {
        t1 = $location.tokenPos;
        return t1 == null ? 0 : t1;
      } else if ($location instanceof Q.UnresolvedSourceLocation) {
        t1 = $location.line;
        return t1 == null ? 0 : t1;
      } else
        return 0;
    },
    $signature: 76
  };
  F.BreakpointsView.prototype = {
    BreakpointsView$3: function(_breakpointsCountDiv, debuggerState, uriDescriber) {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint),
        t2 = type$._AsyncBroadcastStreamController_Breakpoint;
      t1 = new G.HtmlSelectableList(t1, new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)), type$.HtmlSelectableList_Breakpoint);
      t1.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t1.flex$0(0);
      t1.clazz$1("menu-item-bottom-border");
      t1.clazz$1("debugger-items-list");
      this.set$_breakpoints_view$_items(t1);
      t1 = this._breakpoints_view$_items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new F.BreakpointsView_closure(uriDescriber, debuggerState)));
    },
    get$element: function() {
      return this._breakpoints_view$_items;
    },
    showBreakpoints$1: function(breakpoints) {
      var t1;
      breakpoints = J.toList$0$ax(type$.List_Breakpoint._as(breakpoints));
      C.JSArray_methods.sort$1(breakpoints, F.breakpoints_view___breakpointComparator$closure());
      this._breakpoints_view$_items.setItems$1(breakpoints);
      t1 = C.JSInt_methods.toString$0(breakpoints.length);
      this._breakpoints_view$_breakpointsCountDiv.element.textContent = t1;
    },
    set$_breakpoints_view$_items: function(_items) {
      this._breakpoints_view$_items = type$.HtmlSelectableList_Breakpoint._as(_items);
    },
    $isCoreElementView: 1
  };
  F.BreakpointsView_closure.prototype = {
    call$1: function(breakpoint) {
      var $location, element, t1, _null = null;
      type$.Breakpoint._as(breakpoint);
      $location = breakpoint.location;
      element = A.CoreElement$("li", _null, "list-item", _null, _null);
      if ($location instanceof Q.UnresolvedSourceLocation) {
        element.element.textContent = H._asStringS(this.uriDescriber.call$1($location.script.get$uri()));
        element.add$1(0, A.CoreElement$("span", _null, "subtle", _null, " line " + H.S($location.line)));
      } else if ($location instanceof Q.SourceLocation) {
        element.element.textContent = H._asStringS(this.uriDescriber.call$1($location.script.get$uri()));
        t1 = this.debuggerState;
        t1.getScript$1($location.script).then$1$1(new F.BreakpointsView__closure(t1, $location, element), type$.Null);
      }
      if (!H.boolConversionCheck(breakpoint.resolved))
        element.add$1(0, A.CoreElement$("span", _null, "subtle", _null, " (unresolved)"));
      return element;
    },
    $signature: 145
  };
  F.BreakpointsView__closure.prototype = {
    call$1: function(script) {
      this.element.add$1(0, A.CoreElement$("span", null, "subtle", null, " line " + H.S(this.debuggerState.calculatePosition$2(type$.Script._as(script), this.location.tokenPos).line)));
    },
    $signature: 161
  };
  F.BreakOnExceptionControl.prototype = {
    BreakOnExceptionControl$0: function() {
      var t2, allExceptionsElement, t3, t4, t5, t6, t7, t8, _this = this, _null = null,
        _s8_ = "checkbox",
        _s4_ = "span",
        unhandledExceptionsElement = A.CoreElement$("input", _null, _null, _null, _null),
        t1 = unhandledExceptionsElement.element;
      t1.setAttribute("type", _s8_);
      t2 = type$.InputElement;
      t2._as(t1);
      _this._unhandledElement = t1;
      allExceptionsElement = A.CoreElement$("input", _null, _null, _null, _null);
      t3 = allExceptionsElement.element;
      t3.setAttribute("type", _s8_);
      t2._as(t3);
      _this._allElement = t3;
      t2 = A.CoreElement$(_s4_, _null, "strong", _null, "Break on");
      t4 = A.CoreElement$(_s4_, _null, "strong optional-1000", _null, " exceptions");
      t5 = A.CoreElement$(_s4_, _null, "strong", _null, ": ");
      t6 = A.CoreElement$("label", _null, _null, _null, _null);
      t7 = type$.JSArray_CoreElement;
      t6.add$1(0, H.setRuntimeTypeInfo([unhandledExceptionsElement, A.CoreElement$(_s4_, _null, _null, _null, " unhandled")], t7));
      t8 = A.CoreElement$("label", _null, _null, _null, _null);
      t8.add$1(0, H.setRuntimeTypeInfo([allExceptionsElement, A.CoreElement$(_s4_, _null, _null, _null, " all")], t7));
      _this.add$1(0, H.setRuntimeTypeInfo([t2, t4, t5, t6, t8], t7));
      t1 = C.InputElement_methods.get$onChange(t1);
      t7 = t1.$ti;
      t8 = t7._eval$1("~(1)")._as(new F.BreakOnExceptionControl_closure(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1._target, t1._eventType, t8, false, t7._precomputed1);
      t3 = C.InputElement_methods.get$onChange(t3);
      t7 = t3.$ti;
      W._EventStreamSubscription$(t3._target, t3._eventType, t7._eval$1("~(1)")._as(new F.BreakOnExceptionControl_closure0(_this, unhandledExceptionsElement)), false, t7._precomputed1);
    },
    get$exceptionPauseMode: function() {
      if (H.boolConversionCheck(this._allElement.checked))
        return "All";
      else if (H.boolConversionCheck(this._unhandledElement.checked))
        return "Unhandled";
      else
        return "None";
    },
    set$exceptionPauseMode: function(value) {
      var t1, _this = this;
      if (value === "All") {
        _this._allElement.checked = true;
        _this._unhandledElement.checked = true;
        _this._unhandledElement.setAttribute("disabled", "");
      } else {
        t1 = _this._allElement;
        if (value === "Unhandled") {
          t1.checked = false;
          _this._unhandledElement.checked = true;
          _this._unhandledElement.removeAttribute("disabled");
        } else {
          t1.checked = false;
          _this._unhandledElement.checked = false;
          _this._unhandledElement.removeAttribute("disabled");
        }
      }
    }
  };
  F.BreakOnExceptionControl_closure.prototype = {
    call$1: function(_) {
      var t1;
      F.select("debugger", "unhandledExceptions", 0);
      t1 = this.$this;
      t1._pauseModeController.add$1(0, t1.get$exceptionPauseMode());
    },
    $signature: 3
  };
  F.BreakOnExceptionControl_closure0.prototype = {
    call$1: function(_) {
      var t1, t2,
        _s8_ = "disabled";
      F.select("debugger", "allExceptions", 0);
      t1 = this.$this;
      t2 = this.unhandledExceptionsElement;
      if (H.boolConversionCheck(t1._allElement.checked)) {
        t2.attribute$2(_s8_, true);
        t1._unhandledElement.checked = true;
      } else
        t2.attribute$2(_s8_, false);
      t1._pauseModeController.add$1(0, t1.get$exceptionPauseMode());
    },
    $signature: 3
  };
  S.CallStackView.prototype = {
    CallStackView$0: function() {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_Frame),
        t2 = type$._AsyncBroadcastStreamController_Frame;
      t1 = new G.HtmlSelectableList(t1, new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)), type$.HtmlSelectableList_Frame);
      t1.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t1.flex$0(0);
      t1.clazz$1("menu-item-bottom-border");
      t1.clazz$1("debugger-items-list");
      this.set$_callstack_view$_items(t1);
      t1 = this._callstack_view$_items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new S.CallStackView_closure()));
    },
    get$element: function() {
      return this._callstack_view$_items;
    },
    set$_callstack_view$_items: function(_items) {
      this._callstack_view$_items = type$.HtmlSelectableList_Frame._as(_items);
    },
    $isCoreElementView: 1
  };
  S.CallStackView_closure.prototype = {
    call$1: function(frame) {
      var t1, $name, locationDescription, element, _null = null,
        _s21_ = "AsyncSuspensionMarker",
        _s16_ = "EmptyStackMarker";
      type$.Frame._as(frame);
      t1 = frame.code;
      $name = t1 == null ? _null : t1.get$name(t1);
      if ($name == null)
        $name = "<none>";
      if (C.JSString_methods.startsWith$1($name, "[Unoptimized] "))
        $name = C.JSString_methods.substring$1($name, 14);
      $name = H.stringReplaceAllUnchecked($name, "<anonymous closure>", "<closure>");
      t1 = frame.kind;
      if (t1 === _s21_) {
        locationDescription = _null;
        $name = "<async break>";
      } else if (t1 !== _s16_) {
        locationDescription = frame.location.script.get$uri();
        if (J.getInterceptor$asx(locationDescription).contains$1(locationDescription, "/"))
          locationDescription = C.JSString_methods.substring$1(locationDescription, C.JSString_methods.lastIndexOf$1(locationDescription, "/") + 1);
      } else
        locationDescription = _null;
      element = A.CoreElement$("li", _null, "list-item", _null, $name);
      t1 = frame.kind;
      if (t1 === _s21_ || t1 === _s16_)
        J.get$classes$x(element.element).toggle$2(0, "subtle", _null);
      if (locationDescription != null)
        element.add$1(0, A.CoreElement$("span", _null, "subtle", _null, " " + locationDescription));
      return element;
    },
    $signature: 193
  };
  O.ConsoleArea.prototype = {
    get$element: function() {
      return this._console_area$_container;
    },
    clear$0: function(_) {
      var t1;
      this._editor.getDoc$0().jsProxy.callMethod$2("setValue", [""]);
      t1 = new O.AnsiUp();
      t1._setupPalettes$0();
      t1.bold = false;
      this._ansiUp = t1;
    },
    appendText$1: function(_, text) {
      var t1, t2, t3, t4;
      this._bufferedText._contents += text;
      t1 = this._timer;
      t1.set$_closure(type$.void_Function._as(new O.ConsoleArea_appendText_closure(this)));
      t2 = t1._minTimer;
      t3 = t1.get$_fire();
      t4 = t1.minDelay;
      if (t2 == null) {
        t1._minTimer = P.Timer_Timer(t4, t3);
        t1._maxTimer = P.Timer_Timer(t1.maxDelay, t3);
      } else {
        t2.cancel$0(0);
        t1._minTimer = P.Timer_Timer(t4, t3);
      }
    },
    _documentEnd$0: function() {
      var t1 = this._editor.getDoc$0().jsProxy,
        lastLine = H._asIntS(t1.callMethod$1("lastLine"));
      return new X.Position(lastLine, H._asStringS(t1.callMethod$2("getLine", [lastLine])).length);
    },
    _append$1: function(text) {
      var chunks, doc, t7, t8, t9, t10, t11, t12, lastLine, t13, style, lastLine0, options, documentEnd, _this = this,
        _s8_ = "lastLine",
        t1 = type$.JsObject,
        t2 = t1._as(_this._editor.jsProxy.callMethod$1("getScrollInfo")),
        t3 = type$.String,
        t4 = type$.JsEventListener_dynamic,
        t5 = H._asNumS(t2.$index(0, "top")),
        t6 = H._asNumS(t2.$index(0, "clientHeight"));
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t2 = H._asNumS(t2.$index(0, "height"));
      if (typeof t2 !== "number")
        return H.iae(t2);
      chunks = O.decodeAnsiColorEscapeCodes(text, _this._ansiUp);
      doc = _this._editor.getDoc$0();
      for (t7 = new P._SyncStarIterator(chunks._outerHelper(), chunks.$ti._eval$1("_SyncStarIterator<1>")), t8 = type$.int, t9 = type$.dynamic; t7.moveNext$0();) {
        t10 = t7.get$current(t7);
        t11 = _this._editor;
        t12 = t11._doc;
        t11 = (t12 == null ? t11._doc = new X.Doc(t1._as(t11.jsProxy.callMethod$1("getDoc")), P.LinkedHashMap_LinkedHashMap$_empty(t3, t4)) : t12).jsProxy;
        lastLine = H._asIntS(t11.callMethod$1(_s8_));
        t11 = H._asStringS(t11.callMethod$2("getLine", [lastLine])).length;
        t12 = t10.text;
        doc.toString;
        t13 = P.LinkedHashMap_LinkedHashMap$_literal(["line", lastLine, "ch", t11], t3, t8);
        t13 = t1._as(P._wrapToDart(P.JsObject__convertDataTree(t13)));
        t12 = [t12, t13, null];
        t13 = doc.jsProxy;
        t13.callMethod$2("replaceRange", t12);
        style = t10.get$style(t10);
        t10 = _this._editor;
        t12 = t10._doc;
        t10 = (t12 == null ? t10._doc = new X.Doc(t1._as(t10.jsProxy.callMethod$1("getDoc")), P.LinkedHashMap_LinkedHashMap$_empty(t3, t4)) : t12).jsProxy;
        lastLine0 = H._asIntS(t10.callMethod$1(_s8_));
        t10 = H._asStringS(t10.callMethod$2("getLine", [lastLine0])).length;
        options = P.LinkedHashMap_LinkedHashMap$_empty(t3, t9);
        options.$indexSet(0, "css", style);
        t11 = P.LinkedHashMap_LinkedHashMap$_literal(["line", lastLine, "ch", t11], t3, t8);
        t11 = t1._as(P._wrapToDart(P.JsObject__convertDataTree(t11)));
        t10 = P.LinkedHashMap_LinkedHashMap$_literal(["line", lastLine0, "ch", t10], t3, t8);
        t10 = t1._as(P._wrapToDart(P.JsObject__convertDataTree(t10)));
        t1._as(t13.callMethod$2("markText", [t11, t10, t1._as(P._wrapToDart(P.JsObject__convertDataTree(options)))]));
      }
      if (t5 + t6 >= t2) {
        documentEnd = _this._documentEnd$0();
        _this._editor.scrollIntoView$2(0, documentEnd.line, documentEnd.ch);
      }
    },
    styledContents$0: function() {
      var _i, mark, positions, css, start, end, line, t3, text, col, position, startTag, endTag,
        doc = this._editor.getDoc$0(),
        marks = doc.getAllMarks$0(),
        t1 = type$.Position,
        t2 = type$.StringBuffer,
        startTags = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
        endTags = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      for (t1 = marks.length, _i = 0; _i < marks.length; marks.length === t1 || (0, H.throwConcurrentModificationError)(marks), ++_i) {
        mark = marks[_i];
        positions = J.find$0$z(mark);
        css = H._asStringS(mark.jsProxy.$index(0, "css"));
        if (css == null || css.length === 0)
          continue;
        start = (positions && C.JSArray_methods).get$first(positions);
        end = C.JSArray_methods.get$last(positions);
        if (start.line != null && start.ch != null)
          startTags.putIfAbsent$2(0, start, new O.ConsoleArea_styledContents_closure())._contents += "<span style='" + H.S(css) + "'>";
        if (end.line != null && end.ch != null)
          endTags.putIfAbsent$2(0, end, new O.ConsoleArea_styledContents_closure0())._contents += "</span>";
      }
      t1 = doc.jsProxy;
      line = 0;
      t2 = "";
      while (true) {
        t3 = H._asIntS(t1.callMethod$1("lastLine"));
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(line < t3))
          break;
        text = H._asStringS(t1.callMethod$2("getLine", [line]));
        for (t3 = text.length, col = 0; col < t3; ++col) {
          position = new X.Position(line, col);
          startTag = startTags.$index(0, position);
          if (startTag != null)
            t2 += startTag.toString$0(0);
          t2 += text[col];
          endTag = endTags.$index(0, position);
          if (endTag != null)
            t2 += endTag.toString$0(0);
        }
        t2 += "\n";
        ++line;
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    $isCoreElementView: 1
  };
  O.ConsoleArea_appendText_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._bufferedText,
        t3 = t2._contents;
      t2._contents = "";
      t1._append$1(t3.charCodeAt(0) == 0 ? t3 : t3);
    },
    $signature: 0
  };
  O.ConsoleArea_styledContents_closure.prototype = {
    call$0: function() {
      return new P.StringBuffer("");
    },
    $signature: 77
  };
  O.ConsoleArea_styledContents_closure0.prototype = {
    call$0: function() {
      return new P.StringBuffer("");
    },
    $signature: 77
  };
  S.DebuggerState.prototype = {
    get$supportsStepping: function() {
      var t1 = this._supportsStepping;
      if (t1 == null) {
        t1 = new S.DebuggerState_supportsStepping_closure(this).call$0();
        this.set$_supportsStepping(t1);
      }
      return t1;
    },
    switchToIsolate$1: function(ref) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5, t6, result;
      var $async$switchToIsolate$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.isolateRef = ref;
              t1 = $async$self._debugger_state$_isPaused;
              t1.set$value(0, false);
              $async$self._scriptCache.clear$0(0);
              $async$self._reportedException = $async$self.lastEvent = null;
              if (ref == null) {
                $async$self._breakpoints.set$value(0, H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint));
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self._service;
              t3 = $async$self.isolateRef;
              t3 = t3.get$id(t3);
              t4 = t2._vmService;
              t4.toString;
              t5 = type$.dynamic;
              t6 = type$.Isolate;
              $async$goto = 3;
              return P._asyncAwait(t2._trackFuture$1$2("getIsolate", t4._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t3], t5, t5), t6), t6), $async$switchToIsolate$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (result instanceof Q.Isolate) {
                t2 = result.pauseEvent;
                if (t2 != null && t2.kind !== "Resume") {
                  $async$self.lastEvent = t2;
                  $async$self._reportedException = t2.exception;
                  t1.set$value(0, true);
                }
                $async$self._breakpoints.set$value(0, result.breakpoints);
                $async$self._exceptionPauseMode.set$value(0, result.exceptionPauseMode);
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$switchToIsolate$1, $async$completer);
    },
    stepOver$0: function() {
      var t1, t2, t3;
      F.select("debugger", "stepOver", 0);
      t1 = this.lastEvent;
      t1 = t1 == null ? null : t1.atAsyncSuspension;
      t2 = this._service;
      t3 = this.isolateRef;
      t3 = t3.get$id(t3);
      return t2.resume$2$step(0, t3, t1 === true ? "OverAsyncSuspension" : "Over");
    },
    clearBreakpoints$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$clearBreakpoints$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(P.Future_forEach(J.toList$0$ax($async$self._breakpoints._value), new S.DebuggerState_clearBreakpoints_closure($async$self), type$.Breakpoint), $async$clearBreakpoints$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$clearBreakpoints$0, $async$completer);
    },
    addBreakpointByPathFragment$2: function(path, line) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t2, t1, ref;
      var $async$addBreakpointByPathFragment$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.scripts;
              ref = (t1 && C.JSArray_methods).firstWhere$2$orElse(t1, new S.DebuggerState_addBreakpointByPathFragment_closure(path), new S.DebuggerState_addBreakpointByPathFragment_closure0());
              if (ref != null) {
                t1 = $async$self._service;
                t2 = $async$self.isolateRef;
                $async$returnValue = t1.addBreakpoint$3(t2.get$id(t2), ref.get$id(ref), line);
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$addBreakpointByPathFragment$2, $async$completer);
    },
    removeBreakpoint$1: function(breakpoint) {
      var t3, t4, t5, t6,
        _s16_ = "removeBreakpoint",
        t1 = this._service,
        t2 = this.isolateRef;
      t2 = t2.get$id(t2);
      t3 = breakpoint.id;
      t4 = t1._vmService;
      t4.toString;
      t5 = type$.dynamic;
      t6 = type$.Success;
      return t1._trackFuture$1$2(_s16_, t4._call$1$2(0, _s16_, P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2, "breakpointId", t3], t5, t5), t6), t6);
    },
    getStack$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Stack),
        $async$returnValue, $async$self = this, t3, t4, t5, stack, t1, t2;
      var $async$getStack$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._service;
              t2 = $async$self.isolateRef;
              t2 = t2.get$id(t2);
              t3 = t1._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Stack;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getStack", t3._call$1$2(0, "getStack", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5), $async$getStack$0);
            case 3:
              // returning from await.
              stack = $async$result;
              $async$returnValue = stack;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getStack$0, $async$completer);
    },
    _debugger_state$_handleIsolateEvent$1: function($event) {
      var t1, t2, t3, t4, _this = this;
      type$.Event_2._as($event);
      t1 = $event.isolate;
      t1 = t1.get$id(t1);
      t2 = _this.isolateRef;
      if (t1 != t2.get$id(t2))
        return;
      _this._hasFrames.set$value(0, $event.topFrame != null);
      _this.lastEvent = $event;
      switch ($event.kind) {
        case "Resume":
          _this._debugger_state$_isPaused.set$value(0, false);
          _this._reportedException = null;
          break;
        case "PauseStart":
        case "PauseExit":
        case "PauseBreakpoint":
        case "PauseInterrupted":
        case "PauseException":
        case "PausePostRequest":
          _this._reportedException = $event.exception;
          _this._debugger_state$_isPaused.set$value(0, true);
          break;
        case "BreakpointAdded":
          t1 = _this._breakpoints;
          t2 = H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
          for (t3 = J.get$iterator$ax(t1._value); t3.moveNext$0();)
            C.JSArray_methods.add$1(t2, t3.get$current(t3));
          C.JSArray_methods.add$1(t2, $event.breakpoint);
          t1.set$value(0, t2);
          break;
        case "BreakpointResolved":
          t1 = _this._breakpoints;
          t2 = H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
          for (t3 = J.get$iterator$ax(t1._value); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            if (!J.$eq$(t4, $event.breakpoint))
              C.JSArray_methods.add$1(t2, t4);
          }
          C.JSArray_methods.add$1(t2, $event.breakpoint);
          t1.set$value(0, t2);
          break;
        case "BreakpointRemoved":
          t1 = _this._breakpoints;
          t2 = H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
          for (t3 = J.get$iterator$ax(t1._value); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            if (!J.$eq$(t4, $event.breakpoint))
              C.JSArray_methods.add$1(t2, t4);
          }
          t1.set$value(0, t2);
          break;
      }
    },
    getScript$1: function(scriptRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Script),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$getScript$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._scriptCache;
              $async$goto = !t1.containsKey$1(0, scriptRef.get$id(scriptRef)) ? 3 : 4;
              break;
            case 3:
              // then
              t2 = scriptRef.get$id(scriptRef);
              t3 = $async$self._service;
              t4 = $async$self.isolateRef;
              t4 = t4.get$id(t4);
              t5 = scriptRef.get$id(scriptRef);
              $async$temp1 = t1;
              $async$temp2 = t2;
              $async$temp3 = type$.Script;
              $async$goto = 5;
              return P._asyncAwait(t3._trackFuture$1$2("getObject", t3._vmService.getObject$2(0, t4, t5), type$.Obj), $async$getScript$1);
            case 5:
              // returning from await.
              $async$temp1.$indexSet(0, $async$temp2, $async$temp3._as($async$result));
            case 4:
              // join
              $async$returnValue = t1.$index(0, scriptRef.get$id(scriptRef));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getScript$1, $async$completer);
    },
    calculatePosition$2: function(script, tokenPos) {
      var t1, _i, row, t2, line, index, t3,
        table = script.tokenPosTable;
      if (table == null)
        return null;
      for (t1 = table.length, _i = 0; _i < table.length; table.length === t1 || (0, H.throwConcurrentModificationError)(table), ++_i) {
        row = table[_i];
        if (row == null || J.get$isEmpty$asx(row))
          continue;
        t2 = J.getInterceptor$ax(row);
        line = t2.elementAt$1(row, 0);
        index = 1;
        while (true) {
          t3 = t2.get$length(row);
          if (typeof t3 !== "number")
            return t3.$sub();
          if (!(index < t3 - 1))
            break;
          if (J.$eq$(t2.elementAt$1(row, index), tokenPos))
            return new R.SourcePosition(line, t2.elementAt$1(row, index + 1));
          index += 2;
        }
      }
      return null;
    },
    getShortScriptName$1: function(uri) {
      var t1 = this.commonScriptPrefix;
      if (t1 == null)
        return uri;
      if (!J.getInterceptor$s(uri).startsWith$1(uri, t1))
        return uri;
      if (C.JSString_methods.startsWith$1(t1, "package:"))
        return C.JSString_methods.substring$1(uri, 8);
      else
        return C.JSString_methods.substring$1(uri, t1.length);
    },
    set$_debugSubscription: function(_debugSubscription) {
      this._debugSubscription = type$.StreamSubscription_Event._as(_debugSubscription);
    },
    set$scripts: function(scripts) {
      this.scripts = type$.List_ScriptRef._as(scripts);
    },
    set$_supportsStepping: function(_supportsStepping) {
      this._supportsStepping = type$.ValueNotifier_bool._as(_supportsStepping);
    }
  };
  S.DebuggerState_supportsStepping_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._debugger_state$_isPaused,
        t3 = H.boolConversionCheck(t2._value) && H.boolConversionCheck(t1._hasFrames._value),
        notifier = new U.ValueNotifier(t3, H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function), type$.ValueNotifier_bool);
      t3 = type$.void_Function._as(new S.DebuggerState_supportsStepping_closure_update(t1, notifier));
      C.JSArray_methods.add$1(t2._listeners, t3);
      C.JSArray_methods.add$1(t1._hasFrames._listeners, t3);
      return notifier;
    },
    $signature: 303
  };
  S.DebuggerState_supportsStepping_closure_update.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1 = H.boolConversionCheck(t1._debugger_state$_isPaused._value) && H.boolConversionCheck(t1._hasFrames._value);
      this.notifier.set$value(0, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  S.DebuggerState_clearBreakpoints_closure.prototype = {
    call$1: function(breakpoint) {
      return this.$this.removeBreakpoint$1(type$.Breakpoint._as(breakpoint));
    },
    $signature: 320
  };
  S.DebuggerState_addBreakpointByPathFragment_closure.prototype = {
    call$1: function(ref) {
      return J.endsWith$1$s(type$.ScriptRef._as(ref).get$uri(), this.path);
    },
    $signature: 69
  };
  S.DebuggerState_addBreakpointByPathFragment_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  R.HtmlDebuggerScreen.prototype = {
    debuggerShortcuts$4: function(ctrlKey, shiftKey, altKey, key) {
      var t1, t2, t3, sourceAreaWidth, t4, t5, t6, r, nameHeight, elems, firstGutter, leftPosition, bgColor, _this = this, _s6_ = "inline";
      if (H.boolConversionCheck(ctrlKey))
        switch (key) {
          case "o":
            t1 = _this._matcher;
            if (t1 != null && t1._keyEventSubscription != null) {
              t1.revert$0();
              t1 = t1._finishCallback;
              if (t1 != null)
                t1.call$0();
              _this._matcher = null;
            }
            t1 = _this._popupView.element.style;
            t1.display = _s6_;
            t1 = _this._popupView;
            t2 = t1._poppedUp;
            t3 = t1._scriptsView;
            if (!t2) {
              t1._poppedUp = true;
              t1.add$1(0, t3);
              t2 = t1._html_scripts_view$_sourceArea.element;
              sourceAreaWidth = t2.clientWidth;
              t4 = t3._html_scripts_view$_items.element.style;
              t5 = t1.element;
              t6 = t5.getBoundingClientRect().height;
              if (typeof t6 !== "number")
                return t6.$sub();
              t6 = H.S(t6 - 2) + "px";
              t4.height = t6;
              if (typeof sourceAreaWidth !== "number")
                return sourceAreaWidth.$div();
              t6 = H.S(sourceAreaWidth / 2) + "px";
              t4.width = t6;
              r = t2.getBoundingClientRect();
              t2 = t1._html_scripts_view$_sourcePathDiv.element;
              nameHeight = t2.clientHeight;
              elems = document.getElementsByClassName("CodeMirror-gutters");
              t4 = elems.length;
              if (t4 === 2) {
                if (0 >= t4)
                  return H.ioore(elems, 0);
                firstGutter = type$.Element._as(elems[0].firstChild);
                if (firstGutter.style.display !== "none") {
                  t4 = firstGutter.parentElement.getBoundingClientRect().width;
                  if (typeof t4 !== "number")
                    return t4.$add();
                  leftPosition = H._asIntS(t4 + 5);
                } else
                  leftPosition = 20;
              } else
                leftPosition = 20;
              t4 = J.getInterceptor$x(t2);
              bgColor = t4.getComputedStyle$0(t2).backgroundColor;
              t1._oldSourceNameTextColor = t4.getComputedStyle$0(t2).color;
              t2 = t2.style;
              t2.color = bgColor;
              t1 = t1._html_scripts_view$_popupTextfield.element.style;
              t2 = H.S(nameHeight) + "px";
              t1.height = t2;
              t2 = H.S(nameHeight) + "px";
              t1.minHeight = t2;
              t2 = H.S(nameHeight) + "px";
              t1.maxHeight = t2;
              t2 = t3._html_scripts_view$_items.element.style.width;
              t1.width = t2;
              t2 = H.S(r.top) + "px";
              t1.top = t2;
              t2 = r.left;
              if (typeof t2 !== "number")
                return t2.$add();
              t2 = H.S(t2 + leftPosition) + "px";
              t1.left = t2;
              t1.display = _s6_;
              t1 = t5.style;
              t2 = r.top;
              if (typeof t2 !== "number")
                return t2.$add();
              if (typeof nameHeight !== "number")
                return H.iae(nameHeight);
              t2 = H.S(t2 + nameHeight) + "px";
              t1.top = t2;
              t2 = r.left;
              if (typeof t2 !== "number")
                return t2.$add();
              t2 = H.S(t2 + leftPosition) + "px";
              t1.left = t2;
              t1.display = _s6_;
              _this._hookupListeners$1(_this._popupView._scriptsView);
            } else {
              t1 = t3._html_scripts_view$_items;
              t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
              t1 = _this._popupView._scriptsView._html_scripts_view$_items.element.style;
              t1.display = _s6_;
            }
            J.focus$0$x(_this._popupView._html_scripts_view$_popupTextfield.element);
            F.select("debugger", "openShortcut", 0);
            return true;
        }
      return false;
    },
    createContent$1: function(framework) {
      var screenDiv, t2, resumeButton, pauseButton, t3, t4, t5, t6, breakOnExceptionControl, options, t7, t8, t9, t10, t11, stepIn, stepOver, stepOut, t12, _this = this, _null = null, _s3_ = "div", _s6_ = "layout",
        _s8_ = "vertical",
        _s10_ = "horizontal",
        _s20_ = "section table-border",
        t1 = {};
      E.setupDimensions();
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null);
      t2 = screenDiv.element;
      t2.setAttribute(_s6_, "");
      t2.setAttribute(_s8_, "");
      resumeButton = N.PButton$icon("Resume", C.UrlIcon_JmU, _null);
      resumeButton.clazz$1("btn-primary");
      resumeButton.clazz$1("btn-sm");
      resumeButton.clazz$1("margin-left");
      resumeButton.attribute$2("disabled", true);
      pauseButton = N.PButton$icon("Pause", C.UrlIcon_lyL, _null);
      pauseButton.clazz$1("btn-sm");
      t2 = new R.HtmlDebuggerScreen_createContent__updateResumeButton(resumeButton);
      t3 = new R.HtmlDebuggerScreen_createContent__updatePauseButton(pauseButton);
      resumeButton.click$1(0, new R.HtmlDebuggerScreen_createContent_closure(_this, t2));
      pauseButton.click$1(0, new R.HtmlDebuggerScreen_createContent_closure0(_this, t3));
      t4 = _this.debuggerState;
      t5 = t4._debugger_state$_isPaused;
      t3.call$1$disabled(t5._value);
      t2.call$1$disabled(!H.boolConversionCheck(t5._value));
      t6 = type$.void_Function;
      t5 = t5._listeners;
      C.JSArray_methods.add$1(t5, t6._as(new R.HtmlDebuggerScreen_createContent_closure1(_this, t3, t2)));
      t1.stepOut = t1.stepIn = t1.stepOver = null;
      breakOnExceptionControl = F.BreakOnExceptionControl$();
      t2 = breakOnExceptionControl._pauseModeController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlDebuggerScreen_createContent_closure2(_this));
      t2 = t4._exceptionPauseMode;
      breakOnExceptionControl.set$exceptionPauseMode(t2._value);
      C.JSArray_methods.add$1(t2._listeners, t6._as(new R.HtmlDebuggerScreen_createContent_closure3(_this, breakOnExceptionControl)));
      t2 = new O.AnsiUp();
      t2._setupPalettes$0();
      t2.bold = false;
      t2 = new O.ConsoleArea(new B.DelayedTimer(C.Duration_100000, C.Duration_1000000), new P.StringBuffer(""), t2);
      options = P.LinkedHashMap_LinkedHashMap$_literal(["mode", "text/plain"], type$.String, type$.dynamic);
      t3 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t7 = t3.element;
      t7.setAttribute(_s6_, "");
      t7.setAttribute(_s8_, "");
      t3.flex$0(0);
      t2._console_area$_container = t3;
      t3 = t2._editor = X.CodeMirror$fromElement(t7, options);
      t3.setReadOnly$1(true);
      t3.jsProxy.callMethod$2("setOption", ["theme", "darcula"]);
      J.get$children$x(t7).$index(0, 0).setAttribute("flex", "");
      _this.consoleArea = t2;
      t2 = A.CoreElement$("input", _null, "form-control input-sm popup-textfield", _null, _null);
      t3 = t2.element;
      t3.setAttribute("type", "text");
      t3.setAttribute("placeholder", "search");
      t3.setAttribute("id", "popup_script_name");
      t2.focus$1(0, new R.HtmlDebuggerScreen_createContent_closure4(_this));
      t2.blur$1(0, new R.HtmlDebuggerScreen_createContent_closure5(_this));
      t3 = J.get$onKeyUp$x(t3);
      t7 = t3.$ti;
      t8 = t7._eval$1("~(1)")._as(new R.HtmlDebuggerScreen_createContent_closure6(_this));
      t6._as(null);
      W._EventStreamSubscription$(t3._target, t3._eventType, t8, false, t7._precomputed1);
      _this._popupTextfield = t2;
      t2 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t2.flex$0(0);
      t7 = t2.element;
      t7.setAttribute(_s6_, "");
      t7.setAttribute(_s10_, "");
      t7 = A.CoreElement$(_s3_, _null, "debugger-menu", _null, _null);
      t8 = t7.element;
      t8.setAttribute(_s6_, "");
      t8.setAttribute(_s8_, "");
      t8 = type$.JSArray_CoreElement;
      t7.add$1(0, H.setRuntimeTypeInfo([_this._buildMenuNav$0()], t8));
      t3 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t9 = t3.element;
      t10 = t9.style;
      t10.toString;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t10, C.CssStyleDeclaration_methods._browserPropertyName$1(t10, "overflow-x"), "hidden", "");
      t9.setAttribute(_s6_, "");
      t9.setAttribute(_s8_, "");
      t9 = A.CoreElement$(_s3_, _null, "section flex-wrap", _null, _null);
      t10 = t9.element;
      t10.setAttribute(_s6_, "");
      t10.setAttribute(_s10_, "");
      t10 = A.CoreElement$(_s3_, _null, "btn-group collapsible-785 flex-no-wrap", _null, _null);
      t10.add$1(0, H.setRuntimeTypeInfo([pauseButton, resumeButton], t8));
      t11 = A.CoreElement$(_s3_, _null, "btn-group flex-no-wrap margin-left collapsible-1000", _null, _null);
      stepIn = N.PButton$octicon("Step in", "chevron-down");
      t1.stepIn = stepIn;
      stepOver = N.PButton$octicon("Step over", "chevron-right");
      t1.stepOver = stepOver;
      stepOut = N.PButton$octicon("Step out", "chevron-up");
      t1.stepOut = stepOut;
      t11.add$1(0, H.setRuntimeTypeInfo([stepIn, stepOver, stepOut], t8));
      t12 = A.CoreElement$(_s3_, _null, "margin-right", _null, _null);
      t12.flex$0(0);
      t9.add$1(0, H.setRuntimeTypeInfo([t10, t11, t12, breakOnExceptionControl], t8));
      t12 = A.CoreElement$(_s3_, _null, _s20_, _null, _null);
      t11 = t12.element;
      t11.setAttribute(_s6_, "");
      t11.setAttribute(_s8_, "");
      t11 = A.CoreElement$(_s3_, _null, "source-head", _null, _null);
      _this._sourcePathDiv = t11;
      t12.add$1(0, H.setRuntimeTypeInfo([t11], t8));
      _this._sourceArea = t12;
      t11 = A.CoreElement$(_s3_, _null, _s20_, _null, _null);
      t10 = t11.element;
      t10.setAttribute(_s6_, "");
      t10.setAttribute(_s8_, "");
      t11.add$1(0, _this.consoleArea._console_area$_container);
      _this._consoleDiv = t11;
      t3.add$1(0, H.setRuntimeTypeInfo([t9, t12, t11], t8));
      t3 = H.setRuntimeTypeInfo([t7, t3], t8);
      _this.set$_navEditorPanels(t3);
      t2.add$1(0, t3);
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t2], t8));
      t2 = _this._popupTextfield;
      t3 = _this.popupScriptsView;
      t3 = new N.HtmlPopupView(_this._sourceArea, _this._sourcePathDiv, t2, t3, type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t3.CoreElement$5$attributes$classes$html$text(_s3_, _null, "open-popup", _null, _null);
      _this._popupView = t3;
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t2, t3], t8));
      J.setInnerHtml$2$treeSanitizer$x(_this._sourcePathDiv.element, "&nbsp;", C.C_TrustedHtmlTreeSanitizer);
      t8 = new R.HtmlDebuggerScreen_createContent_updateStepCapabilities(t1, _this);
      t8.call$0();
      t4.get$supportsStepping().addListener$1(0, t8);
      t1.stepOver.click$1(0, new R.HtmlDebuggerScreen_createContent_closure7(_this));
      t1.stepIn.click$1(0, new R.HtmlDebuggerScreen_createContent_closure8(_this));
      t1.stepOut.click$1(0, new R.HtmlDebuggerScreen_createContent_closure9(_this));
      t1 = new R.HtmlDebuggerScreen_createContent_updateFrames(_this);
      t1.call$0();
      C.JSArray_methods.add$1(t5, t6._as(t1));
      t1 = new R.HtmlDebuggerScreen_createContent_updateStatusLine(_this);
      t1.call$0();
      C.JSArray_methods.add$1(t5, t6._as(t1));
      t1 = _this.callStackView._callstack_view$_items._selectionController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlDebuggerScreen_createContent_closure10(_this));
      _this.consoleArea._editor.jsProxy.callMethod$1("refresh");
      t1 = type$.MessageBus;
      t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("reload.start").listen$1(new R.HtmlDebuggerScreen_createContent_closure11(_this));
      t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("reload.end").listen$1(new R.HtmlDebuggerScreen_createContent_closure12(_this));
      t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("restart.start").listen$1(new R.HtmlDebuggerScreen_createContent_closure13(_this));
      t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("restart.end").listen$1(new R.HtmlDebuggerScreen_createContent_closure14(_this));
      return screenDiv;
    },
    onContentAttached$0: function() {
      var t2, t3, options, codeMirror, _this = this,
        t1 = _this._navEditorPanels;
      t1.toString;
      t2 = H._arrayInstanceType(t1);
      t2 = new H.MappedListIterable(t1, t2._eval$1("Element(1)")._as(new R.HtmlDebuggerScreen_onContentAttached_closure()), t2._eval$1("MappedListIterable<1,Element>")).toList$0(0);
      t1 = type$.JSArray_num;
      t3 = H.setRuntimeTypeInfo([22, 78], t1);
      A.flexSplit(t2, 10, true, H.setRuntimeTypeInfo([200, 600], t1), t3);
      t3 = H.setRuntimeTypeInfo([_this._sourceArea.element, _this._consoleDiv.element], type$.JSArray_Element);
      t2 = H.setRuntimeTypeInfo([80, 20], t1);
      A.flexSplit(t3, 10, false, H.setRuntimeTypeInfo([200, 60], t1), t2);
      options = P.LinkedHashMap_LinkedHashMap$_literal(["mode", "dart", "lineNumbers", true, "gutters", H.setRuntimeTypeInfo(["breakpoints"], type$.JSArray_String)], type$.String, type$.dynamic);
      codeMirror = X.CodeMirror$fromElement(_this._sourceArea.element, options);
      codeMirror.setReadOnly$1(true);
      codeMirror.jsProxy.callMethod$2("setOption", ["theme", "darcula"]);
      J.get$children$x(_this._sourcePathDiv.element.parentElement).$index(0, 1).setAttribute("flex", "");
      t1 = _this.debuggerState;
      t2 = _this.sourceEditor = R.SourceEditor$(codeMirror, t1);
      t1 = t1._breakpoints;
      t2.set$breakpoints(type$.List_Breakpoint._as(t1._value));
      t2._refreshMarkers$0();
      C.JSArray_methods.add$1(t1._listeners, type$.void_Function._as(new R.HtmlDebuggerScreen_onContentAttached_closure0(_this)));
    },
    entering$0: function() {
      var t1, t2, _this = this;
      if (!_this._initialized) {
        _this._initialized = true;
        t1 = type$.ServiceConnectionManager;
        t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionAvailableController;
        new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_handleConnectionStart());
        if (t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection())
          _this._handleConnectionStart$1(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service);
        t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolateController;
        new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_handleIsolateChanged());
        t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionClosedController;
        new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_handleConnectionStop());
      }
    },
    _hookupListeners$1: function(scriptsView) {
      var t1 = scriptsView._html_scripts_view$_items._selectionController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlDebuggerScreen__hookupListeners_closure(this, scriptsView));
    },
    _buildMenuNav$0: function() {
      var t1, t2, t3, textfield, t4, scriptCountDiv, t5, t6, t7, t8, t9, t10, t11, t12, menu, _this = this, _null = null, _s1_ = "a",
        _s9_ = "menu-item";
      _this.callStackView = S.CallStackView$();
      t1 = _this.debuggerState;
      _this.variablesView = F.HtmlVariablesView$(t1, new R.HtmlDebuggerScreen__buildMenuNav_closure(_this));
      t2 = A.CoreElement$("span", _null, "counter", _null, "0");
      _this._breakpointsCountDiv = t2;
      t3 = t1.get$getShortScriptName();
      t2 = F.BreakpointsView$(t2, t1, t3);
      _this.breakpointsView = t2;
      t2 = t2._breakpoints_view$_items._doubleClickController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlDebuggerScreen__buildMenuNav_closure0(_this));
      textfield = A.CoreElement$("input", _null, "form-control input-sm margin-left", _null, _null);
      t2 = textfield.element;
      t2.setAttribute("type", "text");
      t2.setAttribute("placeholder", "search");
      t4 = t2.style;
      t4.width = "calc(100% - 110px)";
      t2.setAttribute("id", "script_name");
      scriptCountDiv = A.CoreElement$("span", _null, "counter", _null, "-");
      t4 = scriptCountDiv.element.style;
      t4.marginTop = "4px";
      t4 = N.HtmlScriptsView$(t3);
      _this.scriptsView = t4;
      _this._hookupListeners$1(t4);
      t3 = N.HtmlScriptsView$(t3);
      _this.popupScriptsView = t3;
      _this._hookupListeners$1(t3);
      t3 = _this.scriptsView._html_scripts_view$_items._itemsChangedController;
      new P._BroadcastStream(t3, H._instanceType(t3)._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlDebuggerScreen__buildMenuNav_closure1(_this, scriptCountDiv));
      t3 = type$.Element;
      t4 = new N.PNavMenuItem(t3._as(W._ElementFactoryProvider_createElement_tag(_s1_, _null)));
      t4.CoreElement$5$attributes$classes$html$text(_s1_, _null, _s9_, _null, "Call stack");
      t4.click$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure2(_this));
      t5 = _this.callStackView._callstack_view$_items;
      t6 = new N.PNavMenuItem(t3._as(W._ElementFactoryProvider_createElement_tag(_s1_, _null)));
      t6.CoreElement$5$attributes$classes$html$text(_s1_, _null, _s9_, _null, "Variables");
      t6.click$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure3(_this));
      t7 = _this.variablesView._items;
      t8 = new N.PNavMenuItem(t3._as(W._ElementFactoryProvider_createElement_tag(_s1_, _null)));
      t8.CoreElement$5$attributes$classes$html$text(_s1_, _null, _s9_, _null, "Breakpoints");
      t8.add$1(0, _this._breakpointsCountDiv);
      t8.click$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure4(_this));
      t9 = _this.breakpointsView._breakpoints_view$_items;
      t3 = new N.PNavMenuItem(t3._as(W._ElementFactoryProvider_createElement_tag(_s1_, _null)));
      t3.CoreElement$5$attributes$classes$html$text(_s1_, _null, _s9_, _null, "Libraries");
      textfield.click$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure5(_this));
      textfield.focus$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure6(_this));
      t2 = J.get$onKeyUp$x(t2);
      t10 = t2.$ti;
      t11 = t10._eval$1("~(1)")._as(new R.HtmlDebuggerScreen__buildMenuNav_closure7(_this, textfield));
      t12 = type$.void_Function;
      t12._as(null);
      W._EventStreamSubscription$(t2._target, t2._eventType, t11, false, t10._precomputed1);
      t10 = type$.JSArray_CoreElement;
      t3.add$1(0, H.setRuntimeTypeInfo([textfield, scriptCountDiv], t10));
      t3.click$1(0, new R.HtmlDebuggerScreen__buildMenuNav_closure8(_this));
      menu = N.PNavMenu$(H.setRuntimeTypeInfo([t4, t5, t6, t7, t8, t9, t3, _this.scriptsView._html_scripts_view$_items], t10), false);
      menu.flex$0(0);
      t10 = menu.element;
      t10.setAttribute("layout", "");
      t10.setAttribute("vertical", "");
      t1 = t1._breakpoints;
      _this.breakpointsView.showBreakpoints$1(t1._value);
      C.JSArray_methods.add$1(t1._listeners, t12._as(new R.HtmlDebuggerScreen__buildMenuNav_closure9(_this)));
      return menu;
    },
    _handleConnectionStart$1: function(service) {
      var t1, t2, t3, _this = this;
      type$.VmService._as(service);
      t1 = _this.debuggerState;
      t2 = type$.ServiceConnectionManager;
      t3 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
      t1._service = t3;
      t3 = t3._vmService._getEventController$1("Debug");
      t1.set$_debugSubscription(new P._BroadcastStream(t3, H._instanceType(t3)._eval$1("_BroadcastStream<1>")).listen$1(t1.get$_debugger_state$_handleIsolateEvent()));
      service.get$onStdoutEvent().listen$1(new R.HtmlDebuggerScreen__handleConnectionStart_closure(_this));
      service.get$onStderrEvent().listen$1(new R.HtmlDebuggerScreen__handleConnectionStart_closure0(_this));
      if (t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate != null)
        _this._handleIsolateChanged$1(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate);
    },
    _handleIsolateChanged$1: function(isolateRef) {
      var t1, t2, t3, t4, t5, _this = this,
        _s10_ = "getIsolate";
      type$.IsolateRef._as(isolateRef);
      if (isolateRef == null) {
        t1 = _this.scriptsView._html_scripts_view$_items;
        t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
        _this.debuggerState.switchToIsolate$1(isolateRef);
        return;
      }
      t1 = _this.debuggerState;
      if (isolateRef.$eq(0, t1.isolateRef))
        return;
      t1.switchToIsolate$1(isolateRef);
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
      t2 = isolateRef.get$id(isolateRef);
      t3 = t1._vmService;
      t3.toString;
      t4 = type$.dynamic;
      t5 = type$.Isolate;
      t1._trackFuture$1$2(_s10_, t3._call$1$2(0, _s10_, P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5).then$1$1(new R.HtmlDebuggerScreen__handleIsolateChanged_closure(_this), type$.Null).catchError$1(new R.HtmlDebuggerScreen__handleIsolateChanged_closure0(_this));
    },
    _handleConnectionStop$1: function($event) {
      var t1;
      this.deviceStatus.element.element.textContent = "";
      t1 = this.scriptsView._html_scripts_view$_items;
      t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
      t1 = this.debuggerState;
      t1.switchToIsolate$1(null);
      t1 = t1._debugSubscription;
      if (t1 != null)
        t1.cancel$0(0);
    },
    _populateFromIsolate$2: function(isolate, scriptsViewers) {
      return this._populateFromIsolate$body$HtmlDebuggerScreen(isolate, type$.List_HtmlScriptsView._as(scriptsViewers));
    },
    _populateFromIsolate$body$HtmlDebuggerScreen: function(isolate, scriptsViewers) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, scriptPrefix, isRunning, t3, t4, t5, t6, scripts, _i, scriptsViewer, t1, t2;
      var $async$_populateFromIsolate$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.debuggerState;
              t2 = isolate.rootLib;
              t1.rootLib = t2;
              scriptPrefix = t2.get$uri();
              if (J.getInterceptor$s(scriptPrefix).startsWith$1(scriptPrefix, "package:"))
                scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.indexOf$1(scriptPrefix, "/") + 1);
              else if (C.JSString_methods.contains$1(scriptPrefix, "/lib/")) {
                scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/lib/"));
                if (C.JSString_methods.contains$1(scriptPrefix, "/"))
                  scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/") + 1);
              } else if (C.JSString_methods.contains$1(scriptPrefix, "/bin/")) {
                scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/bin/"));
                if (C.JSString_methods.contains$1(scriptPrefix, "/"))
                  scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/") + 1);
              } else if (C.JSString_methods.contains$1(scriptPrefix, "/test/")) {
                scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/test/"));
                if (C.JSString_methods.contains$1(scriptPrefix, "/"))
                  scriptPrefix = C.JSString_methods.substring$2(scriptPrefix, 0, C.JSString_methods.lastIndexOf$1(scriptPrefix, "/") + 1);
              } else
                scriptPrefix = null;
              t1.commonScriptPrefix = scriptPrefix;
              t1._breakpoints.set$value(0, isolate.breakpoints);
              t2 = isolate.pauseEvent;
              isRunning = t2 == null || t2.kind === "Resume";
              t2 = type$.ServiceConnectionManager;
              $async$goto = 4;
              return P._asyncAwait(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$serviceCapabilities(), $async$_populateFromIsolate$2);
            case 4:
              // returning from await.
              $async$goto = $async$result.get$supportsGetScripts() ? 2 : 3;
              break;
            case 2:
              // then
              t2 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t3 = isolate.id;
              t4 = t2._vmService;
              t4.toString;
              t5 = type$.dynamic;
              t6 = type$.ScriptList;
              $async$goto = 5;
              return P._asyncAwait(t2._trackFuture$1$2("getScripts", t4._call$1$2(0, "getScripts", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t3], t5, t5), t6), t6), $async$_populateFromIsolate$2);
            case 5:
              // returning from await.
              t6 = $async$result.scripts;
              scripts = H.setRuntimeTypeInfo(t6.slice(0), H.instanceType(t6));
              t1.set$scripts(scripts);
              for (_i = 0; _i < 2; ++_i) {
                scriptsViewer = scriptsViewers[_i];
                t2 = $async$self.scriptsView._matcherRendering;
                if (t2 != null) {
                  t2.revert$0();
                  t2 = t2._finishCallback;
                  if (t2 != null)
                    t2.call$0();
                }
                scriptsViewer.showScripts$4$selectRootScript(scripts, t1.rootLib.get$uri(), t1.commonScriptPrefix, isRunning);
                t2 = scriptsViewer._matcherRendering;
                if (t2 != null)
                  t2.matchingState.$indexSet(0, "", t2._scriptsView._html_scripts_view$_items.items);
              }
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_populateFromIsolate$2, $async$completer);
    },
    _displaySource$2: function(script, scriptRef) {
      var t1, t2, _this = this;
      if (script == null)
        _this.sourceEditor.displayScript$1(script);
      else {
        t1 = _this._sourcePathDiv;
        t2 = script.uri;
        t1.element.textContent = t2;
        _this.sourceEditor.displayScript$1(script);
        _this.sourceEditor.scriptRef = scriptRef;
      }
    },
    _displaySource$1: function(script) {
      return this._displaySource$2(script, null);
    },
    _retrieveFullStringValue$1: function(stringRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, t2, t3, result;
      var $async$_retrieveFullStringValue$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (stringRef.get$valueAsStringIsTruncated() !== true) {
                $async$returnValue = stringRef.get$valueAsString(stringRef);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t2 = $async$self.debuggerState.isolateRef;
              t2 = t2.get$id(t2);
              t3 = stringRef.get$id(stringRef);
              stringRef.get$length(stringRef);
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getObject", t1._vmService.getObject$2(0, t2, t3), type$.Obj), $async$_retrieveFullStringValue$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (result instanceof Q.Instance) {
                $async$returnValue = result.get$valueAsString(result);
                // goto return
                $async$goto = 1;
                break;
              } else {
                $async$returnValue = H.S(stringRef.get$valueAsString(stringRef)) + "...";
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_retrieveFullStringValue$1, $async$completer);
    },
    set$_navEditorPanels: function(_navEditorPanels) {
      this._navEditorPanels = type$.List_CoreElement._as(_navEditorPanels);
    }
  };
  R.HtmlDebuggerScreen_createContent__updateResumeButton.prototype = {
    call$1$disabled: function(disabled) {
      this.resumeButton.attribute$2("disabled", disabled);
    },
    call$0: function() {
      return this.call$1$disabled(null);
    },
    $signature: 80
  };
  R.HtmlDebuggerScreen_createContent__updatePauseButton.prototype = {
    call$1$disabled: function(disabled) {
      this.pauseButton.attribute$2("disabled", disabled);
    },
    call$0: function() {
      return this.call$1$disabled(null);
    },
    $signature: 80
  };
  R.HtmlDebuggerScreen_createContent_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("debugger", "resume", 0);
              t1 = $async$self._updateResumeButton;
              t1.call$1$disabled(true);
              t2 = $async$self.$this.debuggerState;
              t3 = t2._service;
              t2 = t2.isolateRef;
              $async$goto = 2;
              return P._asyncAwait(t3.resume$1(0, t2.get$id(t2)), $async$call$0);
            case 2:
              // returning from await.
              t1.call$1$disabled(false);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  R.HtmlDebuggerScreen_createContent_closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, t4, t5, t6;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("debugger", "pause", 0);
              t1 = $async$self._updatePauseButton;
              t1.call$1$disabled(true);
              t2 = $async$self.$this.debuggerState;
              t3 = t2._service;
              t2 = t2.isolateRef;
              t2 = t2.get$id(t2);
              t4 = t3._vmService;
              t4.toString;
              t5 = type$.dynamic;
              t6 = type$.Success;
              $async$goto = 2;
              return P._asyncAwait(t3._trackFuture$1$2("pause", t4._call$1$2(0, "pause", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t5, t5), t6), t6), $async$call$0);
            case 2:
              // returning from await.
              t1.call$1$disabled(false);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  R.HtmlDebuggerScreen_createContent_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this.debuggerState._debugger_state$_isPaused;
      this._updatePauseButton.call$1$disabled(t1._value);
      this._updateResumeButton.call$1$disabled(!H.boolConversionCheck(t1._value));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R.HtmlDebuggerScreen_createContent_closure2.prototype = {
    call$1: function(mode) {
      var t1, t2, t3, t4, t5,
        _s21_ = "setExceptionPauseMode";
      H._asStringS(mode);
      t1 = this.$this.debuggerState;
      t2 = t1._service;
      t1 = t1.isolateRef;
      t1 = t1.get$id(t1);
      t3 = t2._vmService;
      t3.toString;
      t4 = type$.dynamic;
      t5 = type$.Success;
      t2._trackFuture$1$2(_s21_, t3._call$1$2(0, _s21_, P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t1, "mode", mode], t4, t4), t5), t5);
    },
    $signature: 8
  };
  R.HtmlDebuggerScreen_createContent_closure3.prototype = {
    call$0: function() {
      this.breakOnExceptionControl.set$exceptionPauseMode(this.$this.debuggerState._exceptionPauseMode._value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R.HtmlDebuggerScreen_createContent_closure4.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._matcher;
      if (t2 == null)
        t2 = t1._matcher = new N.HtmlScriptsMatcher(t1.debuggerState, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_ScriptRef));
      t1.popupScriptsView._matcherRendering = t2;
    },
    $signature: 0
  };
  R.HtmlDebuggerScreen_createContent_closure5.prototype = {
    call$0: function() {
      P.Timer_Timer(C.Duration_200000, new R.HtmlDebuggerScreen_createContent__closure(this.$this));
    },
    $signature: 0
  };
  R.HtmlDebuggerScreen_createContent__closure.prototype = {
    call$0: function() {
      var t1 = this.$this._matcher;
      if (t1 != null) {
        t1 = t1._finishCallback;
        if (t1 != null)
          t1.call$0();
      }
      return null;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  R.HtmlDebuggerScreen_createContent_closure6.prototype = {
    call$1: function(e) {
      var t1, t2, value, t3;
      switch (type$.KeyboardEvent._as(e).keyCode) {
        case 13:
        case 27:
        case 33:
        case 34:
        case 35:
        case 36:
        case 38:
        case 40:
          return;
        default:
          t1 = this.$this;
          t2 = t1._popupTextfield;
          value = J.trim$0$s(type$.InputElement._as(t2.element).value);
          t3 = t1._matcher;
          if (t3._keyEventSubscription == null)
            t3.start$4(0, t1.sourceEditor.scriptRef, t1.popupScriptsView, t2, t1._popupView.get$hidePopup());
          t1._matcher.displayMatchingScripts$1(value);
      }
    },
    $signature: 13
  };
  R.HtmlDebuggerScreen_createContent_updateStepCapabilities.prototype = {
    call$0: function() {
      var _s8_ = "disabled",
        t1 = this.$this.debuggerState,
        value = t1.get$supportsStepping()._value,
        t2 = this._box_0,
        t3 = t2.stepIn;
      t3.toString;
      H.boolConversionCheck(value);
      t3.attribute$2(_s8_, !value);
      t3 = t2.stepOver;
      t3.attribute$2(_s8_, !(value && t1.lastEvent.topFrame != null));
      t2 = t2.stepOut;
      t2.attribute$2(_s8_, !(value && t1.lastEvent.topFrame != null));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  R.HtmlDebuggerScreen_createContent_closure7.prototype = {
    call$0: function() {
      return this.$this.debuggerState.stepOver$0();
    },
    $signature: 23
  };
  R.HtmlDebuggerScreen_createContent_closure8.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this.debuggerState;
      F.select("debugger", "stepIn", 0);
      t2 = t1._service;
      t1 = t1.isolateRef;
      return t2.resume$2$step(0, t1.get$id(t1), "Into");
    },
    $signature: 23
  };
  R.HtmlDebuggerScreen_createContent_closure9.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this.debuggerState;
      F.select("debugger", "stepOut", 0);
      t2 = t1._service;
      t1 = t1.isolateRef;
      return t2.resume$2$step(0, t1.get$id(t1), "Out");
    },
    $signature: 23
  };
  R.HtmlDebuggerScreen_createContent_updateFrames.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, stack, $frames, reportedException, frame, t3, t4, t5, newFrame, newVars, frames0, t1, t2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.debuggerState;
              $async$goto = H.boolConversionCheck(t2._debugger_state$_isPaused._value) ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = 5;
              return P._asyncAwait(t2.getStack$0(), $async$call$0);
            case 5:
              // returning from await.
              stack = $async$result;
              $frames = stack.asyncCausalFrames;
              if ($frames == null)
                $frames = stack.frames;
              reportedException = t2._reportedException;
              if (reportedException != null && $frames.length !== 0) {
                frame = ($frames && C.JSArray_methods).get$first($frames);
                t2 = frame.index;
                t3 = frame.$function;
                t4 = frame.code;
                t5 = frame.location;
                newFrame = Q.Frame$(t4, t3, t2, frame.kind, t5);
                t5 = type$.JSArray_BoundVariable;
                newVars = H.setRuntimeTypeInfo([], t5);
                C.JSArray_methods.add$1(newVars, Q.BoundVariable$(null, "<exception>", null, null, reportedException));
                t2 = frame.vars;
                C.JSArray_methods.addAll$1(newVars, t2 == null ? H.setRuntimeTypeInfo([], t5) : t2);
                newFrame.set$vars(newVars);
                frames0 = H.setRuntimeTypeInfo([newFrame], type$.JSArray_Frame);
                C.JSArray_methods.addAll$1(frames0, C.JSArray_methods.sublist$1($frames, 1));
                $frames = frames0;
              }
              t1 = t1.callStackView;
              t1.toString;
              type$.List_Frame._as($frames);
              t2 = $frames.length;
              t1 = t1._callstack_view$_items;
              if (t2 === 0)
                t1.setItems$1(H.setRuntimeTypeInfo([Q.Frame$(new Q.CodeRef("<no call frames>", "Stub", null), null, 0, "EmptyStackMarker", null)], type$.JSArray_Frame));
              else {
                t2 = C.JSArray_methods.get$first($frames);
                t1.setItems$2$selection($frames, t2);
              }
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              t1.callStackView._callstack_view$_items.setItems$1(H.setRuntimeTypeInfo([], type$.JSArray_Frame));
              t1 = t1.sourceEditor;
              if (t1 != null)
                t1.clearExecutionPoint$0();
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  R.HtmlDebuggerScreen_createContent_updateStatusLine.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, topFrame, scriptRef, position, file, t1, t2, $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.debuggerState;
              $async$goto = H.boolConversionCheck(t2._debugger_state$_isPaused._value) && t2.lastEvent.topFrame != null ? 2 : 4;
              break;
            case 2:
              // then
              topFrame = t2.lastEvent.topFrame;
              scriptRef = topFrame.location.script;
              $async$temp1 = t2;
              $async$goto = 5;
              return P._asyncAwait(t2.getScript$1(scriptRef), $async$call$0);
            case 5:
              // returning from await.
              position = $async$temp1.calculatePosition$2($async$result, topFrame.location.tokenPos);
              file = J.substring$1$s(scriptRef.get$uri(), J.lastIndexOf$1$s(scriptRef.get$uri(), "/") + 1);
              t1.deviceStatus.element.element.textContent = "paused at " + file + " " + H.S(position.line) + ":" + H.S(position.column);
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              t1.deviceStatus.element.element.textContent = "";
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  R.HtmlDebuggerScreen_createContent_closure10.prototype = {
    call$1: function(frame) {
      return this.$call$body$HtmlDebuggerScreen_createContent_closure(type$.Frame._as(frame));
    },
    $call$body$HtmlDebuggerScreen_createContent_closure: function(frame) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, $location, t2, script, position, t3, t4;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = frame == null ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $async$self.$this;
              t1.callStackView._callstack_view$_items.setItems$1(H.setRuntimeTypeInfo([], type$.JSArray_Frame));
              t1.variablesView._items.setItems$1(H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable));
              t1.sourceEditor.clearExecutionPoint$0();
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $location = frame.location;
              $async$goto = $location != null ? 6 : 7;
              break;
            case 6:
              // then
              t1 = $async$self.$this;
              t2 = t1.debuggerState;
              $async$goto = 8;
              return P._asyncAwait(t2.getScript$1($location.script), $async$call$1);
            case 8:
              // returning from await.
              script = $async$result;
              position = t2.calculatePosition$2(script, $location.tokenPos);
              t2 = t1._sourcePathDiv;
              t3 = script.uri;
              t2.element.textContent = t3;
              t1 = t1.sourceEditor;
              t1.executionPoint = new R.ScriptAndPosition(script, position);
              t1.displayScript$2$scrollTo(script, position);
              t3 = t1._executionPointElement;
              if (t3 != null)
                t3.dispose$0();
              t1._executionPointElement = null;
              if (script.source != null && position != null) {
                t2 = A.CoreElement$("span", null, "octicon octicon-arrow-up execution-marker", null, null);
                t1._executionPointElement = t2;
                t1 = t1.codeMirror;
                t3 = position.line;
                if (typeof t3 !== "number") {
                  $async$returnValue = t3.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t4 = position.column;
                if (typeof t4 !== "number") {
                  $async$returnValue = t4.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1.jsProxy.callMethod$2("addWidget", [new X.Position(t3 - 1, t4 - 1).toProxy$0(), t2.element, false]);
              }
            case 7:
              // join
              t1 = $async$self.$this.variablesView._items;
              t2 = frame.vars;
              t1.setItems$1(t2 == null ? H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable) : t2);
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 163
  };
  R.HtmlDebuggerScreen_createContent_closure11.prototype = {
    call$1: function(_) {
      type$.BusEvent._as(_);
      this.$this.consoleArea.clear$0(0);
    },
    $signature: 26
  };
  R.HtmlDebuggerScreen_createContent_closure12.prototype = {
    call$1: function($event) {
      type$.BusEvent._as($event);
      this.$this.consoleArea.appendText$1(0, H.S($event.data) + "\n\n");
    },
    $signature: 26
  };
  R.HtmlDebuggerScreen_createContent_closure13.prototype = {
    call$1: function(_) {
      type$.BusEvent._as(_);
      this.$this.consoleArea.clear$0(0);
    },
    $signature: 26
  };
  R.HtmlDebuggerScreen_createContent_closure14.prototype = {
    call$1: function($event) {
      type$.BusEvent._as($event);
      this.$this.consoleArea.appendText$1(0, H.S($event.data) + "\n\n");
    },
    $signature: 26
  };
  R.HtmlDebuggerScreen_onContentAttached_closure.prototype = {
    call$1: function(e) {
      return type$.CoreElement._as(e).get$element();
    },
    $signature: 81
  };
  R.HtmlDebuggerScreen_onContentAttached_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.sourceEditor;
      t1 = t1.debuggerState._breakpoints._value;
      t2.toString;
      t2.set$breakpoints(type$.List_Breakpoint._as(t1));
      t2._refreshMarkers$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R.HtmlDebuggerScreen__hookupListeners_closure.prototype = {
    call$1: function(scriptRef) {
      return this.$call$body$HtmlDebuggerScreen__hookupListeners_closure(type$.ScriptRef._as(scriptRef));
    },
    $call$body$HtmlDebuggerScreen__hookupListeners_closure: function(scriptRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, isolateRef, t3, t4, result;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.scriptsView._html_scripts_view$_items._hadClicked) {
                t1 = $async$self.$this._matcher;
                t1 = t1 != null && t1._keyEventSubscription != null;
              } else
                t1 = false;
              if (t1)
                $async$self.$this._matcher.reset$0(0);
              t1 = $async$self.$this;
              t2 = t1._matcher;
              if (t2 != null && t2._keyEventSubscription != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (scriptRef == null) {
                t1._displaySource$1(null);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = type$.ServiceConnectionManager;
              isolateRef = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              t2 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t3 = isolateRef.get$id(isolateRef);
              t4 = scriptRef.get$id(scriptRef);
              $async$goto = 3;
              return P._asyncAwait(t2._trackFuture$1$2("getObject", t2._vmService.getObject$2(0, t3, t4), type$.Obj), $async$call$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (result instanceof Q.Script)
                t1._displaySource$2(result, scriptRef);
              else
                t1._displaySource$1(null);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 179
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure.prototype = {
    call$1: function(variable) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, result, value;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              value = variable.value;
              if (value instanceof Q.Sentinel) {
                $async$returnValue = value.valueAsString;
                // goto return
                $async$goto = 1;
                break;
              }
              if (type$.TypeArgumentsRef._is(value)) {
                $async$returnValue = value.get$name(value);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.InstanceRef;
              t1._as(value);
              if (value == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = value.get$valueAsString(value) != null && !H.boolConversionCheck(value.get$valueAsStringIsTruncated()) ? 3 : 5;
              break;
            case 3:
              // then
              $async$returnValue = value.get$valueAsString(value);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              t2 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t3 = $async$self.$this;
              t4 = t3.debuggerState.isolateRef;
              $async$goto = 6;
              return P._asyncAwait(t2.invoke$5$disableBreakpoints(t4.get$id(t4), value.get$id(value), "toString", H.setRuntimeTypeInfo([], type$.JSArray_String), true), $async$call$1);
            case 6:
              // returning from await.
              result = $async$result;
              $async$goto = type$.ErrorRef._is(result) ? 7 : 9;
              break;
            case 7:
              // then
              $async$returnValue = H.S(result.get$kind(result)) + " " + H.S(result.get$message(result));
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = t1._is(result) ? 10 : 12;
              break;
            case 10:
              // then
              $async$goto = 13;
              return P._asyncAwait(t3._retrieveFullStringValue$1(result), $async$call$1);
            case 13:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // join
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 182
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure0.prototype = {
    call$1: function(breakpoint) {
      return this.$call$body$HtmlDebuggerScreen__buildMenuNav_closure(type$.Breakpoint._as(breakpoint));
    },
    $call$body$HtmlDebuggerScreen__buildMenuNav_closure: function(breakpoint) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, script, pos, $location;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $location = breakpoint.location;
              $async$goto = $location instanceof Q.SourceLocation ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $async$self.$this;
              t2 = t1.debuggerState;
              $async$goto = 6;
              return P._asyncAwait(t2.getScript$1($location.script), $async$call$1);
            case 6:
              // returning from await.
              script = $async$result;
              pos = t2.calculatePosition$2(script, $location.tokenPos);
              t1 = t1.sourceEditor;
              t2 = pos.line;
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              t1.displayScript$2$scrollTo(script, new R.SourcePosition(t2 - 1, null));
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = $location instanceof Q.UnresolvedSourceLocation ? 7 : 8;
              break;
            case 7:
              // then
              t1 = $async$self.$this;
              $async$goto = 9;
              return P._asyncAwait(t1.debuggerState.getScript$1($location.script), $async$call$1);
            case 9:
              // returning from await.
              script = $async$result;
              t1 = t1.sourceEditor;
              t2 = $location.line;
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              t1.displayScript$2$scrollTo(script, new R.SourcePosition(t2 - 1, null));
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 184
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure1.prototype = {
    call$1: function(_) {
      this.scriptCountDiv.element.textContent = J.toString$0$(J.get$length$asx(this.$this.scriptsView._html_scripts_view$_items.items));
    },
    $signature: 27
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure2.prototype = {
    call$0: function() {
      return this.$this.callStackView._callstack_view$_items.attribute$2("hidden", null);
    },
    $signature: 1
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure3.prototype = {
    call$0: function() {
      return this.$this.variablesView._items.attribute$2("hidden", null);
    },
    $signature: 1
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure4.prototype = {
    call$0: function() {
      return this.$this.breakpointsView._breakpoints_view$_items.attribute$2("hidden", null);
    },
    $signature: 1
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure5.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._matcher;
      if (t2 == null)
        t2 = t1._matcher = new N.HtmlScriptsMatcher(t1.debuggerState, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_ScriptRef));
      t1.scriptsView._matcherRendering = t2;
    },
    $signature: 0
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure6.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._matcher;
      if (t2 == null)
        t2 = t1._matcher = new N.HtmlScriptsMatcher(t1.debuggerState, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_ScriptRef));
      t1.scriptsView._matcherRendering = t2;
    },
    $signature: 0
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure7.prototype = {
    call$1: function(e) {
      var t1, value, t2, t3;
      switch (type$.KeyboardEvent._as(e).keyCode) {
        case 13:
        case 27:
        case 33:
        case 34:
        case 35:
        case 36:
        case 38:
        case 40:
          return;
        default:
          t1 = this.textfield;
          value = J.trim$0$s(type$.InputElement._as(t1.element).value);
          t2 = this.$this;
          t3 = t2._matcher;
          if (t3._keyEventSubscription == null)
            t3.start$3(0, t2.sourceEditor.scriptRef, t2.scriptsView, t1);
          t2._matcher.displayMatchingScripts$1(value);
      }
    },
    $signature: 13
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure8.prototype = {
    call$0: function() {
      return this.$this.scriptsView._html_scripts_view$_items.attribute$2("hidden", null);
    },
    $signature: 1
  };
  R.HtmlDebuggerScreen__buildMenuNav_closure9.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.breakpointsView.showBreakpoints$1(t1.debuggerState._breakpoints._value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R.HtmlDebuggerScreen__handleConnectionStart_closure.prototype = {
    call$1: function(e) {
      var message = C.C_Utf8Codec.decode$1(0, C.C_Base64Decoder.convert$1(type$.Event_2._as(e).bytes));
      this.$this.consoleArea.appendText$1(0, message);
    },
    $signature: 48
  };
  R.HtmlDebuggerScreen__handleConnectionStart_closure0.prototype = {
    call$1: function(e) {
      var message = C.C_Utf8Codec.decode$1(0, C.C_Base64Decoder.convert$1(type$.Event_2._as(e).bytes));
      this.$this.consoleArea.appendText$1(0, message);
    },
    $signature: 48
  };
  R.HtmlDebuggerScreen__handleIsolateChanged_closure.prototype = {
    call$1: function(result) {
      var t1 = this.$this,
        t2 = t1.scriptsView;
      if (result instanceof Q.Isolate)
        t1._populateFromIsolate$2(result, H.setRuntimeTypeInfo([t2, t1.popupScriptsView], type$.JSArray_HtmlScriptsView));
      else {
        t1 = t2._html_scripts_view$_items;
        t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
      }
    },
    $signature: 2
  };
  R.HtmlDebuggerScreen__handleIsolateChanged_closure0.prototype = {
    call$1: function(e) {
      this.$this.framework.showError$2("Error retrieving isolate information", e);
    },
    $signature: 2
  };
  R.SourcePosition.prototype = {
    toString$0: function(_) {
      return H.S(this.line) + " " + H.S(this.column);
    }
  };
  R.SourceEditor.prototype = {
    SourceEditor$2: function(codeMirror, debuggerState) {
      this.codeMirror.onEvent$1$2$argCount("gutterClick", 4, type$.int).listen$1(new R.SourceEditor_closure(this));
    },
    _refreshMarkers$0: function() {
      var t2, t3, t4, t5, t6, t7, t8, line, _this = this, _null = null,
        _s29_ = "octicon octicon-primitive-dot",
        _s15_ = "setGutterMarker",
        t1 = _this.codeMirror.jsProxy;
      t1.callMethod$2("clearGutter", ["breakpoints"]);
      t2 = _this.linesToBreakpoints;
      t2.clear$0(0);
      if (_this.currentScript == null)
        return;
      for (t3 = J.get$iterator$ax(_this.breakpoints), t4 = _this.debuggerState; t3.moveNext$0();) {
        t5 = t3.get$current(t3);
        t6 = t5.location;
        if (t6 instanceof Q.SourceLocation) {
          t7 = t6.script;
          t7 = t7.get$id(t7);
          t8 = _this.currentScript;
          if (t7 != t8.id)
            continue;
          t6 = t4.calculatePosition$2(t8, t6.tokenPos).line;
          if (typeof t6 !== "number")
            return t6.$sub();
          line = t6 - 1;
          J.add$1$ax(t2.putIfAbsent$2(0, line, new R.SourceEditor__refreshMarkers_closure()), t5);
          t1.callMethod$2(_s15_, [line, "breakpoints", A.CoreElement$("span", _null, _s29_, _null, _null).element]);
        } else if (t6 instanceof Q.UnresolvedSourceLocation) {
          t7 = t6.script;
          if (t7.get$id(t7) != _this.currentScript.id)
            continue;
          t6 = t6.line;
          if (typeof t6 !== "number")
            return t6.$sub();
          line = t6 - 1;
          J.add$1$ax(t2.putIfAbsent$2(0, line, new R.SourceEditor__refreshMarkers_closure0()), t5);
          t1.callMethod$2(_s15_, [line, "breakpoints", A.CoreElement$("span", _null, _s29_, _null, _null).element]);
        }
      }
      t1 = _this.executionPoint;
      if (t1 != null) {
        t2 = _this.currentScript;
        t2 = t1.script.uri == t2.uri;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.position;
        if (t1 != null) {
          t1 = t1.line;
          if (typeof t1 !== "number")
            return t1.$sub();
          _this._showLineClass$1(t1 - 1);
        }
      }
    },
    _clearLineClass$0: function() {
      var _this = this,
        t1 = _this._currentLineClass;
      if (t1 != null) {
        _this.codeMirror.removeLineClass$3(t1, "background", "executionLine");
        _this._currentLineClass = null;
      }
      t1 = _this._executionPointElement;
      if (t1 != null)
        t1.dispose$0();
      _this._executionPointElement = null;
    },
    _showLineClass$1: function(line) {
      var _this = this;
      if (_this._currentLineClass === line)
        return;
      _this._clearLineClass$0();
      _this._currentLineClass = line;
      type$.JsObject._as(_this.codeMirror.jsProxy.callMethod$2("addLineClass", [line, "background", "executionLine"]));
    },
    clearExecutionPoint$0: function() {
      this.executionPoint = null;
      this._clearLineClass$0();
      this._refreshMarkers$0();
    },
    displayScript$2$scrollTo: function(newScript, $scrollTo) {
      var t1, t2, t3, source, $top, _this = this,
        _s8_ = "setValue";
      if (_this.currentScript != null) {
        t1 = type$.JsObject._as(_this.codeMirror.jsProxy.callMethod$1("getScrollInfo"));
        _this._lastScrollPositions.$indexSet(0, _this.currentScript.uri, H._asNumS(t1.$index(0, "top")));
      }
      t1 = _this.currentScript;
      t1 = t1 == null ? null : t1.uri;
      t2 = newScript == null;
      t3 = t2 ? null : newScript.uri;
      _this.currentScript = newScript;
      if (t2)
        _this.codeMirror.getDoc$0().jsProxy.callMethod$2(_s8_, [""]);
      else {
        if (t1 != t3) {
          source = newScript.source;
          if (source == null)
            source = "<source not available>";
          _this.codeMirror.getDoc$0().jsProxy.callMethod$2(_s8_, [source]);
        }
        if ($scrollTo != null) {
          t1 = $scrollTo.line;
          if (typeof t1 !== "number")
            return t1.$sub();
          _this.codeMirror.scrollIntoView$3$margin(0, t1 - 1, 0, 150);
        } else {
          $top = _this._lastScrollPositions.$index(0, newScript.uri);
          if ($top == null)
            $top = 0;
          _this.codeMirror.jsProxy.callMethod$2("scrollTo", [0, $top]);
        }
      }
      t1 = _this._executionPointElement;
      if (t1 != null)
        t1.dispose$0();
      _this._executionPointElement = null;
      _this._refreshMarkers$0();
    },
    displayScript$1: function(newScript) {
      return this.displayScript$2$scrollTo(newScript, null);
    },
    set$breakpoints: function(breakpoints) {
      this.breakpoints = type$.List_Breakpoint._as(breakpoints);
    }
  };
  R.SourceEditor_closure.prototype = {
    call$1: function(line) {
      var t1, lineBps, t2, t3;
      H._asIntS(line);
      t1 = this.$this;
      lineBps = t1.linesToBreakpoints.$index(0, line);
      t2 = lineBps == null || J.get$isEmpty$asx(lineBps);
      t3 = t1.debuggerState;
      if (t2) {
        t1 = t1.currentScript.id;
        if (typeof line !== "number")
          return line.$add();
        t2 = t3._service;
        t3 = t3.isolateRef;
        t2.addBreakpoint$3(t3.get$id(t3), t1, line + 1).catchError$1(new R.SourceEditor__closure());
      } else
        t3.removeBreakpoint$1(J.removeAt$1$ax(lineBps, 0)).catchError$1(new R.SourceEditor__closure0());
    },
    $signature: 83
  };
  R.SourceEditor__closure.prototype = {
    call$1: function(_) {
    },
    $signature: 2
  };
  R.SourceEditor__closure0.prototype = {
    call$1: function(_) {
    },
    $signature: 2
  };
  R.SourceEditor__refreshMarkers_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
    },
    $signature: 84
  };
  R.SourceEditor__refreshMarkers_closure0.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
    },
    $signature: 84
  };
  R.ScriptAndPosition.prototype = {};
  N.ListDirection.prototype = {
    toString$0: function(_) {
      return this._html_scripts_view$_name;
    }
  };
  N.HtmlPopupView.prototype = {
    hidePopup$0: function() {
      var inputElement, _this = this,
        t1 = _this._html_scripts_view$_sourcePathDiv.element.style,
        t2 = _this._oldSourceNameTextColor;
      t1.toString;
      t1.color = t2 == null ? "" : t2;
      t1 = _this.element.style;
      t1.display = "none";
      inputElement = type$.InputElement._as(_this._html_scripts_view$_popupTextfield.element);
      inputElement.value = "";
      t1 = inputElement.style;
      t1.display = "none";
      _this._poppedUp = false;
    }
  };
  N.HtmlScriptsView.prototype = {
    HtmlScriptsView$1: function(uriDescriber) {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_ScriptRef),
        t2 = type$._AsyncBroadcastStreamController_ScriptRef;
      t1 = new G.HtmlSelectableList(t1, new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)), type$.HtmlSelectableList_ScriptRef);
      t1.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t1.flex$0(0);
      t1.clazz$1("debugger-items-list");
      this.set$_html_scripts_view$_items(t1);
      t1 = this._html_scripts_view$_items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new N.HtmlScriptsView_closure(this, uriDescriber)));
    },
    scrollAndHighlight$3$top: function(row, topPosition, $top) {
      var t1, t2, newElement, _this = this;
      if (J.get$isEmpty$asx(_this._html_scripts_view$_items.items))
        return;
      _this.set$_highlightRef(J.$index$asx(_this._html_scripts_view$_items.items, row));
      t1 = _this._html_scripts_view$_items;
      t2 = _this._highlightRef;
      newElement = type$.CoreElement_Function_ScriptRef._as(t1.renderer).call$1(t2);
      _this._html_scripts_view$_items.setReplace$2(row, _this._highlightRef);
      if (topPosition !== -1) {
        t1 = _this._html_scripts_view$_items.element;
        t1.toString;
        t1.scrollTop = C.JSInt_methods.round$0(topPosition);
      }
      if (newElement != null)
        newElement.scrollIntoView$2$bottom$top(0, false, $top);
    },
    scrollAndHighlight$2: function(row, topPosition) {
      return this.scrollAndHighlight$3$top(row, topPosition, false);
    },
    page$2: function(_, direction, startRow) {
      var itemsVis, itemIndex, childToScrollTo, _this = this,
        t1 = _this._html_scripts_view$_items.element,
        listHeight = t1.clientHeight,
        itemHeight = J.get$children$x(t1).$index(0, 0).clientHeight;
      if (typeof listHeight !== "number")
        return listHeight.$div();
      if (typeof itemHeight !== "number")
        return H.iae(itemHeight);
      itemsVis = C.JSDouble_methods.toInt$0(listHeight / itemHeight) - 1;
      switch (direction) {
        case C.ListDirection_1:
          if (typeof startRow !== "number")
            return startRow.$add();
          itemIndex = startRow + itemsVis;
          t1 = J.get$length$asx(_this._html_scripts_view$_items.items);
          if (typeof t1 !== "number")
            return t1.$sub();
          if (itemIndex > t1 - 1) {
            t1 = J.get$length$asx(_this._html_scripts_view$_items.items);
            if (typeof t1 !== "number")
              return t1.$sub();
            itemIndex = t1 - 1;
          }
          _this.scrollAndHighlight$3$top(itemIndex, startRow > 0 ? startRow * itemHeight : 0, true);
          childToScrollTo = itemIndex;
          break;
        case C.ListDirection_0:
          if (typeof startRow !== "number")
            return startRow.$sub();
          itemIndex = startRow - itemsVis;
          if (itemIndex < 0)
            itemIndex = 0;
          _this.scrollAndHighlight$3$top(itemIndex, itemIndex > 0 ? itemIndex * itemHeight : 0, true);
          childToScrollTo = itemIndex;
          break;
        case C.ListDirection_2:
          _this.scrollAndHighlight$2(0, 0);
          childToScrollTo = 0;
          break;
        case C.ListDirection_3:
          t1 = J.get$length$asx(_this._html_scripts_view$_items.items);
          if (typeof t1 !== "number")
            return t1.$sub();
          childToScrollTo = t1 - 1;
          _this.scrollAndHighlight$2(childToScrollTo, childToScrollTo > 0 ? (childToScrollTo - itemsVis) * itemHeight : 0);
          break;
        default:
          childToScrollTo = null;
      }
      return childToScrollTo;
    },
    page$1: function($receiver, direction) {
      return this.page$2($receiver, direction, 0);
    },
    get$element: function() {
      return this._html_scripts_view$_items;
    },
    showScripts$5$selectRootScript$selectScriptRef: function(scripts, rootLib, commonPrefix, selectRootScript, selectScriptRef) {
      var t1, selection;
      type$.List_ScriptRef._as(scripts);
      t1 = J.getInterceptor$ax(scripts);
      t1.sort$1(scripts, new N.HtmlScriptsView_showScripts_closure(this, commonPrefix));
      if (selectRootScript)
        selection = t1.firstWhere$2$orElse(scripts, new N.HtmlScriptsView_showScripts_closure0(rootLib), new N.HtmlScriptsView_showScripts_closure1());
      else
        selection = selectScriptRef != null ? selectScriptRef : null;
      this._html_scripts_view$_items.setItems$3$scrollSelectionIntoView$selection(scripts, true, selection);
    },
    showScripts$4$selectRootScript: function(scripts, rootLib, commonPrefix, selectRootScript) {
      return this.showScripts$5$selectRootScript$selectScriptRef(scripts, rootLib, commonPrefix, selectRootScript, null);
    },
    showScripts$4$selectScriptRef: function(scripts, rootLib, commonPrefix, selectScriptRef) {
      return this.showScripts$5$selectRootScript$selectScriptRef(scripts, rootLib, commonPrefix, false, selectScriptRef);
    },
    showScripts$3: function(scripts, rootLib, commonPrefix) {
      return this.showScripts$5$selectRootScript$selectScriptRef(scripts, rootLib, commonPrefix, false, null);
    },
    _convertDartInternalUris$1: function(uri) {
      if (J.startsWith$1$s(uri, "dart:_"))
        return H.stringReplaceAllUnchecked(uri, "dart:_", "dart:");
      else
        return uri;
    },
    set$_html_scripts_view$_items: function(_items) {
      this._html_scripts_view$_items = type$.HtmlSelectableList_ScriptRef._as(_items);
    },
    set$_highlightRef: function(_highlightRef) {
      this._highlightRef = type$.ScriptRef._as(_highlightRef);
    },
    $isCoreElementView: 1
  };
  N.HtmlScriptsView_closure.prototype = {
    call$1: function(scriptRef) {
      var matchPart, startIndex, firstPart, endBoldIndex, boldPart, endPart, element, _null = null,
        _s9_ = "list-item",
        uri = type$.ScriptRef._as(scriptRef).get$uri(),
        $name = this.uriDescriber.call$1(uri),
        matchingName = $name.toLowerCase(),
        t1 = this.$this._matcherRendering;
      if (t1 != null && t1._keyEventSubscription != null) {
        matchPart = type$.InputElement._as(t1._textfield.get$element()).value.toLowerCase();
        startIndex = C.JSString_methods.lastIndexOf$1(matchingName, matchPart);
        firstPart = C.JSString_methods.substring$2($name, 0, startIndex);
        endBoldIndex = startIndex + matchPart.length;
        boldPart = C.JSString_methods.substring$2($name, startIndex, endBoldIndex);
        endPart = C.JSString_methods.substring$1($name, endBoldIndex);
        element = A.CoreElement$("li", _null, _s9_, J.get$innerHtml$x(W.Element_Element$html("<div>" + firstPart + '<strong class="strong-match">' + boldPart + "</strong>" + endPart + "</div>", _null, _null)), _null);
      } else
        element = A.CoreElement$("li", _null, _s9_, _null, $name);
      element.element.title = uri;
      return element;
    },
    $signature: 226
  };
  N.HtmlScriptsView_showScripts_closure.prototype = {
    call$2: function(ref1, ref2) {
      var uri1, uri2, t2, _s5_ = "dart:",
        t1 = type$.ScriptRef;
      t1._as(ref1);
      t1._as(ref2);
      uri1 = ref1.get$uri();
      uri2 = ref2.get$uri();
      t1 = this.$this;
      uri1 = t1._convertDartInternalUris$1(uri1);
      uri2 = t1._convertDartInternalUris$1(uri2);
      t1 = this.commonPrefix;
      if (t1 != null) {
        t2 = C.JSString_methods.startsWith$1(uri1, t1);
        if (t2 && !C.JSString_methods.startsWith$1(uri2, t1))
          return -1;
        else if (!t2 && C.JSString_methods.startsWith$1(uri2, t1))
          return 1;
      }
      t1 = C.JSString_methods.startsWith$1(uri1, _s5_);
      if (t1 && !C.JSString_methods.startsWith$1(uri2, _s5_))
        return 1;
      else if (!t1 && C.JSString_methods.startsWith$1(uri2, _s5_))
        return -1;
      return C.JSString_methods.compareTo$1(uri1, uri2);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 238
  };
  N.HtmlScriptsView_showScripts_closure0.prototype = {
    call$1: function(script) {
      return type$.ScriptRef._as(script).get$uri() == this.rootLib;
    },
    $signature: 69
  };
  N.HtmlScriptsView_showScripts_closure1.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  N.HtmlScriptsMatcher.prototype = {
    start$4: function(_, revertScriptRef, scriptView, textfield, finishCallback) {
      var t1, t2, t3, _this = this;
      type$.ScriptRef._as(revertScriptRef);
      type$.HtmlScriptsView._as(scriptView);
      type$.CoreElement._as(textfield);
      type$.Function._as(finishCallback);
      _this._scriptsView = scriptView;
      _this._textfield = textfield;
      if (finishCallback != null)
        _this._finishCallback = finishCallback;
      _this._startMatching$2(revertScriptRef, true);
      if (_this._keyEventSubscription == null) {
        t1 = J.get$onKeyDown$x(_this._textfield.get$element());
        t2 = t1.$ti;
        t3 = t2._eval$1("~(1)")._as(new N.HtmlScriptsMatcher_start_closure(_this));
        type$.void_Function._as(null);
        _this._keyEventSubscription = W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
      }
    },
    start$3: function($receiver, revertScriptRef, scriptView, textfield) {
      return this.start$4($receiver, revertScriptRef, scriptView, textfield, null);
    },
    reset$0: function(_) {
      var originalRefs, _this = this,
        t1 = _this._scriptsView,
        t2 = t1._html_scripts_view$_items,
        selectedScriptRef = t2._hadClicked ? t2.selectedItem$0() : t1._highlightRef;
      t1 = _this._keyEventSubscription;
      if (t1 != null) {
        t1.cancel$0(0);
        _this._keyEventSubscription = null;
      }
      t1 = _this.matchingState;
      originalRefs = t1.$index(0, "");
      t2 = _this._debuggerState;
      _this._scriptsView.showScripts$4$selectScriptRef(originalRefs, t2.rootLib.get$uri(), t2.commonScriptPrefix, selectedScriptRef);
      t1.clear$0(0);
      t1.putIfAbsent$2(0, "", new N.HtmlScriptsMatcher_reset_closure(originalRefs));
      type$.InputElement._as(_this._textfield.get$element()).value = "";
      _this._scriptsView._highlightRef = null;
    },
    revert$0: function() {
      var t1, t2, _this = this;
      _this.reset$0(0);
      t1 = _this._debuggerState;
      _this._scriptsView.showScripts$4$selectScriptRef(_this.matchingState.$index(0, ""), t1.rootLib.get$uri(), t1.commonScriptPrefix, _this._originalScriptRef);
      if (_this._originalScriptRef != null)
        if (_this._scriptsView._html_scripts_view$_items.selectedItem$0() != null) {
          t1 = _this._scriptsView._html_scripts_view$_items;
          t2 = _this._originalScrollTop;
          t1 = t1.element;
          t1.toString;
          t1.scrollTop = J.round$0$n(t2);
        }
    },
    _startMatching$2: function(originalScriptRef, initialize) {
      var _this = this;
      _this._originalScriptRef = originalScriptRef;
      _this._originalScrollTop = C.JSNumber_methods.round$0(_this._scriptsView._html_scripts_view$_items.element.scrollTop);
      type$.InputElement._as(_this._textfield.get$element());
      _this.matchingState.putIfAbsent$2(0, "", new N.HtmlScriptsMatcher__startMatching_closure(_this));
    },
    displayMatchingScripts$1: function(charsToMatch) {
      var t2, matchingRefs, _this = this,
        charsMatchLen = charsToMatch.length,
        previousMatch = charsMatchLen > 0 ? C.JSString_methods.substring$2(charsToMatch, 0, charsMatchLen - 1) : "",
        t1 = _this.matchingState,
        lastMatchingRefs = t1.$index(0, previousMatch);
      if (lastMatchingRefs == null)
        lastMatchingRefs = t1.$index(0, "");
      t2 = J.where$1$ax(lastMatchingRefs, new N.HtmlScriptsMatcher_displayMatchingScripts_closure(_this, charsToMatch));
      matchingRefs = P.List_List$from(t2, true, t2.$ti._eval$1("Iterable.E"));
      t1.putIfAbsent$2(0, charsToMatch, new N.HtmlScriptsMatcher_displayMatchingScripts_closure0(matchingRefs));
      t1 = _this._scriptsView._html_scripts_view$_items;
      t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
      t1 = _this._debuggerState;
      _this._scriptsView.showScripts$3(matchingRefs, t1.rootLib.get$uri(), t1.commonScriptPrefix);
      _this._selectRow = 0;
      _this._scriptsView.scrollAndHighlight$2(0, -1);
      t1 = _this._scriptsView._html_scripts_view$_items.element;
      t1.toString;
      t1.scrollTop = 0;
    }
  };
  N.HtmlScriptsMatcher_start_closure.prototype = {
    call$1: function(e) {
      var t1, t2, t3, _this = this;
      type$.KeyboardEvent._as(e);
      switch (e.keyCode) {
        case 13:
          t1 = _this.$this;
          t1.reset$0(0);
          t1._scriptsView._highlightRef = null;
          t1 = t1._finishCallback;
          if (t1 != null)
            t1.call$0();
          e.preventDefault();
          break;
        case 27:
          t1 = _this.$this;
          t1.revert$0();
          t1 = t1._finishCallback;
          if (t1 != null)
            t1.call$0();
          break;
        case 33:
          t1 = _this.$this;
          t1._selectRow = t1._scriptsView.page$2(0, C.ListDirection_0, t1._selectRow);
          e.preventDefault();
          break;
        case 34:
          t1 = _this.$this;
          t1._selectRow = t1._scriptsView.page$2(0, C.ListDirection_1, t1._selectRow);
          e.preventDefault();
          break;
        case 35:
          t1 = _this.$this;
          t1._selectRow = t1._scriptsView.page$1(0, C.ListDirection_3);
          e.preventDefault();
          break;
        case 36:
          t1 = _this.$this;
          t1._selectRow = t1._scriptsView.page$1(0, C.ListDirection_2);
          e.preventDefault();
          break;
        case 38:
          t1 = _this.$this;
          t2 = t1._selectRow;
          if (typeof t2 !== "number")
            return t2.$gt();
          if (t2 > 0) {
            --t2;
            t1._selectRow = t2;
            t1._scriptsView.scrollAndHighlight$2(t2, -1);
          }
          e.preventDefault();
          break;
        case 40:
          t1 = _this.$this;
          t2 = t1._selectRow;
          t3 = J.get$length$asx(t1._scriptsView._html_scripts_view$_items.items);
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t2 < t3 - 1) {
            t2 = t1._selectRow;
            if (typeof t2 !== "number")
              return t2.$add();
            ++t2;
            t1._selectRow = t2;
            t1._scriptsView.scrollAndHighlight$2(t2, -1);
          }
          e.preventDefault();
          break;
      }
    },
    $signature: 13
  };
  N.HtmlScriptsMatcher_reset_closure.prototype = {
    call$0: function() {
      return this.originalRefs;
    },
    $signature: 73
  };
  N.HtmlScriptsMatcher__startMatching_closure.prototype = {
    call$0: function() {
      return this.$this._scriptsView._html_scripts_view$_items.items;
    },
    $signature: 73
  };
  N.HtmlScriptsMatcher_displayMatchingScripts_closure.prototype = {
    call$1: function(ref) {
      return C.JSString_methods.lastIndexOf$1(this.$this._debuggerState.getShortScriptName$1(type$.ScriptRef._as(ref).get$uri()).toLowerCase(), this.charsToMatch.toLowerCase()) >= 0;
    },
    $signature: 69
  };
  N.HtmlScriptsMatcher_displayMatchingScripts_closure0.prototype = {
    call$0: function() {
      return this.matchingRefs;
    },
    $signature: 73
  };
  F.HtmlVariablesView.prototype = {
    HtmlVariablesView$2: function(debuggerState, variableDescriber) {
      var t1 = G.HtmlSelectableTree$(type$.BoundVariable);
      t1.flex$0(0);
      t1.clazz$1("menu-item-bottom-border");
      t1.clazz$1("debugger-items-list");
      this.set$_items(t1);
      t1 = this._items;
      t1.set$childProvider(t1.$ti._eval$1("ChildProvider<1>")._as(new F.VariablesChildProvider(debuggerState)));
      t1 = this._items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new F.HtmlVariablesView_closure(variableDescriber)));
    },
    get$element: function() {
      return this._items;
    },
    set$_items: function(_items) {
      this._items = type$.HtmlSelectableTree_BoundVariable._as(_items);
    },
    $isCoreElementView: 1
  };
  F.HtmlVariablesView_closure.prototype = {
    call$1: function(variable) {
      var $name, value, t2, valueStr, element, t3, t4, _null = null, t1 = {};
      type$.BoundVariable._as(variable);
      $name = variable.name;
      value = variable.value;
      if (type$.InstanceRef._is(value)) {
        if (value.get$valueAsString(value) == null) {
          t2 = value.get$classRef();
          valueStr = t2.get$name(t2);
        } else {
          valueStr = value.get$valueAsString(value);
          if (H.boolConversionCheck(value.get$valueAsStringIsTruncated()))
            valueStr = J.$add$ansx(valueStr, "...");
          if (value.get$kind(value) === "String")
            valueStr = "'" + H.S(valueStr) + "'";
        }
        if (value.get$kind(value) === "List")
          valueStr = "[" + H.S(value.get$length(value)) + "] " + H.S(valueStr);
        else if (value.get$kind(value) === "Map")
          valueStr = "{ " + H.S(value.get$length(value)) + " } " + H.S(valueStr);
        else if (value.get$kind(value) != null && J.endsWith$1$s(value.get$kind(value), "List"))
          valueStr = "[" + H.S(value.get$length(value)) + "] " + H.S(valueStr);
      } else if (value instanceof Q.Sentinel)
        valueStr = value.valueAsString;
      else
        valueStr = type$.TypeArgumentsRef._is(value) ? value.get$name(value) : J.toString$0$(value);
      element = A.CoreElement$("li", _null, "list-item", _null, _null);
      element.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("span", _null, _null, _null, $name), A.CoreElement$("span", _null, "subtle", _null, " " + H.S(valueStr))], type$.JSArray_CoreElement));
      t1.sub = null;
      t2 = J.get$onMouseOver$x(element.element);
      t3 = t2.$ti;
      t4 = t3._eval$1("~(1)")._as(new F.HtmlVariablesView__closure(t1, this.variableDescriber, variable, element));
      type$.void_Function._as(null);
      t1.sub = W._EventStreamSubscription$(t2._target, t2._eventType, t4, false, t3._precomputed1);
      return element;
    },
    $signature: 262
  };
  F.HtmlVariablesView__closure.prototype = {
    call$1: function(e) {
      var _this = this;
      type$.MouseEvent._as(e);
      _this._box_0.sub.cancel$0(0);
      _this.variableDescriber.call$1(_this.variable).then$1$1(new F.HtmlVariablesView___closure(_this.element), type$.Null);
    },
    $signature: 6
  };
  F.HtmlVariablesView___closure.prototype = {
    call$1: function(desc) {
      this.element.element.title = H._asStringS(desc);
    },
    $signature: 8
  };
  F.VariablesChildProvider.prototype = {
    hasChildren$1: function(item) {
      var value = type$.BoundVariable._as(item).value;
      return type$.InstanceRef._is(value) && value.get$valueAsString(value) == null;
    },
    getChildren$1: function(item) {
      return this.getChildren$body$VariablesChildProvider(type$.BoundVariable._as(item));
    },
    getChildren$body$VariablesChildProvider: function(item) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_BoundVariable),
        $async$returnValue, $async$self = this, t1, t2, t3, result, result0, index, _i, value;
      var $async$getChildren$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              value = item.value;
              if (!type$.InstanceRef._is(value)) {
                $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.debuggerState;
              t2 = t1._service;
              t1 = t1.isolateRef;
              t1 = t1.get$id(t1);
              t3 = value.get$id(value);
              $async$goto = 3;
              return P._asyncAwait(t2._trackFuture$1$2("getObject", t2._vmService.getObject$2(0, t1, t3), type$.Obj), $async$getChildren$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (!(result instanceof Q.Instance)) {
                $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = result.associations;
              if (t1 != null) {
                t2 = H._arrayInstanceType(t1);
                $async$returnValue = new H.MappedListIterable(t1, t2._eval$1("BoundVariable(1)")._as(new F.VariablesChildProvider_getChildren_closure()), t2._eval$1("MappedListIterable<1,BoundVariable>")).toList$0(0);
                // goto return
                $async$goto = 1;
                break;
              } else if (result.elements != null) {
                result0 = H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable);
                for (t1 = result.elements, t2 = t1.length, index = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                  value = t1[_i];
                  C.JSArray_methods.add$1(result0, new Q.BoundVariable("[" + index + "]", value, null, null, null, null));
                  ++index;
                }
                $async$returnValue = result0;
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = result.fields;
                if (t1 != null) {
                  t2 = H._arrayInstanceType(t1);
                  $async$returnValue = new H.MappedListIterable(t1, t2._eval$1("BoundVariable(1)")._as(new F.VariablesChildProvider_getChildren_closure0()), t2._eval$1("MappedListIterable<1,BoundVariable>")).toList$0(0);
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_BoundVariable);
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getChildren$1, $async$completer);
    }
  };
  F.VariablesChildProvider_getChildren_closure.prototype = {
    call$1: function(assoc) {
      var keyString, t1;
      type$.MapAssociation._as(assoc);
      keyString = J.get$valueAsString$x(assoc.key);
      t1 = assoc.key;
      return Q.BoundVariable$(null, "[" + H.S(type$.InstanceRef._is(t1) && t1.get$kind(t1) === "String" ? "'" + H.S(keyString) + "'" : keyString) + "]", null, null, assoc.value);
    },
    $signature: 298
  };
  F.VariablesChildProvider_getChildren_closure0.prototype = {
    call$1: function(field) {
      var t1;
      type$.BoundField._as(field);
      t1 = field.decl;
      return Q.BoundVariable$(null, t1.get$name(t1), null, null, field.value);
    },
    $signature: 301
  };
  T.EnumUtils.prototype = {
    EnumUtils$1: function(enumValues, $T) {
      var t1, t2, t3, _i, val, description, enumDescription;
      for (t1 = enumValues.length, t2 = this._lookupTable, t3 = this._reverseLookupTable, _i = 0; _i < t1; ++_i) {
        val = enumValues[_i];
        description = val.toString$0(0);
        enumDescription = C.JSString_methods.substring$1(description, C.JSString_methods.indexOf$1(description, ".") + 1);
        t2.$indexSet(0, enumDescription, val);
        t3.$indexSet(0, val, enumDescription);
      }
    },
    name$1: function(_, enumEntry) {
      return this._reverseLookupTable.$index(0, this.$ti._precomputed1._as(enumEntry));
    }
  };
  B.EvalOnDartLibrary.prototype = {
    EvalOnDartLibrary$3$isolateId: function(candidateLibraryNames, service, isolateId) {
      var t1;
      this.set$_libraryRef(new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_LibraryRef), type$._AsyncCompleter_LibraryRef));
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG));
      this.selectedIsolateStreamSubscription = t1._isolateManager.getSelectedIsolate$1(new B.EvalOnDartLibrary_closure(this));
    },
    _eval_on_dart_library$_init$2: function(isolateId, isIsolateNull) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_eval_on_dart_library$_init$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self._initializeComplete, $async$_eval_on_dart_library$_init$2);
            case 2:
              // returning from await.
              if ($async$self._libraryRef.future._state !== 0)
                $async$self.set$_libraryRef(new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_LibraryRef), type$._AsyncCompleter_LibraryRef));
              if (!isIsolateNull)
                $async$self._initializeComplete = $async$self._initialize$1(isolateId);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_eval_on_dart_library$_init$2, $async$completer);
    },
    _initialize$1: function(isolateId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, isolate, library, e, stack, t1, t2, t3, t4, _i, exception, $async$exception;
      var $async$_initialize$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self._isolateId = isolateId;
                $async$handler = 4;
                t1 = $async$self.service;
                t2 = t1._vmService;
                t2.toString;
                t3 = type$.dynamic;
                t4 = type$.Isolate;
                $async$goto = 7;
                return P._asyncAwait(t1._trackFuture$1$2("getIsolate", t2._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId], t3, t3), t4), t4), $async$_initialize$1);
              case 7:
                // returning from await.
                isolate = $async$result;
                if (isolate == null || $async$self._libraryRef.future._state !== 0) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                for (t1 = isolate.libraries, t2 = t1.length, t3 = $async$self._candidateLibraryNames, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                  library = t1[_i];
                  if (t3.contains$1(0, library.get$uri())) {
                    t1 = $async$self._libraryRef;
                    t2 = t1.$ti._eval$1("1/")._as(library);
                    t1 = t1.future;
                    if (t1._state !== 0)
                      H.throwExpression(P.StateError$("Future already completed"));
                    t1._asyncComplete$1(t2);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                }
                $async$self._libraryRef.completeError$1(new B.LibraryNotFound(t3));
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                e = H.unwrapException($async$exception);
                stack = H.getTraceFromException($async$exception);
                $async$self._eval_on_dart_library$_handleError$2(e, stack);
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return P._asyncStartSync($async$_initialize$1, $async$completer);
    },
    eval$3$isAlive$scope: function(expression, isAlive, scope) {
      return this.addRequest$1$2(isAlive, new B.EvalOnDartLibrary_eval_closure(this, expression, type$.Map_String_String._as(scope)), type$.InstanceRef);
    },
    eval$2$isAlive: function(expression, isAlive) {
      return this.eval$3$isAlive$scope(expression, isAlive, null);
    },
    _eval_on_dart_library$_eval$2$scope: function(expression, scope) {
      type$.Map_String_String._as(scope);
      return this._eval$body$EvalOnDartLibrary(expression, scope);
    },
    _eval$body$EvalOnDartLibrary: function(expression, scope) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InstanceRef),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, libraryRef, result, e, stack, t1, exception, $async$exception;
      var $async$_eval_on_dart_library$_eval$2$scope = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              libraryRef = null;
            case 7:
              // for condition
              // trivial condition
              $async$goto = 9;
              return P._asyncAwait($async$self._libraryRef.future, $async$_eval_on_dart_library$_eval$2$scope);
            case 9:
              // returning from await.
              libraryRef = $async$result;
              if ($async$self._libraryRef.future._state !== 0) {
                // goto after for
                $async$goto = 8;
                break;
              }
              // goto for condition
              $async$goto = 7;
              break;
            case 8:
              // after for
              if (libraryRef == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 10;
              return P._asyncAwait($async$self.service.evaluate$4$scope(0, $async$self._isolateId, J.get$id$x(libraryRef), expression, scope), $async$_eval_on_dart_library$_eval$2$scope);
            case 10:
              // returning from await.
              result = $async$result;
              if (result instanceof Q.Sentinel) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (type$.ErrorRef._is(result))
                throw H.wrapException(result);
              t1 = type$.FutureOr_InstanceRef._as(result);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              stack = H.getTraceFromException($async$exception);
              $async$self._eval_on_dart_library$_handleError$2(H.S(e) + " - " + expression, stack);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_eval_on_dart_library$_eval$2$scope, $async$completer);
    },
    _eval_on_dart_library$_handleError$2: function(e, stack) {
      var t1;
      type$.StackTrace._as(stack);
      if (this._disposed)
        return;
      t1 = J.getInterceptor$(e);
      switch (t1.get$runtimeType(e)) {
        case C.Type_RPCError_Tnu:
          B.log("RPCError: " + H.S(e), C.LogLevel_2);
          break;
        case C.Type_Error_9Cx:
          B.log(H.S(t1.get$kind(e)) + ": " + H.S(t1.get$message(e)), C.LogLevel_2);
          break;
        default:
          B.log("Unrecognized error: " + H.S(e), C.LogLevel_2);
      }
      if (stack != null)
        B.log(stack.toString$0(0), C.LogLevel_2);
    },
    getInstance$2: function(instanceRefFuture, isAlive) {
      return this.getInstance$body$EvalOnDartLibrary(type$.FutureOr_InstanceRef._as(instanceRefFuture), isAlive);
    },
    getInstance$body$EvalOnDartLibrary: function(instanceRefFuture, isAlive) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Instance),
        $async$returnValue, $async$self = this;
      var $async$getInstance$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 4;
              return P._asyncAwait(instanceRefFuture, $async$getInstance$2);
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait($async$self.getObjHelper$1$2($async$result, isAlive, type$.Instance), $async$getInstance$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInstance$2, $async$completer);
    },
    addRequest$1$2: function(isAlive, request, $T) {
      return this.addRequest$body$EvalOnDartLibrary(isAlive, $T._eval$1("Future<0>()")._as(request), $T, $T);
    },
    addRequest$body$EvalOnDartLibrary: function(isAlive, request, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, previousDone, e, t2, response, t3, t4, exception, t1, $async$exception;
      var $async$addRequest$1$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = isAlive != null;
              if (t1 && isAlive.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
              response = new P._AsyncCompleter(t2, $T._eval$1("_AsyncCompleter<0>"));
              t3 = new B.EvalOnDartLibrary_addRequest_wrappedRequest($async$self, isAlive, response, request, $T);
              t4 = $async$self.allPendingRequestsDone;
              $async$goto = t4 == null || t4.future._state !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              $async$self.allPendingRequestsDone = response;
              t3.call$0();
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              if (t1 && isAlive.disposed || $async$self._disposed) {
                response.complete$1(0, null);
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              }
              previousDone = t4.future;
              $async$self.allPendingRequestsDone = response;
              $async$handler = 7;
              $async$goto = 10;
              return P._asyncAwait(previousDone, $async$addRequest$1$2);
            case 10:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              if (!$async$self._disposed)
                B.log(J.toString$0$(e), C.LogLevel_2);
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 9:
              // after finally
              t3.call$0();
            case 4:
              // join
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$addRequest$1$2, $async$completer);
    },
    getObjHelper$1$2: function(instance, isAlive, $T) {
      H.checkTypeBound($T, type$.Obj, "T", "getObjHelper");
      return this.addRequest$1$2(isAlive, new B.EvalOnDartLibrary_getObjHelper_closure(this, type$.ObjRef._as(instance), null, null, $T), $T);
    },
    set$_libraryRef: function(_libraryRef) {
      this._libraryRef = type$.Completer_LibraryRef._as(_libraryRef);
    }
  };
  B.EvalOnDartLibrary_closure.prototype = {
    call$1: function(isolate) {
      var t1, id, t2;
      type$.IsolateRef._as(isolate);
      t1 = isolate == null;
      id = t1 ? null : isolate.get$id(isolate);
      t2 = this.$this;
      t2._initializeComplete = null;
      t2._eval_on_dart_library$_init$2(id, t1);
    },
    $signature: 38
  };
  B.EvalOnDartLibrary_eval_closure.prototype = {
    call$0: function() {
      return this.$this._eval_on_dart_library$_eval$2$scope(this.expression, this.scope);
    },
    $signature: 309
  };
  B.EvalOnDartLibrary_addRequest_wrappedRequest.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, value, e, t3, t4, exception, t1, t2, $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.isAlive;
              t2 = t1 == null;
              if (!t2 && t1.disposed || $async$self.$this._disposed) {
                $async$self.response.complete$1(0, null);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait($async$self.request.call$0(), $async$call$0);
            case 7:
              // returning from await.
              value = $async$result;
              t3 = !$async$self.$this._disposed && !(value instanceof Q.Sentinel);
              t4 = $async$self.response;
              if (t3)
                t4.complete$1(0, value);
              else
                t4.complete$1(0, null);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              if (!$async$self.$this._disposed)
                t1 = (t2 ? null : t1.disposed) === true;
              else
                t1 = true;
              t2 = $async$self.response;
              if (t1)
                t2.complete$1(0, null);
              else
                t2.completeError$1(e);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1
  };
  B.EvalOnDartLibrary_getObjHelper_closure.prototype = {
    call$0: function() {
      return this.$call$body$EvalOnDartLibrary_getObjHelper_closure(this.T);
    },
    $call$body$EvalOnDartLibrary_getObjHelper_closure: function($async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t3, t1, t2, $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.service;
              t1 = t1._isolateId;
              t3 = $async$self.instance;
              t3 = t3.get$id(t3);
              $async$temp1 = $async$self.T;
              $async$goto = 3;
              return P._asyncAwait(t2._trackFuture$1$2("getObject", t2._vmService.getObject$2(0, t1, t3), type$.Obj), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: function() {
      return this.T._eval$1("Future<0>()");
    }
  };
  B.LibraryNotFound.prototype = {
    get$message: function(_) {
      return "Library matchining one of " + H.S(this.candidateNames) + " not found";
    },
    $isException: 1
  };
  A.HtmlFramework.prototype = {
    HtmlFramework$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, _this = this, _null = null,
        t1 = window,
        t2 = type$.void_Function_PopStateEvent._as(_this.get$handlePopState());
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1, "popstate", t2, false, type$.PopStateEvent);
      _this._initDragDrop$0();
      t2 = type$.JSArray_HtmlStatusItem;
      _this.globalStatus = new A.HtmlStatusLine(new A.CoreElement(A.queryId("global-status")), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2));
      _this.pageStatus = new A.HtmlStatusLine(new A.CoreElement(A.queryId("page-status")), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2));
      t2 = new A.HtmlStatusLine(new A.CoreElement(A.queryId("auxiliary-status")), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2));
      t2.set$defaultStatus(0, _this.defaultAuxiliaryStatus);
      _this.auxiliaryStatus = t2;
      _this.globalActions = new A.HtmlActionsContainer(new A.CoreElement(A.queryId("global-actions")), H.setRuntimeTypeInfo([], type$.JSArray_HtmlActionButton));
      _this.connectDialog = A.HtmlConnectDialog$(_this);
      t2 = new A.HtmlSnapshotMessage();
      t1 = A.queryId("snapshot-message");
      t3 = new A.CoreElement(t1);
      t2.parent = t3;
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t4 = A.CoreElement$("h2", _null, _null, _null, "Load DevTools Snapshot");
      t5 = A.CoreElement$("dl", _null, "form-group", _null, _null);
      t6 = A.CoreElement$("dt", _null, _null, _null, _null);
      t7 = type$.JSArray_CoreElement;
      t6.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("label", _null, _null, _null, "Load a DevTools snapshot from a local file.")], t7));
      t8 = A.CoreElement$("dd", _null, _null, _null, _null);
      t8.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("p", _null, "note", _null, "Drag and drop a file anywhere on the page.")], t7));
      t9 = A.CoreElement$("dd", _null, _null, _null, _null);
      t9.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("p", _null, "note", _null, "Supported file formats include any files exported from DevTools, such as the timeline export.")], t7));
      t5.add$1(0, H.setRuntimeTypeInfo([t6, t8, t9], t7));
      t3.add$1(0, H.setRuntimeTypeInfo([t4, t5], t7));
      t1 = t1.style;
      t1.display = "none";
      _this.snapshotMessage = t2;
      _this.analyticsDialog = A.HtmlAnalyticsOptInDialog$(_this);
    },
    _initDragDrop$0: function() {
      C.Window_methods.addEventListener$3(window, "dragover", new A.HtmlFramework__initDragDrop_closure(this), false);
      C.Window_methods.addEventListener$3(window, "drop", new A.HtmlFramework__initDragDrop_closure0(this), false);
    },
    _onDrop$1: function($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$next = [], $async$self = this, droppedFile, reader, e, files, t1, t2, exception;
      var $async$_onDrop$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $event.preventDefault();
              files = $event.dataTransfer.files;
              if (files.length > 1) {
                $async$self.toast$1("You cannot import more than one file.");
                // goto return
                $async$goto = 1;
                break;
              }
              droppedFile = (files && C.FileList_methods).get$first(files);
              if (droppedFile.type !== "application/json") {
                $async$self.toast$1(H.S(droppedFile.type) + " is not a supported file type. Please import a .json file that was exported from Dart DevTools.");
                // goto return
                $async$goto = 1;
                break;
              }
              reader = new FileReader();
              t1 = type$.EventTarget._as(reader);
              t2 = type$.void_Function_ProgressEvent._as(new A.HtmlFramework__onDrop_closure($async$self, reader));
              type$.void_Function._as(null);
              W._EventStreamSubscription$(t1, "load", t2, false, type$.ProgressEvent);
              try {
                J.readAsText$1$x(reader, droppedFile);
              } catch (exception) {
                e = H.unwrapException(exception);
                $async$self.toast$1("Could not import file: " + H.S(e));
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_onDrop$1, $async$completer);
    },
    _importTimeline$1: function($import) {
      return this._importTimeline$body$HtmlFramework(type$.Map_String_dynamic._as($import));
    },
    _importTimeline$body$HtmlFramework: function($import) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, traceEvents, cpuProfileJson, cpuProfileData, selectedFrameId, selectedEventJson, selectedEvent, offlineData, t4, timelineScreen, t1, timelineMode;
      var $async$_importTimeline$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($import);
              timelineMode = J.$eq$(t1.$index($import, "timelineMode"), "TimelineMode.full") ? C.TimelineMode_1 : C.TimelineMode_0;
              if (timelineMode === C.TimelineMode_0) {
                t2 = t1.$index($import, "traceEvents");
                if (t2 == null)
                  t2 = [];
                t3 = type$.Map_String_dynamic;
                traceEvents = type$.List_dynamic._as(J.cast$1$0$ax(t2, t3));
                t2 = t1.$index($import, "cpuProfile");
                cpuProfileJson = t3._as(t2 == null ? P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic) : t2);
                cpuProfileData = J.get$isNotEmpty$asx(cpuProfileJson) ? E.CpuProfileData_parse(cpuProfileJson) : null;
                selectedFrameId = H._asStringS(t1.$index($import, "selectedFrameId"));
                t2 = t1.$index($import, "selectedEvent");
                selectedEventJson = t3._as(t2 == null ? P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic) : t2);
                t2 = J.getInterceptor$asx(selectedEventJson);
                if (t2.get$isNotEmpty(selectedEventJson)) {
                  t2 = t2.$index(selectedEventJson, "firstTrace");
                  if (t2 == null) {
                    t2 = type$.dynamic;
                    t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
                  }
                  selectedEvent = A.OfflineTimelineEvent$(t3._as(J.cast$2$0$ax(t2, type$.String, type$.dynamic)));
                } else
                  selectedEvent = null;
                t1 = t1.$index($import, "displayRefreshRate");
                offlineData = A.OfflineFrameBasedTimelineData$_(cpuProfileData, H._asDoubleS(t1 == null ? 60 : t1), null, selectedEvent, null, selectedFrameId, type$.List_Map_String_dynamic._as(traceEvents));
              } else {
                t2 = t1.$index($import, "traceEvents");
                if (t2 == null)
                  t2 = [];
                t3 = type$.dynamic;
                t2 = P.List_List$from(type$.Iterable_dynamic._as(t2), true, t3);
                traceEvents = new H.CastList(t2, H._arrayInstanceType(t2)._eval$1("CastList<1,Map<String,@>>"));
                t2 = t1.$index($import, "cpuProfile");
                if (t2 == null)
                  t2 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, t3);
                t4 = type$.Map_String_dynamic;
                t4._as(t2);
                cpuProfileData = J.get$isNotEmpty$asx(t2) ? E.CpuProfileData_parse(t2) : null;
                t1 = t1.$index($import, "selectedEvent");
                selectedEventJson = t4._as(t1 == null ? P.LinkedHashMap_LinkedHashMap$_empty(type$.String, t3) : t1);
                t1 = J.getInterceptor$asx(selectedEventJson);
                if (t1.get$isNotEmpty(selectedEventJson)) {
                  t1 = t1.$index(selectedEventJson, "firstTrace");
                  if (t1 == null)
                    t1 = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
                  selectedEvent = A.OfflineTimelineEvent$(t4._as(J.cast$2$0$ax(t1, type$.String, t3)));
                } else
                  selectedEvent = null;
                t1 = P.SplayTreeMap$(A.html_timeline_model_FullTimelineData_eventGroupComparator$closure(), type$.String, type$.FullTimelineEventGroup);
                t2 = H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent);
                t3 = traceEvents;
                offlineData = new A.OfflineFullTimelineData(t2, t1, new B.TimeRange(true), C.TimelineMode_1, t3, selectedEvent, cpuProfileData);
              }
              if (J.get$isEmpty$asx(offlineData.traceEvents)) {
                $async$self.toast$1("Imported file does not contain timeline data.");
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.connectDialog.parent.element.style;
              t1.display = "none";
              t1 = $async$self.snapshotMessage.parent.element.style;
              t1.display = "none";
              $.offlineMode = true;
              t1 = $async$self.screens;
              timelineScreen = type$.HtmlTimelineScreen._as(C.JSArray_methods.firstWhere$2$orElse(t1, new A.HtmlFramework__importTimeline_closure(), new A.HtmlFramework__importTimeline_closure0()));
              if (timelineScreen == null) {
                timelineScreen = M.HtmlTimelineScreen$(timelineMode, null, null);
                C.JSArray_methods.add$1(t1, timelineScreen);
              }
              $async$self.navigateTo$1("timeline");
              $async$goto = 3;
              return P._asyncAwait(timelineScreen.prepareViewForOfflineData$1(timelineMode), $async$_importTimeline$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return P._asyncAwait(timelineScreen.timelineController.loadOfflineData$1(offlineData), $async$_importTimeline$1);
            case 4:
              // returning from await.
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_importTimeline$1, $async$completer);
    },
    exitOfflineMode$0: function() {
      var t1, t2, _this = this;
      $.offlineMode = false;
      if (type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp == null) {
        t1 = _this.connectDialog.parent.element.style;
        t1.display = "initial";
        t1 = _this.snapshotMessage.parent.element.style;
        t1.display = "initial";
        J.get$children$x(A.queryId("content")).clear$0(0);
        t1 = _this.screens;
        t2 = H._arrayInstanceType(t1)._eval$1("bool(1)")._as(new A.HtmlFramework_exitOfflineMode_closure());
        if (!!t1.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeWhere"));
        C.JSArray_methods._removeWhere$2(t1, t2, true);
        _this.auxiliaryStatus.set$defaultStatus(0, _this.defaultAuxiliaryStatus);
      } else {
        t1 = _this._html_framework$_previous;
        _this.navigateTo$1((t1 == null ? _this.current : t1).id);
      }
    },
    navigateTo$1: function(id) {
      var search, t1, ref, t2,
        $screen = this.getScreen$1(id);
      if ($screen.disabled)
        return false;
      F.screen(id);
      search = window.location.search;
      if (search == null) {
        t1 = $screen.id;
        ref = t1.length === 0 ? t1 : "#" + t1;
      } else {
        t1 = $screen.id;
        ref = search + (t1.length === 0 ? t1 : "#" + t1);
      }
      t1 = window.history;
      t2 = $screen.name;
      t1.toString;
      t1.pushState(new P._StructuredCloneDart2Js([], []).walk$1(null), t2, ref);
      this.load$1(0, $screen);
      return true;
    },
    _hookupShortcuts$0: function() {
      var t1 = window,
        t2 = type$.void_Function_KeyboardEvent._as(new A.HtmlFramework__hookupShortcuts_closure(this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1, "keydown", t2, false, type$.KeyboardEvent);
    },
    loadScreenFromLocation$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$loadScreenFromLocation$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._hookupShortcuts$0();
              $async$goto = 2;
              return P._asyncAwait($async$self.screensReady.future.whenComplete$1(new A.HtmlFramework_loadScreenFromLocation_closure($async$self)), $async$loadScreenFromLocation$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadScreenFromLocation$0, $async$completer);
    },
    getScreen$2$onlyEnabled: function(id, onlyEnabled) {
      return C.JSArray_methods.firstWhere$2$orElse(this.screens, new A.HtmlFramework_getScreen_closure(id, onlyEnabled), new A.HtmlFramework_getScreen_closure0());
    },
    getScreen$1: function(id) {
      return this.getScreen$2$onlyEnabled(id, false);
    },
    handlePopState$1: function($event) {
      type$.PopStateEvent._as($event);
      this.loadScreenFromLocation$0();
    },
    load$1: function(_, $screen) {
      var t1, t2, t3, screenContent, _this = this;
      if (_this.current == null)
        J.get$children$x(A.queryId("content")).clear$0(0);
      t1 = _this.current;
      if (t1 != null) {
        _this._html_framework$_previous = t1;
        _this.current = null;
        t1.exiting$0();
        _this._html_framework$_previous._visible.set$value(0, false);
        t1 = _this.pageStatus;
        C.JSArray_methods.set$length(t1._html_framework$_items, 0);
        t1._rebuild$0();
        _this.messageManager.removeAll$0();
        _this._screenContents.$index(0, _this._html_framework$_previous).attribute$2("hidden", true);
      }
      _this.current = $screen;
      t1 = _this._screenContents;
      t2 = t1.containsKey$1(0, $screen);
      t3 = _this.current;
      if (t2) {
        t1.$index(0, t3).attribute$2("hidden", false);
        if ($screen.needsResizing) {
          t1.$index(0, _this.current).element.dispatchEvent(W.Event_Event$eventType("Event", "resize", true, true));
          $screen.needsResizing = false;
        }
      } else {
        t3.framework = _this;
        screenContent = t3.createContent$1(_this);
        screenContent.attribute$1("full");
        new A.CoreElement(A.queryId("content")).add$1(0, screenContent);
        _this.current.onContentAttached$0();
        t1.$indexSet(0, _this.current, screenContent);
        t1 = J.get$onResize$x(screenContent.element);
        t2 = t1.$ti;
        t3 = t2._eval$1("~(1)")._as(new A.HtmlFramework_load_closure(_this));
        type$.void_Function._as(null);
        W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
      }
      _this.current._visible.set$value(0, true);
      _this.current.entering$0();
      t1 = _this.pageStatus;
      t2 = _this.current.statusItems;
      t1.toString;
      C.JSArray_methods.addAll$1(t1._html_framework$_items, type$.List_HtmlStatusItem._as(t2));
      t1._rebuild$0();
      t1 = _this.messageManager;
      t2 = t1._messages.$index(0, _this.current.id);
      if (t2 != null)
        J.forEach$1$ax(t2, t1.get$_showMessage());
      _this.auxiliaryStatus.set$defaultStatus(0, $screen._helpStatus);
      _this.updatePage$0();
    },
    updatePage$0: function() {
      var t1, t2, t3, t4;
      for (t1 = type$.Element, t2 = document, H.checkTypeBound(t1, t1, "T", "querySelectorAll"), t1 = type$._FrozenElementList_Element, t2 = new W._FrozenElementList(t2.querySelectorAll("#main-nav a"), t1), t1 = new H.ListIterator(t2, t2.get$length(t2), t1._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        t3 = this.current.id;
        t3 = t3.length === 0 ? t3 : "#" + t3;
        t4 = t2.getAttribute("href");
        J.get$classes$x(t2).toggle$2(0, "active", t3 === t4);
      }
      this._pageChangeController.add$1(0, this.current.id);
    },
    showError$2: function(title, error) {
      var message, _null = null;
      if (error != null) {
        message = H.S(error);
        if (C.JSString_methods.startsWith$1(message, "[object ") || C.JSString_methods.startsWith$1(message, "Instance of "))
          message = _null;
      } else
        message = _null;
      this.messageManager.addMessage$2(G.HtmlMessage$(C.MessageType_2, _null, _null, message, title), "general");
    },
    toast$3$hideDelay$title: function(message, hideDelay, title) {
      var _null = null,
        toast = new A.HtmlToast(title, message, type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)));
      toast.CoreElement$5$attributes$classes$html$text("div", _null, "toast", _null, _null);
      if (title != null)
        toast.add$1(0, A.CoreElement$("label", _null, _null, _null, title));
      toast.add$1(0, A.CoreElement$("div", _null, _null, _null, message));
      toast.toastAnimator = new A.HtmlToastAnimator(toast);
      new A.CoreElement(A.queryId("toast-container")).add$1(0, toast);
      toast.show$1$hideDelay(0, hideDelay);
    },
    toast$1: function(message) {
      return this.toast$3$hideDelay$title(message, C.Duration_4000000, null);
    },
    toast$2$title: function(message, title) {
      return this.toast$3$hideDelay$title(message, C.Duration_4000000, title);
    },
    toast$2$hideDelay: function(message, hideDelay) {
      return this.toast$3$hideDelay$title(message, hideDelay, null);
    }
  };
  A.HtmlFramework__initDragDrop_closure.prototype = {
    call$1: function(e) {
      e = type$.MouseEvent._as(type$.Event._as(e));
      e.preventDefault();
      e.dataTransfer.dropEffect = "move";
      return null;
    },
    $signature: 19
  };
  A.HtmlFramework__initDragDrop_closure0.prototype = {
    call$1: function(e) {
      return this.$this._onDrop$1(type$.MouseEvent._as(type$.Event._as(e)));
    },
    $signature: 19
  };
  A.HtmlFramework__onDrop_closure.prototype = {
    call$1: function(_) {
      var $import, devToolsScreen, e, t1, exception, _this = this;
      type$.ProgressEvent._as(_);
      try {
        $import = type$.Map_String_dynamic._as(C.C_JsonCodec.decode$2$reviver(0, H._asStringS(C.FileReader_methods.get$result(_this.reader)), null));
        devToolsScreen = J.$index$asx($import, "dartDevToolsScreen");
        if (devToolsScreen == null) {
          _this.$this.toast$2$hideDelay("The imported file is not a Dart DevTools file. At this time, DevTools only supports importing files that were originally exported from DevTools.", C.Duration_10000000);
          return;
        }
        t1 = _this.$this;
        switch (devToolsScreen) {
          case "timeline":
            t1._importTimeline$1($import);
            break;
          default:
            t1.toast$2$hideDelay('Could not import file. The imported file is from "' + H.S(devToolsScreen) + '", which is not supported by this version of Dart DevTools. You may need to upgrade your version of Dart DevTools to view this file.', C.Duration_10000000);
            return;
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          e = t1;
          _this.$this.toast$2$hideDelay('JSON syntax error in imported file: "' + H.S(e) + '". Please make sure the imported file is a Dart DevTools file, and check that it has not been modified.', C.Duration_10000000);
          return;
        } else
          throw exception;
      }
      _this.$this.messageManager.removeAll$0();
    },
    $signature: 25
  };
  A.HtmlFramework__importTimeline_closure.prototype = {
    call$1: function($screen) {
      return type$.HtmlScreen._as($screen).id === "timeline";
    },
    $signature: 39
  };
  A.HtmlFramework__importTimeline_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  A.HtmlFramework_exitOfflineMode_closure.prototype = {
    call$1: function($screen) {
      return type$.HtmlScreen._as($screen).id === "timeline";
    },
    $signature: 39
  };
  A.HtmlFramework__hookupShortcuts_closure.prototype = {
    call$1: function(e) {
      var t1, t2;
      type$.KeyboardEvent._as(e);
      t1 = this.$this.current;
      if (t1 != null) {
        t2 = e.key;
        if (t2.length !== 0) {
          t1 = t1.shortcutCallback;
          t1 = t1 != null && H.boolConversionCheck(t1.call$4(e.ctrlKey, e.shiftKey, e.altKey, t2));
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        e.preventDefault();
    },
    $signature: 13
  };
  A.HtmlFramework_loadScreenFromLocation_closure.prototype = {
    call$0: function() {
      var t1, $screen, t2, _null = null,
        _s28_ = "This screen is not available",
        _s8_ = "notfound",
        _s9_ = "Not Found",
        id = window.location.hash;
      if (id.length !== 0)
        id = C.JSString_methods.substring$1(id, 1);
      t1 = this.$this;
      $screen = t1.getScreen$2$onlyEnabled(id, true);
      if ($screen == null)
        $screen = C.JSArray_methods.firstWhere$2$orElse(t1.screens, new A.HtmlFramework_loadScreenFromLocation__closure(), new A.HtmlFramework_loadScreenFromLocation__closure0(t1));
      if ($screen != null) {
        E.setupAndGaScreen($screen.id);
        t1.load$1(0, $screen);
      } else {
        t2 = H.setRuntimeTypeInfo([], type$.JSArray_HtmlStatusItem);
        !Y.hiddenPages().contains$1(0, "none");
        t2 = new F.HtmlNotFoundScreen(_s9_, _s8_, _null, _s28_, false, true, _null, new B.Property(new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_bool), false, type$.Property_bool), t2);
        t2.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(_s28_, true, _null, _s8_, _s9_, _null, true);
        t1.load$1(0, t2);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  A.HtmlFramework_loadScreenFromLocation__closure.prototype = {
    call$1: function($screen) {
      return !type$.HtmlScreen._as($screen).disabled;
    },
    $signature: 39
  };
  A.HtmlFramework_loadScreenFromLocation__closure0.prototype = {
    call$0: function() {
      return C.JSArray_methods.get$first(this.$this.screens);
    },
    $signature: 330
  };
  A.HtmlFramework_getScreen_closure.prototype = {
    call$1: function($screen) {
      var t1;
      type$.HtmlScreen._as($screen);
      if ($screen.id === this.id)
        t1 = !this.onlyEnabled || !$screen.disabled;
      else
        t1 = false;
      return t1;
    },
    $signature: 39
  };
  A.HtmlFramework_getScreen_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  A.HtmlFramework_load_closure.prototype = {
    call$1: function(e) {
      var t1;
      e.stopImmediatePropagation();
      t1 = this.$this;
      t1._screenContents.forEach$1(0, new A.HtmlFramework_load__closure(t1));
    },
    $signature: 3
  };
  A.HtmlFramework_load__closure.prototype = {
    call$2: function(theScreen, $content) {
      type$.HtmlScreen._as(theScreen);
      type$.CoreElement._as($content);
      if (this.$this.current != theScreen)
        theScreen.needsResizing = true;
    },
    $signature: 347
  };
  A.HtmlStatusLine.prototype = {
    set$defaultStatus: function(_, $defaultStatus) {
      var t1 = this._defaultStatusItems;
      C.JSArray_methods.set$length(t1, 0);
      if ($defaultStatus != null)
        C.JSArray_methods.add$1(t1, $defaultStatus);
      this._rebuild$0();
    },
    _rebuild$0: function() {
      var items, t2, first, _i, item, t3,
        t1 = this.element;
      J.get$children$x(t1.element).clear$0(0);
      items = this._html_framework$_items;
      if (items.length === 0)
        items = this._defaultStatusItems;
      for (t2 = items.length, first = true, _i = 0; _i < items.length; items.length === t2 || (0, H.throwConcurrentModificationError)(items), ++_i, first = false) {
        item = items[_i];
        if (!first) {
          t3 = document.createElement("span");
          t3.textContent = "\u2022";
          t3.classList.add("separator");
          t1.add$1(0, t3);
        }
        t1.add$1(0, item.element);
      }
    },
    addAll$1: function(_, items) {
      C.JSArray_methods.addAll$1(this._html_framework$_items, type$.List_HtmlStatusItem._as(items));
      this._rebuild$0();
    }
  };
  A.HtmlActionsContainer.prototype = {
    addAction$1: function(action) {
      var t1, t2, t3, _i;
      for (t1 = this._actions, t2 = t1.length, t3 = action.id, _i = 0; _i < t2; ++_i)
        if (t1[_i].id === t3)
          return;
      if (t2 === 0)
        this.element.add$1(0, A.CoreElement$("span", "horiz-padding", "masthead-item action-separator", null, "\u2022"));
      C.JSArray_methods.add$1(t1, action);
      this.element.add$1(0, action._html_custom$_element);
    },
    removeAction$1: function(id) {
      var t1 = this._actions,
        t2 = H._arrayInstanceType(t1)._eval$1("bool(1)")._as(new A.HtmlActionsContainer_removeAction_closure(id));
      if (!!t1.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeWhere"));
      C.JSArray_methods._removeWhere$2(t1, t2, true);
    }
  };
  A.HtmlActionsContainer_removeAction_closure.prototype = {
    call$1: function(button) {
      return type$.HtmlActionButton._as(button).id === this.id;
    },
    $signature: 354
  };
  A.HtmlScreen.prototype = {
    HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab: function(disabledTooltip, enabled, iconClass, id, $name, shortcutCallback, showTab) {
      var t2, _null = null, _s4_ = "span",
        t1 = this.name;
      if (t1.length !== 0) {
        t2 = A.CoreElement$(_s4_, _null, _null, _null, _null);
        t2.add$1(0, A.CoreElement$(_s4_, _null, "optional-700", _null, t1));
        t2.add$1(0, A.CoreElement$(_s4_, _null, _null, _null, " Docs"));
        this._helpStatus = Y.createLinkStatusItem(t2, "https://flutter.dev/docs/development/tools/devtools/" + this.id, "Documentation on using the " + t1 + " page");
      }
    },
    entering$0: function() {
    },
    get$isCurrentScreen: function() {
      var t1 = this.framework;
      return t1 != null && t1.current === this;
    },
    exiting$0: function() {
    },
    toString$0: function(_) {
      return "Screen(" + this.id + ")";
    },
    onContentAttached$0: function() {
    },
    set$shortcutCallback: function(shortcutCallback) {
      this.shortcutCallback = type$.bool_Function_bool_bool_bool_String._as(shortcutCallback);
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$id: function(receiver) {
      return this.id;
    }
  };
  A.HtmlSetStateMixin.prototype = {
    setState$1: function(rebuild) {
      C.Window_methods.requestAnimationFrame$1(window, new A.HtmlSetStateMixin_setState_closure(rebuild));
    }
  };
  A.HtmlSetStateMixin_setState_closure.prototype = {
    call$1: function(_) {
      H._asNumS(_);
      return this.rebuild.call$0();
    },
    $signature: 355
  };
  A.HtmlStatusItem.prototype = {};
  A.HtmlToast.prototype = {
    show$1$hideDelay: function(_, hideDelay) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$show$1$hideDelay = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.toastAnimator.show$1$hideDelay(0, hideDelay);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$show$1$hideDelay, $async$completer);
    },
    toString$0: function(_) {
      return H.S(this.title) + " " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  A.HtmlToastAnimator.prototype = {
    show$1$hideDelay: function(_, hideDelay) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$show$1$hideDelay = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(C.Window_methods.get$animationFrame(window), $async$show$1$hideDelay);
            case 2:
              // returning from await.
              t1 = $async$self.element.element.style;
              t1.left = "0px";
              P.Timer_Timer(C.Duration_500000, new A.HtmlToastAnimator_show_closure($async$self, hideDelay));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$show$1$hideDelay, $async$completer);
    },
    hide$0: function() {
      var t1 = this.element,
        t2 = t1.element.style;
      t2.left = "400px";
      P.Timer_Timer(C.Duration_500000, t1.get$dispose());
    }
  };
  A.HtmlToastAnimator_show_closure.prototype = {
    call$0: function() {
      P.Timer_Timer(this.hideDelay, this.$this.get$hide());
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  A.HtmlConnectDialog.prototype = {
    HtmlConnectDialog$1: function(framework) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, _this = this, _null = null,
        _s9_ = "uri-field",
        _s6_ = "button",
        t1 = A.queryId("connect-dialog");
      _this.parent = new A.CoreElement(t1);
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t1 = _this.parent;
      t2 = A.CoreElement$("h2", _null, _null, _null, "Connect");
      t3 = A.CoreElement$("dl", _null, "form-group", _null, _null);
      t4 = A.CoreElement$("dt", _null, _null, _null, _null);
      t5 = A.CoreElement$("label", _null, _null, _null, "Connect to a running app");
      t5.element.setAttribute("for", _s9_);
      t6 = type$.JSArray_CoreElement;
      t4.add$1(0, H.setRuntimeTypeInfo([t5], t6));
      t5 = A.CoreElement$("dd", _null, _null, _null, _null);
      t5.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("p", _null, "note", _null, "Enter a port or URL to a running Dart or Flutter application.")], t6));
      t7 = A.CoreElement$("dd", _null, _null, _null, _null);
      t8 = A.CoreElement$("input", _null, "form-control input-sm", _null, _null);
      t9 = t8.element;
      t9.setAttribute("type", "text");
      t9.setAttribute("placeholder", "Port or URL");
      t9.setAttribute("id", _s9_);
      _this.textfield = t8;
      t9 = type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t10 = new N.PButton(t9);
      t10.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Connect");
      t9.setAttribute("type", _s6_);
      t10.clazz$1("btn-sm");
      t10.clazz$1("margin-left");
      _this.connectButton = t10;
      t7.add$1(0, H.setRuntimeTypeInfo([t8, t10], t6));
      t3.add$1(0, H.setRuntimeTypeInfo([t4, t5, t7], t6));
      t1.add$1(0, H.setRuntimeTypeInfo([t2, t3], t6));
      _this.connectButton.click$1(0, new A.HtmlConnectDialog_closure(_this));
      t6 = J.get$onKeyDown$x(_this.textfield.element);
      t3 = t6.$ti;
      t2 = t3._eval$1("~(1)")._as(new A.HtmlConnectDialog_closure0(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t6._target, t6._eventType, t2, false, t3._precomputed1);
    },
    connectTo$1: function(uri) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$connectTo$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self._connect$1(0, uri), $async$connectTo$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$connectTo$1, $async$completer);
    },
    _tryConnect$0: function() {
      var uri, exception, _this = this,
        value = J.trim$0$s(type$.InputElement._as(_this.textfield.element).value),
        port = H.Primitives_parseInt(value, null),
        handleConnectError = new A.HtmlConnectDialog__tryConnect_handleConnectError(_this, value);
      _this.framework.messageManager.removeAll$0();
      if (port != null)
        _this._connect$1(0, P.Uri_parse("ws://localhost:" + H.S(port) + "/ws", 0, null)).catchError$1(new A.HtmlConnectDialog__tryConnect_closure(handleConnectError));
      else
        try {
          uri = F.normalizeVmServiceUri(value);
          if (uri != null && uri.get$isAbsolute())
            _this._connect$1(0, uri).catchError$1(new A.HtmlConnectDialog__tryConnect_closure0(handleConnectError));
          else
            handleConnectError.call$0();
        } catch (exception) {
          H.unwrapException(exception);
          handleConnectError.call$0();
        }
    },
    _connect$1: function(_, serviceUri) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, uri, t1, newParams, t2, $async$temp1;
      var $async$_connect$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 2;
              return P._asyncAwait(E.FrameworkCore_initVmService(J.toString$0$(window.location), new A.HtmlConnectDialog__connect_closure(), serviceUri), $async$_connect$1);
            case 2:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                uri = P.Uri_parse(window.location.href, 0, null);
                t1 = type$.String;
                newParams = P.LinkedHashMap_LinkedHashMap$of(uri.get$queryParameters(), t1, t1);
                newParams.$indexSet(0, "uri", J.toString$0$(serviceUri));
                t1 = window.history;
                t2 = uri.replace$1$queryParameters(0, newParams).toString$0(0);
                t1.toString;
                t1.pushState(new P._StructuredCloneDart2Js([], []).walk$1(null), null, t2);
                t2 = $async$self.parent.element.style;
                t2.display = "none";
                t1 = $async$self.framework.snapshotMessage.parent.element.style;
                t1.display = "none";
              } else
                throw H.wrapException("not connected");
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_connect$1, $async$completer);
    }
  };
  A.HtmlConnectDialog_closure.prototype = {
    call$0: function() {
      this.$this._tryConnect$0();
    },
    $signature: 0
  };
  A.HtmlConnectDialog_closure0.prototype = {
    call$1: function($event) {
      type$.KeyboardEvent._as($event);
      if ($event.keyCode === 13) {
        $event.preventDefault();
        this.$this._tryConnect$0();
      }
    },
    $signature: 13
  };
  A.HtmlConnectDialog__tryConnect_handleConnectError.prototype = {
    call$0: function() {
      this.$this.framework.toast$1("Unable to connect to '" + this.value + "'.");
    },
    $signature: 1
  };
  A.HtmlConnectDialog__tryConnect_closure.prototype = {
    call$1: function(error) {
      this.handleConnectError.call$0();
    },
    $signature: 2
  };
  A.HtmlConnectDialog__tryConnect_closure0.prototype = {
    call$1: function(error) {
      this.handleConnectError.call$0();
    },
    $signature: 2
  };
  A.HtmlConnectDialog__connect_closure.prototype = {
    call$2: function(title, error) {
    },
    $signature: 29
  };
  A.HtmlSnapshotMessage.prototype = {};
  A.HtmlAnalyticsOptInDialog.prototype = {
    HtmlAnalyticsOptInDialog$1: function(framework) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, _this = this, _null = null, _s6_ = "button",
        _s8_ = "tabindex",
        t1 = A.queryId("ga-dialog");
      _this.parent = new A.CoreElement(t1);
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t1 = _this.parent;
      t2 = A.CoreElement$("h2", _null, _null, _null, "Welcome to Dart DevTools");
      t3 = A.CoreElement$("dl", _null, "form-group", _null, _null);
      t4 = A.CoreElement$("dd", _null, _null, _null, _null);
      t5 = type$.JSArray_CoreElement;
      t4.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("span", _null, _null, _null, "DevTools reports feature usage statistics and basic crash reports to Google in order to help Google improve the tool over time. See Google's "), A.a("https://www.google.com/intl/en/policies/privacy", "_blank", "privacy policy"), A.CoreElement$("span", _null, _null, _null, "."), A.CoreElement$("p", _null, _null, _null, _null)], t5));
      t6 = A.CoreElement$("dd", _null, _null, _null, _null);
      t7 = A.CoreElement$("p", _null, _null, _null, "Send usage statistics for DevTools?");
      t8 = type$.Element;
      t9 = t8._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t10 = new N.PButton(t9);
      t10.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Sounds good!");
      t9.setAttribute("type", _s6_);
      t10.clazz$1("btn-sm");
      t9.setAttribute(_s8_, "1");
      _this.acceptButton = t10;
      t8 = t8._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t9 = new N.PButton(t8);
      t9.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "No thanks");
      t8.setAttribute("type", _s6_);
      t9.clazz$1("btn-sm");
      t9.clazz$1("margin-left");
      t8.setAttribute(_s8_, "2");
      _this.dontAcceptButton = t9;
      t6.add$1(0, H.setRuntimeTypeInfo([t7, t10, t9], t5));
      t3.add$1(0, H.setRuntimeTypeInfo([t4, t6], t5));
      t1.add$1(0, H.setRuntimeTypeInfo([t2, t3], t5));
      _this.acceptButton.click$1(0, new A.HtmlAnalyticsOptInDialog_closure(_this));
      _this.dontAcceptButton.click$1(0, new A.HtmlAnalyticsOptInDialog_closure0(_this));
      t5 = _this.parent.element.style;
      t5.display = "none";
    }
  };
  A.HtmlAnalyticsOptInDialog_closure.prototype = {
    call$0: function() {
      F.setEnabled(true);
      self.initializeGA();
      self.hookupListenerForGA();
      var t1 = this.$this.parent.element.style;
      t1.display = "none";
    },
    $signature: 0
  };
  A.HtmlAnalyticsOptInDialog_closure0.prototype = {
    call$0: function() {
      F.setEnabled(false);
      var t1 = this.$this.parent.element.style;
      t1.display = "none";
    },
    $signature: 0
  };
  O.FrameworkController.prototype = {
    _init$0: function() {
      var t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._stateController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new O.FrameworkController__init_closure(this));
    }
  };
  O.FrameworkController__init_closure.prototype = {
    call$1: function(connected) {
      var t1 = this.$this;
      if (H.boolConversionCheck(H._asBoolS(connected)))
        t1._connectedController.add$1(0, type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.connectedUri);
      else
        t1._disconnectedController.add$1(0, null);
    },
    $signature: 11
  };
  O.ConnectVmEvent.prototype = {};
  N.LineSegment.prototype = {
    toString$0: function(_) {
      return this.start.toString$0(0) + " --> " + this.end.toString$0(0);
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    }
  };
  N.HorizontalLineSegment.prototype = {
    crossAxisIntersects$1: function(rect) {
      var t1 = this.start._dy;
      return t1 >= rect.top && t1 <= rect.bottom;
    },
    compareTo$1: function(_, other) {
      var t1 = this.start,
        t2 = type$.HorizontalLineSegment._as(other).start,
        compare = C.JSNumber_methods.compareTo$1(t1._dy, t2._dy);
      if (compare === 0)
        return J.compareTo$1$ns(t1._dx, t2._dx);
      return compare;
    },
    $isComparable: 1
  };
  N.VerticalLineSegment.prototype = {
    crossAxisIntersects$1: function(rect) {
      var t1 = this.start._dx,
        t2 = rect.left;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 >= t2 && t1 <= rect.right;
    },
    compareTo$1: function(_, other) {
      var t1 = this.start,
        t2 = type$.VerticalLineSegment._as(other).start,
        compare = J.compareTo$1$ns(t1._dx, t2._dx);
      if (compare === 0)
        return C.JSNumber_methods.compareTo$1(t1._dy, t2._dy);
      return compare;
    },
    $isComparable: 1
  };
  G.HtmlMessageManager.prototype = {
    _showMessage$1: function(message) {
      type$.HtmlMessage._as(message);
      if (C.JSArray_methods.contains$1(this._dismissedMessageIds, message.id))
        return;
      this._container.add$1(0, message.flash);
    },
    removeAll$0: function() {
      J.get$children$x(this._container.element).clear$0(0);
      var t1 = this._messages.$index(0, "general");
      if (t1 != null)
        J.removeWhere$1$ax(t1, new G.HtmlMessageManager_removeAll_closure());
    },
    addMessage$2: function(message, screenId) {
      var t1 = message._dismissController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new G.HtmlMessageManager_addMessage_closure(this, screenId));
      J.add$1$ax(this._messages.putIfAbsent$2(0, screenId, new G.HtmlMessageManager_addMessage_closure0()), message);
      this._showMessage$1(message);
    }
  };
  G.HtmlMessageManager_removeAll_closure.prototype = {
    call$1: function(m) {
      return type$.HtmlMessage._as(m).messageType === C.MessageType_2;
    },
    $signature: 122
  };
  G.HtmlMessageManager_addMessage_closure.prototype = {
    call$1: function(_message) {
      var t1;
      type$.HtmlMessage._as(_message);
      t1 = _message.id;
      if (t1 != null)
        C.JSArray_methods.add$1(this.$this._dismissedMessageIds, t1);
      t1 = this.$this._messages.$index(0, this.screenId);
      if (t1 != null)
        J.remove$1$ax(t1, _message);
    },
    $signature: 123
  };
  G.HtmlMessageManager_addMessage_closure0.prototype = {
    call$0: function() {
      return P.LinkedHashSet_LinkedHashSet$_empty(type$.HtmlMessage);
    },
    $signature: 124
  };
  G.HtmlMessage.prototype = {
    _buildFlash$0: function() {
      var t2, t3, _i, _this = this, _null = null,
        t1 = _this.messageType;
      if (t1 === C.MessageType_1)
        _this.flash.clazz$1("flash-warn");
      else if (t1 === C.MessageType_2)
        _this.flash.clazz$1("flash-error");
      t1 = _this.flash;
      type$.CoreElement._as(t1.add$1(0, A.CoreElement$("span", _null, "octicon octicon-x flash-close js-flash-close", _null, _null))).click$1(0, new G.HtmlMessage__buildFlash_closure(_this));
      t2 = _this.title;
      if (t2 != null)
        t1.add$1(0, A.CoreElement$("label", _null, _null, _null, t2));
      t2 = _this.message;
      if (t2 != null)
        for (t2 = t2.split("\n\n"), t3 = t2.length, _i = 0; _i < t3; ++_i)
          t1.add$1(0, A.CoreElement$("div", _null, _null, _null, t2[_i]));
      t2 = _this.children;
      if (t2 != null)
        C.JSArray_methods.forEach$1(t2, t1.get$add(t1));
    },
    get$id: function(receiver) {
      return this.id;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  G.HtmlMessage__buildFlash_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      J.remove$0$ax(t1.flash.element);
      t1._dismissController.add$1(0, t1);
    },
    $signature: 0
  };
  G.MessageType.prototype = {
    toString$0: function(_) {
      return this._html_message_manager$_name;
    }
  };
  A.ListDirection0.prototype = {
    toString$0: function(_) {
      return this._html_popup$_name;
    }
  };
  A.HtmlPopupListView.prototype = {
    HtmlPopupListView$0: function($T) {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>")),
        t2 = $T._eval$1("_AsyncBroadcastStreamController<0>");
      t1 = new G.HtmlSelectableList(t1, new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, t2), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_void), type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null)), $T._eval$1("HtmlSelectableList<0>"));
      t1.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t1.flex$0(0);
      t1.clazz$1("popup-items-list");
      this.set$items(0, t1);
      t1 = this.items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new A.HtmlPopupListView_closure(this, $T)));
    },
    scrollAndHighlight$3$top: function(row, topPosition, $top) {
      var t1, t2, newElement, _this = this;
      if (J.get$isEmpty$asx(_this.items.items))
        return;
      _this.set$highlightedItem(J.$index$asx(_this.items.items, row));
      t1 = _this.items;
      t2 = _this.highlightedItem;
      newElement = _this.$ti._eval$1("CoreElement(1)")._as(t1.renderer).call$1(t2);
      _this.items.setReplace$2(row, _this.highlightedItem);
      if (topPosition !== -1) {
        t1 = _this.items.element;
        t1.toString;
        t1.scrollTop = C.JSInt_methods.round$0(topPosition);
      }
      if (newElement != null)
        newElement.scrollIntoView$2$bottom$top(0, false, $top);
    },
    scrollAndHighlight$2: function(row, topPosition) {
      return this.scrollAndHighlight$3$top(row, topPosition, false);
    },
    page$2: function(_, direction, startRow) {
      var itemsVis, itemIndex, childToScrollTo, _this = this,
        t1 = _this.items.element,
        listHeight = t1.clientHeight,
        itemHeight = J.get$children$x(t1).$index(0, 0).clientHeight;
      if (typeof listHeight !== "number")
        return listHeight.$div();
      if (typeof itemHeight !== "number")
        return H.iae(itemHeight);
      itemsVis = C.JSDouble_methods.toInt$0(listHeight / itemHeight) - 1;
      switch (direction) {
        case C.ListDirection_10:
          if (typeof startRow !== "number")
            return startRow.$add();
          itemIndex = startRow + itemsVis;
          t1 = J.get$length$asx(_this.items.items);
          if (typeof t1 !== "number")
            return t1.$sub();
          if (itemIndex > t1 - 1) {
            t1 = J.get$length$asx(_this.items.items);
            if (typeof t1 !== "number")
              return t1.$sub();
            itemIndex = t1 - 1;
          }
          _this.scrollAndHighlight$3$top(itemIndex, startRow > 0 ? startRow * itemHeight : 0, true);
          childToScrollTo = itemIndex;
          break;
        case C.ListDirection_00:
          if (typeof startRow !== "number")
            return startRow.$sub();
          itemIndex = startRow - itemsVis;
          if (itemIndex < 0)
            itemIndex = 0;
          _this.scrollAndHighlight$3$top(itemIndex, itemIndex > 0 ? itemIndex * itemHeight : 0, true);
          childToScrollTo = itemIndex;
          break;
        case C.ListDirection_20:
          _this.scrollAndHighlight$2(0, 0);
          childToScrollTo = 0;
          break;
        case C.ListDirection_30:
          t1 = J.get$length$asx(_this.items.items);
          if (typeof t1 !== "number")
            return t1.$sub();
          childToScrollTo = t1 - 1;
          _this.scrollAndHighlight$2(childToScrollTo, childToScrollTo > 0 ? (childToScrollTo - itemsVis) * itemHeight : 0);
          break;
        default:
          childToScrollTo = null;
      }
      return childToScrollTo;
    },
    page$1: function($receiver, direction) {
      return this.page$2($receiver, direction, 0);
    },
    get$element: function() {
      return this.items;
    },
    setList$2$select: function(theItems, select) {
      var selection,
        t1 = this.$ti;
      t1._eval$1("List<1>")._as(theItems);
      t1._precomputed1._as(select);
      J.sort$1$ax(theItems, new A.HtmlPopupListView_setList_closure(this));
      selection = select != null ? select : null;
      this.items.setItems$3$scrollSelectionIntoView$selection(theItems, true, selection);
    },
    setList$1: function(theItems) {
      return this.setList$2$select(theItems, null);
    },
    set$items: function(_, items) {
      this.items = this.$ti._eval$1("HtmlSelectableList<1>")._as(items);
    },
    set$highlightedItem: function(highlightedItem) {
      this.highlightedItem = this.$ti._precomputed1._as(highlightedItem);
    },
    $isCoreElementView: 1
  };
  A.HtmlPopupListView_closure.prototype = {
    call$1: function(item) {
      var matchPart, startIndex, firstPart, endBoldIndex, boldPart, endPart, element, _null = null,
        _s9_ = "list-item",
        $name = J.toString$0$(this.T._as(item)),
        matchingName = $name.toLowerCase(),
        t1 = this.$this._popupAutoCompleteView._html_popup$_matcher;
      if (t1 != null && t1._html_popup$_subscription != null) {
        matchPart = type$.InputElement._as(t1._textField.get$element()).value.toLowerCase();
        startIndex = C.JSString_methods.lastIndexOf$1(matchingName, matchPart);
        firstPart = C.JSString_methods.substring$2($name, 0, startIndex);
        endBoldIndex = startIndex + matchPart.length;
        boldPart = C.JSString_methods.substring$2($name, startIndex, endBoldIndex);
        endPart = C.JSString_methods.substring$1($name, endBoldIndex);
        element = A.CoreElement$("li", _null, _s9_, J.get$innerHtml$x(W.Element_Element$html("<div>" + firstPart + '<strong class="strong-match">' + boldPart + "</strong>" + endPart + "</div>", _null, _null)), _null);
      } else
        element = A.CoreElement$("li", _null, _s9_, _null, $name);
      return element;
    },
    $signature: function() {
      return this.T._eval$1("CoreElement(0)");
    }
  };
  A.HtmlPopupListView_setList_closure.prototype = {
    call$2: function(item1, item2) {
      var t1 = this.$this.$ti._precomputed1;
      t1._as(item1);
      t1._as(item2);
      return J.compareTo$1$ns(J.toString$0$(item1), J.toString$0$(item2));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.HtmlPopupAutoCompleteView.prototype = {
    _html_popup$_initialize$0: function() {
      var t1, t2, t3, _this = this;
      _this._listView._popupAutoCompleteView = _this;
      _this._html_popup$_hookupListeners$0();
      t1 = _this._html_popup$_popupTextfield;
      t1.focus$1(0, new A.HtmlPopupAutoCompleteView__initialize_closure(_this));
      t1.blur$1(0, new A.HtmlPopupAutoCompleteView__initialize_closure0(_this));
      t1 = J.get$onKeyUp$x(t1.element);
      t2 = t1.$ti;
      t3 = t2._eval$1("~(1)")._as(new A.HtmlPopupAutoCompleteView__initialize_closure1(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
    },
    _html_popup$_hookupListeners$0: function() {
      var t1 = this._listView.items._selectionController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new A.HtmlPopupAutoCompleteView__hookupListeners_closure(this));
    }
  };
  A.HtmlPopupAutoCompleteView__initialize_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._html_popup$_matcher;
      if (t2 == null)
        t2 = t1._html_popup$_matcher = new A.HtmlAutoCompleteMatcher(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_dynamic), type$.HtmlAutoCompleteMatcher_dynamic);
      if (t2._html_popup$_subscription == null)
        t2.start$4(0, "", t1._listView, t1._html_popup$_popupTextfield, t1._completeAction);
    },
    $signature: 0
  };
  A.HtmlPopupAutoCompleteView__initialize_closure0.prototype = {
    call$0: function() {
      P.Timer_Timer(C.Duration_200000, new A.HtmlPopupAutoCompleteView__initialize__closure(this.$this));
    },
    $signature: 0
  };
  A.HtmlPopupAutoCompleteView__initialize__closure.prototype = {
    call$0: function() {
      var t1 = this.$this._html_popup$_matcher;
      return t1 == null ? null : t1.finish$1(0, true);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  A.HtmlPopupAutoCompleteView__initialize_closure1.prototype = {
    call$1: function(e) {
      var t1, value;
      type$.KeyboardEvent._as(e);
      switch (e.keyCode) {
        case 13:
        case 27:
        case 33:
        case 34:
        case 35:
        case 36:
        case 38:
        case 40:
          return;
        default:
          if (H.boolConversionCheck(e.ctrlKey) || e.key === "Control")
            e.preventDefault();
          else {
            t1 = this.$this;
            value = J.trim$0$s(type$.InputElement._as(t1._html_popup$_popupTextfield.element).value);
            t1._html_popup$_matcher.displayMatchingItems$1(value);
          }
      }
    },
    $signature: 13
  };
  A.HtmlPopupAutoCompleteView__hookupListeners_closure.prototype = {
    call$1: function(classSelected) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t4, t1, t2, t3;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._listView;
              t3 = t2.items._hadClicked;
              if (t3) {
                t4 = t1._html_popup$_matcher;
                t4 = t4 != null && t4._html_popup$_subscription != null;
              } else
                t4 = false;
              if (t4) {
                if (t3) {
                  t2.set$highlightedItem(classSelected);
                  t2 = t1._html_popup$_matcher;
                  if (t2 != null)
                    t2.finish$0(0);
                }
                t1._html_popup$_matcher.reset$0(0);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 125
  };
  A.HtmlAutoCompleteMatcher.prototype = {
    finish$1: function(_, cancel) {
      var t1 = this._html_popup$_finishCallback;
      if (t1 != null)
        t1.call$1(cancel);
    },
    finish$0: function($receiver) {
      return this.finish$1($receiver, false);
    },
    start$4: function(_, revert, listView, textfield, finishCallback) {
      var t2, t3, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(revert);
      t1._eval$1("HtmlPopupListView<1>")._as(listView);
      type$.CoreElement._as(textfield);
      type$.void_Function_$opt_bool._as(finishCallback);
      _this._listView = listView;
      _this._textField = textfield;
      if (finishCallback != null)
        _this.set$_html_popup$_finishCallback(finishCallback);
      _this._html_popup$_startMatching$2(revert, true);
      if (_this._html_popup$_subscription == null) {
        t1 = J.get$onKeyDown$x(_this._textField.get$element());
        t2 = t1.$ti;
        t3 = t2._eval$1("~(1)")._as(new A.HtmlAutoCompleteMatcher_start_closure(_this, listView));
        type$.void_Function._as(null);
        _this._html_popup$_subscription = W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
      }
    },
    start$3: function($receiver, revert, listView, textfield) {
      return this.start$4($receiver, revert, listView, textfield, null);
    },
    selectFirstItem$0: function() {
      this._html_popup$_selectRow = 0;
      this._listView.scrollAndHighlight$2(0, -1);
    },
    reset$0: function(_) {
      var originals, _this = this,
        t1 = _this._listView,
        t2 = t1.items,
        selected = t2._hadClicked ? H._asStringS(t2.selectedItem$0()) : H._asStringS(t1.highlightedItem);
      t1 = _this._html_popup$_subscription;
      if (t1 != null) {
        t1.cancel$0(0);
        _this._html_popup$_subscription = null;
      }
      t1 = _this.matchingState;
      originals = t1.$index(0, "");
      _this._listView.setList$2$select(originals, selected);
      t1.clear$0(0);
      t1.putIfAbsent$2(0, "", new A.HtmlAutoCompleteMatcher_reset_closure(_this, originals));
      type$.InputElement._as(_this._textField.get$element()).value = "";
      _this._listView.set$highlightedItem(null);
      _this._html_popup$_selectRow = -1;
    },
    _html_popup$_startMatching$2: function(original, initialize) {
      var _this = this;
      _this.set$_html_popup$_original(_this.$ti._precomputed1._as(original));
      _this._html_popup$_originalScrollTop = C.JSNumber_methods.round$0(_this._listView.items.element.scrollTop);
      type$.InputElement._as(_this._textField.get$element());
      _this.matchingState.putIfAbsent$2(0, "", new A.HtmlAutoCompleteMatcher__startMatching_closure(_this));
    },
    displayMatchingItems$1: function(charsToMatch) {
      var t2, matchingItems, _this = this,
        charsMatchLen = charsToMatch.length,
        previousMatch = charsMatchLen > 0 ? C.JSString_methods.substring$2(charsToMatch, 0, charsMatchLen - 1) : "",
        t1 = _this.matchingState,
        lastMatchingItems = t1.$index(0, previousMatch);
      if (lastMatchingItems == null)
        lastMatchingItems = t1.$index(0, "");
      t2 = J.where$1$ax(lastMatchingItems, new A.HtmlAutoCompleteMatcher_displayMatchingItems_closure(_this, charsToMatch));
      matchingItems = P.List_List$from(t2, true, t2.$ti._eval$1("Iterable.E"));
      t1.putIfAbsent$2(0, charsToMatch, new A.HtmlAutoCompleteMatcher_displayMatchingItems_closure0(_this, matchingItems));
      t1 = _this._listView.items;
      t1.setItems$1(H.setRuntimeTypeInfo([], t1.$ti._eval$1("JSArray<1>")));
      _this._listView.setList$1(matchingItems);
      _this.selectFirstItem$0();
      t1 = _this._listView.items.element;
      t1.toString;
      t1.scrollTop = 0;
    },
    set$_html_popup$_original: function(_original) {
      this._html_popup$_original = this.$ti._precomputed1._as(_original);
    },
    set$_html_popup$_finishCallback: function(_finishCallback) {
      this._html_popup$_finishCallback = type$.void_Function_$opt_bool._as(_finishCallback);
    }
  };
  A.HtmlAutoCompleteMatcher_start_closure.prototype = {
    call$1: function(e) {
      var t1, preventDefault, t2, t3, _this = this;
      type$.KeyboardEvent._as(e);
      switch (e.keyCode) {
        case 13:
          t1 = _this.$this;
          t1.finish$0(0);
          t1.reset$0(0);
          t1._listView.set$highlightedItem(null);
          preventDefault = true;
          break;
        case 27:
          t1 = _this.$this;
          t1.reset$0(0);
          t1._listView.setList$2$select(t1.matchingState.$index(0, ""), t1._html_popup$_original);
          if (t1._html_popup$_original != null)
            if (t1._listView.items.selectedItem$0() != null) {
              t2 = t1._listView.items;
              t3 = t1._html_popup$_originalScrollTop;
              t2 = t2.element;
              t2.toString;
              t2.scrollTop = J.round$0$n(t3);
            }
          t1.finish$0(0);
          preventDefault = false;
          break;
        case 33:
          t1 = _this.$this;
          t1._html_popup$_selectRow = t1._listView.page$2(0, C.ListDirection_00, t1._html_popup$_selectRow);
          preventDefault = true;
          break;
        case 34:
          t1 = _this.$this;
          t1._html_popup$_selectRow = t1._listView.page$2(0, C.ListDirection_10, t1._html_popup$_selectRow);
          preventDefault = true;
          break;
        case 35:
          t1 = _this.$this;
          t1._html_popup$_selectRow = t1._listView.page$1(0, C.ListDirection_30);
          preventDefault = true;
          break;
        case 36:
          t1 = _this.$this;
          t1._html_popup$_selectRow = t1._listView.page$1(0, C.ListDirection_20);
          preventDefault = true;
          break;
        case 38:
          t1 = _this.$this;
          t2 = t1._html_popup$_selectRow;
          if (typeof t2 !== "number")
            return t2.$gt();
          if (t2 > 0) {
            --t2;
            t1._html_popup$_selectRow = t2;
            t1._listView.scrollAndHighlight$2(t2, -1);
          }
          preventDefault = true;
          break;
        case 40:
          t1 = _this.$this;
          t2 = t1._html_popup$_selectRow;
          t3 = J.get$length$asx(_this.listView.items.items);
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t2 < t3 - 1) {
            t2 = t1._html_popup$_selectRow;
            if (typeof t2 !== "number")
              return t2.$add();
            ++t2;
            t1._html_popup$_selectRow = t2;
            t1._listView.scrollAndHighlight$2(t2, -1);
          }
          preventDefault = true;
          break;
        default:
          preventDefault = false;
      }
      if (preventDefault)
        e.preventDefault();
    },
    $signature: 13
  };
  A.HtmlAutoCompleteMatcher_reset_closure.prototype = {
    call$0: function() {
      return this.originals;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("List<1>()");
    }
  };
  A.HtmlAutoCompleteMatcher__startMatching_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      return t1.$ti._eval$1("List<1>")._as(t1._listView.items.items);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("List<1>()");
    }
  };
  A.HtmlAutoCompleteMatcher_displayMatchingItems_closure.prototype = {
    call$1: function(item) {
      return C.JSString_methods.lastIndexOf$1(J.toString$0$(this.$this.$ti._precomputed1._as(item)).toLowerCase(), this.charsToMatch.toLowerCase()) >= 0;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A.HtmlAutoCompleteMatcher_displayMatchingItems_closure0.prototype = {
    call$0: function() {
      return this.matchingItems;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("List<1>()");
    }
  };
  Q.HtmlTable.prototype = {
    HtmlTable$_$4$overflowAuto: function(model, rowHeight, isVirtual, overflowAuto, $T) {
      var t1, t2, t3, _this = this, _null = null;
      _this.get$model().set$client(0, _this);
      t1 = A.CoreElement$("div", "flex", (overflowAuto ? "overflow-auto" : "overflow-y") + " table-border table-virtual", _null, _null);
      _this.element = t1;
      t2 = _this._table;
      t1.add$1(0, t2);
      t2 = J.get$onKeyDown$x(t2.element);
      t1 = t2.$ti;
      t3 = t1._eval$1("~(1)")._as(new Q.HtmlTable$__closure(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t2._target, t2._eventType, t3, false, t1._precomputed1);
      _this._spacerBeforeVisibleRows = A.CoreElement$("tr", _null, _null, _null, _null);
      _this._spacerAfterVisibleRows = A.CoreElement$("tr", _null, _null, _null, _null);
      t1 = J.get$onScroll$x(_this.element.element);
      t3 = t1.$ti;
      W._EventStreamSubscription$(t1._target, t1._eventType, t3._eval$1("~(1)")._as(new Q.HtmlTable$__closure0(_this)), false, t3._precomputed1);
      t3 = new ResizeObserver(H.convertDartClosureToJS(_this.get$_resize(), 2));
      _this._resizeObserver = t3;
      t3.observe(_this.element.element);
    },
    _resize$2: function(entries, observer) {
      type$.ResizeObserver._as(observer);
      if (this._thead == null)
        return;
      this.get$model().scheduleRebuild$0();
    },
    getColumnRenderer$1: function(columnModel) {
      var t1 = H._instanceType(this);
      return new Q.HtmlColumnRenderer(t1._eval$1("ColumnData<1>")._as(columnModel), t1._eval$1("HtmlColumnRenderer<1>"));
    },
    onSetRows$0: function() {
      var t1, t2, t3, t4, _this = this, _null = null;
      if (_this._thead == null) {
        t1 = A.CoreElement$("thead", _null, _null, _null, _null);
        t2 = A.CoreElement$("tr", _null, _null, _null, _null);
        t3 = _this.get$model()._columns;
        t4 = H._arrayInstanceType(t3);
        t2.add$1(0, new H.MappedListIterable(t3, t4._eval$1("CoreElement(1)")._as(new Q.HtmlTable_onSetRows_closure(_this)), t4._eval$1("MappedListIterable<1,CoreElement>")));
        t1.add$1(0, t2);
        _this._thead = t1;
        _this._table.add$1(0, t1);
      }
      if (_this._tbody == null) {
        t1 = A.CoreElement$("tbody", _null, "selectable", _null, _null);
        _this._tbody = t1;
        _this._table.add$1(0, t1);
      }
    },
    onColumnSortChanged$2: function(column, sortDirection) {
      var t1, t2, t3, t4, t5, _i, c, s, t6, t7;
      H._instanceType(this)._eval$1("ColumnData<1>")._as(column);
      for (t1 = this.get$model()._columns, t2 = t1.length, t3 = this._spanForColumn, t4 = sortDirection === C.SortDirection_0, t5 = !t4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        c = t1[_i];
        s = t3.$index(0, c);
        if (c === column) {
          t6 = s.element;
          t7 = J.getInterceptor$x(t6);
          t7.get$classes(t6).toggle$2(0, "up", t4);
          t7.get$classes(t6).toggle$2(0, "down", t5);
        } else {
          t6 = s.element;
          t7 = J.getInterceptor$x(t6);
          t7.get$classes(t6).toggle$2(0, "up", false);
          t7.get$classes(t6).toggle$2(0, "down", false);
        }
      }
    },
    rebuildTable$0: function() {
      this.get$model();
      this._rebuildVirtualTable$0();
    },
    _rebuildVirtualTable$0: function() {
      var currentRowIndex, _this = this,
        data = _this.get$model().data,
        totalRows = data.length,
        t1 = _this.rowHeight,
        firstVisibleRow = C.JSDouble_methods.floor$0((C.JSNumber_methods.round$0(_this.element.element.scrollTop) - C.JSNumber_methods.round$0(_this._thead.element.offsetHeight)) / t1),
        numVisibleRows = C.JSDouble_methods.ceil$0(C.JSNumber_methods.round$0(_this.element.element.offsetHeight) / t1) + 1,
        firstRenderedRowInclusive = H._asIntS(C.JSInt_methods.clamp$2(firstVisibleRow, 0, H._asIntS(C.JSInt_methods.clamp$2(totalRows - (numVisibleRows + 1), 0, totalRows)))),
        lastRenderedRowExclusive = H._asIntS(C.JSInt_methods.clamp$2(firstRenderedRowInclusive + numVisibleRows + 2, 0, totalRows)),
        spacerBeforeHeight = firstRenderedRowInclusive * t1,
        t2 = _this._spacerBeforeVisibleRows,
        t3 = "" + spacerBeforeHeight + "px";
      t2 = t2.element.style;
      t2.height = t3;
      t2 = _this._spacerBeforeVisibleRows;
      t3 = spacerBeforeHeight === 0 ? "none" : null;
      t2 = t2.element.style;
      t2.toString;
      t2.display = t3 == null ? "" : t3;
      t2 = J.get$children$x(_this._tbody.element);
      if (!t2.get$isEmpty(t2)) {
        t2 = J.get$children$x(_this._tbody.element);
        t2 = !J.$eq$(t2.get$first(t2), _this._spacerBeforeVisibleRows.element);
      } else
        t2 = true;
      if (t2)
        J.get$children$x(_this._tbody.element).insert$2(0, 0, _this._spacerBeforeVisibleRows.element);
      t2 = J.get$children$x(_this._tbody.element);
      if (!t2.get$isEmpty(t2)) {
        t2 = J.get$children$x(_this._tbody.element);
        t2 = J.$eq$(t2.get$last(t2), _this._spacerAfterVisibleRows.element);
      } else
        t2 = false;
      if (t2)
        J.get$children$x(_this._tbody.element).removeLast$0(0);
      currentRowIndex = _this._buildTableRows$3$currentRowIndex$firstRenderedRowInclusive$lastRenderedRowExclusive(1, firstRenderedRowInclusive, lastRenderedRowExclusive);
      if (currentRowIndex > 0) {
        t2 = J.get$children$x(_this._tbody.element);
        t2 = t2.get$length(t2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = currentRowIndex < t2;
      } else
        t2 = false;
      if (t2) {
        t2 = J.get$children$x(_this._tbody.element);
        t2.removeWhere$1(t2, new Q.HtmlTable__rebuildVirtualTable_closure(_this));
      }
      t2 = data.length;
      t3 = _this._spacerAfterVisibleRows;
      t1 = "" + (t2 - lastRenderedRowExclusive) * t1 + "px";
      t3 = t3.element.style;
      t3.height = t1;
      J.get$children$x(_this._tbody.element).add$1(0, _this._spacerAfterVisibleRows.element);
    },
    _buildTableRows$3$currentRowIndex$firstRenderedRowInclusive$lastRenderedRowExclusive: function(currentRowIndex, firstRenderedRowInclusive, lastRenderedRowExclusive) {
      var t2, t3, t4, index, t5, dataObject, isReusableRow, tableRow, t6, t7, t8, t9, currentColumnIndex, _i, column, t10, isReusableColumn, tableCell, t11, columnRenderer, t12, _this = this, _null = null,
        _s10_ = "overflow-y",
        _s33_ = "spaces not allowed in class names",
        t1 = _this._dummyRowToForceAlternatingColor.element;
      J.get$children$x(_this._tbody.element).remove$1(0, t1);
      if (C.JSInt_methods.$mod(firstRenderedRowInclusive, 2) === 1) {
        J.get$children$x(_this._tbody.element).insert$2(0, 0, t1);
        ++currentRowIndex;
      }
      t1 = _this._rowForIndex;
      t1.clear$0(0);
      for (t2 = type$.JSArray_String, t3 = _this.rowHeight, t4 = _this._dataForRow, index = firstRenderedRowInclusive; index < lastRenderedRowExclusive; ++index) {
        t5 = _this.get$model().data;
        if (index < 0 || index >= t5.length)
          return H.ioore(t5, index);
        dataObject = t5[index];
        t5 = J.get$children$x(_this._tbody.element);
        t5 = t5.get$length(t5);
        if (typeof t5 !== "number")
          return H.iae(t5);
        isReusableRow = currentRowIndex < t5;
        tableRow = isReusableRow ? new A.CoreElement(J.get$children$x(_this._tbody.element).$index(0, currentRowIndex)) : A.CoreElement$("tr", _null, _null, _null, _null);
        ++currentRowIndex;
        t5 = tableRow.element;
        t4.$indexSet(0, t5, dataObject);
        t1.$indexSet(0, index, tableRow);
        t6 = !isReusableRow;
        if (t6)
          tableRow.click$1(0, new Q.HtmlTable__buildTableRows_closure(_this, tableRow, new Q.HtmlTable__buildTableRows_selectRow(_this)));
        t7 = "" + t3 + "px";
        t8 = t5.style;
        t8.height = t7;
        if (H.stringContainsUnchecked(_s10_, " ", 0))
          H.throwExpression(P.ArgumentError$(_s33_));
        J.get$classes$x(t5).add$1(0, _s10_);
        for (t7 = _this.get$model()._columns, t8 = t7.length, t9 = J.getInterceptor$x(t5), currentColumnIndex = 0, _i = 0; _i < t7.length; t7.length === t8 || (0, H.throwConcurrentModificationError)(t7), ++_i) {
          column = t7[_i];
          t10 = t9.get$children(t5);
          t10 = t10.get$length(t10);
          if (typeof t10 !== "number")
            return H.iae(t10);
          isReusableColumn = currentColumnIndex < t10;
          tableCell = isReusableColumn ? new A.CoreElement(t9.get$children(t5).$index(0, currentColumnIndex)) : A.CoreElement$("td", _null, _null, _null, _null);
          ++currentColumnIndex;
          t10 = tableCell.element;
          t11 = J.getInterceptor$x(t10);
          t11.get$classes(t10).clear$0(0);
          if (column.get$cssClass() != null)
            C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo(column.get$cssClass().split(" "), t2), tableCell.get$clazz());
          columnRenderer = _this.getColumnRenderer$1(column);
          t12 = columnRenderer._getAlignmentCss$1(columnRenderer.get$model().alignment);
          if (H.stringContainsUnchecked(t12, " ", 0))
            H.throwExpression(P.ArgumentError$(_s33_));
          t11.get$classes(t10).add$1(0, t12);
          columnRenderer.renderToElement$2(tableCell, dataObject);
          if (!isReusableColumn)
            tableRow.add$1(0, tableCell);
        }
        if (J.$eq$(dataObject, _this.get$model()._selectedObject))
          _this._select$3(t5, _this.get$model()._selectedObject, index);
        else
          t9.get$classes(t5).remove$1(0, "selected");
        if (t6)
          J.get$children$x(_this._tbody.element).add$1(0, t5);
      }
      return currentRowIndex;
    },
    _select$3: function(row, object, index) {
      var t1, t2,
        _s8_ = "selected";
      H._instanceType(this)._precomputed1._as(object);
      t1 = this._tbody;
      if (t1 != null) {
        t1 = t1.element;
        t2 = type$.Element;
        t1.toString;
        H.checkTypeBound(t2, t2, "T", "querySelectorAll");
        t2 = type$._FrozenElementList_Element;
        t1 = new W._FrozenElementList(t1.querySelectorAll(".selected"), t2);
        t2 = new H.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>"));
        for (; t2.moveNext$0();)
          J.get$classes$x(t2.__internal$_current).remove$1(0, _s8_);
      }
      if (row != null)
        J.get$classes$x(row).add$1(0, _s8_);
      t1 = this.get$model();
      H._instanceType(t1)._precomputed1._as(object);
      t1._selectedObjectIndex = index;
      if (!J.$eq$(t1._selectedObject, object)) {
        t1.set$_selectedObject(object);
        t1.selectController.add$1(0, object);
      }
    },
    selectByIndex$2$scrollBehavior: function(newIndex, scrollBehavior) {
      var dataObject, _this = this,
        row = _this._rowForIndex.$index(0, newIndex),
        t1 = _this.get$model().data;
      if (newIndex < 0 || newIndex >= t1.length)
        return H.ioore(t1, newIndex);
      dataObject = t1[newIndex];
      _this._select$3(row == null ? null : row.element, dataObject, newIndex);
      _this.scrollToIndex$2$scrollBehavior(newIndex, scrollBehavior);
    },
    selectByIndex$1: function(newIndex) {
      return this.selectByIndex$2$scrollBehavior(newIndex, "smooth");
    },
    scrollToIndex$2$scrollBehavior: function(rowIndex, scrollBehavior) {
      var newScrollTop, _this = this,
        t1 = _this.rowHeight,
        rowOffsetPixels = rowIndex * t1 + C.JSNumber_methods.round$0(_this._thead.element.offsetHeight),
        t2 = _this.element.element,
        visibleStartOffsetPixels = C.JSNumber_methods.round$0(t2.scrollTop),
        t3 = C.JSNumber_methods.round$0(t2.scrollTop),
        t4 = C.JSNumber_methods.round$0(t2.offsetHeight);
      if (rowOffsetPixels >= visibleStartOffsetPixels + t1 && rowOffsetPixels <= t3 + t4 - t1 * 2)
        return;
      newScrollTop = H._asIntS(C.JSInt_methods.clamp$2(C.JSNumber_methods.round$0(rowOffsetPixels - C.JSNumber_methods.round$0(t2.offsetHeight) / 2), 0, C.JSNumber_methods.round$0(t2.scrollHeight)));
      t1 = _this.element.element;
      J.scrollTo$1$x(t1, P.LinkedHashMap_LinkedHashMap$_literal(["left", C.JSNumber_methods.round$0(t1.scrollLeft), "top", newScrollTop, "behavior", scrollBehavior], type$.String, type$.dynamic));
    },
    $isTableDataClient: 1,
    get$model: function() {
      return this.model;
    }
  };
  Q.HtmlTable$__closure.prototype = {
    call$1: function(e) {
      var indexOffset, t1, currentIndex, newIndex, t2;
      type$.KeyboardEvent._as(e);
      switch (e.keyCode) {
        case 38:
          indexOffset = -1;
          break;
        case 40:
          indexOffset = 1;
          break;
        case 37:
          this.$this.get$model().handleLeftKey$0();
          indexOffset = null;
          break;
        case 39:
          this.$this.get$model().handleRightKey$0();
          indexOffset = null;
          break;
        default:
          indexOffset = null;
          break;
      }
      if (indexOffset == null)
        return;
      e.preventDefault();
      t1 = this.$this;
      currentIndex = t1.get$model()._selectedObjectIndex;
      newIndex = currentIndex == null ? 0 : currentIndex + indexOffset;
      t2 = t1.get$model().data.length;
      t1.selectByIndex$1(H._asIntS(C.JSInt_methods.clamp$2(newIndex, 0, t2 - 1)));
    },
    $signature: 13
  };
  Q.HtmlTable$__closure0.prototype = {
    call$1: function(_) {
      return this.$this.get$model().scheduleRebuild$0();
    },
    $signature: 19
  };
  Q.HtmlTable_onSetRows_closure.prototype = {
    call$1: function(column) {
      var t2, s, header, _null = null,
        t1 = this.$this;
      H._instanceType(t1)._eval$1("ColumnData<1>")._as(column);
      t2 = column.title;
      s = A.CoreElement$("span", _null, "interactable" + (column.get$supportsSorting() ? " sortable" : ""), _null, t2);
      s.click$1(0, new Q.HtmlTable_onSetRows__closure(t1, column));
      t1._spanForColumn.$indexSet(0, column, s);
      t1 = t1.getColumnRenderer$1(column);
      header = A.CoreElement$("th", _null, "sticky-top " + t1._getAlignmentCss$1(t1.get$model().alignment), _null, _null);
      header.add$1(0, s);
      t1 = column.fixedWidthPx;
      if (t1 != null) {
        t2 = header.element.style;
        t1 = H.S(t1) + "px";
        t2.width = t1;
      } else {
        t1 = column.percentWidth;
        if (t1 != null) {
          t2 = header.element.style;
          t1 = H.S(t1) + "%";
          t2.width = t1;
        }
      }
      return header;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("CoreElement(ColumnData<1>)");
    }
  };
  Q.HtmlTable_onSetRows__closure.prototype = {
    call$0: function() {
      return this.$this.get$model().onColumnClicked$1(this.column);
    },
    $signature: 1
  };
  Q.HtmlTable__rebuildVirtualTable_closure.prototype = {
    call$1: function(e) {
      var t2, t3, t4,
        t1 = type$.Element;
      t1._as(e);
      t2 = this.$this;
      t3 = t2._rowForIndex;
      t3 = t3.get$values(t3);
      t4 = H._instanceType(t3);
      t1 = H.MappedIterable_MappedIterable(t3, t4._eval$1("Element(Iterable.E)")._as(new Q.HtmlTable__rebuildVirtualTable__closure()), t4._eval$1("Iterable.E"), t1);
      if (!C.JSArray_methods.contains$1(P.List_List$from(t1, true, H._instanceType(t1)._eval$1("Iterable.E")), e)) {
        t1 = t2._spacerBeforeVisibleRows.element;
        t1 = e == null ? t1 != null : e !== t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 51
  };
  Q.HtmlTable__rebuildVirtualTable__closure.prototype = {
    call$1: function(el) {
      return type$.CoreElement._as(el).get$element();
    },
    $signature: 81
  };
  Q.HtmlTable__buildTableRows_selectRow.prototype = {
    call$2: function(row, index) {
      var t1 = this.$this;
      t1._select$3(row, t1._dataForRow.$index(0, row), index);
    },
    $signature: 129
  };
  Q.HtmlTable__buildTableRows_closure.prototype = {
    call$0: function() {
      var rowElement = this.tableRow.element,
        t1 = this.$this,
        dataForRow = t1._dataForRow.$index(0, rowElement);
      this.selectRow.call$2(rowElement, C.JSArray_methods.indexOf$1(t1.get$model().data, dataForRow));
      t1.get$model().scheduleRebuild$0();
    },
    $signature: 0
  };
  Q.HtmlColumnRenderer.prototype = {
    renderToElement$2: function(cell, dataObject) {
      var $content, t1, _this = this;
      H._instanceType(_this)._precomputed1._as(dataObject);
      $content = _this.get$model().render$1(_this.get$model().getDisplayValue$1(dataObject));
      t1 = cell.element;
      if (_this.get$model().get$usesHtml())
        J.setInnerHtml$2$treeSanitizer$x(t1, $content, C.C_TrustedHtmlTreeSanitizer);
      else
        t1.textContent = $content;
      t1.title = _this.get$model().getTooltip$1(dataObject);
    },
    _getAlignmentCss$1: function(alignment) {
      switch (alignment) {
        case C.ColumnAlignment_0:
          return "left";
        case C.ColumnAlignment_1:
          return "right";
        case C.ColumnAlignment_2:
          return "center";
        default:
          throw H.wrapException(P.Exception_Exception("Invalid column alignment: " + alignment.toString$0(0)));
      }
    },
    get$model: function() {
      return this.model;
    }
  };
  Q.HtmlTreeColumnRenderer.prototype = {
    get$model: function() {
      return this.$ti._eval$1("TreeColumnData<1>")._as(this.model);
    },
    renderToElement$2: function(cell, dataObject) {
      var container, t2, t3, t4, indentWidth, t5, t6, treeToggle, _this = this, _null = null,
        t1 = _this.$ti;
      t1._precomputed1._as(dataObject);
      container = A.CoreElement$("div", _null, _null, _null, _null);
      t2 = container.element;
      t2.setAttribute("layout", "");
      t2.setAttribute("horizontal", "");
      container.flex$0(0);
      t2 = A.CoreElement$("div", _null, _null, _null, _null);
      t3 = t2.element.style;
      t1 = t1._eval$1("TreeColumnData<1>");
      H._instanceType(t1._as(_this.model))._eval$1("TreeColumnData.T")._as(dataObject);
      t4 = dataObject.get$level(dataObject);
      if (typeof t4 !== "number")
        return t4.$mul();
      indentWidth = t4 * 14;
      t4 = dataObject.children;
      t5 = t4.length;
      t6 = "" + (t5 === 0 ? indentWidth + 14 : indentWidth) + "px";
      t3.minWidth = t6;
      container.add$1(0, t2);
      dataObject.toString;
      if (t4.length !== 0) {
        treeToggle = G.HtmlTreeToggle$(false, dataObject._trees$_isExpanded);
        t2 = treeToggle._openController;
        new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new Q.HtmlTreeColumnRenderer_renderToElement_closure(_this, dataObject));
        container.add$1(0, treeToggle);
      }
      container.add$1(0, A.CoreElement$("div", _null, _null, _null, t1._as(_this.model).render$1(t1._as(_this.model).getDisplayValue$1(dataObject))));
      t2 = cell.element;
      J.get$children$x(t2).clear$0(0);
      cell.add$1(0, container);
      t2.title = t1._as(_this.model).getTooltip$1(dataObject);
    }
  };
  Q.HtmlTreeColumnRenderer_renderToElement_closure.prototype = {
    call$1: function(isOpen) {
      var t1 = this.$this,
        t2 = this.dataObject,
        t3 = t1.$ti;
      if (H.boolConversionCheck(H._asBoolS(isOpen)))
        t3._eval$1("TreeColumnData<1>")._as(t1.model).nodeExpandedController.add$1(0, t2);
      else
        t3._eval$1("TreeColumnData<1>")._as(t1.model).nodeCollapsedController.add$1(0, t2);
    },
    $signature: 11
  };
  Q.HtmlTreeTable.prototype = {
    get$model: function() {
      return this.$ti._eval$1("TreeTableData<1>")._as(this.model);
    },
    getColumnRenderer$1: function(columnModel) {
      var t1 = this.$ti;
      t1._eval$1("ColumnData<1>")._as(columnModel);
      return t1._eval$1("TreeColumnData<1>")._is(columnModel) ? new Q.HtmlTreeColumnRenderer(columnModel, t1._eval$1("HtmlTreeColumnRenderer<1>")) : new Q.HtmlColumnRenderer(columnModel, t1._eval$1("HtmlColumnRenderer<1>"));
    }
  };
  Q.TreeTableToolbar.prototype = {
    _expandAll$0: function() {
      var t1 = this.treeTable;
      t1.toString;
      t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).expandAll$0();
    },
    _collapseAll$0: function() {
      var t1 = this.treeTable;
      t1.toString;
      t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).collapseAll$0();
    },
    set$treeTable: function(treeTable) {
      this.treeTable = this.$ti._eval$1("HtmlTreeTable<1>")._as(treeTable);
    }
  };
  Q._HtmlTable_Object_HtmlSetStateMixin.prototype = {};
  D.HtmlFlagDetails.prototype = {};
  D.HtmlInfoScreen.prototype = {
    HtmlInfoScreen$0: function() {
      this._html_info_screen$_controller = new T.InfoController(new D.HtmlInfoScreen_closure(this), new D.HtmlInfoScreen_closure0(this), new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic), new K.Disposer(H.setRuntimeTypeInfo([], type$.JSArray_StreamSubscription_dynamic), H.setRuntimeTypeInfo([], type$.JSArray_Listenable), H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function)));
    },
    createContent$1: function(framework) {
      var screenDiv, t1, t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null, _s3_ = "div", _s6_ = "layout",
        _s8_ = "vertical";
      E.setupDimensions();
      _this.framework = framework;
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null);
      t1 = screenDiv.element;
      t1.setAttribute(_s6_, "");
      t1.setAttribute(_s8_, "");
      t1 = A.CoreElement$(_s3_, _null, "version-container", _null, _null);
      t2 = t1.element;
      t2.setAttribute(_s6_, "");
      t2.setAttribute(_s8_, "");
      t1.flex$0(0);
      t2 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t3 = t2.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s8_, "");
      t2.attribute$2("hidden", true);
      _this._flutterVersionContainer = t2;
      t3 = type$.ServiceConnectionManager;
      t4 = type$.JSArray_CoreElement;
      t1.add$1(0, H.setRuntimeTypeInfo([t2, _this._versionDisplay$2$title$value("Dart SDK:", t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).sdkVersion), _this._versionDisplay$3$includeMargin$title$value(false, "DevTools:", "0.2.5")], t4));
      _this._versionContainer = t1;
      t1 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t1.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("h2", _null, _null, _null, "Version Information"), _this._versionContainer], t4));
      t2 = A.CoreElement$(_s3_, _null, "section flag-section", _null, _null);
      t5 = A.CoreElement$("h2", _null, _null, _null, "Dart VM Flag List");
      t6 = A.CoreElement$(_s3_, _null, "flag-list-container", _null, _null);
      t6.flex$0(0);
      t7 = A.CoreElement$(_s3_, _null, "flag-list", _null, _null);
      t8 = t7.element;
      t8.setAttribute(_s6_, "");
      t8.setAttribute(_s8_, "");
      _this._flagList = t7;
      t6.add$1(0, t7);
      t2.add$1(0, H.setRuntimeTypeInfo([t5, t6], t4));
      t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.toString;
      t2.attribute$2("hidden", t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vm.name === "ChromeDebugProxy");
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t1, t2], t4));
      _this._html_info_screen$_controller.entering$0();
      return screenDiv;
    },
    _versionDisplay$3$includeMargin$title$value: function(includeMargin, title, value) {
      var _null = null,
        versionDisplay = A.CoreElement$("div", _null, _null, _null, _null),
        t1 = versionDisplay.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("horizontal", "");
      versionDisplay.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("div", _null, "info-title", _null, title), A.CoreElement$("div", _null, "version-value", _null, value)], type$.JSArray_CoreElement));
      if (includeMargin)
        versionDisplay.clazz$1("version-margin");
      return versionDisplay;
    },
    _versionDisplay$2$title$value: function(title, value) {
      return this._versionDisplay$3$includeMargin$title$value(true, title, value);
    }
  };
  D.HtmlInfoScreen_closure0.prototype = {
    call$1: function(flagList) {
      var t2, t3,
        t1 = this.$this._flagList;
      J.get$children$x(t1.element).clear$0(0);
      t2 = flagList.flags;
      t2.toString;
      t3 = H._arrayInstanceType(t2);
      t1.add$1(0, new H.MappedListIterable(t2, t3._eval$1("HtmlFlagDetails(1)")._as(new D.HtmlInfoScreen__closure()), t3._eval$1("MappedListIterable<1,HtmlFlagDetails>")));
    },
    $signature: 130
  };
  D.HtmlInfoScreen__closure.prototype = {
    call$1: function(flag) {
      var t1, flagDescription, t2, flagValues, t3, _null = null, _s3_ = "div", _s4_ = "span";
      type$.Flag._as(flag);
      t1 = new D.HtmlFlagDetails(type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t1.CoreElement$5$attributes$classes$html$text(_s3_, _null, "flag-details-container", _null, _null);
      flagDescription = A.CoreElement$(_s3_, _null, "flag-details-descriptions-container", _null, _null);
      t2 = type$.JSArray_CoreElement;
      flagDescription.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s3_, _null, "info-title", _null, flag.name), A.CoreElement$(_s4_, _null, "flag-description", _null, flag.comment)], t2));
      flagValues = A.CoreElement$(_s3_, _null, "flag-details-values-container", _null, _null);
      t3 = flagValues.element;
      t3.setAttribute("layout", "");
      t3.setAttribute("vertical", "");
      t3 = A.CoreElement$(_s4_, _null, "flag-value", _null, flag.valueAsString);
      flagValues.add$1(0, H.setRuntimeTypeInfo([t3, A.CoreElement$(_s4_, _null, "flag-modified", _null, H.boolConversionCheck(flag.modified) ? "modified" : "default")], t2));
      t1.add$1(0, H.setRuntimeTypeInfo([flagDescription, flagValues], t2));
      return t1;
    },
    $signature: 131
  };
  D.HtmlInfoScreen_closure.prototype = {
    call$1: function(version) {
      var t3, t4, t5,
        t1 = this.$this,
        t2 = version == null;
      if (!t2) {
        t3 = t1._flutterVersionContainer;
        J.get$children$x(t3.element).clear$0(0);
        t4 = H.setRuntimeTypeInfo([], type$.JSArray_String);
        t5 = version.version;
        if (t5 !== "unknown")
          C.JSArray_methods.add$1(t4, t5);
        C.JSArray_methods.add$1(t4, "channel " + H.S(version.channel));
        t5 = version.repositoryUrl;
        C.JSArray_methods.add$1(t4, t5 == null ? "unknown source" : t5);
        t3.add$1(0, H.setRuntimeTypeInfo([t1._versionDisplay$2$title$value("Flutter:", C.JSArray_methods.join$1(t4, " \u2022 ")), t1._versionDisplay$2$title$value("Framework:", "revision " + H.S(version.frameworkRevision) + " \u2022 " + H.S(version.frameworkCommitDate)), t1._versionDisplay$2$title$value("Engine:", "revision " + H.S(version.engineRevision))], type$.JSArray_CoreElement));
      }
      t1._flutterVersionContainer.attribute$2("hidden", t2);
    },
    $signature: 132
  };
  T.InfoController.prototype = {
    entering$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t1, $async$temp1;
      var $async$entering$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG));
              t1 = t1.service;
              t2 = type$.FlagList;
              $async$temp1 = $async$self.onFlagListChanged;
              $async$goto = 2;
              return P._asyncAwait(t1._trackFuture$1$2("getFlagList", t1._vmService._call$1$1(0, "getFlagList", t2), t2), $async$entering$0);
            case 2:
              // returning from await.
              $async$temp1.call$1($async$result);
              $async$goto = 3;
              return P._asyncAwait($async$self._listenForFlutterVersionChanges$0(), $async$entering$0);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$entering$0, $async$completer);
    },
    _listenForFlutterVersionChanges$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, flutterVersionServiceListenable, t1, $async$temp1;
      var $async$_listenForFlutterVersionChanges$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              $async$temp1 = H;
              $async$goto = 2;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isFlutterApp(), $async$_listenForFlutterVersionChanges$0);
            case 2:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                flutterVersionServiceListenable = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).registeredServiceListenable$1("flutterVersion");
                $async$self.AutoDisposeControllerMixin__delegate.addAutoDisposeListener$2(flutterVersionServiceListenable, type$.void_Function._as(new T.InfoController__listenForFlutterVersionChanges_closure($async$self, flutterVersionServiceListenable)));
              } else
                $async$self.onFlutterVersionChanged.call$1(null);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_listenForFlutterVersionChanges$0, $async$completer);
    },
    $isDisposer: 1
  };
  T.InfoController__listenForFlutterVersionChanges_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, $async$temp1, $async$temp2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = H.boolConversionCheck($async$self.flutterVersionServiceListenable._value) && $async$self.$this.flutterVersionServiceAvailable.future._state === 0;
              t2 = $async$self.$this;
              t3 = t2.onFlutterVersionChanged;
              $async$goto = t1 ? 2 : 4;
              break;
            case 2:
              // then
              t2.flutterVersionServiceAvailable.complete$0(0);
              $async$temp1 = t3;
              $async$temp2 = T;
              $async$goto = 5;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).getFlutterVersion$0(), $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.call$1($async$temp2.FlutterVersion_FlutterVersion$parse($async$result.json));
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              t3.call$1(null);
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 15
  };
  T._InfoController_DisposableController_AutoDisposeControllerMixin.prototype = {};
  M.RemoteDiagnosticsNode.prototype = {
    $eq: function(_, other) {
      var _s8_ = "objectId";
      if (other == null)
        return false;
      if (!(other instanceof M.RemoteDiagnosticsNode))
        return false;
      return new E.InspectorInstanceRef(H._asStringS(J.$index$asx(this.json, _s8_))).$eq(0, new E.InspectorInstanceRef(H._asStringS(J.$index$asx(other.json, _s8_))));
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(H._asStringS(J.$index$asx(this.json, "objectId")));
    },
    get$name: function(_) {
      return H._asStringS(J.$index$asx(this.json, "name"));
    },
    get$style: function(_) {
      var t1 = this._style;
      return t1 == null ? this._style = this.getStyleMember$2("style", C.DiagnosticsTreeStyle_1) : t1;
    },
    get$tooltip: function() {
      var t1 = H._asStringS(J.$index$asx(this.json, "tooltip"));
      return t1 == null ? "" : t1;
    },
    get$creationLocation: function() {
      var t2,
        _s16_ = "creationLocation",
        t1 = this._creationLocation;
      if (t1 != null)
        return t1;
      t1 = this.json;
      t2 = H.boolConversionCheck(J.containsKey$1$x(t1, _s16_));
      if (!t2)
        return null;
      return this._creationLocation = new M.InspectorSourceLocation(type$.Map_String_Object._as(J.$index$asx(t1, _s16_)), null);
    },
    getBooleanMember$2: function(memberName, defaultValue) {
      var t1 = this.json,
        t2 = J.getInterceptor$asx(t1);
      if (t2.$index(t1, memberName) == null)
        return defaultValue;
      return H._asBoolS(t2.$index(t1, memberName));
    },
    getLevelMember$2: function(memberName, defaultValue) {
      var level,
        value = H._asStringS(J.$index$asx(this.json, memberName));
      if (value == null)
        return defaultValue;
      level = $.$get$diagnosticLevelUtils()._lookupTable.$index(0, value);
      return level == null ? defaultValue : level;
    },
    getStyleMember$2: function(memberName, defaultValue) {
      var value, style,
        t1 = this.json,
        t2 = J.getInterceptor$x(t1);
      if (!H.boolConversionCheck(t2.containsKey$1(t1, memberName)))
        return defaultValue;
      value = H._asStringS(t2.$index(t1, memberName));
      if (value == null)
        return defaultValue;
      style = $.$get$treeStyleUtils()._lookupTable.$index(0, value);
      return style == null ? defaultValue : style;
    },
    isEnumProperty$0: function() {
      var t1 = this.json,
        t2 = J.getInterceptor$asx(t1);
      return H._asStringS(t2.$index(t1, "type")) != null && J.startsWith$1$s(H._asStringS(t2.$index(t1, "type")), "EnumProperty<");
    },
    get$valueProperties: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Map_String_InstanceRef),
        $async$returnValue, $async$self = this, t1, t2, t3, propertyNames;
      var $async$get$valueProperties = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = $async$self._valueProperties == null ? 3 : 4;
                break;
              case 3:
                // then
                t1 = $async$self.json;
                t2 = J.getInterceptor$asx(t1);
                if (H._asStringS(t2.$index(t1, "propertyType")) != null) {
                  t3 = H._asStringS(t2.$index(t1, "valueId"));
                  t3 = t3 == null;
                } else
                  t3 = true;
                if (t3) {
                  t1 = new P._Future($.Zone__current, type$._Future_Map_String_InstanceRef);
                  t1._asyncComplete$1(null);
                  $async$self.set$_valueProperties(t1);
                  $async$returnValue = $async$self._valueProperties;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = $async$self.isEnumProperty$0() ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return P._asyncAwait($async$self.inspectorService, $async$get$valueProperties);
              case 7:
                // returning from await.
                t3 = $async$result;
                $async$returnValue = t3 == null ? null : t3.getEnumPropertyValues$1(new E.InspectorInstanceRef(H._asStringS(t2.$index(t1, "valueId"))));
                // goto return
                $async$goto = 1;
                break;
              case 6:
                // join
                switch (H._asStringS(t2.$index(t1, "propertyType"))) {
                  case "Color":
                    propertyNames = H.setRuntimeTypeInfo(["red", "green", "blue", "alpha"], type$.JSArray_String);
                    break;
                  case "IconData":
                    propertyNames = H.setRuntimeTypeInfo(["codePoint"], type$.JSArray_String);
                    break;
                  default:
                    t1 = new P._Future($.Zone__current, type$._Future_Map_String_InstanceRef);
                    t1._asyncComplete$1(null);
                    $async$self.set$_valueProperties(t1);
                    $async$returnValue = $async$self._valueProperties;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
                $async$goto = 8;
                return P._asyncAwait($async$self.inspectorService, $async$get$valueProperties);
              case 8:
                // returning from await.
                t3 = $async$result;
                $async$self.set$_valueProperties(t3 == null ? null : t3.getDartObjectProperties$2(new E.InspectorInstanceRef(H._asStringS(t2.$index(t1, "valueId"))), propertyNames));
              case 4:
                // join
                $async$returnValue = $async$self._valueProperties;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$get$valueProperties, $async$completer);
    },
    get$hasChildren: function() {
      var children = type$.List_dynamic._as(J.$index$asx(this.json, "children"));
      if (children != null)
        return J.get$isNotEmpty$asx(children);
      return this.getBooleanMember$2("hasChildren", false);
    },
    get$childrenReady: function() {
      return H.boolConversionCheck(J.containsKey$1$x(this.json, "children")) || this._diagnostics_node$_children != null || !H.boolConversionCheck(this.get$hasChildren());
    },
    _computeChildren$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, t1;
      var $async$_computeChildren$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._maybePopulateChildren$0();
              if (!H.boolConversionCheck($async$self.get$hasChildren()) || $async$self._diagnostics_node$_children != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self._childrenFuture;
              $async$goto = t1 != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(t1, $async$_computeChildren$0);
            case 5:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              $async$self.set$_childrenFuture($async$self._getChildrenHelper$0());
              $async$handler = 6;
              $async$goto = 9;
              return P._asyncAwait($async$self._childrenFuture, $async$_computeChildren$0);
            case 9:
              // returning from await.
              $async$self.set$_diagnostics_node$_children(0, $async$result);
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [2];
            case 7:
              // finally
              $async$handler = 2;
              if ($async$self._diagnostics_node$_children == null)
                $async$self.set$_diagnostics_node$_children(0, H.setRuntimeTypeInfo([], type$.JSArray_RemoteDiagnosticsNode));
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_computeChildren$0, $async$completer);
    },
    _getChildrenHelper$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, t2, t3, t1;
      var $async$_getChildrenHelper$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.inspectorService, $async$_getChildrenHelper$0);
            case 3:
              // returning from await.
              t1 = $async$result;
              if (t1 == null)
                t1 = null;
              else {
                t2 = H._asStringS(J.$index$asx($async$self.json, "objectId"));
                t3 = H.boolConversionCheck($async$self.getBooleanMember$2("summaryTree", false)) ? "getChildrenSummaryTree" : "getChildrenDetailsSubtree";
                t3 = t1.getListHelper$3(new E.InspectorInstanceRef(t2), t3, $async$self);
                t1 = t3;
              }
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getChildrenHelper$0, $async$completer);
    },
    _maybePopulateChildren$0: function() {
      var jsonArray, nodes, t1, t2, t3, element, child, _this = this;
      if (!H.boolConversionCheck(_this.get$hasChildren()) || _this._diagnostics_node$_children != null)
        return;
      jsonArray = type$.List_Object._as(J.$index$asx(_this.json, "children"));
      if ((jsonArray == null ? null : J.get$isNotEmpty$asx(jsonArray)) === true) {
        nodes = H.setRuntimeTypeInfo([], type$.JSArray_RemoteDiagnosticsNode);
        for (t1 = J.get$iterator$ax(jsonArray), t2 = type$.Map_String_Object, t3 = _this.inspectorService; t1.moveNext$0();) {
          element = t2._as(t1.get$current(t1));
          child = new M.RemoteDiagnosticsNode(_this.parent, t3, element, false);
          child.parent = _this;
          C.JSArray_methods.add$1(nodes, child);
        }
        _this.set$_diagnostics_node$_children(0, nodes);
      }
    },
    get$inlineProperties: function() {
      var t1, t2, t3, element, t4, _this = this,
        _s10_ = "properties";
      if (_this.cachedProperties == null) {
        _this.set$cachedProperties(H.setRuntimeTypeInfo([], type$.JSArray_RemoteDiagnosticsNode));
        t1 = _this.json;
        t2 = J.getInterceptor$x(t1);
        if (H.boolConversionCheck(t2.containsKey$1(t1, _s10_))) {
          for (t1 = J.get$iterator$ax(type$.List_Object._as(t2.$index(t1, _s10_))), t2 = type$.Map_String_Object, t3 = _this.inspectorService; t1.moveNext$0();) {
            element = t2._as(t1.get$current(t1));
            t4 = _this.cachedProperties;
            (t4 && C.JSArray_methods).add$1(t4, new M.RemoteDiagnosticsNode(_this.parent, t3, element, true));
          }
          _this.trackPropertiesMatchingParameters$1(_this.cachedProperties);
        }
      }
      return _this.cachedProperties;
    },
    trackPropertiesMatchingParameters$1: function(nodes) {
      var t1, parameterLocations, names, _i, $location, $name, node, parameterLocation;
      type$.List_RemoteDiagnosticsNode._as(nodes);
      t1 = this.get$creationLocation();
      parameterLocations = t1 == null ? null : t1.getParameterLocations$0();
      if (parameterLocations != null) {
        names = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.InspectorSourceLocation);
        for (t1 = parameterLocations.length, _i = 0; _i < parameterLocations.length; parameterLocations.length === t1 || (0, H.throwConcurrentModificationError)(parameterLocations), ++_i) {
          $location = parameterLocations[_i];
          $name = H._asStringS(J.$index$asx($location.json, "name"));
          if ($name != null)
            names.$indexSet(0, $name, $location);
        }
        for (t1 = nodes.length, _i = 0; _i < nodes.length; nodes.length === t1 || (0, H.throwConcurrentModificationError)(nodes), ++_i) {
          node = nodes[_i];
          node.parent = this;
          $name = H._asStringS(J.$index$asx(node.json, "name"));
          if ($name != null) {
            parameterLocation = names.$index(0, $name);
            if (parameterLocation != null)
              node._creationLocation = parameterLocation;
          }
        }
      }
      return nodes;
    },
    get$icon: function(_) {
      var t1, t2, icon, _this = this, _null = null,
        _s17_ = "widgetRuntimeType";
      if (_this.isProperty)
        return _null;
      t1 = $.Catalog__instance;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._asStringS(J.$index$asx(_this.json, _s17_));
        t1 = t2 != null ? t1.widgets.$index(0, t2) : _null;
      }
      icon = t1 == null ? _null : t1.icon;
      t1 = icon == null;
      return t1 && H._asStringS(J.$index$asx(_this.json, _s17_)) != null ? t1 ? $.$get$RemoteDiagnosticsNode_iconMaker().fromWidgetName$1(H._asStringS(J.$index$asx(_this.json, _s17_))) : icon : icon;
    },
    debugFillProperties$1: function(properties) {
      var t1, t2, t3, _i, property, t4;
      this.super$DiagnosticableMixin$debugFillProperties(properties);
      for (t1 = this.get$inlineProperties(), t2 = t1.length, t3 = type$.RemoteDiagnosticsNode, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        property = t1[_i];
        t4 = U.DiagnosticsProperty$(H._asStringS(J.$index$asx(property.json, "name")), property, true, null, C.DiagnosticLevel_3, true, C.DiagnosticsTreeStyle_8, t3);
        C.JSArray_methods.add$1(properties.properties, t4);
      }
    },
    debugDescribeChildren$0: function() {
      var children, regularChildren, t1;
      this._maybePopulateChildren$0();
      children = this._diagnostics_node$_children;
      if (children == null || J.get$isEmpty$asx(children))
        return C.List_empty3;
      regularChildren = H.setRuntimeTypeInfo([], type$.JSArray_DiagnosticsNode);
      for (t1 = J.get$iterator$ax(children); t1.moveNext$0();)
        C.JSArray_methods.add$1(regularChildren, t1.get$current(t1).toDiagnosticsNode$0());
      return regularChildren;
    },
    toDiagnosticsNode$1$style: function(style) {
      var t1 = H._asStringS(J.$index$asx(this.json, "name"));
      return this.super$DiagnosticableTree$toDiagnosticsNode(t1, style == null ? C.DiagnosticsTreeStyle_1 : style);
    },
    toDiagnosticsNode$0: function() {
      return this.toDiagnosticsNode$1$style(null);
    },
    setSelectionInspector$1: function(uiAlreadyUpdated) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$setSelectionInspector$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.inspectorService, $async$setSelectionInspector$1);
            case 2:
              // returning from await.
              t1 = $async$result;
              $async$goto = 3;
              return P._asyncAwait(t1 == null ? null : t1.setSelectionInspector$2(new E.InspectorInstanceRef(H._asStringS(J.$index$asx($async$self.json, "valueId"))), uiAlreadyUpdated), $async$setSelectionInspector$1);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$setSelectionInspector$1, $async$completer);
    },
    set$cachedProperties: function(cachedProperties) {
      this.cachedProperties = type$.List_RemoteDiagnosticsNode._as(cachedProperties);
    },
    set$_valueProperties: function(_valueProperties) {
      this._valueProperties = type$.Future_Map_String_InstanceRef._as(_valueProperties);
    },
    set$_childrenFuture: function(_childrenFuture) {
      this._childrenFuture = type$.Future_List_RemoteDiagnosticsNode._as(_childrenFuture);
    },
    set$_diagnostics_node$_children: function(_, _children) {
      this._diagnostics_node$_children = type$.List_RemoteDiagnosticsNode._as(_children);
    }
  };
  M.InspectorSourceLocation.prototype = {
    getParameterLocations$0: function() {
      var parametersJson, ret, i, t3,
        _s18_ = "parameterLocations",
        t1 = this.json,
        t2 = J.getInterceptor$x(t1);
      if (H.boolConversionCheck(t2.containsKey$1(t1, _s18_))) {
        parametersJson = type$.List_Object._as(t2.$index(t1, _s18_));
        ret = H.setRuntimeTypeInfo([], type$.JSArray_InspectorSourceLocation);
        t1 = J.getInterceptor$asx(parametersJson);
        t2 = type$.Map_String_Object;
        i = 0;
        while (true) {
          t3 = t1.get$length(parametersJson);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          C.JSArray_methods.add$1(ret, new M.InspectorSourceLocation(t2._as(t1.$index(parametersJson, i)), this));
          ++i;
        }
        return ret;
      }
      return null;
    }
  };
  S.Category.prototype = {};
  S.FlutterWidget.prototype = {
    get$name: function(_) {
      return H._asStringS(J.$index$asx(this.json, "name"));
    }
  };
  S.Catalog.prototype = {};
  D.HtmlInspectorScreen.prototype = {
    createContent$1: function(framework) {
      var screenDiv, t1, buttonSection, t2, t3, t4, t5, t6, t7, t8, t9, expandButton, resetButton, _this = this, _null = null, _s3_ = "div", _s6_ = "btn-sm",
        _s44_ = "btn-group collapsible-985 nowrap margin-left",
        _s6_0 = "button";
      E.setupDimensions();
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar inspector-page", _null, _null);
      t1 = screenDiv.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      buttonSection = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t1 = buttonSection.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("horizontal", "");
      t1 = A.CoreElement$(_s3_, _null, "btn-group collapsible-750 nowrap", _null, _null);
      t2 = N.ServiceExtensionButton$($.$get$toggleOnDeviceWidgetInspector());
      t3 = N.PButton$icon("Refresh Tree", new K.MaterialIcon("refresh", C.ThemedColor_Color_4278190080_Color_4287215096, 18, 0, 18), _null);
      t3.clazz$1(_s6_);
      t3.attribute$2("disabled", true);
      t3.click$1(0, _this.get$_refreshInspector());
      _this.refreshTreeButton = t3;
      t4 = type$.JSArray_PButton;
      t1.add$1(0, H.setRuntimeTypeInfo([t2.button, t3], t4));
      t3 = type$.Element;
      t2 = t3._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null));
      t5 = new G.HtmlProgressElement(t2);
      t5.CoreElement$5$attributes$classes$html$text(_s3_, _null, _null, _null, _null);
      t5.clazz$1("progress-element");
      t5.add$1(0, A.CoreElement$(_s3_, _null, "complete", _null, _null));
      t5.clazz$1("margin-left");
      t2 = t2.style;
      t2.display = "none";
      t2 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t2.flex$0(0);
      t6 = type$.JSArray_CoreElement;
      buttonSection.add$1(0, H.setRuntimeTypeInfo([t1, t5, t2], t6));
      t2 = A.CoreElement$(_s3_, _null, _s44_, _null, _null);
      t2.add$1(0, H.setRuntimeTypeInfo([N.ServiceExtensionButton$($.$get$slowAnimations()).button], t6));
      t5 = A.CoreElement$(_s3_, _null, _s44_, _null, _null);
      t5.add$1(0, H.setRuntimeTypeInfo([N.ServiceExtensionButton$($.$get$debugPaint()).button, N.ServiceExtensionButton$($.$get$debugPaintBaselines()).button], t6));
      t1 = A.CoreElement$(_s3_, _null, "btn-group collapsible-1150 nowrap margin-left", _null, _null);
      t1.add$1(0, H.setRuntimeTypeInfo([N.ServiceExtensionButton$($.$get$repaintRainbow()).button, N.ServiceExtensionButton$($.$get$debugAllowBanner()).button], t6));
      t7 = A.CoreElement$(_s3_, _null, "btn-group nowrap margin-left", _null, _null);
      t8 = $.$get$togglePlatformMode();
      t9 = new N.PSelect(t3._as(W._ElementFactoryProvider_createElement_tag("select", _null)));
      t9.CoreElement$5$attributes$classes$html$text("select", _null, "form-select", _null, _null);
      new N.TogglePlatformSelector(t8, t9).ServiceExtensionSelector$1(t8);
      t7.add$1(0, t9);
      C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo([t2, t5, t1, t7], t6), buttonSection.get$add(buttonSection));
      t7 = t3._as(W._ElementFactoryProvider_createElement_tag(_s6_0, _null));
      expandButton = new N.PButton(t7);
      expandButton.CoreElement$5$attributes$classes$html$text(_s6_0, _null, "btn", _null, "Expand all");
      t7.setAttribute("type", _s6_0);
      expandButton.clazz$1(_s6_);
      expandButton.click$1(0, new D.HtmlInspectorScreen_createContent_closure(_this, expandButton));
      t3 = t3._as(W._ElementFactoryProvider_createElement_tag(_s6_0, _null));
      resetButton = new N.PButton(t3);
      resetButton.CoreElement$5$attributes$classes$html$text(_s6_0, _null, "btn", _null, "Collapse to selected");
      t3.setAttribute("type", _s6_0);
      resetButton.clazz$1(_s6_);
      resetButton.click$1(0, new D.HtmlInspectorScreen_createContent_closure0(_this, resetButton));
      t3 = A.CoreElement$(_s3_, _null, "btn-group", _null, _null);
      t3.add$1(0, H.setRuntimeTypeInfo([expandButton, resetButton], t4));
      t3.attribute$2("hidden", true);
      _this.expandCollapseButtonGroup = t3;
      t3 = A.CoreElement$(_s3_, _null, "inspector-container bidirectional", _null, _null);
      _this.inspectorContainer = t3;
      screenDiv.add$1(0, H.setRuntimeTypeInfo([buttonSection, t3], t6));
      t1 = type$.ServiceConnectionManager;
      if (t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection())
        _this._html_inspector_screen$_handleConnectionStart$1(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service);
      else {
        t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionAvailableController;
        new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_html_inspector_screen$_handleConnectionStart());
      }
      t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionClosedController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_html_inspector_screen$_handleConnectionStop());
      return screenDiv;
    },
    _html_inspector_screen$_handleConnectionStart$1: function(service) {
      type$.VmService._as(service);
      return this._handleConnectionStart$body$HtmlInspectorScreen(service);
    },
    _handleConnectionStart$body$HtmlInspectorScreen: function(service) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, spinner, t1, t2, inspectorTree, detailsInspectorTree, elements;
      var $async$_html_inspector_screen$_handleConnectionStart$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.refreshTreeButton.attribute$2("disabled", false);
              spinner = G.HtmlSpinner_centered(C.List_empty0);
              $async$self.inspectorContainer.add$1(0, spinner);
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait(E.ensureInspectorServiceDependencies(), $async$_html_inspector_screen$_handleConnectionStart$1);
            case 6:
              // returning from await.
              $async$goto = 7;
              return P._asyncAwait(E.InspectorService_create(service).catchError$1(new D.HtmlInspectorScreen__handleConnectionStart_closure()), $async$_html_inspector_screen$_handleConnectionStart$1);
            case 7:
              // returning from await.
              $async$self.set$inspectorService($async$result);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              J.remove$0$ax(spinner.element);
              $async$self.refreshTreeButton.attribute$2("disabled", false);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              if ($async$self.inspectorService == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = new D.HtmlInspectorScreen__handleConnectionStart_createTree();
              t2 = type$.InspectorTreeWeb;
              inspectorTree = t2._as(t1.call$0());
              detailsInspectorTree = t2._as(t1.call$0());
              $async$self.inspectorController = Z.InspectorController$(detailsInspectorTree, $async$self.inspectorService, inspectorTree, true, $async$self.get$_onExpandCollapseSupported(), null, C.FlutterTreeType_0);
              elements = H.setRuntimeTypeInfo([inspectorTree.get$element().element, detailsInspectorTree.get$element().element], type$.JSArray_Element);
              $async$self.inspectorContainer.add$1(0, elements);
              t1 = type$.JSArray_num;
              $async$self.splitterSubscription = A._splitBidirectional(elements, 10, H.setRuntimeTypeInfo([35, 65], t1), null, A.split__flexSplit$closure(), H.setRuntimeTypeInfo([60, 40], t1));
              $async$self.inspectorController.setVisibleToUser$1(true);
              $async$self.inspectorController.setActivate$1(true);
              if (!$async$self.displayedWidgetTrackingNotice)
                $async$self.inspectorService.invokeBoolServiceMethodNoArgs$1("isWidgetCreationTracked").then$1$1(new D.HtmlInspectorScreen__handleConnectionStart_closure0($async$self), type$.Null);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_html_inspector_screen$_handleConnectionStart$1, $async$completer);
    },
    _html_inspector_screen$_handleConnectionStop$1: function($event) {
      var t1, t2, _this = this;
      _this.refreshTreeButton.attribute$2("disabled", true);
      t1 = _this.inspectorController;
      if (t1 != null)
        t1.setActivate$1(false);
      t1 = _this.inspectorController;
      if (t1 != null)
        t1.dispose$0();
      _this.inspectorController = null;
      t1 = _this.inspectorService;
      if (t1 != null) {
        t2 = t1.inspectorLibrary;
        t2.selectedIsolateStreamSubscription.cancel$0(0);
        t2._disposed = true;
        t1.super$_InspectorService_DisposableController_AutoDisposeControllerMixin$dispose();
      }
      _this.inspectorService = null;
      t1 = _this.splitterSubscription;
      if (t1 != null)
        t1.cancel$0(0);
      _this.splitterSubscription = null;
    },
    _refreshInspector$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$_refreshInspector$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("inspector", "refresh", 0);
              $async$self.refreshTreeButton.attribute$2("disabled", true);
              t1 = $async$self.inspectorController;
              $async$goto = 2;
              return P._asyncAwait(t1 == null ? null : t1.onForceRefresh$0(), $async$_refreshInspector$0);
            case 2:
              // returning from await.
              $async$self.refreshTreeButton.attribute$2("disabled", false);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_refreshInspector$0, $async$completer);
    },
    _onExpandCollapseSupported$0: function() {
      var t1, currentChild, t2, t3, t4, _this = this, _null = null,
        detailsInspectorTree = _this.inspectorController.details.inspectorTree;
      if (detailsInspectorTree._selection != null)
        _this.expandCollapseButtonGroup.attribute$2("hidden", false);
      t1 = _this.inspectorController.details._treeNodeSelectedController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new D.HtmlInspectorScreen__onExpandCollapseSupported_closure(_this));
      t1 = J.get$children$x(detailsInspectorTree.get$element().element);
      currentChild = new A.CoreElement(t1.get$first(t1));
      t1 = detailsInspectorTree.get$element();
      J.get$children$x(t1.element).clear$0(0);
      t2 = A.CoreElement$("div", _null, "expand-collapse-container", _null, _null);
      t3 = t2.element;
      t3.setAttribute("layout", "");
      t3.setAttribute("horizontal", "");
      t3 = A.CoreElement$("div", _null, _null, _null, _null);
      t3.flex$0(0);
      t4 = type$.JSArray_CoreElement;
      t2.add$1(0, H.setRuntimeTypeInfo([t3, _this.expandCollapseButtonGroup], t4));
      currentChild.clazz$1("expand-collapse-offset");
      t1.add$1(0, H.setRuntimeTypeInfo([t2, currentChild], t4));
    },
    set$inspectorService: function(inspectorService) {
      this.inspectorService = type$.InspectorService._as(inspectorService);
    }
  };
  D.HtmlInspectorScreen_createContent_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.expandButton;
              t1.attribute$2("disabled", true);
              $async$goto = 2;
              return P._asyncAwait($async$self.$this.inspectorController.expandAllNodesInDetailsTree$0(), $async$call$0);
            case 2:
              // returning from await.
              t1.attribute$2("disabled", false);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  D.HtmlInspectorScreen_createContent_closure0.prototype = {
    call$0: function() {
      var _s8_ = "disabled",
        t1 = this.resetButton;
      t1.attribute$2(_s8_, true);
      this.$this.inspectorController.collapseDetailsToSelected$0();
      t1.attribute$2(_s8_, false);
    },
    $signature: 0
  };
  D.HtmlInspectorScreen__handleConnectionStart_closure.prototype = {
    call$1: function(e) {
      return null;
    },
    $signature: 2
  };
  D.HtmlInspectorScreen__handleConnectionStart_createTree.prototype = {
    call$0: function() {
      var t1 = new E.InspectorTreeCanvas(H.setRuntimeTypeInfo([], type$.JSArray_InspectorTreeRow)),
        t2 = T.ViewportCanvas$("inspector-tree inspector-tree-container", t1.get$onMouseLeave(t1), t1.get$onMouseMove(t1), t1.get$_updateForContainerResize(), t1.get$onTap(), t1.get$_inspector_tree_canvas$_paintCallback());
      t1._inspector_tree_canvas$_viewportCanvas = t2;
      t2._viewport_canvas$_element.element.tabIndex = 0;
      t1.addKeyboardListeners$1(t1._inspector_tree_canvas$_viewportCanvas._viewport_canvas$_element);
      return t1;
    },
    $signature: 133
  };
  D.HtmlInspectorScreen__handleConnectionStart_closure0.prototype = {
    call$1: function(value) {
      var t1, t2;
      if (H.boolConversionCheck(H._asBoolS(value)))
        return;
      t1 = this.$this;
      t1.displayedWidgetTrackingNotice = true;
      t1 = t1.framework;
      t2 = $.$get$trackWidgetCreationWarning();
      t1.messageManager.addMessage$2(t2, "inspector");
    },
    $signature: 11
  };
  D.HtmlInspectorScreen__onExpandCollapseSupported_closure.prototype = {
    call$1: function(_) {
      this.$this.expandCollapseButtonGroup.attribute$2("hidden", false);
    },
    $signature: 27
  };
  Z.InspectorController.prototype = {
    InspectorController$8$detailsTree$inspectorService$inspectorTree$isSummaryTree$onExpandCollapseSupported$onLayoutExplorerSupported$parent$treeType: function(detailsTree, inspectorService, inspectorTree, isSummaryTree, onExpandCollapseSupported, onLayoutExplorerSupported, $parent, treeType) {
      var t1, t2, _this = this;
      _this._refreshRateLimiter = new B.RateLimiter(_this.get$refresh(_this), 200);
      t1 = _this.isSummaryTree;
      t2 = _this.treeType;
      _this.inspectorTree._config = K.InspectorTreeConfig$(_this.get$_onClientChange(), _this.get$_onExpand(), _this.get$highlightShowNode(), _this.get$_onNodeAdded(), _this.get$selectionChanged(), t1, t2);
      if (t1)
        _this.details = Z.InspectorController$(null, _this.inspectorService, detailsTree, false, null, _this, t2);
      else
        _this.details = null;
      t1 = type$.ServiceConnectionManager;
      _this.set$flutterIsolateSubscription(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager.getSelectedIsolate$1(new Z.InspectorController_closure(_this)));
      _this._checkForExpandCollapseSupport$0();
      _this._checkForLayoutExplorerSupport$0();
      if (_this.parent == null)
        _this.AutoDisposeControllerMixin__delegate.addAutoDisposeListener$2(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.hasServiceExtensionListener$1($.$get$toggleSelectWidgetMode().extension), type$.void_Function._as(new Z.InspectorController_closure0(_this)));
    },
    _onClientChange$1: function(added) {
      var _this = this,
        t1 = _this._clientCount;
      t1 = _this._clientCount = t1 + (added ? 1 : -1);
      if (t1 === 1) {
        _this.setVisibleToUser$1(true);
        _this.setActivate$1(true);
      } else if (t1 === 0)
        _this.setVisibleToUser$1(false);
    },
    notifySelectionListeners$0: function() {
      var t1, _i;
      for (t1 = this._selectionListeners, _i = 0; false; ++_i) {
        if (_i >= 0)
          return H.ioore(t1, _i);
        t1[_i].call$0();
      }
    },
    get$selectedDiagnostic: function() {
      var t1 = this.selectedNode;
      return t1 == null ? null : t1._diagnostic;
    },
    setVisibleToUser$1: function(visible) {
      var t1, _this = this;
      if (_this.visibleToUser === visible)
        return;
      _this.visibleToUser = visible;
      t1 = _this.details;
      if (t1 != null)
        t1.setVisibleToUser$1(visible);
      if (_this.visibleToUser) {
        if (_this.parent == null)
          _this.maybeLoadUI$0();
      } else
        _this.shutdownTree$1(false);
    },
    highlightShowNode$2: function(node, icon) {
      var _this = this;
      if (node == null && _this.parent != null)
        node = _this.findMatchingInspectorTreeNode$1(_this.parent.get$selectedDiagnostic());
      _this.inspectorTree.set$hover(node);
      return true;
    },
    findMatchingInspectorTreeNode$1: function(node) {
      if ((node == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(node.json, "valueId")))) == null)
        return null;
      return this.valueToInspectorTreeNode.$index(0, new E.InspectorInstanceRef(H._asStringS(J.$index$asx(node.json, "valueId"))));
    },
    getPendingUpdateDone$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$getPendingUpdateDone$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._selectionGroups;
              $async$goto = 2;
              return P._asyncAwait(t1 == null ? null : t1.get$pendingUpdateDone(), $async$getPendingUpdateDone$0);
            case 2:
              // returning from await.
              t1 = $async$self._treeGroups;
              $async$goto = 3;
              return P._asyncAwait(t1 == null ? null : t1.get$pendingUpdateDone(), $async$getPendingUpdateDone$0);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$getPendingUpdateDone$0, $async$completer);
    },
    refresh$0: function(_) {
      var t1, _this = this;
      if (!_this.visibleToUser) {
        t1 = new P._Future($.Zone__current, type$._Future_void);
        t1._asyncComplete$1(null);
        return t1;
      }
      if (_this.details != null)
        return P.Future_wait(H.setRuntimeTypeInfo([_this.getPendingUpdateDone$0(), _this.details.getPendingUpdateDone$0()], type$.JSArray_Future_void), type$.void);
      else
        return _this.getPendingUpdateDone$0();
    },
    shutdownTree$1: function(isolateStopped) {
      var t1, t2, _this = this;
      _this.programaticSelectionChangeInProgress = true;
      t1 = _this._treeGroups;
      if (t1 != null)
        t1.clear$1(0, isolateStopped);
      t1 = _this._selectionGroups;
      if (t1 != null)
        t1.clear$1(0, isolateStopped);
      t1 = _this.inspectorTree;
      t1.set$hover(null);
      _this.subtreeRoot = _this.selectedNode = null;
      t2 = t1.createNode$0();
      t1.set$root(0, t2);
      t1 = _this.details;
      if (t1 != null)
        t1.shutdownTree$1(isolateStopped);
      _this.programaticSelectionChangeInProgress = false;
      _this.valueToInspectorTreeNode.clear$0(0);
    },
    onIsolateStopped$0: function() {
      this.treeLoadStarted = this.flutterAppFrameReady = false;
      this.shutdownTree$1(true);
    },
    onForceRefresh$0: function() {
      var t1, _this = this;
      if (!_this.visibleToUser || _this._inspector_controller$_disposed) {
        t1 = new P._Future($.Zone__current, type$._Future_void);
        t1._asyncComplete$1(null);
        return t1;
      }
      _this.recomputeTreeRoot$3(null, null, false);
      return _this.getPendingUpdateDone$0();
    },
    setActivate$1: function(enabled) {
      var _this = this;
      if (!enabled) {
        _this.onIsolateStopped$0();
        _this.isActive = false;
        return;
      }
      if (_this.isActive)
        return;
      _this.isActive = true;
      _this.inspectorService.clients.add$1(0, _this);
      _this.maybeLoadUI$0();
    },
    maybeLoadUI$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, ready;
      var $async$maybeLoadUI$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!$async$self.visibleToUser || !$async$self.isActive) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.inspectorService;
              $async$goto = H.boolConversionCheck($async$self.flutterAppFrameReady) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(t1.inferPubRootDirectoryIfNeeded$0(), $async$maybeLoadUI$0);
            case 6:
              // returning from await.
              $async$goto = 7;
              return P._asyncAwait($async$self.updateSelectionFromService$1$firstFrame(true), $async$maybeLoadUI$0);
            case 7:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 8;
              return P._asyncAwait(t1.invokeBoolServiceMethodNoArgs$1("isWidgetTreeReady"), $async$maybeLoadUI$0);
            case 8:
              // returning from await.
              ready = $async$result;
              $async$self.flutterAppFrameReady = ready;
              $async$goto = $async$self.isActive && H.boolConversionCheck(ready) ? 9 : 10;
              break;
            case 9:
              // then
              $async$goto = 11;
              return P._asyncAwait($async$self.maybeLoadUI$0(), $async$maybeLoadUI$0);
            case 11:
              // returning from await.
            case 10:
              // join
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$maybeLoadUI$0, $async$completer);
    },
    recomputeTreeRoot$4$subtreeDepth: function(newSelection, detailsSelection, setSubtreeRoot, subtreeDepth) {
      return this.recomputeTreeRoot$body$InspectorController(newSelection, detailsSelection, setSubtreeRoot, subtreeDepth);
    },
    recomputeTreeRoot$3: function(newSelection, detailsSelection, setSubtreeRoot) {
      return this.recomputeTreeRoot$4$subtreeDepth(newSelection, detailsSelection, setSubtreeRoot, 2);
    },
    recomputeTreeRoot$body$InspectorController: function(newSelection, detailsSelection, setSubtreeRoot, subtreeDepth) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, group, node, rootNode, error, t1, exception, $async$exception;
      var $async$recomputeTreeRoot$4$subtreeDepth = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._inspector_controller$_disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._treeGroups.cancelNext$0();
              $async$handler = 4;
              t1 = $async$self._treeGroups;
              group = t1.get$next(t1);
              $async$goto = 7;
              return P._asyncAwait($async$self.parent != null ? group.getDetailsSubtree$2$subtreeDepth($async$self.subtreeRoot, subtreeDepth) : group.getRoot$1($async$self.treeType), $async$recomputeTreeRoot$4$subtreeDepth);
            case 7:
              // returning from await.
              node = $async$result;
              if (node == null || group.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._treeGroups.promoteNext$0();
              $async$self.clearValueToInspectorTreeNodeMapping$0();
              t1 = $async$self.inspectorTree;
              if (node != null) {
                rootNode = t1.setupInspectorTreeNode$4$expandChildren$expandProperties(t1.createNode$0(), node, true, false);
                t1.set$root(0, rootNode);
              } else
                t1.set$root(0, t1.createNode$0());
              $async$self.refreshSelection$3(newSelection, detailsSelection, setSubtreeRoot);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = H.unwrapException($async$exception);
              B.log(J.toString$0$(error), C.LogLevel_2);
              $async$self._treeGroups.cancelNext$0();
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$recomputeTreeRoot$4$subtreeDepth, $async$completer);
    },
    clearValueToInspectorTreeNodeMapping$0: function() {
      var t1, _this = this;
      if (_this.parent != null) {
        t1 = _this.valueToInspectorTreeNode;
        t1.get$keys(t1).forEach$1(0, _this.parent.get$maybeUpdateValueUI());
      }
      _this.valueToInspectorTreeNode.clear$0(0);
    },
    setSubtreeRoot$2: function(node, selection) {
      var t1, _this = this;
      if (selection == null)
        selection = node;
      t1 = node == null;
      if (!t1 && node.$eq(0, _this.subtreeRoot)) {
        _this.applyNewSelection$3(selection, null, false);
        return;
      }
      _this.subtreeRoot = node;
      if (t1) {
        _this.shutdownTree$1(false);
        return;
      }
      _this.clearValueToInspectorTreeNodeMapping$0();
      _this.recomputeTreeRoot$3(selection, null, false);
    },
    getSubtreeRootNode$0: function() {
      var t1 = this.subtreeRoot;
      if (t1 == null)
        return null;
      return this.valueToInspectorTreeNode.$index(0, new E.InspectorInstanceRef(H._asStringS(J.$index$asx(t1.json, "valueId"))));
    },
    refreshSelection$3: function(newSelection, detailsSelection, setSubtreeRoot) {
      var _this = this;
      if (newSelection == null)
        newSelection = _this.get$selectedDiagnostic();
      _this.setSelectedNode$1(_this.findMatchingInspectorTreeNode$1(newSelection));
      _this.syncSelectionHelper$2(setSubtreeRoot, detailsSelection);
      if (_this.details != null)
        if (_this.subtreeRoot != null && _this.getSubtreeRootNode$0() == null) {
          _this.subtreeRoot = newSelection;
          _this.details.setSubtreeRoot$2(newSelection, detailsSelection);
        }
      _this.syncTreeSelection$0();
    },
    syncTreeSelection$0: function() {
      var t1, _this = this;
      _this.programaticSelectionChangeInProgress = true;
      t1 = _this.inspectorTree;
      t1.set$selection(_this.selectedNode);
      t1.expandPath$1(_this.selectedNode);
      _this.programaticSelectionChangeInProgress = false;
      _this.animateTo$1(_this.selectedNode);
    },
    selectAndShowNode$1: function(node) {
      if (node == null)
        return;
      this.selectAndShowInspectorInstanceRef$1(new E.InspectorInstanceRef(H._asStringS(J.$index$asx(node.json, "valueId"))));
    },
    selectAndShowInspectorInstanceRef$1: function(ref) {
      var node = this.valueToInspectorTreeNode.$index(0, ref);
      if (node == null)
        return;
      this.setSelectedNode$1(node);
      this.syncTreeSelection$0();
    },
    maybeUpdateValueUI$1: function(valueRef) {
      var node = this.valueToInspectorTreeNode.$index(0, type$.InspectorInstanceRef._as(valueRef));
      if (node == null)
        return;
      this.inspectorTree.nodeChanged$1(node);
    },
    onFlutterFrame$0: function() {
      var _this = this;
      _this.flutterAppFrameReady = true;
      if (!_this.visibleToUser)
        return;
      if (!_this.treeLoadStarted) {
        _this.treeLoadStarted = true;
        _this.maybeLoadUI$0();
      }
      _this._refreshRateLimiter.scheduleRequest$0();
    },
    onInspectorSelectionChanged$0: function() {
      if (!this.visibleToUser)
        return;
      if (this.parent != null)
        return;
      this.updateSelectionFromService$1$firstFrame(false);
    },
    updateSelectionFromService$1$firstFrame: function(firstFrame) {
      return this.updateSelectionFromService$body$InspectorController(firstFrame);
    },
    updateSelectionFromService$body$InspectorController: function(firstFrame) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, group, pendingSelectionFuture, pendingDetailsFuture, newSelection, detailsSelection, error, t2, exception, t1, $async$exception;
      var $async$updateSelectionFromService$1$firstFrame = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._selectionGroups;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.treeLoadStarted = true;
              t1.cancelNext$0();
              t1 = $async$self._selectionGroups;
              group = t1.get$next(t1);
              t1 = $async$self.treeType;
              t2 = $async$self.isSummaryTree;
              pendingSelectionFuture = J.getSelection$3$isSummaryTree$z(group, $async$self.get$selectedDiagnostic(), t1, t2);
              pendingDetailsFuture = t2 ? J.getSelection$3$isSummaryTree$z(group, $async$self.get$selectedDiagnostic(), t1, false) : null;
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(pendingSelectionFuture, $async$updateSelectionFromService$1$firstFrame);
            case 7:
              // returning from await.
              newSelection = $async$result;
              if (group.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              detailsSelection = null;
              $async$goto = pendingDetailsFuture != null ? 8 : 9;
              break;
            case 8:
              // then
              $async$goto = 10;
              return P._asyncAwait(pendingDetailsFuture, $async$updateSelectionFromService$1$firstFrame);
            case 10:
              // returning from await.
              detailsSelection = $async$result;
              if (group.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 9:
              // join
              if (!firstFrame) {
                t1 = detailsSelection;
                t1 = t1 == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(t1.json, "valueId")));
                t2 = $async$self.details.get$selectedDiagnostic();
                if (J.$eq$(t1, t2 == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(t2.json, "valueId"))))) {
                  t1 = newSelection;
                  t1 = t1 == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(t1.json, "valueId")));
                  t2 = $async$self.get$selectedDiagnostic();
                  t1 = J.$eq$(t1, t2 == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(t2.json, "valueId"))));
                } else
                  t1 = false;
              } else
                t1 = false;
              if (t1) {
                $async$self._selectionGroups.cancelNext$0();
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._selectionGroups.promoteNext$0();
              $async$self.set$subtreeRoot(newSelection);
              $async$self.applyNewSelection$3(newSelection, detailsSelection, true);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = H.unwrapException($async$exception);
              t1 = $async$self._selectionGroups;
              t1 = t1.get$next(t1);
              t2 = group;
              if (t1 == null ? t2 == null : t1 === t2) {
                B.log(J.toString$0$(error), C.LogLevel_2);
                $async$self._selectionGroups.cancelNext$0();
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$updateSelectionFromService$1$firstFrame, $async$completer);
    },
    applyNewSelection$3: function(newSelection, detailsSelection, setSubtreeRoot) {
      if (this.findMatchingInspectorTreeNode$1(newSelection) == null)
        this.recomputeTreeRoot$3(newSelection, detailsSelection, setSubtreeRoot);
      this.refreshSelection$3(newSelection, detailsSelection, setSubtreeRoot);
    },
    animateTo$1: function(node) {
      var targets, node0, t1, t2, _i, child, diagnosticsNode;
      if (node == null)
        return;
      targets = H.setRuntimeTypeInfo([node], type$.JSArray_InspectorTreeNode);
      while (true) {
        node0 = node._inspector_tree$_parent;
        if (node0 != null) {
          t1 = node._diagnostic;
          t1 = (t1 == null ? null : t1.isProperty) === true;
        } else
          t1 = false;
        if (!t1)
          break;
        node = node0;
      }
      for (t1 = node._inspector_tree$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        diagnosticsNode = child._diagnostic;
        C.JSArray_methods.add$1(targets, child);
        if (child._inspector_tree$_children.length !== 0 && child._isExpanded)
          break;
        if (diagnosticsNode != null && !diagnosticsNode.isProperty)
          break;
      }
      this.inspectorTree.animateToTargets$1(targets);
    },
    setSelectedNode$1: function(newSelection) {
      var _this = this, _null = null,
        t1 = _this.selectedNode;
      if (newSelection == t1)
        return;
      if (t1 != null) {
        if (_this.parent == null)
          _this.inspectorTree.nodeChanged$1(t1._inspector_tree$_parent);
      } else
        _this._treeNodeSelectedController.add$1(0, _null);
      _this.selectedNode = newSelection;
      _this.highlightShowNode$2(_null, _null);
      t1 = _this.details;
      if (t1 != null)
        t1.highlightShowNode$2(_null, _null);
      else {
        t1 = _this.parent;
        if (t1 != null)
          t1.highlightShowNode$2(_null, _null);
      }
      _this.animateTo$1(_this.selectedNode);
      _this.notifySelectionListeners$0();
    },
    _onExpand$1: function(node) {
      this.inspectorTree.maybePopulateChildren$1(node);
    },
    selectionChanged$0: function() {
      var t1, node, t2, t3, maybeReroot, _this = this;
      if (!_this.visibleToUser)
        return;
      t1 = _this.inspectorTree;
      node = t1._selection;
      t2 = node != null;
      if (t2)
        t1.maybePopulateChildren$1(node);
      if (_this.programaticSelectionChangeInProgress)
        return;
      if (t2) {
        _this.setSelectedNode$1(node);
        t1 = _this.isSummaryTree;
        if (t1)
          if (_this.details != null) {
            if (_this.get$selectedDiagnostic() != null) {
              t2 = _this.details;
              t3 = H._asStringS(J.$index$asx(_this.get$selectedDiagnostic().json, "valueId"));
              t3 = !t2.valueToInspectorTreeNode.containsKey$1(0, new E.InspectorInstanceRef(t3));
              t2 = t3;
            } else
              t2 = false;
            maybeReroot = t2;
          } else
            maybeReroot = false;
        else
          maybeReroot = false;
        _this.syncSelectionHelper$2(maybeReroot, null);
        if (!maybeReroot)
          if (t1 && _this.details != null)
            _this.details.selectAndShowNode$1(_this.get$selectedDiagnostic());
          else {
            t1 = _this.parent;
            if (t1 != null)
              t1.selectAndShowNode$1(_this.firstAncestorInParentTree$1(_this.selectedNode));
          }
      }
    },
    firstAncestorInParentTree$1: function(node) {
      var diagnostic, t1, t2;
      if (this.parent == null)
        return node._diagnostic;
      for (; node != null;) {
        diagnostic = node._diagnostic;
        if (diagnostic != null) {
          t1 = this.parent;
          t2 = H._asStringS(J.$index$asx(diagnostic.json, "valueId"));
          t2 = t1.valueToInspectorTreeNode.containsKey$1(0, new E.InspectorInstanceRef(t2));
          t1 = t2;
        } else
          t1 = false;
        if (t1) {
          t1 = this.parent;
          t2 = H._asStringS(J.$index$asx(diagnostic.json, "valueId"));
          t2 = t1.valueToInspectorTreeNode.$index(0, new E.InspectorInstanceRef(t2));
          return t2 == null ? null : t2._diagnostic;
        }
        node = node._inspector_tree$_parent;
      }
      return null;
    },
    syncSelectionHelper$2: function(maybeRerootDetailsTree, detailsSelection) {
      var diagnostic, t1, toSelect, _this = this;
      if (_this.parent == null && _this.selectedNode != null)
        _this.inspectorTree.nodeChanged$1(_this.selectedNode._inspector_tree$_parent);
      diagnostic = _this.get$selectedDiagnostic();
      t1 = diagnostic != null;
      if (t1)
        H.boolConversionCheck(diagnostic.getBooleanMember$2("createdByLocalProject", false));
      if (_this.parent != null || _this.details == null)
        if (t1) {
          toSelect = _this.selectedNode;
          while (true) {
            t1 = toSelect != null;
            if (!(t1 && toSelect._diagnostic.isProperty))
              break;
            toSelect = toSelect._inspector_tree$_parent;
          }
          if (t1)
            toSelect._diagnostic.setSelectionInspector$1(true);
        }
      if (maybeRerootDetailsTree) {
        _this.subtreeRoot = diagnostic;
        t1 = _this.details;
        if (t1 != null)
          t1.setSubtreeRoot$2(diagnostic, detailsSelection);
      } else if (diagnostic != null)
        (detailsSelection == null ? diagnostic : detailsSelection).setSelectionInspector$1(true);
    },
    dispose$0: function() {
      var t1, _this = this;
      _this._inspector_controller$_disposed = true;
      _this.flutterIsolateSubscription.cancel$0(0);
      if (_this.inspectorService != null)
        _this.shutdownTree$1(false);
      t1 = _this._treeGroups;
      if (t1 != null)
        t1.clear$1(0, false);
      _this._treeGroups = null;
      t1 = _this._selectionGroups;
      if (t1 != null)
        t1.clear$1(0, false);
      _this._selectionGroups = null;
      t1 = _this.details;
      if (t1 != null)
        t1.dispose$0();
      _this.super$_InspectorController_DisposableController_AutoDisposeControllerMixin$dispose();
    },
    _onNodeAdded$2: function(node, diagnosticsNode) {
      var t1 = H._asStringS(J.$index$asx(diagnosticsNode.json, "valueId")),
        valueRef = new E.InspectorInstanceRef(t1);
      if (t1 != null && !diagnosticsNode.isProperty)
        this.valueToInspectorTreeNode.$indexSet(0, valueRef, node);
      t1 = this.parent;
      if (t1 != null)
        t1.maybeUpdateValueUI$1(valueRef);
    },
    expandAllNodesInDetailsTree$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t3, t4, t1, t2;
      var $async$expandAllNodesInDetailsTree$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.details;
              t2 = $async$self.inspectorTree._selection;
              t2 = t2 == null ? null : t2._diagnostic;
              t3 = t1.inspectorTree;
              t4 = t3._selection;
              t4 = t4 == null ? null : t4._diagnostic;
              if (t4 == null) {
                t3 = t3._root;
                t3 = t3 == null ? null : t3._diagnostic;
              } else
                t3 = t4;
              $async$goto = 2;
              return P._asyncAwait(t1.recomputeTreeRoot$4$subtreeDepth(t2, t3, false, $.$get$maxJsInt()), $async$expandAllNodesInDetailsTree$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$expandAllNodesInDetailsTree$0, $async$completer);
    },
    collapseDetailsToSelected$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$collapseDetailsToSelected$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.details.inspectorTree.collapseToSelected$0();
              t1 = $async$self.details;
              t1.animateTo$1(t1.inspectorTree._selection);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$collapseDetailsToSelected$0, $async$completer);
    },
    _onVersionSupported$2: function(version, callback) {
      var flutterVersionServiceListenable,
        t1 = type$.void_Function;
      t1._as(callback);
      flutterVersionServiceListenable = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).registeredServiceListenable$1("flutterVersion");
      this.AutoDisposeControllerMixin__delegate.addAutoDisposeListener$2(flutterVersionServiceListenable, t1._as(new Z.InspectorController__onVersionSupported_closure(flutterVersionServiceListenable, version, callback)));
    },
    _checkForExpandCollapseSupport$0: function() {
      var t1 = this.onExpandCollapseSupported;
      if (t1 == null)
        return;
      this._onVersionSupported$2(new T.SemanticVersion(1, 10, 1), t1);
    },
    _checkForLayoutExplorerSupport$0: function() {
      return;
    },
    set$flutterIsolateSubscription: function(flutterIsolateSubscription) {
      this.flutterIsolateSubscription = type$.StreamSubscription_IsolateRef._as(flutterIsolateSubscription);
    },
    set$subtreeRoot: function(subtreeRoot) {
      this.subtreeRoot = type$.RemoteDiagnosticsNode._as(subtreeRoot);
    },
    $isDisposer: 1,
    $isInspectorServiceClient: 1
  };
  Z.InspectorController_closure.prototype = {
    call$1: function(flutterIsolate) {
      type$.IsolateRef._as(flutterIsolate);
      this.$this.onIsolateStopped$0();
    },
    $signature: 38
  };
  Z.InspectorController_closure0.prototype = {
    call$0: function() {
      var t1 = type$.ServiceConnectionManager,
        t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.hasServiceExtensionListener$1($.$get$toggleSelectWidgetMode().extension);
      if (H.boolConversionCheck(t2.get$value(t2)))
        t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.setServiceExtensionState$3($.$get$enableOnDeviceInspector().extension, true, true);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  Z.InspectorController__onVersionSupported_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = H.boolConversionCheck($async$self.flutterVersionServiceListenable._value) ? 2 : 3;
              break;
            case 2:
              // then
              $async$temp1 = T;
              $async$goto = 4;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).getFlutterVersion$0(), $async$call$0);
            case 4:
              // returning from await.
              if ($async$temp1.FlutterVersion_FlutterVersion$parse($async$result.json).compareTo$1(0, $async$self.version) >= 0)
                $async$self.callback.call$0();
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 15
  };
  Z._InspectorController_DisposableController_AutoDisposeControllerMixin.prototype = {
    dispose$0: function() {
      this.AutoDisposeControllerMixin__delegate.cancel$0(0);
      this.super$DisposableController$dispose();
    }
  };
  E.InspectorService.prototype = {
    InspectorService$3: function(vmService, inspectorLibrary, supportedServiceMethods) {
      var _this = this,
        t1 = _this.vmService,
        t2 = _this.AutoDisposeControllerMixin__delegate;
      t2.autoDispose$1(t1.get$onExtensionEvent().listen$1(_this.get$onExtensionVmServiceRecieved()));
      t2.autoDispose$1(t1.get$onDebugEvent().listen$1(_this.get$onDebugVmServiceReceived()));
      t2.autoDispose$1(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager.getSelectedIsolate$1(new E.InspectorService_closure(_this)));
    },
    _trackClientSelfTriggeredSelection$1: function(ref) {
      J.add$1$ax(this._expectedSelectionChanges.putIfAbsent$2(0, ref, new E.InspectorService__trackClientSelfTriggeredSelection_closure()), Date.now());
    },
    _isClientTriggeredSelectionChange$1: function(ref) {
      var t2, times, time,
        t1 = Date.now();
      if (ref != null) {
        t2 = this._expectedSelectionChanges;
        if (t2.containsKey$1(0, ref)) {
          times = t2.remove$1(0, ref);
          for (t2 = J.getInterceptor$asx(times); t2.get$isNotEmpty(times);) {
            time = t2.removeAt$1(times, 0);
            if (typeof time !== "number")
              return time.$add();
            if (time + 5000 >= t1)
              return true;
          }
        }
      }
      return false;
    },
    inferPubRootDirectoryIfNeeded$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, root, children, t1, path, parts, t2, i, pubRootDirectory, group, $async$temp1;
      var $async$inferPubRootDirectoryIfNeeded$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              group = new E.ObjectGroup("temp_" + $.InspectorService_nextGroupId, $async$self);
              $.InspectorService_nextGroupId = $.InspectorService_nextGroupId + 1;
              $async$goto = 3;
              return P._asyncAwait(group.getRoot$1(C.FlutterTreeType_0), $async$inferPubRootDirectoryIfNeeded$0);
            case 3:
              // returning from await.
              root = $async$result;
              $async$goto = root == null ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait(group.dispose$0(), $async$inferPubRootDirectoryIfNeeded$0);
            case 6:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              root._computeChildren$0();
              $async$goto = 7;
              return P._asyncAwait(root._childrenFuture, $async$inferPubRootDirectoryIfNeeded$0);
            case 7:
              // returning from await.
              children = $async$result;
              if ((children == null ? null : J.get$isNotEmpty$asx(children)) === true) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = H._asStringS(J.$index$asx(root.json, "objectId"));
              $async$temp1 = J;
              $async$goto = 8;
              return P._asyncAwait(group.getListHelper$3(new E.InspectorInstanceRef(t1), "getChildrenDetailsSubtree", null), $async$inferPubRootDirectoryIfNeeded$0);
            case 8:
              // returning from await.
              t1 = $async$temp1.get$first$ax($async$result).get$creationLocation();
              path = t1 == null ? null : H._asStringS(J.$index$asx(t1.json, "file"));
              $async$goto = path == null ? 9 : 10;
              break;
            case 9:
              // then
              $async$goto = 11;
              return P._asyncAwait(group.dispose$0(), $async$inferPubRootDirectoryIfNeeded$0);
            case 11:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // join
              t1 = type$.JSArray_String;
              parts = H.setRuntimeTypeInfo(path.split("/"), t1);
              for (t2 = parts.length, i = t2 - 1; i >= 0; --i)
                ;
              if (0 >= t2) {
                $async$returnValue = H.ioore(parts, -1);
                // goto return
                $async$goto = 1;
                break;
              }
              parts.pop();
              pubRootDirectory = C.JSArray_methods.join$1(parts, "/");
              $async$goto = 12;
              return P._asyncAwait($async$self.invokeServiceMethodDaemonNoGroupArgs$2("setPubRootDirectories", type$.List_String._as(H.setRuntimeTypeInfo([pubRootDirectory], t1))), $async$inferPubRootDirectoryIfNeeded$0);
            case 12:
              // returning from await.
              $async$goto = 13;
              return P._asyncAwait(group.dispose$0(), $async$inferPubRootDirectoryIfNeeded$0);
            case 13:
              // returning from await.
              $async$returnValue = pubRootDirectory;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$inferPubRootDirectoryIfNeeded$0, $async$completer);
    },
    get$_inspector_service$_selectionGroups: function() {
      var t1 = this._cachedSelectionGroups;
      return t1 == null ? this._cachedSelectionGroups = new E.InspectorObjectGroupManager(this, "selection") : t1;
    },
    notifySelectionChanged$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, group, pendingSelection;
      var $async$notifySelectionChanged$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.get$_inspector_service$_selectionGroups().cancelNext$0();
              t1 = $async$self.get$_inspector_service$_selectionGroups();
              group = t1.get$next(t1);
              $async$goto = 2;
              return P._asyncAwait(group.getSelection$3$isSummaryTree(0, $async$self._currentSelection, C.FlutterTreeType_0, false), $async$notifySelectionChanged$0);
            case 2:
              // returning from await.
              pendingSelection = $async$result;
              if (!group.disposed)
                t1 = !$async$self._isClientTriggeredSelectionChange$1(pendingSelection == null ? null : new E.InspectorInstanceRef(H._asStringS(J.$index$asx(pendingSelection.json, "valueId"))));
              else
                t1 = false;
              if (t1) {
                $async$self._currentSelection = pendingSelection;
                $async$self.get$_inspector_service$_selectionGroups().promoteNext$0();
                for (t1 = $async$self.clients, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();)
                  t1._collection$_current.onInspectorSelectionChanged$0();
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$notifySelectionChanged$0, $async$completer);
    },
    onDebugVmServiceReceived$1: function($event) {
      if (type$.Event_2._as($event).kind === "Inspect")
        this.notifySelectionChanged$0();
    },
    onExtensionVmServiceRecieved$1: function(e) {
      var client, e0, t1, exception;
      if ("Flutter.Frame" === type$.Event_2._as(e).extensionKind)
        for (t1 = this.clients, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();) {
          client = t1._collection$_current;
          try {
            client.onFlutterFrame$0();
          } catch (exception) {
            e0 = H.unwrapException(exception);
          }
        }
    },
    invokeBoolServiceMethodNoArgs$1: function(methodName) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$invokeBoolServiceMethodNoArgs$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = J;
              $async$goto = 3;
              return P._asyncAwait($async$self.invokeServiceMethodDaemonNoGroupArgs$1(methodName), $async$invokeBoolServiceMethodNoArgs$1);
            case 3:
              // returning from await.
              t1 = $async$temp1.$eq$($async$result, true);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeBoolServiceMethodNoArgs$1, $async$completer);
    },
    invokeServiceMethodDaemonNoGroupArgs$2: function(methodName, args) {
      var params, i;
      type$.List_String._as(args);
      params = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Object);
      if (args != null)
        for (i = 0; i < 1; ++i)
          params.$indexSet(0, "arg" + i, args[i]);
      return this.invokeServiceMethodDaemonNoGroup$2(methodName, params);
    },
    invokeServiceMethodDaemonNoGroupArgs$1: function(methodName) {
      return this.invokeServiceMethodDaemonNoGroupArgs$2(methodName, null);
    },
    invokeServiceMethodDaemonNoGroup$2: function(methodName, args) {
      return this.invokeServiceMethodDaemonNoGroup$body$InspectorService(methodName, type$.Map_String_Object._as(args));
    },
    invokeServiceMethodDaemonNoGroup$body$InspectorService: function(methodName, args) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Object),
        $async$returnValue, $async$self = this, json, t1;
      var $async$invokeServiceMethodDaemonNoGroup$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.vmService.callServiceExtension$3$args$isolateId("ext.flutter.inspector." + methodName, args, $async$self.inspectorLibrary._isolateId), $async$invokeServiceMethodDaemonNoGroup$2);
            case 3:
              // returning from await.
              json = $async$result.json;
              t1 = J.getInterceptor$asx(json);
              if (t1.$index(json, "errorMessage") != null)
                throw H.wrapException(P.Exception_Exception(methodName + " -- " + H.S(t1.$index(json, "errorMessage"))));
              $async$returnValue = t1.$index(json, "result");
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeServiceMethodDaemonNoGroup$2, $async$completer);
    },
    $isDisposer: 1
  };
  E.InspectorService_closure.prototype = {
    call$1: function(flutterIsolate) {
      var t1, t2;
      type$.IsolateRef._as(flutterIsolate);
      t1 = this.$this;
      t1._currentSelection = null;
      t2 = t1._cachedSelectionGroups;
      if (t2 != null)
        t2.clear$1(0, true);
      t1._expectedSelectionChanges.clear$0(0);
    },
    $signature: 38
  };
  E.InspectorService_create_closure.prototype = {
    call$1: function(_) {
      return H.throwExpression(new E.FlutterInspectorLibraryNotFound(C.List_BmV));
    },
    $signature: 2
  };
  E.InspectorService_create_closure0.prototype = {
    call$1: function(e) {
      return e instanceof B.LibraryNotFound;
    },
    $signature: 33
  };
  E.InspectorService_create_lookupFunctionNames.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Set_String),
        $async$returnValue, $async$self = this, t1, t2, _i, classRef, functionNames;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.library.classes, t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              classRef = t1[_i];
              $async$goto = "WidgetInspectorService" === J.get$name$x(classRef) ? 6 : 7;
              break;
            case 6:
              // then
              functionNames = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
              $async$goto = 8;
              return P._asyncAwait($async$self.inspectorLibrary.getObjHelper$1$2(type$.ClassRef._as(classRef), null, type$.Class), $async$call$0);
            case 8:
              // returning from await.
              t1 = $async$result.functions, t2 = t1.length, _i = 0;
            case 9:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              functionNames.add$1(0, J.get$name$x(t1[_i]));
            case 10:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 9;
              break;
            case 11:
              // after for
              $async$returnValue = functionNames;
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // join
            case 4:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 140
  };
  E.InspectorService__trackClientSelfTriggeredSelection_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], type$.JSArray_int);
    },
    $signature: 141
  };
  E.ObjectGroup.prototype = {
    dispose$0: function() {
      var disposeComplete = this.invokeVoidServiceMethod$2("disposeGroup", this.groupName);
      this.disposed = true;
      return disposeComplete;
    },
    getRoot$1: function(type) {
      switch (type) {
        case C.FlutterTreeType_0:
          return this.invokeServiceMethodReturningNode$1("getRootWidgetSummaryTree");
        case C.FlutterTreeType_1:
          return this.invokeServiceMethodReturningNode$1("getRootRenderObject");
      }
      throw H.wrapException(P.Exception_Exception("Unexpected FlutterTreeType"));
    },
    invokeServiceMethodDaemon$2: function(methodName, objectGroup) {
      var t1 = type$.Map_String_Object._as(P.LinkedHashMap_LinkedHashMap$_literal(["objectGroup", objectGroup == null ? this.groupName : objectGroup], type$.String, type$.Object));
      return this._inspector_service$_callServiceExtension$2("ext.flutter.inspector." + methodName, t1);
    },
    invokeServiceMethodDaemon$1: function(methodName) {
      return this.invokeServiceMethodDaemon$2(methodName, null);
    },
    _inspector_service$_callServiceExtension$2: function(extension, args) {
      var t1, _this = this;
      type$.Map_String_Object._as(args);
      if (_this.disposed) {
        t1 = new P._Future($.Zone__current, type$._Future_Object);
        t1._asyncComplete$1(null);
        return t1;
      }
      return _this.inspectorService.inspectorLibrary.addRequest$1$2(_this, new E.ObjectGroup__callServiceExtension_closure(_this, extension, args), type$.Object);
    },
    invokeServiceMethodDaemonInspectorRef$2: function(methodName, arg) {
      var t1 = arg == null ? null : arg.id,
        t2 = type$.String,
        args = P.LinkedHashMap_LinkedHashMap$_literal(["objectGroup", this.groupName], t2, t2);
      if (t1 != null)
        args.$indexSet(0, "arg", t1);
      type$.Map_String_Object._as(args);
      return this._inspector_service$_callServiceExtension$2("ext.flutter.inspector." + methodName, args);
    },
    invokeServiceMethodObservatoryInspectorRef$2: function(methodName, arg) {
      var t1 = "WidgetInspectorService.instance." + methodName + "('";
      return this.inspectorService.inspectorLibrary.eval$2$isAlive(t1 + H.S(arg == null ? null : arg.id) + "', '" + this.groupName + "')", this);
    },
    getDartObjectProperties$2: function(inspectorInstanceRef, propertyNames) {
      return this.getDartObjectProperties$body$ObjectGroup(inspectorInstanceRef, type$.List_String._as(propertyNames));
    },
    getDartObjectProperties$body$ObjectGroup: function(inspectorInstanceRef, propertyNames) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Map_String_InstanceRef),
        $async$returnValue, $async$self = this, t1, t2, instance, properties, values, i, instanceRef;
      var $async$getDartObjectProperties$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait($async$self.invokeServiceMethodObservatoryInspectorRef$2("toObject", inspectorInstanceRef), $async$getDartObjectProperties$2);
              case 3:
                // returning from await.
                instanceRef = $async$result;
                if ($async$self.disposed) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = H._arrayInstanceType(propertyNames);
                t2 = type$.String;
                $async$goto = 4;
                return P._asyncAwait($async$self.getInstance$1($async$self.inspectorService.inspectorLibrary.eval$3$isAlive$scope("[" + new H.MappedListIterable(propertyNames, t1._eval$1("String(1)")._as(new E.ObjectGroup_getDartObjectProperties_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ",") + "]", $async$self, P.LinkedHashMap_LinkedHashMap$_literal(["that", instanceRef.get$id(instanceRef)], t2, t2))), $async$getDartObjectProperties$2);
              case 4:
                // returning from await.
                instance = $async$result;
                if ($async$self.disposed) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                properties = P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.InstanceRef);
                t1 = instance.elements;
                t1 = H.setRuntimeTypeInfo(t1.slice(0), H.instanceType(t1));
                values = type$.List_InstanceRef._as(t1);
                for (i = 0; i < propertyNames.length; ++i) {
                  t1 = propertyNames[i];
                  if (i >= values.length) {
                    $async$returnValue = H.ioore(values, i);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  properties.$indexSet(0, t1, values[i]);
                }
                $async$returnValue = properties;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$getDartObjectProperties$2, $async$completer);
    },
    getInstance$1: function(instanceRef) {
      return this.getInstance$body$ObjectGroup(type$.FutureOr_InstanceRef._as(instanceRef));
    },
    getInstance$body$ObjectGroup: function(instanceRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Instance),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$getInstance$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = $async$self.inspectorService.inspectorLibrary;
              $async$goto = 3;
              return P._asyncAwait(instanceRef, $async$getInstance$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.getInstance$2($async$result, $async$self);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInstance$1, $async$completer);
    },
    parseDiagnosticsNodeDaemon$1: function(json) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$parseDiagnosticsNodeDaemon$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = type$.Map_String_Object;
              $async$goto = 3;
              return P._asyncAwait(json, $async$parseDiagnosticsNodeDaemon$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$self.parseDiagnosticsNodeHelper$1($async$temp1._as($async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$parseDiagnosticsNodeDaemon$1, $async$completer);
    },
    parseDiagnosticsNodeHelper$1: function(jsonElement) {
      type$.Map_String_Object._as(jsonElement);
      if (this.disposed)
        return null;
      if (jsonElement == null)
        return null;
      return new M.RemoteDiagnosticsNode(null, this, jsonElement, false);
    },
    parseDiagnosticsNodesHelper$2: function(jsonObject, $parent) {
      var nodes, t1, t2;
      if (this.disposed || jsonObject == null)
        return C.List_empty2;
      nodes = H.setRuntimeTypeInfo([], type$.JSArray_RemoteDiagnosticsNode);
      for (t1 = J.get$iterator$ax(jsonObject), t2 = type$.Map_String_Object; t1.moveNext$0();)
        C.JSArray_methods.add$1(nodes, new M.RemoteDiagnosticsNode($parent, this, t2._as(t1.get$current(t1)), false));
      return nodes;
    },
    parseDiagnosticsNodesDaemon$2: function(jsonFuture, $parent) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$parseDiagnosticsNodesDaemon$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed || jsonFuture == null) {
                $async$returnValue = C.List_empty2;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = type$.List_Object;
              $async$goto = 3;
              return P._asyncAwait(jsonFuture, $async$parseDiagnosticsNodesDaemon$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$self.parseDiagnosticsNodesHelper$2($async$temp1._as($async$result), $parent);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$parseDiagnosticsNodesDaemon$2, $async$completer);
    },
    getListHelper$3: function(instanceRef, methodName, $parent) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, t1;
      var $async$getListHelper$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = C.List_empty2;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.parseDiagnosticsNodesDaemon$2($async$self.invokeServiceMethodDaemonInspectorRef$2(methodName, instanceRef), $parent);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getListHelper$3, $async$completer);
    },
    invokeServiceMethodReturningNode$1: function(methodName) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, t1;
      var $async$invokeServiceMethodReturningNode$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.parseDiagnosticsNodeDaemon$1($async$self.invokeServiceMethodDaemon$1(methodName));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeServiceMethodReturningNode$1, $async$completer);
    },
    invokeServiceMethodReturningNodeInspectorRef$2: function(methodName, ref) {
      var t1;
      if (this.disposed)
        return null;
      t1 = this.parseDiagnosticsNodeDaemon$1(this.invokeServiceMethodDaemonInspectorRef$2(methodName, ref));
      return t1;
    },
    invokeVoidServiceMethod$2: function(methodName, arg1) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$invokeVoidServiceMethod$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($async$self.invokeServiceMethodDaemon$2(methodName, arg1), $async$invokeVoidServiceMethod$2);
            case 3:
              // returning from await.
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeVoidServiceMethod$2, $async$completer);
    },
    getSelection$3$isSummaryTree: function(_, previousSelection, treeType, isSummaryTree) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, previousSelectionRef, newSelection;
      var $async$getSelection$3$isSummaryTree = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              previousSelectionRef = previousSelection != null ? new E.InspectorInstanceRef(H._asStringS(J.$index$asx(previousSelection.json, "objectId"))) : null;
            case 3:
              // switch
              switch (treeType) {
                case C.FlutterTreeType_0:
                  // goto case
                  $async$goto = 5;
                  break;
                case C.FlutterTreeType_1:
                  // goto case
                  $async$goto = 6;
                  break;
                default:
                  // goto default
                  $async$goto = 7;
                  break;
              }
              break;
            case 5:
              // case
              $async$goto = 8;
              return P._asyncAwait($async$self.invokeServiceMethodReturningNodeInspectorRef$2(isSummaryTree ? "getSelectedSummaryWidget" : "getSelectedWidget", previousSelectionRef), $async$getSelection$3$isSummaryTree);
            case 8:
              // returning from await.
              newSelection = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              $async$goto = 9;
              return P._asyncAwait($async$self.invokeServiceMethodReturningNodeInspectorRef$2("getSelectedRenderObject", previousSelectionRef), $async$getSelection$3$isSummaryTree);
            case 9:
              // returning from await.
              newSelection = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 7:
              // default
              newSelection = null;
            case 4:
              // after switch
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (newSelection != null && new E.InspectorInstanceRef(H._asStringS(J.$index$asx(newSelection.json, "objectId"))).$eq(0, previousSelectionRef)) {
                $async$returnValue = previousSelection;
                // goto return
                $async$goto = 1;
                break;
              } else {
                $async$returnValue = newSelection;
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getSelection$3$isSummaryTree, $async$completer);
    },
    setSelectionInspector$2: function(selection, uiAlreadyUpdated) {
      var t1, _this = this;
      H._asBoolS(uiAlreadyUpdated);
      if (_this.disposed) {
        t1 = new P._Future($.Zone__current, type$._Future_void);
        t1._asyncComplete$1(null);
        return t1;
      }
      _this.inspectorService._trackClientSelfTriggeredSelection$1(selection);
      t1 = _this.handleSetSelectionDaemon$2(_this.invokeServiceMethodDaemonInspectorRef$2("setSelectionById", selection), uiAlreadyUpdated);
      return t1;
    },
    handleSetSelectionHelper$2: function(selectionChanged, uiAlreadyUpdated) {
      H._asBoolS(uiAlreadyUpdated);
      if (H.boolConversionCheck(selectionChanged) && !H.boolConversionCheck(uiAlreadyUpdated) && !this.disposed)
        this.inspectorService.notifySelectionChanged$0();
    },
    handleSetSelectionDaemon$2: function(setSelectionResult, uiAlreadyUpdated) {
      return this.handleSetSelectionDaemon$body$ObjectGroup(setSelectionResult, H._asBoolS(uiAlreadyUpdated));
    },
    handleSetSelectionDaemon$body$ObjectGroup: function(setSelectionResult, uiAlreadyUpdated) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, json;
      var $async$handleSetSelectionDaemon$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait(setSelectionResult, $async$handleSetSelectionDaemon$2);
            case 3:
              // returning from await.
              json = $async$result;
              if ($async$self.disposed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.handleSetSelectionHelper$2(H._asBoolS(json), uiAlreadyUpdated);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$handleSetSelectionDaemon$2, $async$completer);
    },
    getEnumPropertyValues$1: function(ref) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Map_String_InstanceRef),
        $async$returnValue, $async$self = this, instance, clazz, properties, t1, t2, _i, field, t3, $name;
      var $async$getEnumPropertyValues$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (ref.id == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait($async$self.invokeServiceMethodObservatoryInspectorRef$2("toObject", ref), $async$getEnumPropertyValues$1);
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait($async$self.getInstance$1($async$result), $async$getEnumPropertyValues$1);
            case 3:
              // returning from await.
              instance = $async$result;
              if ($async$self.disposed || instance == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait($async$self.inspectorService.inspectorLibrary.getObjHelper$1$2(instance.Instance_classRef, $async$self, type$.Class), $async$getEnumPropertyValues$1);
            case 5:
              // returning from await.
              clazz = $async$result;
              if ($async$self.disposed || clazz == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              properties = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.InstanceRef);
              for (t1 = clazz.fields, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                field = t1[_i];
                t3 = J.getInterceptor$x(field);
                $name = t3.get$name(field);
                if (J.startsWith$1$s($name, "_"))
                  continue;
                if ($name === "values")
                  continue;
                if (H.boolConversionCheck(field.get$isConst()) && H.boolConversionCheck(field.get$isStatic()))
                  properties.$indexSet(0, t3.get$name(field), field.get$declaredType());
              }
              $async$returnValue = properties;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getEnumPropertyValues$1, $async$completer);
    },
    getDetailsSubtree$2$subtreeDepth: function(node, subtreeDepth) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.RemoteDiagnosticsNode),
        $async$returnValue, $async$self = this, t1;
      var $async$getDetailsSubtree$2$subtreeDepth = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (node == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.String;
              $async$returnValue = $async$self.parseDiagnosticsNodeDaemon$1($async$self._inspector_service$_callServiceExtension$2("ext.flutter.inspector.getDetailsSubtree", type$.Map_String_Object._as(P.LinkedHashMap_LinkedHashMap$_literal(["objectGroup", $async$self.groupName, "arg", H._asStringS(J.$index$asx(node.json, "objectId")), "subtreeDepth", C.JSInt_methods.toString$0(subtreeDepth)], t1, t1))));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getDetailsSubtree$2$subtreeDepth, $async$completer);
    }
  };
  E.ObjectGroup__callServiceExtension_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, json, t1, t2, t3, r;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.inspectorService;
              t3 = $async$self.extension;
              $async$goto = 3;
              return P._asyncAwait(t2.vmService.callServiceExtension$3$args$isolateId(t3, $async$self.args, t2.inspectorLibrary._isolateId), $async$call$0);
            case 3:
              // returning from await.
              r = $async$result;
              if (t1.disposed) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              json = r.json;
              t1 = J.getInterceptor$asx(json);
              if (t1.$index(json, "errorMessage") != null)
                throw H.wrapException(P.Exception_Exception(t3 + " -- " + H.S(t1.$index(json, "errorMessage"))));
              $async$returnValue = t1.$index(json, "result");
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 23
  };
  E.ObjectGroup_getDartObjectProperties_closure.prototype = {
    call$1: function(propertyName) {
      return "that." + H.S(H._asStringS(propertyName));
    },
    $signature: 5
  };
  E.FlutterTreeType.prototype = {
    toString$0: function(_) {
      return this._inspector_service$_name;
    }
  };
  E.InspectorServiceClient.prototype = {};
  E.InspectorInstanceRef.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof E.InspectorInstanceRef)
        return this.id == other.id;
      return false;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    toString$0: function(_) {
      return "instance-" + H.S(this.id);
    },
    get$id: function(receiver) {
      return this.id;
    }
  };
  E.InspectorObjectGroupManager.prototype = {
    get$pendingUpdateDone: function() {
      var t1 = this._pendingNext;
      if (t1 != null)
        return t1.future;
      if (this._inspector_service$_next == null) {
        t1 = new P._Future($.Zone__current, type$._Future_void);
        t1._asyncComplete$1(null);
        return t1;
      }
      t1 = new P._Future($.Zone__current, type$._Future_void);
      this._pendingNext = new P._AsyncCompleter(t1, type$._AsyncCompleter_void);
      return t1;
    },
    get$next: function(_) {
      var t2, _this = this,
        t1 = _this._inspector_service$_next;
      if (t1 == null) {
        t1 = _this.inspectorService;
        t1.toString;
        t2 = _this.debugName + "_" + $.InspectorService_nextGroupId;
        $.InspectorService_nextGroupId = $.InspectorService_nextGroupId + 1;
        t1 = _this._inspector_service$_next = new E.ObjectGroup(t2, t1);
      }
      return t1;
    },
    clear$1: function(_, isolateStopped) {
      var _this = this;
      if (isolateStopped) {
        _this._inspector_service$_current = null;
        _this._setNextNull$0();
      } else {
        _this.clearCurrent$0();
        _this.cancelNext$0();
      }
    },
    promoteNext$0: function() {
      var _this = this;
      _this.clearCurrent$0();
      _this._inspector_service$_current = _this._inspector_service$_next;
      _this._setNextNull$0();
    },
    clearCurrent$0: function() {
      var t1 = this._inspector_service$_current;
      if (t1 != null) {
        t1.dispose$0();
        this._inspector_service$_current = null;
      }
    },
    cancelNext$0: function() {
      var t1 = this._inspector_service$_next;
      if (t1 != null) {
        t1.dispose$0();
        this._setNextNull$0();
      }
    },
    _setNextNull$0: function() {
      this._inspector_service$_next = null;
      var t1 = this._pendingNext;
      if (t1 != null) {
        t1.complete$1(0, null);
        this._pendingNext = null;
      }
    }
  };
  E.FlutterInspectorLibraryNotFound.prototype = {};
  E._InspectorService_DisposableController_AutoDisposeControllerMixin.prototype = {
    dispose$0: function() {
      this.AutoDisposeControllerMixin__delegate.cancel$0(0);
      this.super$DisposableController$dispose();
    }
  };
  K.PaintEntry.prototype = {
    attach$1: function(owner) {
    }
  };
  K.InspectorTreeNodeRenderBuilder.prototype = {};
  K.InspectorTreeNodeRender.prototype = {};
  K.InspectorTreeNodeRendererLegacy.prototype = {
    attach$2: function(owner, offset) {
      var t1, t2, _i, _this = this;
      if (_this._owner !== owner)
        _this._owner = owner;
      _this._inspector_tree$_offset = offset;
      for (t1 = _this.entries, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attach$1(owner);
    }
  };
  K.InspectorTreeNode.prototype = {
    set$isDirty: function(dirty) {
      var t1, _this = this;
      if (dirty) {
        _this._isDirty = true;
        _this._shouldShow = null;
        if (_this._childrenCount == null)
          return;
        _this._childrenCount = null;
        t1 = _this._inspector_tree$_parent;
        if (t1 != null) {
          t1._renderObject = null;
          t1.super$InspectorTreeNode$isDirty(true);
        }
      } else
        _this._isDirty = false;
    },
    updateShouldShow$1: function(value) {
      var t1, t2, _i;
      if (value !== this._shouldShow) {
        this._shouldShow = value;
        for (t1 = this._inspector_tree$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].updateShouldShow$1(value);
      }
    },
    get$showExpandCollapse: function() {
      var t1 = this._diagnostic;
      return ((t1 == null ? null : t1.get$hasChildren()) === true || this._inspector_tree$_children.length !== 0) && this.allowExpandCollapse;
    },
    set$isExpanded: function(value) {
      var t1, t2, _i, _this = this;
      if (value !== _this._isExpanded) {
        _this._isExpanded = value;
        _this._renderObject = null;
        _this.super$InspectorTreeNode$isDirty(true);
        t1 = _this._shouldShow;
        if (t1 === true)
          for (t1 = _this._inspector_tree$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            t1[_i].updateShouldShow$1(value);
      }
    },
    set$parent: function(_, value) {
      type$.InspectorTreeNode._as(value);
      this._inspector_tree$_parent = value;
      if (value != null) {
        value._renderObject = null;
        value.super$InspectorTreeNode$isDirty(true);
      }
    },
    get$childrenCount: function() {
      var t1, t2, count, _i, t3, _this = this;
      if (!_this._isExpanded)
        _this._childrenCount = 0;
      t1 = _this._childrenCount;
      if (t1 != null)
        return t1;
      for (t1 = _this._inspector_tree$_children, t2 = t1.length, count = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t3 = t1[_i].get$childrenCount();
        if (typeof t3 !== "number")
          return t3.$add();
        count += t3 + 1;
      }
      return _this._childrenCount = count;
    },
    get$hasPlaceholderChildren: function() {
      var t1 = this._inspector_tree$_children;
      return t1.length === 1 && C.JSArray_methods.get$first(t1)._diagnostic == null;
    },
    getRowIndex$1: function(node) {
      var index, $parent, t1, t2, _i, sibling, t3;
      for (index = 0; true; node = $parent) {
        $parent = node._inspector_tree$_parent;
        if ($parent == null)
          break;
        for (t1 = $parent._inspector_tree$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          sibling = t1[_i];
          if (sibling === node)
            break;
          t3 = sibling.get$childrenCount();
          if (typeof t3 !== "number")
            return t3.$add();
          index += t3 + 1;
        }
        ++index;
      }
      return index;
    },
    getRow$1: function(index) {
      var node, current, depth, style, t2, indented, children, i, child, current0,
        ticks = H.setRuntimeTypeInfo([], type$.JSArray_int),
        t1 = this.get$childrenCount();
      if (typeof t1 !== "number")
        return t1.$add();
      if (t1 + 1 <= index)
        return null;
      for (node = this, current = 0, depth = 0; true;) {
        t1 = node._diagnostic;
        if (t1 == null)
          style = null;
        else {
          t2 = t1._style;
          if (t2 == null) {
            t2 = t1.getStyleMember$2("style", C.DiagnosticsTreeStyle_1);
            t1._style = t2;
            style = t2;
          } else
            style = t2;
        }
        indented = style !== C.DiagnosticsTreeStyle_7 && style !== C.DiagnosticsTreeStyle_5;
        if (current === index) {
          t1 = node._diagnostic;
          if (!(t1 == null || t1.isProperty))
            if (index !== 0) {
              t1 = node._inspector_tree$_parent._inspector_tree$_children;
              if (t1.length > 1) {
                t1 = C.JSArray_methods.get$last(t1)._diagnostic;
                t1 = !(t1 == null || t1.isProperty);
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
          return new K.InspectorTreeRow(node, ticks, depth, index, t1);
        }
        ++current;
        children = node._inspector_tree$_children;
        for (i = 0; i < children.length; ++i, current = current0) {
          child = children[i];
          t1 = child.get$childrenCount();
          if (typeof t1 !== "number")
            return t1.$add();
          current0 = current + (t1 + 1);
          if (current0 > index) {
            t1 = children.length;
            if (t1 > 1)
              if (i + 1 !== t1) {
                t1 = C.JSArray_methods.get$last(children)._diagnostic;
                t1 = !(t1 == null || t1.isProperty);
              } else
                t1 = false;
            else
              t1 = false;
            if (t1)
              if (indented)
                C.JSArray_methods.add$1(ticks, depth);
            node = child;
            break;
          }
        }
        if (indented)
          ++depth;
      }
      return null;
    },
    appendChild$1: function(_, child) {
      var _this = this;
      C.JSArray_methods.add$1(_this._inspector_tree$_children, child);
      child.set$parent(0, _this);
      _this._renderObject = null;
      _this.super$InspectorTreeNode$isDirty(true);
    }
  };
  K.InspectorTreeRow.prototype = {};
  K.InspectorTreeConfig.prototype = {};
  K.InspectorTreeController.prototype = {
    set$root: function(_, node) {
      this.setState$1(new K.InspectorTreeController_root_closure(this, node));
    },
    set$selection: function(node) {
      if (node == this._selection)
        return;
      this.setState$1(new K.InspectorTreeController_selection_closure(this, node));
    },
    getCachedRow$1: function(index) {
      var t1, t2, _this = this;
      if (_this._root._isDirty) {
        C.JSArray_methods.set$length(_this.cachedRows, 0);
        t1 = _this._root;
        t1.toString;
        t1.super$InspectorTreeNode$isDirty(false);
        _this.lastContentWidth = null;
      }
      for (t1 = _this.cachedRows; t2 = t1.length, t2 <= index;)
        C.JSArray_methods.add$1(t1, null);
      if (index < 0)
        return H.ioore(t1, index);
      if (t1[index] == null)
        C.JSArray_methods.$indexSet(t1, index, _this._root.getRow$1(index));
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    set$hover: function(node) {
      if (node == this._hover)
        return;
      this.setState$1(new K.InspectorTreeController_hover_closure(this, node));
    },
    navigateLeft$0: function() {
      var _this = this,
        t1 = _this._selection;
      if (t1 == null) {
        _this._navigateHelper$1(-1);
        return;
      }
      if (t1._isExpanded) {
        _this.setState$1(new K.InspectorTreeController_navigateLeft_closure(_this));
        return;
      }
      t1 = t1._inspector_tree$_parent;
      if (t1 != null)
        _this.set$selection(t1);
    },
    navigateRight$0: function() {
      var _this = this,
        t1 = _this._selection;
      if (t1 == null || t1._isExpanded) {
        _this._navigateHelper$1(1);
        return;
      }
      _this.setState$1(new K.InspectorTreeController_navigateRight_closure(_this));
    },
    _navigateHelper$1: function(indexOffset) {
      var t1, t2, _this = this;
      if (_this.get$numRows() === 0)
        return;
      t1 = _this._selection;
      if (t1 == null) {
        _this.set$selection(_this._root);
        return;
      }
      t2 = _this._root;
      t1 = t2.getRow$1(H._asIntS(C.JSInt_methods.clamp$2(t2.getRowIndex$1(t1) + indexOffset, 0, _this.get$numRows() - 1)));
      _this.set$selection(t1 == null ? null : t1.node);
    },
    get$horizontalPadding: function() {
      return 10;
    },
    getDepthIndent$1: function(depth) {
      if (typeof depth !== "number")
        return depth.$add();
      return (depth + 1) * 16 + this.get$horizontalPadding();
    },
    nodeChanged$1: function(node) {
      if (node == null)
        return;
      this.setState$1(new K.InspectorTreeController_nodeChanged_closure(node));
    },
    removeNodeFromParent$1: function(node) {
      this.setState$1(new K.InspectorTreeController_removeNodeFromParent_closure(node));
    },
    appendChild$2: function(_, node, child) {
      this.setState$1(new K.InspectorTreeController_appendChild_closure(node, child));
    },
    expandPath$1: function(node) {
      this.setState$1(new K.InspectorTreeController_expandPath_closure(this, node));
    },
    _expandPath$1: function(node) {
      for (; node != null;) {
        if (!node._isExpanded)
          node.set$isExpanded(true);
        node = node._inspector_tree$_parent;
      }
    },
    collapseToSelected$0: function() {
      this.setState$1(new K.InspectorTreeController_collapseToSelected_closure(this));
    },
    _collapseAllNodes$1: function(root) {
      type$.InspectorTreeNode._as(root);
      root.set$isExpanded(false);
      C.JSArray_methods.forEach$1(root._inspector_tree$_children, this.get$_collapseAllNodes());
    },
    get$numRows: function() {
      var t1 = this._root;
      if (t1 != null) {
        t1 = t1.get$childrenCount();
        if (typeof t1 !== "number")
          return t1.$add();
        ++t1;
      } else
        t1 = 0;
      return t1;
    },
    getRow$1: function(offset) {
      var row,
        t1 = this._root;
      if (t1 == null)
        return null;
      row = C.JSNumber_methods._tdivFast$1(offset._dy - 10, 24);
      t1 = t1.get$childrenCount();
      if (typeof t1 !== "number")
        return t1.$add();
      return row < t1 + 1 ? this.getCachedRow$1(row) : null;
    },
    onExpandRow$1: function(row) {
      this.setState$1(new K.InspectorTreeController_onExpandRow_closure(this, row));
    },
    onCollapseRow$1: function(row) {
      this.setState$1(new K.InspectorTreeController_onCollapseRow_closure(row));
    },
    expandPropertiesByDefault$1: function(style) {
      switch (style) {
        case C.DiagnosticsTreeStyle_0:
        case C.DiagnosticsTreeStyle_8:
        case C.DiagnosticsTreeStyle_9:
          return false;
        case C.DiagnosticsTreeStyle_1:
        case C.DiagnosticsTreeStyle_2:
        case C.DiagnosticsTreeStyle_3:
        case C.DiagnosticsTreeStyle_4:
        case C.DiagnosticsTreeStyle_5:
        case C.DiagnosticsTreeStyle_6:
        case C.DiagnosticsTreeStyle_7:
        case C.DiagnosticsTreeStyle_10:
        case C.DiagnosticsTreeStyle_11:
          return true;
      }
      return true;
    },
    setupInspectorTreeNode$4$expandChildren$expandProperties: function(node, diagnosticsNode, expandChildren, expandProperties) {
      var t1, styleIsMultiline, t2, _this = this;
      node._diagnostic = diagnosticsNode;
      node._isExpanded = diagnosticsNode.get$childrenReady();
      node._renderObject = null;
      node.super$InspectorTreeNode$isDirty(true);
      t1 = _this._config.onNodeAdded;
      if (t1 != null)
        t1.call$2(node, diagnosticsNode);
      if (H.boolConversionCheck(diagnosticsNode.get$hasChildren()) || diagnosticsNode.get$inlineProperties().length !== 0)
        if (diagnosticsNode.get$childrenReady() || !H.boolConversionCheck(diagnosticsNode.get$hasChildren())) {
          styleIsMultiline = _this.expandPropertiesByDefault$1(diagnosticsNode.get$style(diagnosticsNode));
          t1 = node._diagnostic;
          t1._maybePopulateChildren$0();
          t1 = t1._diagnostics_node$_children;
          t2 = expandChildren && styleIsMultiline;
          _this.setupChildren$5$expandChildren$expandProperties(diagnosticsNode, node, t1, t2, expandProperties && styleIsMultiline);
        } else {
          C.JSArray_methods.set$length(node._inspector_tree$_children, 0);
          node._renderObject = null;
          node.super$InspectorTreeNode$isDirty(true);
          node.appendChild$1(0, _this.createNode$0());
        }
      return node;
    },
    setupChildren$5$expandChildren$expandProperties: function($parent, treeNode, children, expandChildren, expandProperties) {
      var t1, inlineProperties, _i, property, t2, _this = this;
      type$.List_RemoteDiagnosticsNode._as(children);
      treeNode.set$isExpanded(expandChildren);
      t1 = treeNode._inspector_tree$_children;
      if (t1.length !== 0)
        _this.removeNodeFromParent$1(C.JSArray_methods.get$first(t1));
      inlineProperties = $parent.get$inlineProperties();
      if (inlineProperties != null)
        for (t1 = inlineProperties.length, _i = 0; _i < inlineProperties.length; inlineProperties.length === t1 || (0, H.throwConcurrentModificationError)(inlineProperties), ++_i) {
          property = inlineProperties[_i];
          _this.appendChild$2(0, treeNode, _this.setupInspectorTreeNode$4$expandChildren$expandProperties(_this.createNode$0(), property, expandProperties, expandProperties));
        }
      if (children != null)
        for (t1 = J.get$iterator$ax(children); t1.moveNext$0();) {
          t2 = t1.get$current(t1);
          _this.appendChild$2(0, treeNode, _this.setupInspectorTreeNode$4$expandChildren$expandProperties(_this.createNode$0(), t2, expandChildren, expandProperties));
        }
    },
    maybePopulateChildren$1: function(treeNode) {
      return this.maybePopulateChildren$body$InspectorTreeController(treeNode);
    },
    maybePopulateChildren$body$InspectorTreeController: function(treeNode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, children, e, t1, exception, diagnostic, $async$exception;
      var $async$maybePopulateChildren$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              diagnostic = treeNode._diagnostic;
              if (diagnostic != null)
                if (H.boolConversionCheck(diagnostic.get$hasChildren()))
                  t1 = treeNode.get$hasPlaceholderChildren() || treeNode._inspector_tree$_children.length === 0;
                else
                  t1 = false;
              else
                t1 = false;
              $async$goto = t1 ? 2 : 3;
              break;
            case 2:
              // then
              $async$handler = 5;
              t1 = diagnostic;
              t1._computeChildren$0();
              $async$goto = 8;
              return P._asyncAwait(t1._childrenFuture, $async$maybePopulateChildren$1);
            case 8:
              // returning from await.
              children = $async$result;
              if (treeNode.get$hasPlaceholderChildren() || treeNode._inspector_tree$_children.length === 0) {
                $async$self.setupChildren$5$expandChildren$expandProperties(diagnostic, treeNode, children, true, false);
                $async$self.nodeChanged$1(treeNode);
                if (treeNode === $async$self._selection)
                  $async$self.expandPath$1(treeNode);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              B.log(J.toString$0$(e), C.LogLevel_2);
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$maybePopulateChildren$1, $async$completer);
    },
    set$currentHoverDiagnostic: function(currentHoverDiagnostic) {
      this.currentHoverDiagnostic = type$.RemoteDiagnosticsNode._as(currentHoverDiagnostic);
    }
  };
  K.InspectorTreeController_root_closure.prototype = {
    call$0: function() {
      this.$this._root = this.node;
    },
    $signature: 0
  };
  K.InspectorTreeController_selection_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._selection;
      if (t2 != null)
        t2.selected = false;
      t2 = t1._selection = this.node;
      if (t2 != null)
        t2.selected = true;
      t1 = t1._config;
      if (t1.onSelectionChange != null)
        t1.onSelectionChange.call$0();
    },
    $signature: 0
  };
  K.InspectorTreeController_hover_closure.prototype = {
    call$0: function() {
      this.$this._hover = this.node;
    },
    $signature: 0
  };
  K.InspectorTreeController_navigateLeft_closure.prototype = {
    call$0: function() {
      this.$this._selection.set$isExpanded(false);
    },
    $signature: 0
  };
  K.InspectorTreeController_navigateRight_closure.prototype = {
    call$0: function() {
      this.$this._selection.set$isExpanded(true);
    },
    $signature: 0
  };
  K.InspectorTreeController_nodeChanged_closure.prototype = {
    call$0: function() {
      var t1 = this.node;
      t1._renderObject = null;
      t1.super$InspectorTreeNode$isDirty(true);
    },
    $signature: 0
  };
  K.InspectorTreeController_removeNodeFromParent_closure.prototype = {
    call$0: function() {
      var t1 = this.node,
        t2 = t1._inspector_tree$_parent;
      if (t2 != null) {
        t1.set$parent(0, null);
        C.JSArray_methods.remove$1(t2._inspector_tree$_children, t1);
        t2._renderObject = null;
        t2.super$InspectorTreeNode$isDirty(true);
      }
    },
    $signature: 0
  };
  K.InspectorTreeController_appendChild_closure.prototype = {
    call$0: function() {
      this.node.appendChild$1(0, this.child);
    },
    $signature: 0
  };
  K.InspectorTreeController_expandPath_closure.prototype = {
    call$0: function() {
      this.$this._expandPath$1(this.node);
    },
    $signature: 0
  };
  K.InspectorTreeController_collapseToSelected_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._root;
      t2.set$isExpanded(false);
      C.JSArray_methods.forEach$1(t2._inspector_tree$_children, t1.get$_collapseAllNodes());
      t2 = t1._selection;
      if (t2 == null)
        return;
      t1._expandPath$1(t2);
    },
    $signature: 0
  };
  K.InspectorTreeController_onExpandRow_closure.prototype = {
    call$0: function() {
      var t2,
        t1 = this.row.node;
      t1.set$isExpanded(true);
      t2 = this.$this._config.onExpand;
      if (t2 != null)
        t2.call$1(t1);
    },
    $signature: 0
  };
  K.InspectorTreeController_onCollapseRow_closure.prototype = {
    call$0: function() {
      this.row.node.set$isExpanded(false);
    },
    $signature: 0
  };
  K.InspectorTreeFixedRowHeightController.prototype = {
    animateToTargets$1: function(targets) {
      var t1, targetRect, _i, target, row, t2, t3, t4, t5, rowRect, _this = this;
      type$.List_InspectorTreeNode._as(targets);
      for (t1 = targets.length, targetRect = null, _i = 0; _i < targets.length; targets.length === t1 || (0, H.throwConcurrentModificationError)(targets), ++_i) {
        target = targets[_i];
        row = _this.getCachedRow$1(_this._root.getRowIndex$1(target));
        if (row != null) {
          t2 = (row.depth + 1) * 16 + _this.get$horizontalPadding();
          t3 = 24 * row.index + 10;
          t4 = _this._inspector_tree_canvas$_viewportCanvas._viewport;
          t5 = t4.left;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = t2 + (t4.right - t5) * 0.7;
          t4 = t3 + 24;
          rowRect = new S.Rect(t2, t3, t5, t4);
          targetRect = targetRect == null ? rowRect : new S.Rect(Math.min(H.checkNum(targetRect.left), t2), Math.min(targetRect.top, t3), Math.max(targetRect.right, t5), Math.max(targetRect.bottom, t4));
        }
      }
      if (targetRect != null) {
        t1 = targetRect.left;
        t2 = targetRect.right;
        if (typeof t1 !== "number")
          return t1.$ge();
        t1 = t1 >= t2 || targetRect.top >= targetRect.bottom;
      } else
        t1 = true;
      if (t1)
        return;
      targetRect = targetRect.inflate$1(20);
      _this._inspector_tree_canvas$_viewportCanvas.scrollToRect$1(targetRect);
    }
  };
  E.CanvasPaintEntry.prototype = {};
  E.IconPaintEntry0.prototype = {
    get$icon: function(_) {
      return this.iconRenderer.icon;
    },
    paint$1: function(canvas) {
      var t1 = this.iconRenderer,
        image = t1.get$image(t1);
      if (image != null)
        canvas.drawImage(image, this.x, (24 - t1.get$iconHeight()) / 2, t1.get$iconWidth(), t1.get$iconHeight());
    },
    get$right: function(_) {
      return this.x + this.iconRenderer.icon.get$iconWidth();
    },
    attach$1: function(owner) {
      var t1 = this.iconRenderer;
      if (t1.get$image(t1) == null)
        t1.loadImage$0().then$1$1(new E.IconPaintEntry_attach_closure(owner), type$.Null);
    }
  };
  E.IconPaintEntry_attach_closure.prototype = {
    call$1: function(_) {
      type$.CanvasImageSource._as(_);
      this.owner.setState$1(new E.IconPaintEntry_attach__closure());
    },
    $signature: 44
  };
  E.IconPaintEntry_attach__closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  E.TextPaintEntry.prototype = {
    get$icon: function(_) {
      return null;
    },
    paint$1: function(canvas) {
      var _this = this,
        t1 = _this.color;
      if (t1 != null)
        canvas.fillStyle = t1;
      t1 = _this.font;
      if (t1 != null)
        canvas.font = t1;
      C.CanvasRenderingContext2D_methods.fillText$3(canvas, _this.text, _this.x, 17);
    },
    get$right: function(_) {
      var t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.x + t1;
    }
  };
  E.InspectorTreeNodeRenderCanvasBuilder.prototype = {
    appendText$2: function(_, text, textStyle) {
      var t1, t2, width, _this = this;
      if (text == null || text.length === 0)
        return;
      if (!J.$eq$(textStyle, _this.lastStyle)) {
        t1 = textStyle.color;
        t2 = _this.lastStyle;
        if (t1 != (t2 == null ? null : t2.color))
          _this.color = Y.colorToCss(t1);
        t1 = Y.fontStyleToCss(textStyle);
        _this.font = t1;
        _this.lastStyle = textStyle;
        $.$get$InspectorTreeNodeRenderCanvasBuilder__measurementCanvas().font = t1;
      }
      width = $.$get$InspectorTreeNodeRenderCanvasBuilder__measurementCanvas().measureText(text).width;
      t1 = _this.x;
      C.JSArray_methods.add$1(_this._inspector_tree_canvas$_entries, new E.TextPaintEntry(width, text, _this.color, _this.font, t1));
      t1 = _this.x;
      if (typeof width !== "number")
        return H.iae(width);
      _this.x = t1 + width;
    },
    addIcon$1: function(icon) {
      var t1 = icon.get$iconWidth(),
        t2 = this.x;
      C.JSArray_methods.add$1(this._inspector_tree_canvas$_entries, new E.IconPaintEntry0(Y.getIconRenderer(icon), t2));
      this.x += t1 + 5;
    },
    build$0: function() {
      return new E.InspectorTreeNodeCanvasRender(new S.Size(this.x, 24), this._inspector_tree_canvas$_entries);
    }
  };
  E.InspectorTreeNodeCanvasRender.prototype = {
    paint$2: function(context, visible) {
      var t1, t2, t3, t4, _i, entry, t5, t6;
      for (t1 = this.entries, t2 = t1.length, t3 = visible.left, t4 = visible.right, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        entry = t1[_i];
        t5 = this._inspector_tree$_offset._dx;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (entry.x + t5 > t4)
          return;
        t5 = entry.get$right(entry);
        t6 = this._inspector_tree$_offset._dx;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t5 + t6 >= t3)
          entry.paint$1(context);
      }
    },
    hitTest$1: function($location) {
      var t2, t3, _i, entry,
        t1 = this._inspector_tree$_offset;
      if (t1 == null)
        return null;
      $location = $location.$sub(0, t1);
      t1 = $location._dy;
      if (t1 < 0 || t1 >= this.size._dy)
        return null;
      for (t1 = this.entries, t2 = t1.length, t3 = $location._dx, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        entry = t1[_i];
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (entry.x <= t3 && entry.get$right(entry) > t3)
          return entry;
      }
      return null;
    }
  };
  E.InspectorTreeNodeCanvas.prototype = {
    createRenderBuilder$0: function() {
      var t1 = this._diagnostic.getLevelMember$2("level", C.DiagnosticLevel_3),
        t2 = this._diagnostic;
      t2 = t2.get$style(t2);
      return new E.InspectorTreeNodeRenderCanvasBuilder(H.setRuntimeTypeInfo([], type$.JSArray_CanvasPaintEntry), t1, t2);
    }
  };
  E.InspectorTreeCanvas.prototype = {
    onMouseMove$1: function(_, offset) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, node, t1, row;
      var $async$onMouseMove$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              row = $async$self.getRow$1(offset);
              $async$goto = row != null ? 2 : 4;
              break;
            case 2:
              // then
              node = type$.InspectorTreeNodeCanvas._as(row.node);
              t1 = node.get$renderObject();
              $async$goto = 5;
              return P._asyncAwait($async$self.onHover$2(node, t1 == null ? null : t1.hitTest$1(offset)), $async$onMouseMove$1);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 6;
              return P._asyncAwait($async$self.onHover$2(null, null), $async$onMouseMove$1);
            case 6:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$onMouseMove$1, $async$completer);
    },
    _updateForContainerResize$1: function(size) {
      this._inspector_tree_canvas$_viewportCanvas.setContentSize$2(this._computeContentWidth$1(size), 24 * this.get$numRows() + 20);
    },
    _inspector_tree_canvas$_paintCallback$2: function(canvas, rect) {
      var i,
        startRow = C.JSNumber_methods._tdivFast$1(rect.top - 10, 24),
        endRow = Math.min(C.JSNumber_methods._tdivFast$1(rect.bottom - 10, 24) + 1, this.get$numRows());
      for (i = startRow; i < endRow; ++i)
        this.paintRow$3(canvas, i, rect);
    },
    setState$1: function(fn) {
      type$.void_Function._as(fn).call$0();
      if (!this._inspector_tree_canvas$_recomputeRows) {
        this._inspector_tree_canvas$_recomputeRows = true;
        C.Window_methods.requestAnimationFrame$1(window, new E.InspectorTreeCanvas_setState_closure(this));
      }
    },
    _computeContentWidth$1: function(size) {
      var maxIndent, i, row, _this = this,
        t1 = _this.lastContentWidth;
      if (t1 == null) {
        maxIndent = 0;
        i = 0;
        while (true) {
          t1 = _this._root;
          if (t1 != null) {
            t1 = t1.get$childrenCount();
            if (typeof t1 !== "number")
              return t1.$add();
            ++t1;
          } else
            t1 = 0;
          if (!(i < t1))
            break;
          row = _this.getCachedRow$1(i);
          if (row != null)
            maxIndent = Math.max(maxIndent, (row.depth + 1) * 16 + _this.get$horizontalPadding());
          ++i;
        }
        t1 = size._dx;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = _this.lastContentWidth = maxIndent + t1;
      }
      return t1;
    },
    set$tooltip: function(value) {
      this._inspector_tree_canvas$_viewportCanvas._viewport_canvas$_element.element.title = value;
    },
    onMouseLeave$0: function(_) {
      this.onHover$2(null, null);
    },
    get$element: function() {
      return this._inspector_tree_canvas$_viewportCanvas._viewport_canvas$_element;
    },
    createNode$0: function() {
      return new E.InspectorTreeNodeCanvas(H.setRuntimeTypeInfo([], type$.JSArray_InspectorTreeNode));
    },
    paintRow$3: function(canvas, index, visible) {
      var y, isVisible, row, node, showExpandCollapse, renderObject, _endPath, _maybeStart, t1, t2, _i, width, t3, t4, t5, backgroundColor, x, fillStyle, _this = this, _box_0 = {};
      canvas.save();
      y = 24 * index + 10;
      canvas.translate(0, y);
      _box_0.currentX = 0;
      _box_0.currentColor = null;
      isVisible = new E.InspectorTreeCanvas_paintRow_isVisible(_box_0, visible);
      row = _this.getCachedRow$1(index);
      if (row == null)
        return;
      node = type$.InspectorTreeNodeCanvas._as(row.node);
      showExpandCollapse = node.get$showExpandCollapse();
      renderObject = type$.InspectorTreeNodeCanvasRender._as(node.get$renderObject());
      _box_0.hasPath = false;
      _endPath = new E.InspectorTreeCanvas_paintRow__endPath(_box_0, canvas);
      _maybeStart = new E.InspectorTreeCanvas_paintRow__maybeStart(_box_0, _endPath, canvas);
      for (t1 = row.ticks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        _box_0.currentX = (t1[_i] + 1) * 16 + _this.get$horizontalPadding() - 8;
        if (H.boolConversionCheck(isVisible.call$1(1))) {
          _maybeStart.call$1(C.ThemedColor_Color_2315255808_Color_4291348680);
          canvas.moveTo(_box_0.currentX, 0);
          canvas.lineTo(_box_0.currentX, 24);
        }
      }
      if (row.lineToParent) {
        _box_0.currentX = _this.getDepthIndent$1(row.depth - 1) - 8;
        width = showExpandCollapse ? 8 : 16;
        if (H.boolConversionCheck(isVisible.call$1(width))) {
          _maybeStart.call$1(C.ThemedColor_Color_2315255808_Color_4291348680);
          canvas.moveTo(_box_0.currentX, 0);
          canvas.lineTo(_box_0.currentX, 12);
          canvas.lineTo(_box_0.currentX + width, 12);
        }
      }
      _endPath.call$0();
      t1 = row.depth;
      _box_0.currentX = _this.getDepthIndent$1(t1) - 16;
      if (!node.get$showExpandCollapse())
        _box_0.currentX += 16;
      if (renderObject == null) {
        canvas.restore();
        return;
      }
      renderObject.attach$2(_this, new S.Offset(_box_0.currentX, y));
      t2 = renderObject._inspector_tree$_offset;
      t3 = renderObject.size;
      t4 = t2._dx;
      t2 = t2._dy;
      t5 = t3._dx;
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t5 = t4 + t5;
      if (!new S.Rect(t4, t2, t5, t2 + t3._dy).overlaps$1(visible)) {
        canvas.restore();
        return;
      }
      t2 = node.selected;
      if (t2 || node === _this._hover) {
        backgroundColor = t2 ? C.ThemedColor_Color_4291477317_Color_4284704103 : C.ThemedColor_W3G;
        x = _this.getDepthIndent$1(t1) - 2.4;
        t1 = visible.right;
        if (x <= t1) {
          fillStyle = canvas.fillStyle;
          canvas.fillStyle = Y.colorToCss(backgroundColor);
          canvas.fillRect(x, 0, Math.min(t1, t5) - x, 24);
          canvas.fillStyle = fillStyle;
        }
      }
      canvas.translate(_box_0.currentX, 0);
      renderObject.paint$2(canvas, visible);
      canvas.restore();
    },
    $isCoreElementView: 1
  };
  E.InspectorTreeCanvas_setState_closure.prototype = {
    call$1: function(_) {
      var t1, t2, t3;
      H._asNumS(_);
      t1 = this.$this;
      if (t1._inspector_tree_canvas$_recomputeRows) {
        t1._inspector_tree_canvas$_recomputeRows = false;
        t2 = t1._root;
        t3 = t1._inspector_tree_canvas$_viewportCanvas;
        if (t2 != null) {
          t2 = t3._viewport;
          t3 = t2.left;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1._updateForContainerResize$1(new S.Size(t2.right - t3, t2.bottom - t2.top));
        } else
          t3.setContentSize$2(0, 0);
      }
      t1._inspector_tree_canvas$_viewportCanvas.rebuild$1$force(true);
      return null;
    },
    $signature: 89
  };
  E.InspectorTreeCanvas_paintRow_isVisible.prototype = {
    call$1: function(width) {
      var t1 = this._box_0.currentX,
        t2 = this.visible;
      if (t1 <= t2.right) {
        t2 = t2.left;
        if (typeof t2 !== "number")
          return t2.$le();
        t1 = t2 <= t1 + width;
      } else
        t1 = false;
      return t1;
    },
    $signature: 146
  };
  E.InspectorTreeCanvas_paintRow__endPath.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      if (!t1.hasPath)
        return;
      this.canvas.stroke();
      t1.hasPath = false;
    },
    $signature: 1
  };
  E.InspectorTreeCanvas_paintRow__maybeStart.prototype = {
    call$1: function(color) {
      var t2,
        t1 = this._box_0;
      if (color !== t1.currentColor)
        this._endPath.call$0();
      if (t1.hasPath)
        return;
      t1.hasPath = true;
      t2 = this.canvas;
      t2.beginPath();
      if (t1.currentColor !== color) {
        t1.currentColor = color;
        t2.strokeStyle = Y.colorToCss(color);
      }
      t2.lineWidth = 1;
    },
    call$0: function() {
      return this.call$1(C.MaterialColor_Map_HFpTk_4288585374);
    },
    $signature: 147
  };
  E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb.prototype = {};
  E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController.prototype = {};
  K.HtmlPaintEntry.prototype = {};
  K.IconPaintEntry.prototype = {
    get$icon: function(_) {
      return this.iconRenderer.icon;
    },
    paint$1: function($parent) {
      var t1 = this.iconRenderer.createElement$0(0);
      this.element = t1;
      $parent.appendChild(t1);
    }
  };
  K.HtmlTextPaintEntry.prototype = {
    get$icon: function(_) {
      return null;
    },
    paint$1: function($parent) {
      var t2, _this = this,
        t1 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("span", null));
      t1.textContent = _this.text;
      _this.element = t1;
      t2 = _this.color;
      if (t2 != null) {
        t1 = t1.style;
        t1.color = t2;
      }
      t1 = _this.font;
      if (t1 != null) {
        t2 = _this.element.style;
        t2.font = t1;
      }
      $parent.appendChild(_this.element);
    }
  };
  K.InspectorTreeNodeRenderHtmlBuilder.prototype = {
    appendText$2: function(_, text, textStyle) {
      var t1, t2, _this = this;
      if (text == null || text.length === 0)
        return;
      if (!J.$eq$(textStyle, _this.lastStyle)) {
        t1 = textStyle.color;
        t2 = _this.lastStyle;
        if (t1 != (t2 == null ? null : t2.color))
          if (t1 === C.ThemedColor_Color_4278190080_Color_4290493371)
            _this.color = null;
          else
            _this.color = Y.colorToCss(t1);
        if (textStyle.$eq(0, C.TextStyle_Ure))
          _this.font = null;
        else
          _this.font = Y.fontStyleToCss(textStyle);
        _this.lastStyle = textStyle;
      }
      C.JSArray_methods.add$1(_this._entries, new K.HtmlTextPaintEntry(text, _this.color, _this.font));
    },
    addIcon$1: function(icon) {
      C.JSArray_methods.add$1(this._entries, new K.IconPaintEntry(Y.getIconRenderer(icon)));
    },
    build$0: function() {
      var t2, classes, _this = this,
        t1 = $.$get$diagnosticLevelUtils();
      t1.toString;
      t1 = "inspector-level-" + H.S(t1._reverseLookupTable.$index(0, t1.$ti._precomputed1._as(_this.level)));
      t2 = $.$get$treeStyleUtils();
      t2.toString;
      classes = H.setRuntimeTypeInfo([t1, "inspector-style-" + H.S(t2._reverseLookupTable.$index(0, t2.$ti._precomputed1._as(_this.treeStyle)))], type$.JSArray_String);
      if (!H.boolConversionCheck(_this.allowWrap))
        C.JSArray_methods.add$1(classes, "inspector-no-wrap");
      return new K.InspectorTreeNodeHtmlRender(classes, _this._entries);
    }
  };
  K.InspectorTreeNodeHtmlRender.prototype = {
    paint$1: function(container) {
      var t1, t2, _i;
      W._ElementCssClassSet__addAll(container, type$.Iterable_String._as(this.cssClasses));
      this.element = container;
      for (t1 = this.entries, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].paint$1(container);
    },
    hitTest$1: function($location) {
      throw H.wrapException("Not yet supported by HTML tree");
    }
  };
  K.InspectorTreeNodeHtml.prototype = {
    createRenderBuilder$0: function() {
      var t1 = this._diagnostic.getLevelMember$2("level", C.DiagnosticLevel_3),
        t2 = this._diagnostic;
      t2 = t2.get$style(t2);
      return new K.InspectorTreeNodeRenderHtmlBuilder(this._diagnostic.getBooleanMember$2("allowWrap", true), H.setRuntimeTypeInfo([], type$.JSArray_HtmlPaintEntry), t1, t2);
    }
  };
  K.InspectorTreeHtml.prototype = {
    _resolveTreeRow$1: function(e) {
      var t1;
      while (true) {
        t1 = e == null;
        if (!(!t1 && !J.get$classes$x(e).contains$1(0, "inspector-tree-row")))
          break;
        e = e.parentElement;
      }
      if (t1)
        return null;
      t1 = J.get$children$x(e.parentElement);
      return this.getCachedRow$1(t1.indexOf$1(t1, e));
    },
    _resolveIcon$2: function(row, e) {
      var t2, _i, entry, _null = null,
        t1 = type$.InspectorTreeNodeHtml._as(row.node).get$renderObject();
      type$.InspectorTreeNodeHtmlRender._as(t1);
      if (t1 == null)
        return _null;
      while (true) {
        t2 = e == null;
        if (!(!t2 && !J.get$classes$x(e).contains$1(0, "flutter-icon")))
          break;
        t2 = t1.element;
        if (e == null ? t2 == null : e === t2)
          return _null;
        e = e.parentElement;
      }
      if (t2)
        return _null;
      for (t1 = t1.entries, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        entry = t1[_i];
        if (entry.element === e)
          return entry.get$icon(entry);
      }
      return _null;
    },
    setState$1: function(fn) {
      type$.void_Function._as(fn).call$0();
      if (!this._recomputeRows) {
        this._recomputeRows = true;
        C.Window_methods.requestAnimationFrame$1(window, new K.InspectorTreeHtml_setState_closure(this));
      }
    },
    _rebuildData$0: function() {
      var rowCount, t1, i, _this = this;
      if (_this._recomputeRows) {
        _this._recomputeRows = false;
        if (_this._root == null) {
          J.get$children$x(_this._inspector_tree_html$_container.element).clear$0(0);
          return;
        }
        rowCount = _this.get$numRows();
        t1 = _this._inspector_tree_html$_container.element;
        J.get$children$x(t1).clear$0(0);
        for (i = 0; i < rowCount; ++i)
          t1.appendChild(_this.paintRow$2$selection(i, _this._selection));
      }
    },
    onMouseClick$1: function(mouseEvent) {
      var t1, row;
      type$.MouseEvent._as(mouseEvent);
      t1 = type$.Element;
      row = this._resolveTreeRow$1(t1._as(W._convertNativeToDart_EventTarget(mouseEvent.target)));
      if (row == null)
        return;
      this.onTapIcon$2(row, this._resolveIcon$2(row, t1._as(W._convertNativeToDart_EventTarget(mouseEvent.target))));
    },
    onMouseMove$1: function(_, mouseEvent) {
      var t1;
      type$.MouseEvent._as(mouseEvent);
      t1 = this._resolveTreeRow$1(type$.Element._as(W._convertNativeToDart_EventTarget(mouseEvent.target)));
      this.onHover$2(t1 == null ? null : t1.node, null);
    },
    onMouseLeave$1: function(_, mouseEvent) {
      type$.MouseEvent._as(mouseEvent);
      this.onHover$2(null, null);
    },
    get$element: function() {
      return this._inspector_tree_html$_container;
    },
    createNode$0: function() {
      return new K.InspectorTreeNodeHtml(H.setRuntimeTypeInfo([], type$.JSArray_InspectorTreeNode));
    },
    get$horizontalPadding: function() {
      return 0;
    },
    paintRow$2$selection: function(index, selection) {
      var container, currentX, row, node, diagnostic, renderObject, rowContentContainer, rowContent, e, s, t1, t2, t3, exception;
      try {
        t1 = document;
        container = t1.createElement("div");
        container.classList.add("inspector-tree-row");
        currentX = 0;
        row = this.getCachedRow$1(index);
        if (row == null)
          return container;
        node = row.node;
        diagnostic = node._diagnostic;
        if (diagnostic != null) {
          t2 = H._asStringS(J.$index$asx(diagnostic.json, "name"));
          t2 = (t2 == null ? null : t2.length !== 0) === true && H.boolConversionCheck(diagnostic.getBooleanMember$2("showName", true)) && H.boolConversionCheck(diagnostic.getBooleanMember$2("showSeparator", true)) && H._asStringS(J.$index$asx(diagnostic.json, "description")) != null;
        } else
          t2 = false;
        if (t2)
          container.classList.add("property-value");
        t2 = row;
        t2 = t2 == null ? null : t2.node;
        renderObject = type$.InspectorTreeNodeHtmlRender._as(type$.InspectorTreeNodeHtml._as(t2).get$renderObject());
        if (renderObject == null)
          return container;
        currentX = this.getDepthIndent$1(row.depth - 1) - 16;
        if (!row.node.get$showExpandCollapse()) {
          t2 = currentX;
          if (typeof t2 !== "number")
            return t2.$add();
          currentX = t2 + 16;
        }
        rowContentContainer = t1.createElement("div");
        rowContentContainer.classList.add("inspector-tree-row-content");
        t2 = rowContentContainer.style;
        t3 = H.S(currentX) + "px";
        t2.paddingLeft = t3;
        rowContent = t1.createElement("div");
        J.append$1$x(rowContentContainer, rowContent);
        renderObject.paint$1(rowContent);
        J.append$1$x(container, rowContentContainer);
        return container;
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        B.log(J.toString$0$(s), C.LogLevel_2);
        t1 = document.createElement("div");
        t1.textContent = "Error: " + H.S(e) + ", " + H.S(s);
        return t1;
      }
    },
    animateToTargets$1: function(targets) {
      type$.List_InspectorTreeNode._as(targets);
      C.Window_methods.requestAnimationFrame$1(window, new K.InspectorTreeHtml_animateToTargets_closure(targets));
    },
    set$tooltip: function(value) {
      this._inspector_tree_html$_container.element.title = value;
    },
    $isCoreElementView: 1
  };
  K.InspectorTreeHtml_setState_closure.prototype = {
    call$1: function(_) {
      H._asNumS(_);
      return this.$this._rebuildData$0();
    },
    $signature: 89
  };
  K.InspectorTreeHtml_animateToTargets_closure.prototype = {
    call$1: function(_) {
      var t1, t2, t3, renderObject, t4;
      H._asNumS(_);
      for (t1 = this.targets, t2 = H._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>"), t1 = new H.ReversedListIterable(t1, t2), t2 = new H.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t1 = type$.InspectorTreeNodeHtml, t3 = type$.InspectorTreeNodeHtmlRender; t2.moveNext$0();) {
        renderObject = t3._as(t1._as(t2.__internal$_current).get$renderObject());
        t4 = renderObject == null ? null : renderObject.element;
        if (t4 != null)
          C.DivElement_methods.scrollIntoView$0(t4);
      }
    },
    $signature: 95
  };
  K._InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb.prototype = {};
  K.InspectorTreeControllerLegacy.prototype = {
    onTapIcon$2: function(row, icon) {
      var t1, _this = this;
      if (icon == $.$get$expandArrow()) {
        _this.onExpandRow$1(row);
        return;
      }
      if (icon == $.$get$collapseArrow()) {
        _this.onCollapseRow$1(row);
        return;
      }
      t1 = row.node;
      _this.set$selection(t1);
      _this.expandPath$1(t1);
    },
    onTap$1: function(offset) {
      var t1,
        row = this.getRow$1(offset);
      if (row == null)
        return;
      t1 = row.node.get$renderObject();
      t1 = t1 == null ? null : t1.hitTest$1(offset);
      this.onTapIcon$2(row, t1 == null ? null : t1.get$icon(t1));
    },
    onHover$2: function(node, entry) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, diagnostic, properties, t2, lastHover, t1;
      var $async$onHover$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._config;
              t1.toString;
              t2 = entry == null ? null : entry.get$icon(entry);
              t1.onHover.call$2(node, t2);
              diagnostic = node == null ? null : node._diagnostic;
              lastHover = $async$self.currentHoverDiagnostic;
              $async$self.set$currentHoverDiagnostic(diagnostic);
              if (diagnostic == null || entry == null) {
                $async$self.set$tooltip("");
                $async$self._computingHover = false;
                // goto return
                $async$goto = 1;
                break;
              }
              if (entry.get$icon(entry) == $.$get$defaultIcon()) {
                $async$self.set$tooltip("Default value");
                $async$self._computingHover = false;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = diagnostic.isEnumProperty$0() ? 3 : 4;
              break;
            case 3:
              // then
              t1 = J.getInterceptor$(lastHover);
              if (t1.$eq(lastHover, diagnostic) && $async$self._computingHover) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._computingHover = true;
              properties = null;
              $async$handler = 5;
              $async$goto = 8;
              return P._asyncAwait(diagnostic.get$valueProperties(), $async$onHover$2);
            case 8:
              // returning from await.
              properties = $async$result;
              $async$next.push(7);
              // goto finally
              $async$goto = 6;
              break;
            case 5:
              // uncaught
              $async$next = [2];
            case 6:
              // finally
              $async$handler = 2;
              $async$self._computingHover = false;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 7:
              // after finally
              if (!t1.$eq(lastHover, diagnostic)) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (properties == null) {
                $async$self.set$tooltip(diagnostic.get$tooltip());
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.set$tooltip("Allowed values:\n" + J.join$1$ax(J.get$keys$x(properties), "\n"));
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              $async$self.set$tooltip(diagnostic.get$tooltip());
              $async$self._computingHover = false;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$onHover$2, $async$completer);
    }
  };
  K.InspectorTreeNodeLegacy.prototype = {
    get$renderObject: function() {
      var builder, icon, $name, textStyle, propertyType, properties, description, alpha, red, green, blue, color, codePoint, t2, _this = this,
        _s8_ = "showName",
        _s13_ = "showSeparator",
        _s21_ = "createdByLocalProject",
        _s11_ = "description",
        t1 = _this._renderObject;
      if (t1 != null || _this._diagnostic == null)
        return t1;
      builder = _this.createRenderBuilder$0();
      t1 = _this._diagnostic;
      icon = t1.get$icon(t1);
      if (_this.get$showExpandCollapse())
        builder.addIcon$1(_this._isExpanded ? $.$get$collapseArrow() : $.$get$expandArrow());
      if (icon != null)
        builder.addIcon$1(icon);
      $name = H._asStringS(J.$index$asx(_this._diagnostic.json, "name"));
      textStyle = Z.textStyleForLevel(_this._diagnostic.getLevelMember$2("level", C.DiagnosticLevel_3));
      t1 = _this._diagnostic;
      if (t1.isProperty) {
        propertyType = H._asStringS(J.$index$asx(t1.json, "propertyType"));
        properties = type$.Map_String_Object._as(J.$index$asx(_this._diagnostic.json, "valueProperties"));
        if (($name == null ? null : $name.length !== 0) === true && H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s8_, true))) {
          t1 = H.S($name);
          builder.appendText$2(0, t1 + (H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s13_, true)) ? ":" : "") + " ", textStyle);
        }
        if (H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s21_, false)))
          textStyle = textStyle.merge$1(C.TextStyle_0iR);
        description = H._asStringS(J.$index$asx(_this._diagnostic.json, _s11_));
        if (propertyType != null && properties != null)
          switch (propertyType) {
            case "Color":
              alpha = B.JsonUtils_getIntMember(properties, "alpha");
              red = B.JsonUtils_getIntMember(properties, "red");
              green = B.JsonUtils_getIntMember(properties, "green");
              blue = B.JsonUtils_getIntMember(properties, "blue");
              t1 = new K.InspectorTreeNodeLegacy_renderObject_radix();
              description = alpha === 255 ? "#" + H.S(t1.call$1(red)) + H.S(t1.call$1(green)) + H.S(t1.call$1(blue)) : "#" + H.S(t1.call$1(alpha)) + H.S(t1.call$1(red)) + H.S(t1.call$1(green)) + H.S(t1.call$1(blue));
              color = S.Color$fromARGB(alpha, red, green, blue);
              builder.addIcon$1($.$get$_colorIconMaker().getCustomIcon$1(color));
              break;
            case "IconData":
              codePoint = B.JsonUtils_getIntMember(properties, "codePoint");
              if (codePoint > 0) {
                icon = K.FlutterMaterialIcons_getIconForCodePoint(codePoint);
                if (icon != null)
                  builder.addIcon$1(icon);
              }
              break;
          }
        _this._renderDescription$4$isProperty(builder, description, textStyle, true);
        if (_this._diagnostic.getLevelMember$2("level", C.DiagnosticLevel_3) === C.DiagnosticLevel_1 && H.boolConversionCheck(J.containsKey$1$x(_this._diagnostic.json, "defaultValue"))) {
          builder.appendText$2(0, " ", textStyle);
          builder.addIcon$1($.$get$defaultIcon());
        }
      } else {
        if (($name == null ? null : $name.length !== 0) === true && H.boolConversionCheck(t1.getBooleanMember$2(_s8_, true)) && $name !== "child") {
          if (J.startsWith$1$s($name, "child "))
            builder.appendText$2(0, $name, $.$get$unimportant());
          else
            builder.appendText$2(0, $name, textStyle);
          if (H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s13_, true))) {
            t1 = H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s13_, true)) ? ":" : "";
            t2 = $.$get$unimportant();
            builder.appendText$2(0, t1, t2);
            if ((H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s13_, true)) ? ":" : "") !== " " && H._asStringS(J.$index$asx(_this._diagnostic.json, _s11_)).length !== 0)
              builder.appendText$2(0, " ", t2);
          }
        }
        if (!H.boolConversionCheck(_this._diagnostic.getBooleanMember$2("summaryTree", false)) && H.boolConversionCheck(_this._diagnostic.getBooleanMember$2(_s21_, false)))
          textStyle = textStyle.merge$1(C.TextStyle_0iR);
        _this._renderDescription$4$isProperty(builder, H._asStringS(J.$index$asx(_this._diagnostic.json, _s11_)), textStyle, false);
      }
      return _this._renderObject = builder.build$0();
    },
    _renderDescription$4$isProperty: function(builder, description, textStyle, isProperty) {
      var match, t1;
      type$.InspectorTreeNodeRenderBuilder_InspectorTreeNodeRender_dynamic._as(builder);
      if (H.boolConversionCheck(this._diagnostic.getBooleanMember$2("isDiagnosticableValue", false))) {
        match = $.$get$treeNodePrimaryDescriptionPattern().firstMatch$1(description);
        if (match != null) {
          t1 = match._match;
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          builder.appendText$2(0, t1[1], textStyle);
          if (2 >= t1.length)
            return H.ioore(t1, 2);
          t1 = t1[2];
          if (t1.length !== 0)
            builder.appendText$2(0, t1, $.$get$unimportant());
          return;
        }
      } else if (H._asStringS(J.$index$asx(this._diagnostic.json, "type")) === "ErrorDescription") {
        match = $.$get$assertionThrownBuildingError().firstMatch$1(description);
        if (match != null) {
          t1 = match._match;
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          builder.appendText$2(0, t1[1], textStyle);
          if (3 >= t1.length)
            return H.ioore(t1, 3);
          builder.appendText$2(0, t1[3], textStyle);
          return;
        }
      }
      if ((description == null ? null : description.length !== 0) === true)
        builder.appendText$2(0, description, textStyle);
    }
  };
  K.InspectorTreeNodeLegacy_renderObject_radix.prototype = {
    call$1: function(chan) {
      return C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(chan, 16), 2, "0");
    },
    $signature: 40
  };
  M.InspectorTreeWeb.prototype = {
    addKeyboardListeners$1: function(element) {
      var t1 = J.get$onKeyDown$x(element.element),
        t2 = t1.$ti,
        t3 = t2._eval$1("~(1)")._as(new M.InspectorTreeWeb_addKeyboardListeners_closure(this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
    },
    $isInspectorTreeController: 1,
    $isCoreElementView: 1
  };
  M.InspectorTreeWeb_addKeyboardListeners_closure.prototype = {
    call$1: function(e) {
      var _this = this;
      type$.KeyboardEvent._as(e);
      switch (e.keyCode) {
        case 38:
          _this.$this._navigateHelper$1(-1);
          break;
        case 40:
          _this.$this._navigateHelper$1(1);
          break;
        case 37:
          _this.$this.navigateLeft$0();
          break;
        case 39:
          _this.$this.navigateRight$0();
          break;
        default:
          return;
      }
      e.preventDefault();
    },
    $signature: 13
  };
  Z.HtmlLoggingScreen.prototype = {
    HtmlLoggingScreen$0: function() {
      var t2, t3, _this = this, _null = null,
        t1 = A.CoreElement$("span", _null, _null, _null, _null);
      _this.logCountStatus = new A.HtmlStatusItem(t1);
      t1.element.textContent = "";
      C.JSArray_methods.add$1(_this.statusItems, _this.logCountStatus);
      t1 = new E.LoggingController(new Z.HtmlLoggingScreen_closure(_this), new Z.HtmlLoggingScreen_closure0(_this), new P._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_String), H.setRuntimeTypeInfo([], type$.JSArray_LogData), H.setRuntimeTypeInfo([], type$.JSArray_StreamSubscription_dynamic), new B.Reporter(P.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function)));
      t2 = type$.ServiceConnectionManager;
      t3 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionAvailableController;
      t1._logging_controller$_listen$1$2(new P._BroadcastStream(t3, H._instanceType(t3)._eval$1("_BroadcastStream<1>")), t1.get$_logging_controller$_handleConnectionStart(), type$.VmServiceWrapper);
      if (t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection())
        t1._logging_controller$_handleConnectionStart$1(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service);
      t2 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionClosedController;
      t1._logging_controller$_listen$1$2(new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")), t1.get$_logging_controller$_handleConnectionStop(), type$.void);
      t1._handleBusEvents$0();
      _this.controller = t1;
    },
    createContent$1: function(framework) {
      var screenDiv, t1, table, t2, t3, t4, t5, t6, _this = this, _null = null, _s3_ = "div", _s6_ = "layout",
        _s8_ = "vertical",
        _s10_ = "horizontal",
        _s9_ = "full-size",
        _s6_0 = "button";
      E.setupDimensions();
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null);
      t1 = screenDiv.element;
      t1.setAttribute(_s6_, "");
      t1.setAttribute(_s8_, "");
      _this.framework = framework;
      t1 = type$.LogData;
      table = Q.HtmlTable_HtmlTable$virtual(t1);
      t2 = table.model;
      t3 = new E.LogWhenColumn("When", _null, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("When", C.ColumnAlignment_0, _null, _null, false, _null, false, t1);
      t2.addColumn$1(t3);
      t3 = new E.LogKindColumn("Kind", _null, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Kind", C.ColumnAlignment_0, _null, _null, false, _null, false, t1);
      t2.addColumn$1(t3);
      t2.addColumn$1(new E.LogMessageColumn(Z.html_logging_screen__logMessageToHtml$closure(), "Message", _null, 100, C.ColumnAlignment_0));
      _this.set$_loggingTable(table);
      t2 = _this._loggingTable.element;
      t3 = t2.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s10_, "");
      t2.clazz$1("section");
      t2.clazz$1(_s9_);
      t2.clazz$1("log-summary");
      t2 = type$.Element;
      t3 = t2._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null));
      t1 = new Z.HtmlLogDetails(t3);
      t1.CoreElement$5$attributes$classes$html$text(_s3_, _null, _s9_, _null, _null);
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s8_, "");
      t3 = A.CoreElement$(_s3_, _null, "log-details table-border", _null, _null);
      t3.flex$0(0);
      t4 = A.CoreElement$(_s3_, _null, "pre-wrap monospace", _null, _null);
      t1.message = t4;
      t3.add$1(0, t4);
      t1.content = t3;
      t4 = type$.JSArray_CoreElement;
      t1.add$1(0, H.setRuntimeTypeInfo([t3], t4));
      _this.logDetailsUI = t1;
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager;
      t3 = $.$get$structuredErrors();
      t1.setServiceExtensionState$3(t3.extension, true, true);
      t1 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t5 = A.CoreElement$("form", _null, _null, _null, _null);
      t5.clazz$1("align-items-center");
      t6 = t5.element;
      t6.setAttribute(_s6_, "");
      t6.setAttribute(_s10_, "");
      t2 = t2._as(W._ElementFactoryProvider_createElement_tag(_s6_0, _null));
      t6 = new N.PButton(t2);
      t6.CoreElement$5$attributes$classes$html$text(_s6_0, _null, "btn", _null, "Clear logs");
      t2.setAttribute("type", _s6_0);
      t6.clazz$1("btn-sm");
      t6.click$1(0, new Z.HtmlLoggingScreen_createContent_closure(_this));
      t2 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t2.flex$0(0);
      t5.add$1(0, H.setRuntimeTypeInfo([t6, t2, N.ServiceExtensionCheckbox$(t3).element], t4));
      t1.add$1(0, H.setRuntimeTypeInfo([t5], t4));
      t5 = A.CoreElement$(_s3_, _null, "section log-area bidirectional", _null, _null);
      t5.flex$0(0);
      t5.add$1(0, H.setRuntimeTypeInfo([_this._loggingTable.element, _this.logDetailsUI], t4));
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t1, t5], t4));
      _this.controller.set$loggingTableModel(_this._loggingTable.model);
      t4 = _this.controller;
      t5 = _this.logDetailsUI;
      t4.detailsController = new E.LoggingDetailsController(new Z.HtmlLoggingScreen_createContent_closure0(framework), t5.get$onShowDetails(), t5.get$createLoggingTree());
      return screenDiv;
    },
    onContentAttached$0: function() {
      var t1 = H.setRuntimeTypeInfo([this._loggingTable.element.element, this.logDetailsUI.element], type$.JSArray_Element),
        t2 = type$.JSArray_num,
        t3 = H.setRuntimeTypeInfo([60, 40], t2),
        t4 = H.setRuntimeTypeInfo([70, 30], t2);
      A._splitBidirectional(t1, 10, t3, H.setRuntimeTypeInfo([200, 200], t2), A.split__fixedSplit$closure(), t4);
    },
    entering$0: function() {
      var t2,
        t1 = this.controller;
      if (t1._hasPendingUiUpdates) {
        t2 = t1._loggingTableModel;
        if (t2 != null)
          t2.setRows$1(t1.data);
        t2 = t1._loggingTableModel;
        if (t2 != null)
          t2.scrollTo$2$scrollBehavior(0, C.JSArray_methods.get$last(t1.data), "auto");
        t1._hasPendingUiUpdates = false;
      }
    },
    set$_loggingTable: function(_loggingTable) {
      this._loggingTable = type$.HtmlTable_LogData._as(_loggingTable);
    }
  };
  Z.HtmlLoggingScreen_closure.prototype = {
    call$0: function() {
      return this.$this._visible._utils$_value;
    },
    $signature: 28
  };
  Z.HtmlLoggingScreen_closure0.prototype = {
    call$1: function($status) {
      this.$this.logCountStatus.element.element.textContent = $status;
    },
    $signature: 8
  };
  Z.HtmlLoggingScreen_createContent_closure.prototype = {
    call$0: function() {
      var t1, t2;
      F.select("logging", "clearLogs", 0);
      t1 = this.$this.controller;
      C.JSArray_methods.set$length(t1.data, 0);
      t1.set$_cachedFilteredData(null);
      t2 = t1.detailsController;
      if (t2 != null)
        t2.setData$1(0, null);
      t2 = t1._loggingTableModel;
      if (t2 != null)
        t2.setRows$1(t1.data);
      t1._updateStatus$0();
    },
    $signature: 0
  };
  Z.HtmlLoggingScreen_createContent_closure0.prototype = {
    call$0: function() {
      this.framework.navigateTo$1("inspector");
    },
    $signature: 0
  };
  Z.HtmlLogDetails.prototype = {
    onShowDetails$2$text$tree: function(text, tree) {
      var t2, _this = this,
        t1 = _this.content.element;
      t1.toString;
      t1.scrollTop = 0;
      J.get$children$x(_this.message.element).clear$0(0);
      if (text != null) {
        t1 = _this.message;
        t2 = Z.logMessageToHtml(text);
        J.setInnerHtml$2$treeSanitizer$x(t1.element, t2, C.C_TrustedHtmlTreeSanitizer);
      }
      if (tree != null)
        _this.message.add$1(0, type$.InspectorTreeWeb._as(tree).get$element());
    },
    onShowDetails$0: function() {
      return this.onShowDetails$2$text$tree(null, null);
    },
    onShowDetails$1$text: function(text) {
      return this.onShowDetails$2$text$tree(text, null);
    },
    onShowDetails$1$tree: function(tree) {
      return this.onShowDetails$2$text$tree(null, tree);
    },
    createLoggingTree$1$onSelectionChange: function(onSelectionChange) {
      var tree;
      type$.void_Function._as(onSelectionChange);
      tree = K.InspectorTreeHtml$();
      tree._config = K.InspectorTreeConfig$(null, null, new Z.HtmlLogDetails_createLoggingTree_closure(this), null, onSelectionChange, false, C.FlutterTreeType_0);
      return tree;
    },
    createLoggingTree$0: function() {
      return this.createLoggingTree$1$onSelectionChange(null);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  Z.HtmlLogDetails_createLoggingTree_closure.prototype = {
    call$2: function(node, icon) {
      var t1 = this.$this.element.style,
        t2 = node == null ? null : node._diagnostic;
      t2 = (t2 == null ? null : t2.getBooleanMember$2("isDiagnosticableValue", false)) === true ? "pointer" : "auto";
      t1.cursor = t2;
    },
    $signature: 151
  };
  E._retrieveFullStringValue_closure.prototype = {
    call$1: function(truncatedValue) {
      var t1 = this.stringRef;
      return H.S(t1.get$valueAsString(t1)) + "...";
    },
    $signature: 5
  };
  E.LoggingDetailsController.prototype = {
    setData$1: function(_, data) {
      var t1, t2, root, _this = this;
      _this.data = data;
      _this.tree = null;
      if (data == null) {
        _this.onShowDetails.call$1$text("");
        return;
      }
      t1 = data.node;
      if (t1 != null) {
        _this.set$tree(_this.createLoggingTree.call$1$onSelectionChange(new E.LoggingDetailsController_setData_closure(_this)));
        t2 = _this.tree;
        root = t2.setupInspectorTreeNode$4$expandChildren$expandProperties(t2.createNode$0(), t1, true, true);
        root.allowExpandCollapse = false;
        _this.tree.set$root(0, root);
        _this.onShowDetails.call$1$tree(_this.tree);
        return;
      }
      if (data.detailsComputer != null) {
        _this.onShowDetails.call$1$text("");
        data.compute$0().then$1$1(new E.LoggingDetailsController_setData_closure0(_this, data), type$.Null);
      } else
        _this._updateUIFromData$0();
    },
    _updateUIFromData$0: function() {
      var result, exception, _this = this,
        t1 = _this.data._details;
      if (J.getInterceptor$s(t1).startsWith$1(t1, "{") && C.JSString_methods.endsWith$1(t1, "}"))
        try {
          result = C.C_JsonCodec.decode$2$reviver(0, t1, null);
          _this.onShowDetails.call$1$text(P._JsonStringStringifier_stringify(result, null, "  "));
        } catch (exception) {
          H.unwrapException(exception);
          t1 = _this.data;
          _this.onShowDetails.call$1$text(t1._details);
        }
      else
        _this.onShowDetails.call$1$text(t1);
    },
    set$tree: function(tree) {
      this.tree = type$.InspectorTreeController._as(tree);
    }
  };
  E.LoggingDetailsController_setData_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.tree,
        node = t2._selection;
      if (node != null)
        t2.maybePopulateChildren$1(node);
      if (H.boolConversionCheck(node._diagnostic.getBooleanMember$2("isDiagnosticableValue", false))) {
        t1.onShowInspector.call$0();
        node._diagnostic.setSelectionInspector$1(false);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  E.LoggingDetailsController_setData_closure0.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      if (t1.data === this.data)
        t1._updateUIFromData$0();
    },
    $signature: 27
  };
  E.LoggingController.prototype = {
    _logging_controller$_listen$1$2: function(stream, onData, $T) {
      var subscription = $T._eval$1("Stream<0>")._as(stream).listen$1($T._eval$1("~(0)")._as(onData));
      C.JSArray_methods.add$1(this._logging_controller$_subscriptions, subscription);
      return subscription;
    },
    set$loggingTableModel: function(model) {
      var t1, _this = this;
      _this.set$_loggingTableModel(type$.TableData_LogData._as(model));
      t1 = _this._loggingTableModel.selectController;
      _this._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), new E.LoggingController_loggingTableModel_closure(_this), type$.LogData);
      _this._updateStatus$0();
      t1 = _this._loggingTableModel._rowsChangedController;
      _this._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), new E.LoggingController_loggingTableModel_closure0(_this), type$.void);
    },
    get$filteredData: function() {
      var t1 = this.data;
      return t1;
    },
    _updateStatus$0: function() {
      var label, t1, _this = this,
        totalCount = _this.data.length,
        showingCount = _this.get$filteredData().length;
      if (totalCount === showingCount)
        label = $.$get$nf().format$1(totalCount);
      else {
        t1 = $.$get$nf();
        label = "showing " + t1.format$1(showingCount) + " of " + t1.format$1(totalCount);
      }
      t1 = label + " ";
      label = t1 + (totalCount === 1 ? "event" : "events");
      _this._logStatusController.add$1(0, label);
      _this.onLogCountStatusChanged.call$1(label);
    },
    _logging_controller$_handleConnectionStart$1: function(service) {
      return this._handleConnectionStart$body$LoggingController(type$.VmServiceWrapper._as(service));
    },
    _handleConnectionStart$body$LoggingController: function(service) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, t2;
      var $async$_logging_controller$_handleConnectionStart$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = service._vmService._getEventController$1("Stdout");
              t2 = type$.Event_2;
              $async$self._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), new E._StdoutEventHandler($async$self, "stdout", false).get$handle(), t2);
              t1 = service._vmService._getEventController$1("Stderr");
              $async$self._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), new E._StdoutEventHandler($async$self, "stderr", true).get$handle(), t2);
              t1 = service._vmService._getEventController$1("GC");
              $async$self._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), $async$self.get$_logging_controller$_handleGCEvent(), t2);
              t1 = service._vmService._getEventController$1("Logging");
              $async$self._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), $async$self.get$_handleDeveloperLogEvent(), t2);
              t1 = service._vmService._getEventController$1("Extension");
              $async$self._logging_controller$_listen$1$2(new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")), $async$self.get$_logging_controller$_handleExtensionEvent(), t2);
              $async$goto = $async$self.inspectorService == null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return P._asyncAwait(E.ensureInspectorServiceDependencies(), $async$_logging_controller$_handleConnectionStart$1);
            case 4:
              // returning from await.
              $async$goto = 5;
              return P._asyncAwait(E.InspectorService_create(service).catchError$2$test(new E.LoggingController__handleConnectionStart_closure(), new E.LoggingController__handleConnectionStart_closure0()), $async$_logging_controller$_handleConnectionStart$1);
            case 5:
              // returning from await.
              $async$self.set$inspectorService($async$result);
            case 3:
              // join
              t1 = $async$self.inspectorService;
              if (t1 != null) {
                t2 = "console-group_" + $.InspectorService_nextGroupId;
                $.InspectorService_nextGroupId = $.InspectorService_nextGroupId + 1;
                $async$self.objectGroup = new E.ObjectGroup(t2, t1);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_logging_controller$_handleConnectionStart$1, $async$completer);
    },
    _logging_controller$_handleExtensionEvent$1: function(e) {
      return this._handleExtensionEvent$body$LoggingController(type$.Event_2._as(e));
    },
    _handleExtensionEvent$body$LoggingController: function(e) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, frameInfoText, frameInfo, classes, pixelWidth, div, node, summary;
      var $async$_logging_controller$_handleExtensionEvent$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (H.boolConversionCheck(J.containsKey$1$x(C.Set_ijvA._collection$_map, e.extensionKind))) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = e.extensionKind;
              if (t1 === "Flutter.Frame") {
                t1 = type$.Map_String_dynamic._as(e.extensionData.data);
                t2 = J.getInterceptor$asx(t1);
                t3 = H._asIntS(t2.$index(t1, "number"));
                t4 = H._asNumS(J.$div$n(t2.$index(t1, "elapsed"), 1000));
                H._asNumS(J.$div$n(t2.$index(t1, "startTime"), 1000));
                frameInfoText = "#" + H.S(t3) + " " + C.JSString_methods.padLeft$1(C.JSNumber_methods.toStringAsFixed$1(t4, 1), 4) + "ms ";
                frameInfo = '<span class="pre">' + frameInfoText + "</span>";
                classes = t4 >= 16.666666666666668 ? "frame-bar over-budget" : "frame-bar";
                pixelWidth = C.JSNumber_methods.round$0(Math.min(t4, 100) * 3);
                div = '<div class="' + classes + '" style="width: ' + pixelWidth + 'px"/>';
                $async$self.log$1(E.LogData$(e.extensionKind.toLowerCase(), C.C_JsonCodec.encode$2$toEncodable(e.extensionData.data, null), e.timestamp, null, false, null, frameInfoText, frameInfo + div));
              } else if (t1 === "Flutter.Navigation") {
                t1 = type$.Map_String_dynamic;
                t1 = t1._as(J.$index$asx(t1._as(e.extensionData.data), "route"));
                t2 = e.extensionKind.toLowerCase();
                t3 = C.C_JsonCodec.encode$2$toEncodable(e.json, null);
                t4 = e.timestamp;
                $async$self.log$1(E.LogData$(t2, t3, t4, null, false, null, H._asStringS(t1 == null ? null : J.$index$asx(t1, "description")), null));
              } else if (H.boolConversionCheck(J.containsKey$1$x(C.Set_nPXOm._collection$_map, t1)))
                $async$self.log$1(E.LogData$(e.extensionKind.toLowerCase(), C.C_JsonCodec.encode$2$toEncodable(e.json, null), e.timestamp, null, false, null, "", null));
              else {
                t1 = e.extensionKind;
                if (t1 === "Flutter.ServiceExtensionStateChanged") {
                  t1 = type$.Map_String_dynamic._as(e.extensionData.data);
                  t2 = J.getInterceptor$asx(t1);
                  t3 = H._asStringS(t2.$index(t1, "extension"));
                  t1 = t2.$index(t1, "value");
                  $async$self.log$1(E.LogData$(e.extensionKind.toLowerCase(), C.C_JsonCodec.encode$2$toEncodable(e.json, null), e.timestamp, null, false, null, H.S(t3) + ": " + H.S(t1), null));
                } else if (t1 === "Flutter.Error") {
                  t1 = type$.Map_String_Object._as(e.extensionData.data);
                  node = new M.RemoteDiagnosticsNode(null, $async$self.objectGroup, t1, false);
                  node._style = C.DiagnosticsTreeStyle_5;
                  summary = E.LoggingController__findFirstSummary(node);
                  if (summary == null)
                    summary = node;
                  $async$self.log$1(E.LogData$(e.extensionKind.toLowerCase(), C.C_JsonCodec.encode$2$toEncodable(e.json, null), e.timestamp, null, false, node, summary.toDiagnosticsNode$0().toString$0(0), null));
                } else {
                  t1 = t1.toLowerCase();
                  t2 = e.json;
                  $async$self.log$1(E.LogData$(t1, C.C_JsonCodec.encode$2$toEncodable(t2, null), e.timestamp, null, false, null, J.toString$0$(t2), null));
                }
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_logging_controller$_handleExtensionEvent$1, $async$completer);
    },
    _logging_controller$_handleGCEvent$1: function(e) {
      var t1, t2, t3, t4, newSpace, oldSpace, isolateRef, t5, t6, t7, t8, time, summary, _null = null;
      type$.Event_2._as(e);
      t1 = e.json;
      t2 = J.getInterceptor$asx(t1);
      t3 = type$.Map_String_dynamic;
      t4 = t3._as(t2.$index(t1, "new"));
      newSpace = t4 == null ? _null : L.HeapSpace$_fromJson(t4);
      t3 = t3._as(t2.$index(t1, "old"));
      oldSpace = t3 == null ? _null : L.HeapSpace$_fromJson(t3);
      isolateRef = type$.Map_dynamic_dynamic._as(t2.$index(t1, "isolate"));
      t3 = newSpace.used;
      t4 = oldSpace.used;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = newSpace.capacity;
      t6 = oldSpace.capacity;
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = newSpace.time;
      t8 = oldSpace.time;
      if (typeof t7 !== "number")
        return t7.$add();
      if (typeof t8 !== "number")
        return H.iae(t8);
      time = C.JSNumber_methods.round$0((t7 + t8) * 1000);
      summary = H.S(J.$index$asx(isolateRef, "name")) + " \u2022 " + H.S(t2.$index(t1, "reason")) + " collection in " + time + " ms \u2022 " + B.printMb(t3 + t4) + " MB used of " + B.printMb(t5 + t6) + " MB";
      this.log$1(E.LogData$("gc", C.C_JsonCodec.encode$2$toEncodable(P.LinkedHashMap_LinkedHashMap$_literal(["reason", t2.$index(t1, "reason"), "new", newSpace.json, "old", oldSpace.json, "isolate", isolateRef], type$.String, type$.dynamic), _null), e.timestamp, _null, false, _null, summary, _null));
    },
    _handleDeveloperLogEvent$1: function(e) {
      var service, logRecord, t1, t2, t3, loggerName, level, messageRef, summary, error, stackTrace, detailsComputer, isError, _null = null;
      type$.Event_2._as(e);
      service = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
      logRecord = J.$index$asx(e.json, "logRecord");
      t1 = J.getInterceptor$asx(logRecord);
      t2 = type$.Map_String_dynamic;
      t3 = t2._as(t1.$index(logRecord, "loggerName"));
      loggerName = E._valueAsString(t3 == null ? _null : Q.InstanceRef$_fromJson(t3));
      if (loggerName == null || loggerName.length === 0)
        loggerName = "log";
      level = H._asIntS(t1.$index(logRecord, "level"));
      t3 = t2._as(t1.$index(logRecord, "message"));
      messageRef = t3 == null ? _null : Q.InstanceRef$_fromJson(t3);
      summary = E._valueAsString(messageRef);
      if (messageRef.valueAsStringIsTruncated === true)
        summary = J.$add$ansx(summary, "...");
      t3 = t2._as(t1.$index(logRecord, "error"));
      error = t3 == null ? _null : Q.InstanceRef$_fromJson(t3);
      t1 = t2._as(t1.$index(logRecord, "stackTrace"));
      stackTrace = t1 == null ? _null : Q.InstanceRef$_fromJson(t1);
      detailsComputer = messageRef.valueAsStringIsTruncated === true || E._isNotNull(error) || E._isNotNull(stackTrace) ? new E.LoggingController__handleDeveloperLogEvent_closure(service, e, messageRef, error, stackTrace) : _null;
      isError = level != null && level >= 1000 && true;
      this.log$1(E.LogData$(loggerName, summary, e.timestamp, detailsComputer, isError, _null, summary, _null));
    },
    _logging_controller$_handleConnectionStop$1: function($event) {
    },
    log$1: function(log) {
      var t1, t2, itemsToRemove, smoothScroll, _this = this;
      _this.set$_cachedFilteredData(null);
      C.JSArray_methods.add$1(_this.data, log);
      t1 = _this.data;
      t2 = t1.length;
      if (t2 > 5500) {
        itemsToRemove = t2 - 5000;
        _this.set$data(0, C.JSArray_methods.sublist$1(t1, C.JSInt_methods.$mod(itemsToRemove, 2) === 1 ? itemsToRemove - 1 : itemsToRemove));
      }
      if (H.boolConversionCheck(_this.isVisible.call$0()) && _this._loggingTableModel != null) {
        _this._loggingTableModel.setRows$1(_this.data);
        t1 = Date.now();
        t2 = _this._lastScrollTime;
        smoothScroll = t2 == null || C.JSInt_methods._tdivFast$1(P.Duration$(0, t2._core$_value - t1)._duration, 1000000) > 1;
        _this._lastScrollTime = new P.DateTime(t1, false);
        t1 = _this._loggingTableModel;
        t2 = C.JSArray_methods.get$last(_this.data);
        t1.scrollTo$2$scrollBehavior(0, t2, smoothScroll ? "smooth" : "auto");
      } else
        _this._hasPendingUiUpdates = true;
      _this.onLogsUpdated.notify$0();
      _this._updateStatus$0();
    },
    _handleBusEvents$0: function() {
      var t2, t3, t4, _this = this,
        t1 = type$.MessageBus;
      if (t1._as($.globals.$index(0, C.Type_MessageBus_MAi)) != null) {
        t2 = type$.BusEvent;
        _this._logging_controller$_listen$1$2(t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("reload.end"), new E.LoggingController__handleBusEvents_closure(_this), t2);
        _this._logging_controller$_listen$1$2(t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$1$type("restart.end"), new E.LoggingController__handleBusEvents_closure0(_this), t2);
        t3 = t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$0();
        t4 = H._instanceType(t3);
        _this._logging_controller$_listen$1$2(new P._WhereStream(t4._eval$1("bool(Stream.T)")._as(new E.LoggingController__handleBusEvents_closure1()), t3, t4._eval$1("_WhereStream<Stream.T>")), _this.get$_handleDebuggerEvent(), t2);
        t1 = t1._as($.globals.$index(0, C.Type_MessageBus_MAi)).onEvent$0();
        t4 = H._instanceType(t1);
        _this._logging_controller$_listen$1$2(new P._WhereStream(t4._eval$1("bool(Stream.T)")._as(new E.LoggingController__handleBusEvents_closure2()), t1, t4._eval$1("_WhereStream<Stream.T>")), _this.get$_handleDevToolsEvent(), t2);
      }
    },
    _handleDebuggerEvent$1: function($event) {
      var debuggerEvent, t1, t2, t3, t4, t5, _null = null;
      type$.BusEvent._as($event);
      debuggerEvent = type$.Event_2._as($event.data);
      if (debuggerEvent.kind === "ServiceExtensionAdded")
        return;
      t1 = $event.type;
      t2 = C.C_JsonCodec.encode$2$toEncodable(debuggerEvent.json, _null);
      t3 = debuggerEvent.timestamp;
      t4 = H.S(debuggerEvent.kind) + " ";
      t5 = debuggerEvent.isolate;
      this.log$1(E.LogData$(t1, t2, t3, _null, false, _null, t4 + H.S(t5.get$id(t5)), _null));
    },
    _handleDevToolsEvent$1: function($event) {
      var details, lines, summary, _null = null;
      type$.BusEvent._as($event);
      details = J.toString$0$($event.data);
      if (C.JSString_methods.contains$1(details, "\n")) {
        lines = H.setRuntimeTypeInfo(details.split("\n"), type$.JSArray_String);
        summary = C.JSArray_methods.get$first(lines);
        details = C.JSArray_methods.join$1(C.JSArray_methods.sublist$1(lines, 1), "\n");
      } else
        summary = _null;
      this.log$1(E.LogData$($event.type, details, Date.now(), _null, false, _null, summary, _null));
    },
    set$_loggingTableModel: function(_loggingTableModel) {
      this._loggingTableModel = type$.TableData_LogData._as(_loggingTableModel);
    },
    set$inspectorService: function(inspectorService) {
      this.inspectorService = type$.InspectorService._as(inspectorService);
    },
    set$data: function(_, data) {
      this.data = type$.List_LogData._as(data);
    },
    set$_cachedFilteredData: function(_cachedFilteredData) {
      this._cachedFilteredData = type$.List_LogData._as(_cachedFilteredData);
    }
  };
  E.LoggingController_loggingTableModel_closure.prototype = {
    call$1: function(selection) {
      var t1;
      type$.LogData._as(selection);
      t1 = this.$this.detailsController;
      if (t1 != null)
        t1.setData$1(0, selection);
    },
    $signature: 154
  };
  E.LoggingController_loggingTableModel_closure0.prototype = {
    call$1: function(_) {
      this.$this._updateStatus$0();
    },
    $signature: 2
  };
  E.LoggingController__handleConnectionStart_closure.prototype = {
    call$1: function(e) {
      return null;
    },
    $signature: 2
  };
  E.LoggingController__handleConnectionStart_closure0.prototype = {
    call$1: function(e) {
      return e instanceof E.FlutterInspectorLibraryNotFound;
    },
    $signature: 33
  };
  E.LoggingController__handleDeveloperLogEvent_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t4, t5, toStringResult, t1, t2, result, t3, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.service;
              t2 = $async$self.e;
              $async$goto = 3;
              return P._asyncAwait(E._retrieveFullStringValue(t1, t2.isolate, $async$self.messageRef), $async$call$0);
            case 3:
              // returning from await.
              result = $async$result;
              t3 = $async$self.error;
              $async$goto = E._isNotNull(t3) ? 4 : 5;
              break;
            case 4:
              // then
              t4 = t3.valueAsString;
              t5 = t2.isolate;
              $async$goto = t4 != null ? 6 : 8;
              break;
            case 6:
              // then
              $async$temp1 = J;
              $async$temp2 = result;
              $async$temp3 = H;
              $async$goto = 9;
              return P._asyncAwait(E._retrieveFullStringValue(t1, t5, t3), $async$call$0);
            case 9:
              // returning from await.
              result = $async$temp1.$add$ansx($async$temp2, "\n\n" + $async$temp3.S($async$result));
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = 10;
              return P._asyncAwait(t1.invoke$5$disableBreakpoints(t5.get$id(t5), t3.id, "toString", H.setRuntimeTypeInfo([], type$.JSArray_String), true), $async$call$0);
            case 10:
              // returning from await.
              toStringResult = $async$result;
              $async$goto = type$.ErrorRef._is(toStringResult) ? 11 : 13;
              break;
            case 11:
              // then
              result = J.$add$ansx(result, "\n\n" + H.S(E._valueAsString(t3)));
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              $async$goto = type$.InstanceRef._is(toStringResult) ? 14 : 15;
              break;
            case 14:
              // then
              $async$temp1 = J;
              $async$temp2 = result;
              $async$temp3 = H;
              $async$goto = 16;
              return P._asyncAwait(E._retrieveFullStringValue(t1, t2.isolate, toStringResult), $async$call$0);
            case 16:
              // returning from await.
              result = $async$temp1.$add$ansx($async$temp2, "\n\n" + $async$temp3.S($async$result));
            case 15:
              // join
            case 12:
              // join
            case 7:
              // join
            case 5:
              // join
              t1 = $async$self.stackTrace;
              $async$returnValue = E._isNotNull(t1) ? J.$add$ansx(result, "\n\n" + H.S(E._valueAsString(t1))) : result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 155
  };
  E.LoggingController__handleBusEvents_closure.prototype = {
    call$1: function($event) {
      var _null = null;
      this.$this.log$1(E.LogData$("hot.reload", H._asStringS(type$.BusEvent._as($event).data), Date.now(), _null, false, _null, _null, _null));
    },
    $signature: 26
  };
  E.LoggingController__handleBusEvents_closure0.prototype = {
    call$1: function($event) {
      var _null = null;
      this.$this.log$1(E.LogData$("hot.restart", H._asStringS(type$.BusEvent._as($event).data), Date.now(), _null, false, _null, _null, _null));
    },
    $signature: 26
  };
  E.LoggingController__handleBusEvents_closure1.prototype = {
    call$1: function($event) {
      var t1 = type$.BusEvent._as($event).type;
      return t1 === "debugger" || C.JSString_methods.startsWith$1(t1, "debugger.");
    },
    $signature: 59
  };
  E.LoggingController__handleBusEvents_closure2.prototype = {
    call$1: function($event) {
      return C.JSString_methods.startsWith$1(type$.BusEvent._as($event).type, "devtools.");
    },
    $signature: 59
  };
  E._StdoutEventHandler.prototype = {
    handle$1: function(e) {
      var message, t1, t2, t3, t4, summary, data, _this = this, _null = null;
      type$.Event_2._as(e);
      message = C.C_Utf8Codec.decode$1(0, C.C_Base64Decoder.convert$1(e.bytes));
      if (_this.buffer != null) {
        t1 = _this.timer;
        if (t1 != null)
          t1.cancel$0(0);
        if (message === "\n") {
          t1 = _this.buffer;
          t2 = t1.kind;
          t1 = J.$add$ansx(t1._details, message);
          t3 = _this.buffer;
          t4 = t3.timestamp;
          t3 = J.$add$ansx(t3.summary, message);
          _this.loggingController.log$1(E.LogData$(t2, t1, t4, _null, _this.buffer.isError, _null, t3, _null));
          _this.buffer = null;
          return;
        }
        _this.loggingController.log$1(_this.buffer);
        _this.buffer = null;
      }
      summary = message.length > 200 ? C.JSString_methods.substring$2(message, 0, 200) : message;
      data = E.LogData$(_this.name, message, e.timestamp, _null, _this.isError, _null, summary, _null);
      if (message === "\n")
        _this.loggingController.log$1(data);
      else {
        _this.buffer = data;
        _this.timer = P.Timer_Timer(C.Duration_1000, new E._StdoutEventHandler_handle_closure(_this));
      }
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  E._StdoutEventHandler_handle_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.loggingController.log$1(t1.buffer);
      t1.buffer = null;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  E.LogData.prototype = {
    compute$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$compute$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.detailsComputer.call$0(), $async$compute$0);
            case 2:
              // returning from await.
              $async$self.set$_details($async$result);
              $async$self.set$detailsComputer(null);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$compute$0, $async$completer);
    },
    toString$0: function(_) {
      return "LogData(" + this.kind + ", " + H.S(this.timestamp) + ")";
    },
    set$_details: function(_details) {
      this._details = H._asStringS(_details);
    },
    set$detailsComputer: function(detailsComputer) {
      this.detailsComputer = type$.Future_String_Function._as(detailsComputer);
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  E.LogKindColumn.prototype = {
    get$supportsSorting: function() {
      return false;
    },
    get$usesHtml: function() {
      return true;
    },
    get$cssClass: function() {
      return "log-label-column";
    },
    getValue$1: function(dataObject) {
      var t1, cssClass;
      type$.LogData._as(dataObject);
      t1 = dataObject.kind;
      if (t1 === "stderr" || dataObject.isError)
        cssClass = "stderr";
      else if (t1 === "stdout")
        cssClass = "stdout";
      else if (t1 === "flutter.error")
        cssClass = "stderr";
      else if (C.JSString_methods.startsWith$1(t1, "flutter"))
        cssClass = "flutter";
      else
        cssClass = t1 === "gc" ? "gc" : "";
      return '<span class="label ' + cssClass + '">' + t1 + "</span>";
    },
    render$1: function(value) {
      return H._asStringS(value);
    }
  };
  E.LogWhenColumn.prototype = {
    get$cssClass: function() {
      return "pre monospace";
    },
    get$supportsSorting: function() {
      return false;
    },
    getValue$1: function(dataObject) {
      return type$.LogData._as(dataObject).timestamp;
    },
    render$1: function(value) {
      var t1, t2;
      if (value == null)
        t1 = "";
      else {
        t1 = $.$get$timeFormat();
        H._asIntS(value);
        t2 = new P.DateTime(value, false);
        t2.DateTime$_withValue$2$isUtc(value, false);
        t2 = t1.format$1(t2);
        t1 = t2;
      }
      return t1;
    }
  };
  E.LogMessageColumn.prototype = {
    get$cssClass: function() {
      return "pre-wrap monospace";
    },
    get$usesHtml: function() {
      return true;
    },
    get$supportsSorting: function() {
      return false;
    },
    getValue$1: function(dataObject) {
      return type$.LogData._as(dataObject);
    },
    render$1: function(value) {
      var t1;
      type$.LogData._as(value);
      t1 = value.summaryHtml;
      if (t1 != null)
        return t1;
      else {
        t1 = value.summary;
        if (t1 == null)
          t1 = value._details;
        return this._logMessageToHtml.call$1(t1);
      }
    }
  };
  F.HtmlPerfToolFramework.prototype = {
    _gAReportExceptions$1: function(e) {
      var message;
      type$.ErrorEvent._as(e);
      message = H.S(e.message) + "\n" + H.S(e.filename) + "@" + H.S(e.lineno) + ":" + H.S(e.colno) + "\n" + H.S(e.error);
      F.error(message, true);
      B.log(message, C.LogLevel_2);
    },
    initGlobalUI$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, mainNav, iconNav, t4, t5, t6, _i, $screen, link, t7, t8, t9, t10, t11, t1, t2, t3;
      var $async$initGlobalUI$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$onClick$x(A.queryId("send-feedback-button"));
              t2 = t1.$ti;
              t3 = t2._eval$1("~(1)")._as(new F.HtmlPerfToolFramework_initGlobalUI_closure());
              type$.void_Function._as(null);
              W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
              t2 = A.queryId("try-flutter-web-devtools");
              t2.hidden = false;
              t2 = J.get$onClick$x(t2);
              t3 = t2.$ti;
              W._EventStreamSubscription$(t2._target, t2._eventType, t3._eval$1("~(1)")._as(new F.HtmlPerfToolFramework_initGlobalUI_closure0($async$self)), false, t3._precomputed1);
              t3 = type$.ServiceConnectionManager;
              $async$goto = 2;
              return P._asyncAwait(t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceAvailable.future, $async$initGlobalUI$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait($async$self.addScreens$0(), $async$initGlobalUI$0);
            case 3:
              // returning from await.
              $async$self.screensReady.complete$0(0);
              t2 = A.queryId("main-nav");
              mainNav = new A.CoreElement(t2);
              J.get$children$x(t2).clear$0(0);
              t2 = A.queryId("icon-nav");
              iconNav = new A.CoreElement(t2);
              J.get$children$x(t2).clear$0(0);
              for (t1 = $async$self.screens, t2 = t1.length, t4 = type$.void, t5 = type$.dynamic, t6 = type$.JSArray_CoreElement, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                $screen = t1[_i];
                link = A.CoreElement$("a", null, null, null, null);
                link.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("span", null, "octicon " + H.S($screen.iconClass), null, null), A.CoreElement$("span", null, "optional-1140", null, " " + $screen.name)], t6));
                if ($screen.disabled) {
                  t7 = link.get$onClick(link);
                  t8 = t7.$ti;
                  t9 = t8._eval$1("~(_ForwardingStream.T)")._as(new F.HtmlPerfToolFramework_initGlobalUI_closure1($async$self, link));
                  t10 = $.Zone__current;
                  t8 = t8._eval$1("@<_ForwardingStream.S>")._bind$1(t8._eval$1("_ForwardingStream.T"))._eval$1("_ForwardingStreamSubscription<1,2>");
                  t11 = new P._ForwardingStreamSubscription(t7, t10, 0, t8);
                  t8._eval$1("~(_BufferingStreamSubscription.T)")._as(t9);
                  t11.set$_async$_onData(t10.registerUnaryCallback$2$1(t9, t5, t8._eval$1("_BufferingStreamSubscription.T")));
                  t11.onError$1(0, null);
                  t11.set$_onDone(t10.registerCallback$1$1(P.async___nullDoneHandler$closure(), t4));
                  t11.set$_subscription(t7._async$_source.listen$3$onDone$onError(t11.get$_handleData(), t11.get$_handleDone(), t11.get$_handleError()));
                  t7 = link.element;
                  J.get$classes$x(t7).toggle$2(0, "disabled", true);
                  t7.title = $screen.disabledTooltip;
                } else {
                  t7 = link.element;
                  t7.toString;
                  t8 = $screen.id;
                  t7.setAttribute("href", t8.length === 0 ? t8 : "#" + t8);
                  t7 = link.get$onClick(link);
                  t8 = t7.$ti;
                  t9 = t8._eval$1("~(_ForwardingStream.T)")._as(new F.HtmlPerfToolFramework_initGlobalUI_closure2($async$self, $screen));
                  t10 = $.Zone__current;
                  t8 = t8._eval$1("@<_ForwardingStream.S>")._bind$1(t8._eval$1("_ForwardingStream.T"))._eval$1("_ForwardingStreamSubscription<1,2>");
                  t11 = new P._ForwardingStreamSubscription(t7, t10, 0, t8);
                  t8._eval$1("~(_BufferingStreamSubscription.T)")._as(t9);
                  t11.set$_async$_onData(t10.registerUnaryCallback$2$1(t9, t5, t8._eval$1("_BufferingStreamSubscription.T")));
                  t11.onError$1(0, null);
                  t11.set$_onDone(t10.registerCallback$1$1(P.async___nullDoneHandler$closure(), t4));
                  t11.set$_subscription(t7._async$_source.listen$3$onDone$onError(t11.get$_handleData(), t11.get$_handleDone(), t11.get$_handleError()));
                }
                ($screen.showTab ? mainNav : iconNav).add$1(0, link);
              }
              t1 = new A.HtmlStatusItem(A.CoreElement$("span", null, null, null, null));
              $async$self.isolateSelectStatus = t1;
              t2 = $async$self.globalStatus;
              C.JSArray_methods.add$1(t2._html_framework$_items, t1);
              t2._rebuild$0();
              t2 = new N.PSelect(type$.Element._as(W._ElementFactoryProvider_createElement_tag("select", null)));
              t2.CoreElement$5$attributes$classes$html$text("select", null, "form-select", null, null);
              t2.clazz$1("select-sm");
              t2.change$1($async$self.get$_handleIsolateSelect());
              $async$self.isolateSelect = t2;
              $async$self.isolateSelectStatus.element.add$1(0, t2);
              $async$self._rebuildIsolateSelect$0();
              t2 = t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._isolateCreatedController;
              t1 = $async$self.get$_rebuildIsolateSelect();
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(t1);
              t2 = t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._isolateExitedController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(t1);
              t2 = t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolateController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(t1);
              $async$self._initHotReloadRestartServiceListeners$0();
              t3 = t3._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._stateController;
              new P._BroadcastStream(t3, H._instanceType(t3)._eval$1("_BroadcastStream<1>")).listen$1(new F.HtmlPerfToolFramework_initGlobalUI_closure3($async$self));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$initGlobalUI$0, $async$completer);
    },
    initDevToolsServerConnection$0: function() {
      return this.initDevToolsServerConnection$body$HtmlPerfToolFramework();
    },
    initDevToolsServerConnection$body$HtmlPerfToolFramework: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, exception, t2, t3, uri, newParams, t1, $async$exception, $async$temp1;
      var $async$initDevToolsServerConnection$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.devToolsServer = null;
              $async$handler = 4;
              $async$temp1 = t1;
              $async$goto = 7;
              return P._asyncAwait(L.DevToolsServerConnection_connect(), $async$initDevToolsServerConnection$0);
            case 7:
              // returning from await.
              $async$temp1.devToolsServer = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              P.print("Failed to connect to SSE API: " + H.S(e));
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t2 = window;
              t3 = type$.void_Function_Event._as(new F.HtmlPerfToolFramework_initDevToolsServerConnection_closure(t1));
              type$.void_Function._as(null);
              W._EventStreamSubscription$(t2, "focus", t3, false, type$.Event);
              uri = P.Uri_parse(window.location.href, 0, null);
              if (H.boolConversionCheck(uri.get$queryParameters().containsKey$1(0, "notify"))) {
                t2 = type$.String;
                newParams = P.LinkedHashMap_LinkedHashMap$of(uri.get$queryParameters(), t2, t2);
                newParams.remove$1(0, "notify");
                t2 = window.history;
                t3 = uri.replace$1$queryParameters(0, newParams).toString$0(0);
                t2.toString;
                t2.pushState(new P._StructuredCloneDart2Js([], []).walk$1(null), null, t3);
                t1.devToolsServer.notify$0();
              }
              t1 = type$.FrameworkController;
              t2 = t1._as($.globals.$index(0, C.Type_FrameworkController_QHx))._showPageIdController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new F.HtmlPerfToolFramework_initDevToolsServerConnection_closure0($async$self));
              t1 = t1._as($.globals.$index(0, C.Type_FrameworkController_QHx))._connectVmController;
              new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new F.HtmlPerfToolFramework_initDevToolsServerConnection_closure1());
              t1 = $async$self._pageChangeController;
              new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new F.HtmlPerfToolFramework_initDevToolsServerConnection_closure2());
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$initDevToolsServerConnection$0, $async$completer);
    },
    disableAppWithError$2: function(title, error) {
      var t1 = document,
        t2 = J.get$children$x(t1.getElementById("header"));
      t2.removeWhere$1(t2, new F.HtmlPerfToolFramework_disableAppWithError_closure());
      J.get$children$x(t1.getElementById("content")).clear$0(0);
      this.showError$2(title, error);
    },
    addScreens$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, isFlutterVmApp, isFlutterVmProfileBuild, isFlutterWebApp, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t1, app, isDartWebApp, isFlutterApp, isDartCliApp, $async$temp1;
      var $async$addScreens$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              app = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp;
              $async$goto = 2;
              return P._asyncAwait(app.get$isDartWebApp(), $async$addScreens$0);
            case 2:
              // returning from await.
              isDartWebApp = $async$result;
              $async$goto = 3;
              return P._asyncAwait(app.get$isFlutterApp(), $async$addScreens$0);
            case 3:
              // returning from await.
              isFlutterApp = $async$result;
              $async$goto = 4;
              return P._asyncAwait(app.get$isDartCliApp(), $async$addScreens$0);
            case 4:
              // returning from await.
              isDartCliApp = $async$result;
              H.boolConversionCheck(isFlutterApp);
              isFlutterVmApp = isFlutterApp && !H.boolConversionCheck(isDartWebApp);
              $async$temp1 = isFlutterVmApp;
              if ($async$temp1) {
                // goto then
                $async$goto = 5;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 6;
              break;
            case 5:
              // then
              $async$temp1 = H;
              $async$goto = 7;
              return P._asyncAwait(app.get$isProfileBuild(), $async$addScreens$0);
            case 7:
              // returning from await.
              $async$result = $async$temp1.boolConversionCheck($async$result);
            case 6:
              // join
              isFlutterVmProfileBuild = $async$result;
              isFlutterWebApp = isFlutterApp && H.boolConversionCheck(isDartWebApp);
              E.setupDimensions();
              t2 = isFlutterApp && !isFlutterVmProfileBuild;
              t3 = isFlutterVmProfileBuild ? "This screen is disabled because you are running a profile build of your application" : "This screen is disabled because you are not running a Flutter application";
              t4 = type$._AsyncBroadcastStreamController_bool;
              t5 = type$.Property_bool;
              t6 = type$.JSArray_HtmlStatusItem;
              t7 = H.setRuntimeTypeInfo([], t6);
              if (Y.hiddenPages().contains$1(0, "none"))
                t8 = false;
              else
                t8 = !t2;
              t7 = new D.HtmlInspectorScreen(new A.HtmlSetStateMixin(), "Flutter Inspector", "inspector", "octicon-device-mobile", t3, t8, true, null, new B.Property(new P._AsyncBroadcastStreamController(null, null, t4), false, t5), t7);
              t7.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(t3, t2, "octicon-device-mobile", "inspector", "Flutter Inspector", null, true);
              t2 = $async$self.screens;
              C.JSArray_methods.add$1(t2, t7);
              H.boolConversionCheck(isDartCliApp);
              t3 = isDartCliApp ? C.TimelineMode_1 : C.TimelineMode_0;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).vm.name;
              t7 = isFlutterWebApp ? "This screen does not work with Flutter web apps" : "This screen is disabled because you are not running a Flutter application";
              C.JSArray_methods.add$1(t2, M.HtmlTimelineScreen$(t3, t7, t1 !== "ChromeDebugProxy"));
              t1 = !isFlutterVmApp;
              t3 = !t1 || isDartCliApp;
              t7 = isFlutterWebApp ? "This screen does not work with Flutter web apps" : "This screen does not work with Dart web apps";
              t8 = type$.JSArray_String;
              t9 = H.setRuntimeTypeInfo(["Dart", "Flutter"], t8);
              t10 = A.CoreElement$("div", null, "allocation-hover-card", null, null);
              t11 = P.ListQueue$(type$.HtmlTable_dynamic);
              t12 = H.setRuntimeTypeInfo([], type$.JSArray_NavigationState);
              t8 = H.setRuntimeTypeInfo([], t8);
              t13 = H.setRuntimeTypeInfo([], t6);
              if (Y.hiddenPages().contains$1(0, "none"))
                t14 = false;
              else
                t14 = !t3;
              t14 = new O.HtmlMemoryScreen(new T.MemoryController(new T.SettingsModel(), new T.FilteredLibraries(t9), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_MemoryTracker), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_void)), t10, t11, new O.NavigationPath(t12), isFlutterVmProfileBuild, t8, "Memory", "memory", "octicon-package", t7, t14, true, null, new B.Property(new P._AsyncBroadcastStreamController(null, null, t4), false, t5), t13);
              t14.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(t7, t3, "octicon-package", "memory", "Memory", null, true);
              t14.set$shortcutCallback(t14.get$memoryShortcuts());
              t3 = new A.HtmlStatusItem(A.CoreElement$("span", null, null, null, null));
              t14.classCountStatus = t3;
              C.JSArray_methods.add$1(t13, t3);
              t3 = new A.HtmlStatusItem(A.CoreElement$("span", null, null, null, null));
              t14.objectCountStatus = t3;
              C.JSArray_methods.add$1(t13, t3);
              t3 = new A.HtmlStatusItem(A.CoreElement$("span", null, null, null, null));
              t14.experimentStatus = t3;
              C.JSArray_methods.add$1(t13, t3);
              C.JSArray_methods.add$1(t2, t14);
              t1 = !t1 || isDartCliApp;
              t3 = isFlutterWebApp ? "This screen does not work with Flutter web apps" : "This screen does not work with Dart web apps";
              t7 = type$.JSArray_of_void_Function;
              t8 = H.setRuntimeTypeInfo([], t7);
              t9 = type$.ValueNotifier_bool;
              t10 = $.$get$CpuProfilerController_baseStateCpuProfileData();
              t11 = H.setRuntimeTypeInfo([], t7);
              t12 = H.setRuntimeTypeInfo([], t7);
              t13 = H.setRuntimeTypeInfo([], t7);
              t14 = H.setRuntimeTypeInfo([], t7);
              t15 = H.setRuntimeTypeInfo([], t6);
              if (Y.hiddenPages().contains$1(0, "none"))
                t16 = false;
              else
                t16 = !t1;
              t15 = new M.HtmlPerformanceScreen(new B.PerformanceController(new U.ValueNotifier(false, t8, t9), new T.CpuProfilerController(new U.ValueNotifier(t10, t11, type$.ValueNotifier_CpuProfileData), new U.ValueNotifier(false, t12, t9), new U.ValueNotifier(null, t13, type$.ValueNotifier_CpuStackFrame), new Z.CpuProfilerService(), new V.CpuProfileTransformer(new U.ValueNotifier(0, t14, type$.ValueNotifier_double)))), "Performance", "performance", "octicon-dashboard", t3, t16, true, null, new B.Property(new P._AsyncBroadcastStreamController(null, null, t4), false, t5), t15);
              t15.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(t3, t1, "octicon-dashboard", "performance", "Performance", null, true);
              C.JSArray_methods.add$1(t2, t15);
              t1 = !isFlutterVmProfileBuild && !Y.hiddenPages().contains$1(0, "debugger");
              t3 = isFlutterVmProfileBuild ? "This screen is disabled because you are running a profile build of your application" : "This screen is disabled because it provides functionality already available in your code editor";
              t8 = H.setRuntimeTypeInfo([], t7);
              t10 = H.setRuntimeTypeInfo([], t7);
              t11 = H.setRuntimeTypeInfo([], type$.JSArray_Breakpoint);
              t12 = H.setRuntimeTypeInfo([], t7);
              t7 = H.setRuntimeTypeInfo([], t7);
              t6 = H.setRuntimeTypeInfo([], t6);
              if (Y.hiddenPages().contains$1(0, "none"))
                t13 = false;
              else
                t13 = !t1;
              t5 = new R.HtmlDebuggerScreen(new S.DebuggerState(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Script), new U.ValueNotifier(false, t8, t9), new U.ValueNotifier(false, t10, t9), new U.ValueNotifier(t11, t12, type$.ValueNotifier_List_Breakpoint), new U.ValueNotifier(null, t7, type$.ValueNotifier_String)), "Debugger", "debugger", "octicon-bug", t3, t13, true, null, new B.Property(new P._AsyncBroadcastStreamController(null, null, t4), false, t5), t6);
              t5.HtmlScreen$7$disabledTooltip$enabled$iconClass$id$name$shortcutCallback$showTab(t3, t1, "octicon-bug", "debugger", "Debugger", null, true);
              t5.set$shortcutCallback(t5.get$debuggerShortcuts());
              t1 = new A.HtmlStatusItem(A.CoreElement$("span", null, null, null, null));
              t5.deviceStatus = t1;
              C.JSArray_methods.add$1(t6, t1);
              C.JSArray_methods.add$1(t2, t5);
              C.JSArray_methods.add$1(t2, Z.HtmlLoggingScreen$());
              C.JSArray_methods.add$1(t2, D.HtmlInfoScreen$());
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$addScreens$0, $async$completer);
    },
    _handleIsolateSelect$0: function() {
      type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager.selectIsolate$1(type$.SelectElement._as(this.isolateSelect.element).value);
    },
    _rebuildIsolateSelect$1: function(_) {
      var t2, t3, t4, t5, _i, ref, t6, $name, t7, e, _this = this,
        t1 = type$.IsolateRef;
      t1._as(_);
      J.get$children$x(_this.isolateSelect.element).clear$0(0);
      for (t2 = type$.ServiceConnectionManager, t3 = P.List_List$unmodifiable(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._isolates, t1), t4 = t3.length, t5 = type$.OptionElement, _i = 0; _i < t4; ++_i) {
        ref = t3[_i];
        t6 = _this.isolateSelect;
        $name = ref.get$name(ref);
        $name.toString;
        $name = H.stringReplaceFirstUnchecked($name, ".snapshot", "", 0);
        if (H.stringContainsUnchecked($name, ".dart$", 0))
          $name += "()";
        t7 = ref.get$id(ref);
        t6.toString;
        e = A.CoreElement$("option", null, null, null, $name);
        if (t7 != null)
          t5._as(e.element).value = t7;
        t6.add$1(0, e);
      }
      _this.isolateSelect.attribute$2("disabled", P.List_List$unmodifiable(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._isolates, t1).length === 0);
      if (t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate != null) {
        t3 = _this.isolateSelect;
        t2 = C.JSArray_methods.indexOf$1(P.List_List$unmodifiable(t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._isolates, t1), t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate);
        type$.SelectElement._as(t3.element).selectedIndex = t2;
      }
    },
    _rebuildIsolateSelect$0: function() {
      return this._rebuildIsolateSelect$1(null);
    },
    _initHotReloadRestartServiceListeners$0: function() {
      var t2, t3, hotRestartListenable,
        _s13_ = "reloadSources",
        t1 = type$.ServiceConnectionManager,
        hotReloadListenable = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).registeredServiceListenable$1(_s13_);
      hotReloadListenable.toString;
      t2 = type$.void_Function;
      t3 = t2._as(new F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure(this, hotReloadListenable));
      hotReloadListenable.super$ChangeNotifier$addListener(0, t3);
      t3.call$0();
      hotRestartListenable = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).registeredServiceListenable$1(_s13_);
      hotRestartListenable.toString;
      t2 = t2._as(new F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure0(this, hotRestartListenable));
      hotRestartListenable.super$ChangeNotifier$addListener(0, t2);
      t2.call$0();
    },
    _buildReloadButton$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, reloadAction, t1;
      var $async$_buildReloadButton$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              reloadAction = G.HtmlActionButton$("reload-action", C.UrlIcon_Eyg, "Hot Reload");
              t1 = type$.void_Function._as(new F.HtmlPerfToolFramework__buildReloadButton_closure($async$self, reloadAction));
              reloadAction._html_custom$_element.click$1(0, t1);
              $async$self.globalActions.addAction$1(reloadAction);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_buildReloadButton$0, $async$completer);
    },
    _buildRestartButton$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, restartAction, t1;
      var $async$_buildRestartButton$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              restartAction = G.HtmlActionButton$("restart-action", C.UrlIcon_ACG, "Hot Restart");
              t1 = type$.void_Function._as(new F.HtmlPerfToolFramework__buildRestartButton_closure($async$self, restartAction));
              restartAction._html_custom$_element.click$1(0, t1);
              $async$self.globalActions.addAction$1(restartAction);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_buildRestartButton$0, $async$completer);
    },
    set$reloadStatus: function(reloadStatus) {
      this.reloadStatus = type$.HtmlStatus._as(reloadStatus);
    }
  };
  F.HtmlPerfToolFramework_initGlobalUI_closure.prototype = {
    call$1: function(_) {
      type$.MouseEvent._as(_);
      F.select("main", "feedback", 0);
      C.Window_methods.open$2(window, "https://github.com/flutter/devtools/issues", "_feedback");
    },
    $signature: 6
  };
  F.HtmlPerfToolFramework_initGlobalUI_closure0.prototype = {
    call$1: function(_) {
      var t1, t2, flutterQueryParams, href, _null = null;
      type$.MouseEvent._as(_);
      t1 = P.Uri_tryParse(window.location.href).get$queryParameters();
      if (t1 == null) {
        t1 = type$.dynamic;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      }
      t2 = type$.String;
      flutterQueryParams = P.LinkedHashMap_LinkedHashMap$from(t1, t2, t2);
      t2 = this.$this.current;
      flutterQueryParams.$indexSet(0, "page", t2 == null ? _null : t2.id);
      href = flutterQueryParams.get$isNotEmpty(flutterQueryParams) ? "/flutter.html#/" + P._Uri__Uri(_null, _null, _null, flutterQueryParams, _null).toString$0(0) : "/flutter.html#/";
      window.location.href = href;
    },
    $signature: 6
  };
  F.HtmlPerfToolFramework_initGlobalUI_closure1.prototype = {
    call$1: function(e) {
      type$.MouseEvent._as(e).preventDefault();
      this.$this.toast$1(this.link.element.title);
    },
    $signature: 6
  };
  F.HtmlPerfToolFramework_initGlobalUI_closure2.prototype = {
    call$1: function(e) {
      type$.MouseEvent._as(e).preventDefault();
      this.$this.navigateTo$1(this.screen.id);
    },
    $signature: 6
  };
  F.HtmlPerfToolFramework_initGlobalUI_closure3.prototype = {
    call$1: function(_) {
      var t1, t2, t3, t4, _null = null;
      H._asBoolS(_);
      t1 = this.$this;
      t2 = type$.ServiceConnectionManager;
      if (t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection()) {
        t3 = t1.connectionStatus;
        if (t3 != null) {
          t4 = t1.auxiliaryStatus;
          C.JSArray_methods.remove$1(t4._html_framework$_items, t3);
          t4._rebuild$0();
          t1.connectionStatus = null;
        }
      } else {
        if (t1.connectionStatus == null) {
          t3 = new A.HtmlStatusItem(A.CoreElement$("span", _null, _null, _null, _null));
          t1.connectionStatus = t3;
          t4 = t1.auxiliaryStatus;
          C.JSArray_methods.add$1(t4._html_framework$_items, t3);
          t4._rebuild$0();
        }
        t1.connectionStatus.element.element.textContent = "no device connected";
      }
      if (!t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection())
        t1.toast$1("Device connection lost.");
    },
    $signature: 11
  };
  F.HtmlPerfToolFramework_initDevToolsServerConnection_closure.prototype = {
    call$1: function(_) {
      return this._box_0.devToolsServer.dismissNotifications$0();
    },
    $signature: 19
  };
  F.HtmlPerfToolFramework_initDevToolsServerConnection_closure0.prototype = {
    call$1: function(pageId) {
      var t1 = this.$this,
        $screen = t1.getScreen$1(H._asStringS(pageId));
      if ($screen != null)
        t1.load$1(0, $screen);
    },
    $signature: 8
  };
  F.HtmlPerfToolFramework_initDevToolsServerConnection_closure1.prototype = {
    call$1: function($event) {
      var uri, t1, newUriParams;
      type$.ConnectVmEvent._as($event);
      uri = P.Uri_parse(window.location.href, 0, null);
      t1 = type$.String;
      newUriParams = P.LinkedHashMap_LinkedHashMap$of(uri.get$queryParameters(), t1, t1);
      newUriParams.$indexSet(0, "uri", J.toString$0$($event.serviceProtocolUri));
      if ($event.notify)
        newUriParams.$indexSet(0, "notify", "true");
      window.location.replace(uri.replace$1$queryParameters(0, newUriParams).toString$0(0));
    },
    $signature: 157
  };
  F.HtmlPerfToolFramework_initDevToolsServerConnection_closure2.prototype = {
    call$1: function(pageId) {
      H._asStringS(pageId);
      type$.FrameworkController._as($.globals.$index(0, C.Type_FrameworkController_QHx))._framework_controller$_pageChangeController.add$1(0, pageId);
    },
    $signature: 8
  };
  F.HtmlPerfToolFramework_disableAppWithError_closure.prototype = {
    call$1: function(e) {
      return type$.Element._as(e).id !== "title";
    },
    $signature: 51
  };
  F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (H.boolConversionCheck(this.hotReloadListenable._value))
        t1._buildReloadButton$0();
      else
        t1.globalActions.removeAction$1("reload-action");
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (H.boolConversionCheck(this.hotRestartListenable._value))
        t1._buildRestartButton$0();
      else
        t1.globalActions.removeAction$1("restart-action");
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  F.HtmlPerfToolFramework__buildReloadButton_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, $status, timer, message, t3, timer0, exception, t1, t2, $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.reloadStatus;
              if (t2 != null) {
                t3 = t2.statusLine;
                t2 = t2.item;
                C.JSArray_methods.remove$1(t3._html_framework$_items, t2);
                t3._rebuild$0();
              }
              $status = F.HtmlStatus$(t1.auxiliaryStatus, "reloading...");
              t1.set$reloadStatus($status);
              timer0 = new P.Stopwatch();
              if ($.Stopwatch__frequency == null) {
                H.Primitives_initTicker();
                $.Stopwatch__frequency = $.Primitives_timerFrequency;
              }
              timer0.start$0(0);
              timer = timer0;
              $async$handler = 3;
              $async$self.reloadAction._html_custom$_element.attribute$2("disabled", true);
              $async$goto = 6;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).performHotReload$0(), $async$call$0);
            case 6:
              // returning from await.
              t1 = type$.MessageBus;
              t1._as($.globals.$index(0, C.Type_MessageBus_MAi))._controller.add$1(0, new A.BusEvent("reload.start", null));
              J.stop$0$z(timer);
              message = "reloaded in " + F._renderDuration(P.Duration$(timer.get$elapsedMicroseconds(), 0));
              t1._as($.globals.$index(0, C.Type_MessageBus_MAi))._controller.add$1(0, new A.BusEvent("reload.end", message));
              t1 = H._asStringS(message);
              $status.item.element.element.textContent = t1;
              F.select("main", "hotReload", C.JSInt_methods._tdivFast$1(P.Duration$(timer.get$elapsedMicroseconds(), 0)._duration, 1000));
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              H.unwrapException($async$exception);
              t1 = type$.MessageBus._as($.globals.$index(0, C.Type_MessageBus_MAi));
              t1._controller.add$1(0, new A.BusEvent("reload.end", "error performing reload"));
              $status.item.element.element.textContent = "error performing reload";
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              $async$self.reloadAction._html_custom$_element.attribute$2("disabled", false);
              P.Timer_Timer(C.Duration_3000000, $status.get$dispose());
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  F.HtmlPerfToolFramework__buildRestartButton_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, $status, timer, message, t3, timer0, exception, t1, t2, $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.reloadStatus;
              if (t2 != null) {
                t3 = t2.statusLine;
                t2 = t2.item;
                C.JSArray_methods.remove$1(t3._html_framework$_items, t2);
                t3._rebuild$0();
              }
              $status = F.HtmlStatus$(t1.auxiliaryStatus, "restarting...");
              t1.set$reloadStatus($status);
              timer0 = new P.Stopwatch();
              if ($.Stopwatch__frequency == null) {
                H.Primitives_initTicker();
                $.Stopwatch__frequency = $.Primitives_timerFrequency;
              }
              timer0.start$0(0);
              timer = timer0;
              $async$handler = 3;
              $async$self.restartAction._html_custom$_element.attribute$2("disabled", true);
              t1 = type$.MessageBus;
              t1._as($.globals.$index(0, C.Type_MessageBus_MAi))._controller.add$1(0, new A.BusEvent("restart.start", null));
              $async$goto = 6;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).performHotRestart$0(), $async$call$0);
            case 6:
              // returning from await.
              J.stop$0$z(timer);
              message = "restarted in " + F._renderDuration(P.Duration$(timer.get$elapsedMicroseconds(), 0));
              t1._as($.globals.$index(0, C.Type_MessageBus_MAi))._controller.add$1(0, new A.BusEvent("restart.end", message));
              t1 = H._asStringS(message);
              $status.item.element.element.textContent = t1;
              F.select("main", "hotRestart", C.JSInt_methods._tdivFast$1(P.Duration$(timer.get$elapsedMicroseconds(), 0)._duration, 1000));
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              H.unwrapException($async$exception);
              t1 = type$.MessageBus._as($.globals.$index(0, C.Type_MessageBus_MAi));
              t1._controller.add$1(0, new A.BusEvent("restart.end", "error performing restart"));
              $status.item.element.element.textContent = "error performing restart";
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              $async$self.restartAction._html_custom$_element.attribute$2("disabled", false);
              P.Timer_Timer(C.Duration_3000000, $status.get$dispose());
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  F.HtmlNotFoundScreen.prototype = {
    createContent$1: function(framework) {
      return A.CoreElement$("p", null, null, null, "Page not found: " + H.S(window.location.pathname));
    }
  };
  F.HtmlStatus.prototype = {
    dispose$0: function() {
      var t1 = this.statusLine,
        t2 = this.item;
      C.JSArray_methods.remove$1(t1._html_framework$_items, t2);
      t1._rebuild$0();
    }
  };
  Y.HtmlMemoryChart.prototype = {
    HtmlMemoryChart$1: function(_memoryController) {
      var t1 = this.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      t1.id = "memory_timeline";
      t1 = t1.style;
      t1.toString;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, C.CssStyleDeclaration_methods._browserPropertyName$1(t1, "box-sizing"), "content-box", "");
      t1.height = "140px";
      t1 = this._memoryController._memoryTrackerController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new Y.HtmlMemoryChart_closure(this));
    },
    updateChart$1: function(data) {
      var t1, memoryTraces, t2, t3, t4, t5, t6, t7, _i, newSample, gcTimeStamp, t8, t9, t10, t11, t12, t13, t14, _this = this,
        _s15_ = "memory_timeline";
      if (!_this._chartCreated) {
        t1 = new M.MemoryPlotly(_s15_, _this);
        memoryTraces = t1.createMemoryTraces$0();
        self.Plotly.newPlot(_s15_, memoryTraces, t1.getMemoryLayout$2("", false), {displayModeBar: false, responsive: true, displaylogo: false});
        self.hookupPlotlyDoubleClick(_s15_, P.allowInterop(t1.get$_doubleClick(), type$.Function));
        _this._plotlyChart = t1;
        _this._chartCreated = true;
      }
      for (t1 = data.samples, t2 = t1.length, t3 = type$.JSArray_int, t4 = type$.JSArray_num, t5 = type$.List_int, t6 = type$.List_num, t7 = type$.JSArray_Data, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        newSample = t1[_i];
        if (newSample.isGC) {
          gcTimeStamp = newSample.timestamp;
          if (gcTimeStamp - _this.lastGcTimestamp > 500) {
            t8 = _this._plotlyChart;
            t9 = H.setRuntimeTypeInfo([gcTimeStamp], t3);
            t10 = H.setRuntimeTypeInfo([newSample.capacity], t4);
            t8.toString;
            self.extendTraces1(t8._domName, t5._as(t9), t6._as(t10), [0]);
          }
          _this.lastGcTimestamp = gcTimeStamp;
        }
        t8 = _this._plotlyChart;
        t9 = H.setRuntimeTypeInfo([newSample.timestamp], t3);
        t10 = H.setRuntimeTypeInfo([newSample.rss], t4);
        t11 = H.setRuntimeTypeInfo([newSample.capacity], t4);
        t12 = H.setRuntimeTypeInfo([newSample.used], t4);
        t13 = H.setRuntimeTypeInfo([newSample.external], t4);
        t8.toString;
        t5._as(t9);
        t6._as(t10);
        t6._as(t11);
        t6._as(t12);
        t14 = t8._domName;
        self.extendTraces4(t14, t9, t9, t9, t9, t10, t11, t6._as(t13), t12, [4, 3, 1, 2]);
        if (t8.liveUpdate) {
          t10 = C.JSArray_methods.get$first(t9);
          if (typeof t10 !== "number")
            return H.iae(t10);
          new P.DateTime(t10, false).DateTime$_withValue$2$isUtc(t10, false);
          t10 = P.DateTime$_withValue(t10 - 120000, false);
          t9 = H._asIntS(C.JSArray_methods.get$first(t9));
          self.Plotly.update(t14, H.setRuntimeTypeInfo([{}], t7), {xaxis: t8.getXAxisLayout$2(t10._core$_value, t9)});
        }
      }
      C.JSArray_methods.set$length(t1, 0);
    }
  };
  Y.HtmlMemoryChart_closure.prototype = {
    call$1: function(memoryTracker) {
      var t1;
      type$.MemoryTracker._as(memoryTracker);
      t1 = this.$this;
      if (t1._memoryController._memoryTracker.service != null)
        t1.updateChart$1(memoryTracker);
    },
    $signature: 158
  };
  A.HtmlMemoryDataView.prototype = {
    HtmlMemoryDataView$2: function(_memoryController, variableDescriber) {
      var _this = this,
        t1 = G.HtmlSelectableTree$(type$.BoundField);
      t1.flex$0(0);
      t1.clazz$1("menu-item-bottom-border");
      t1.clazz$1("debugger-items-list");
      t1.clazz$1("memory-inspector-items-list");
      _this.set$_html_memory_data_view$_items(t1);
      t1 = _this._html_memory_data_view$_items;
      t1.set$childProvider(t1.$ti._eval$1("ChildProvider<1>")._as(new A.MemoryDataChildProvider(_this._html_memory_data_view$_memoryController)));
      t1 = _this._html_memory_data_view$_items;
      t1.set$renderer(t1.$ti._eval$1("CoreElement(1)")._as(new A.HtmlMemoryDataView_closure(variableDescriber)));
    },
    get$element: function() {
      return this._html_memory_data_view$_items;
    },
    set$_html_memory_data_view$_items: function(_items) {
      this._html_memory_data_view$_items = type$.HtmlSelectableTree_BoundField._as(_items);
    },
    $isCoreElementView: 1
  };
  A.HtmlMemoryDataView_closure.prototype = {
    call$1: function(field) {
      var t1, $name, value, valueStr, element, t2, t3, _null = null, _box_0 = {};
      type$.BoundField._as(field);
      t1 = field.decl;
      $name = t1.get$name(t1);
      value = field.value;
      if (type$.InstanceRef._is(value)) {
        if (value.get$valueAsString(value) == null) {
          t1 = value.get$classRef();
          valueStr = t1.get$name(t1);
        } else {
          valueStr = value.get$valueAsString(value);
          if (H.boolConversionCheck(value.get$valueAsStringIsTruncated()))
            valueStr = J.$add$ansx(valueStr, "...");
          if (value.get$kind(value) === "String")
            valueStr = "'" + H.S(valueStr) + "'";
        }
        switch (value.get$kind(value)) {
          case "List":
            valueStr = "[" + H.S(value.get$length(value)) + "] " + H.S(valueStr);
            break;
          case "Map":
            valueStr = "{ " + H.S(value.get$length(value)) + " } " + H.S(valueStr);
            break;
          default:
            if (value.get$kind(value) != null && J.endsWith$1$s(value.get$kind(value), "List"))
              valueStr = "[" + H.S(value.get$length(value)) + "] " + H.S(valueStr);
        }
      } else if (value instanceof Q.Sentinel)
        valueStr = value.valueAsString;
      else
        valueStr = type$.TypeArgumentsRef._is(value) ? value.get$name(value) : J.toString$0$(value);
      element = A.CoreElement$("li", _null, "memory-instance-data-list-item", _null, _null);
      element.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("span", _null, _null, _null, $name), A.CoreElement$("span", _null, "subtle", _null, " " + H.S(valueStr))], type$.JSArray_CoreElement));
      _box_0.sub = null;
      t1 = J.get$onMouseOver$x(element.element);
      t2 = t1.$ti;
      t3 = t2._eval$1("~(1)")._as(new A.HtmlMemoryDataView__closure(_box_0, this.variableDescriber, field, element));
      type$.void_Function._as(null);
      _box_0.sub = W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
      return element;
    },
    $signature: 159
  };
  A.HtmlMemoryDataView__closure.prototype = {
    call$1: function(e) {
      var _this = this;
      type$.MouseEvent._as(e);
      _this._box_0.sub.cancel$0(0);
      _this.variableDescriber.call$1(_this.field).then$1$1(new A.HtmlMemoryDataView___closure(_this.element), type$.Null);
    },
    $signature: 6
  };
  A.HtmlMemoryDataView___closure.prototype = {
    call$1: function(desc) {
      this.element.element.title = H._asStringS(desc);
    },
    $signature: 8
  };
  A.MemoryDataChildProvider.prototype = {
    hasChildren$1: function(item) {
      var t1 = type$.BoundField._as(item).value;
      return type$.InstanceRef._is(t1) && t1.get$valueAsString(t1) == null;
    },
    getChildren$1: function(item) {
      return this.getChildren$body$MemoryDataChildProvider(type$.BoundField._as(item));
    },
    getChildren$body$MemoryDataChildProvider: function(item) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_BoundField),
        $async$returnValue, $async$self = this, object, result, t2, index, _i, value, t3, t1;
      var $async$getChildren$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = item.value;
                $async$goto = t1 != null && type$.InstanceRef._is(t1) ? 3 : 4;
                break;
              case 3:
                // then
                $async$goto = 5;
                return P._asyncAwait($async$self._html_memory_data_view$_memoryController.getObject$1(0, H._asStringS(J.get$id$x(t1))), $async$getChildren$1);
              case 5:
                // returning from await.
                object = $async$result;
                if (object instanceof Q.Instance)
                  switch (J.get$kind$x(item.value)) {
                    case "PlainInstance":
                      $async$returnValue = object.fields;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "List":
                      result = H.setRuntimeTypeInfo([], type$.JSArray_BoundField);
                      for (t1 = object.elements, t2 = t1.length, index = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                        value = t1[_i];
                        C.JSArray_methods.add$1(result, new Q.BoundField(new Q.FieldRef("[" + index + "]", null, null, null, null, null, null), value));
                        ++index;
                      }
                      $async$returnValue = result;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "Map":
                      result = H.setRuntimeTypeInfo([], type$.JSArray_BoundField);
                      for (t1 = object.associations, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                        value = t1[_i];
                        t3 = J.getInterceptor$x(value);
                        C.JSArray_methods.add$1(result, new Q.BoundField(new Q.FieldRef("['" + H.S(J.get$valueAsString$x(t3.get$key(value))) + "']", null, null, null, null, null, null), J.get$valueAsString$x(t3.get$value(value))));
                      }
                      $async$returnValue = result;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "StackTrace":
                      break;
                    case "Closure":
                      break;
                  }
                else if (object instanceof Q.Sentinel)
                  B.log("Sentinel encountered " + H.S(J.get$id$x(item.value)) + ".", C.LogLevel_2);
              case 4:
                // join
                $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_BoundField);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$getChildren$1, $async$completer);
    }
  };
  T.HtmlInboundsTree.prototype = {
    _html_memory_inbounds$_init$1: function(className) {
      var _this = this, _null = null,
        _s15_ = "Field Reference",
        title = "" + _this.inboundsTree.data.children.length + " Instances of " + H.S(className),
        t1 = type$._AsyncBroadcastStreamController_InboundsTreeNode,
        t2 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        t3 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        classNameColumn = new T.ClassNameColumn(t2, t3, title, _null, _null, C.ColumnAlignment_0),
        t4 = type$.InboundsTreeNode;
      classNameColumn.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(title, C.ColumnAlignment_0, _null, _null, false, _null, false, t4);
      new P._BroadcastStream(t2, t1._eval$1("_BroadcastStream<1>")).listen$1(new T.HtmlInboundsTree__init_closure(_this));
      new P._BroadcastStream(t3, t1._eval$1("_BroadcastStream<1>")).listen$1(new T.HtmlInboundsTree__init_closure0(_this));
      t1 = Q.HtmlTreeTable_HtmlTreeTable$virtual(t4);
      t1.element.clazz$1("memory-table");
      _this.set$referencesTable(t1);
      t1 = _this.referencesTable;
      t1.toString;
      t1 = t1.$ti._eval$1("TreeTableData<1>")._as(t1.model);
      t3 = H._instanceType(t1)._eval$1("ColumnData<1>");
      t1.super$TableData$addColumn(t3._as(classNameColumn));
      t2 = new T.FieldNameColumn(_s15_, _null, _null, C.ColumnAlignment_0);
      t2.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s15_, C.ColumnAlignment_0, _null, _null, false, _null, false, t4);
      t1.super$TableData$addColumn(t3._as(t2));
      t1.setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_InboundsTreeNode));
      t1 = _this.referencesTable;
      t1.toString;
      t1 = t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).selectController;
      t2 = _this._memoryScreen;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(t2.get$select(t2));
      _this.add$1(0, _this.referencesTable.element);
    },
    rebuildView$0: function() {
      var t2, rows,
        t1 = this.inboundsTree.data;
      t1 = t1.get$root(t1).children;
      t2 = H._arrayInstanceType(t1)._eval$1("CastList<1,InboundsTreeNode>");
      rows = new H.CastList(t1, t2);
      for (t1 = new H.ListIterator(rows, rows.get$length(rows), t2._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();)
        t1.__internal$_current.set$parent(0, null);
      t1 = this.referencesTable;
      t1.toString;
      t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).setRows$1(rows);
    },
    set$referencesTable: function(referencesTable) {
      this.referencesTable = type$.HtmlTreeTable_InboundsTreeNode._as(referencesTable);
    }
  };
  T.HtmlInboundsTree__init_closure.prototype = {
    call$1: function(inboundNode) {
      return this.$call$body$HtmlInboundsTree__init_closure(type$.InboundsTreeNode._as(inboundNode));
    },
    $call$body$HtmlInboundsTree__init_closure: function(inboundNode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, instanceHashCode, classStats, instances, t6, instanceIndex, t7, t8, instanceIndex0, t9, refs, hashCodeResult, t1, $async$temp1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              if (t1.spinner != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = inboundNode.children;
              $async$goto = t2.length === 1 && J.get$isEmpty$asx(C.JSArray_methods.get$first(t2)) ? 3 : 4;
              break;
            case 3:
              // then
              if (0 >= t2.length) {
                $async$returnValue = H.ioore(t2, -1);
                // goto return
                $async$goto = 1;
                break;
              }
              t2.pop();
              $async$goto = !inboundNode.get$isEmpty(inboundNode) ? 5 : 6;
              break;
            case 5:
              // then
              t2 = G.HtmlSpinner_centered(C.List_empty0);
              t1.spinner = t2;
              t1.referencesTable.element.add$1(0, t2);
              t2 = inboundNode.instanceHashCode;
              $async$goto = t2 == null && inboundNode._instance != null ? 7 : 8;
              break;
            case 7:
              // then
              $async$temp1 = inboundNode;
              $async$goto = 9;
              return P._asyncAwait(t1._memoryScreen.computeInboundReference$2(inboundNode._instance.objectRef, inboundNode), $async$call$1);
            case 9:
              // returning from await.
              t2 = $async$temp1.instanceHashCode = $async$result;
            case 8:
              // join
              t3 = t1._memoryScreen;
              t4 = t3.memoryController;
              t5 = t4.settings;
              instanceHashCode = H.boolConversionCheck(t5.experiment) && !t3.isProfileBuild ? P.int_parse(t2, null, null) : -1;
              classStats = t3.findClass$1(inboundNode._html_memory_inbounds$_name);
              $async$goto = H.boolConversionCheck(t5.experiment) && !t3.isProfileBuild ? 10 : 11;
              break;
            case 10:
              // then
              $async$goto = 12;
              return P._asyncAwait(t3.findInstances$1(classStats), $async$call$1);
            case 12:
              // returning from await.
              instances = $async$result;
              t2 = J.getInterceptor$ax(instances), t5 = t2.get$iterator(instances), t6 = inboundNode.fieldName, instanceIndex = 1;
            case 13:
              // for condition
              if (!t5.moveNext$0()) {
                // goto after for
                $async$goto = 15;
                break;
              }
              t7 = {};
              t8 = t5.get$current(t5);
              instanceIndex0 = instanceIndex + 1;
              t9 = t2.get$length(instances);
              inboundNode.set$_html_memory_inbounds$_name(C.JSArray_methods.get$first(inboundNode._html_memory_inbounds$_name.split(" ")));
              inboundNode._html_memory_inbounds$_name = H.S(inboundNode._html_memory_inbounds$_name) + " (" + instanceIndex + " of " + H.S(t9) + ")";
              t3._inboundTree.update$0(0);
              t9 = t8.objectRef;
              $async$goto = 16;
              return P._asyncAwait(O.getInboundReferences(t9, 1000), $async$call$1);
            case 16:
              // returning from await.
              refs = $async$result;
              $async$temp1 = H;
              $async$goto = 19;
              return P._asyncAwait(t4.matchObject$3(t9, t6, instanceHashCode), $async$call$1);
            case 19:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 17 : 18;
              break;
            case 17:
              // then
              t7.hashCodeResult = null;
              $async$temp1 = t7;
              $async$goto = 20;
              return P._asyncAwait(O.evaluate(t9, "hashCode"), $async$call$1);
            case 20:
              // returning from await.
              hashCodeResult = $async$temp1.hashCodeResult = $async$result;
              inboundNode.setInstance$2(t8, hashCodeResult == null ? null : hashCodeResult.get$valueAsString(hashCodeResult));
              t2 = t3.tableStack;
              t3 = t2._head;
              if (t3 === t2._tail)
                H.throwExpression(H.IterableElementError_noElement());
              t2 = t2._collection$_table;
              if (t3 >= t2.length) {
                $async$returnValue = H.ioore(t2, t3);
                // goto return
                $async$goto = 1;
                break;
              }
              O.computeInboundRefs(type$.List_ClassHeapDetailStats._as(t2[t3].get$model().data), refs, new T.HtmlInboundsTree__init__closure(t7, inboundNode));
              // goto after for
              $async$goto = 15;
              break;
            case 18:
              // join
            case 14:
              // for update
              instanceIndex = instanceIndex0;
              // goto for condition
              $async$goto = 13;
              break;
            case 15:
              // after for
            case 11:
              // join
              J.remove$0$ax(t1.spinner.element);
              t1.spinner = null;
            case 6:
              // join
            case 4:
              // join
              t2 = t1.referencesTable;
              t2.toString;
              t2.$ti._eval$1("TreeTableData<1>")._as(t2.model).expandNode$1(inboundNode);
              t1._memoryScreen.select$1(0, inboundNode);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 160
  };
  T.HtmlInboundsTree__init__closure.prototype = {
    call$3: function(referenceName, owningAllocator, owningAllocatorIsAbstract) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, newRefNode;
      var $async$call$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!H.boolConversionCheck(owningAllocatorIsAbstract) && owningAllocator.length !== 0) {
                t1 = $async$self._box_0.hashCodeResult;
                t1 = t1 == null ? null : t1.get$valueAsString(t1);
                t2 = type$.JSArray_InboundsTreeNode;
                newRefNode = new T.InboundsTreeNode(owningAllocator, null, referenceName, t1, H.setRuntimeTypeInfo([], t2));
                $async$self.inboundNode.addChild$1(newRefNode);
                newRefNode.addChild$1(new T.InboundsTreeNode(null, null, null, null, H.setRuntimeTypeInfo([], t2)));
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$3, $async$completer);
    },
    $signature: 91
  };
  T.HtmlInboundsTree__init_closure0.prototype = {
    call$1: function(inboundNode) {
      var t1;
      type$.InboundsTreeNode._as(inboundNode);
      t1 = this.$this.referencesTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).collapseNode$1(inboundNode);
    },
    $signature: 92
  };
  T.InboundsTreeData.prototype = {};
  T.InboundsTreeNode.prototype = {
    get$name: function(_) {
      return this._html_memory_inbounds$_name;
    },
    setInstance$3: function(theInstance, hashCode, isNew) {
      var t1, _this = this;
      _this._instance = theInstance;
      _this.instanceHashCode = hashCode;
      _this.set$_html_memory_inbounds$_name(C.JSArray_methods.get$first(_this._html_memory_inbounds$_name.split(" ")));
      if (isNew) {
        t1 = _this.fieldName;
        t1 = !H.boolConversionCheck(t1 == null ? null : t1.length !== 0);
      } else
        t1 = false;
      _this._html_memory_inbounds$_name = t1 ? _this._instance.objectRef : H.S(_this._html_memory_inbounds$_name) + " (" + H.S(_this._instance.objectRef) + ")";
    },
    setInstance$2: function(theInstance, hashCode) {
      return this.setInstance$3(theInstance, hashCode, false);
    },
    get$isEmpty: function(_) {
      return this._html_memory_inbounds$_name == null && this.fieldName == null && this.instanceHashCode == null;
    },
    set$_html_memory_inbounds$_name: function(_name) {
      this._html_memory_inbounds$_name = H._asStringS(_name);
    }
  };
  T.HtmlInstanceRefsView.prototype = {
    update$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!H.boolConversionCheck($async$self.element.hasAttribute("hidden")))
                $async$self.rebuildView$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$update$0, $async$completer);
    }
  };
  T.ClassNameColumn.prototype = {
    getValue$1: function(dataObject) {
      return type$.InboundsTreeNode._as(dataObject)._html_memory_inbounds$_name;
    },
    getDisplayValue$1: function(dataObject) {
      var $name = type$.InboundsTreeNode._as(dataObject)._html_memory_inbounds$_name;
      if ($name.length > 75)
        return J.substring$2$s($name, 0, 75) + "...";
      return $name;
    },
    get$supportsSorting: function() {
      return true;
    },
    getTooltip$1: function(dataObject) {
      type$.InboundsTreeNode._as(dataObject);
      return H.S(dataObject._html_memory_inbounds$_name) + " . " + H.S(dataObject.fieldName);
    }
  };
  T.FieldNameColumn.prototype = {
    getValue$1: function(dataObject) {
      return type$.InboundsTreeNode._as(dataObject).fieldName;
    },
    getDisplayValue$1: function(dataObject) {
      var fieldName = type$.InboundsTreeNode._as(dataObject).fieldName;
      if (fieldName.length > 25)
        return J.substring$2$s(fieldName, 0, 25) + "...";
      return fieldName;
    },
    get$supportsSorting: function() {
      return false;
    },
    getTooltip$1: function(dataObject) {
      type$.InboundsTreeNode._as(dataObject);
      return H.S(dataObject.fieldName) + " OF " + H.S(dataObject._html_memory_inbounds$_name);
    }
  };
  O.HtmlMemoryScreen.prototype = {
    memoryShortcuts$4: function(ctrlKey, shiftKey, altKey, key) {
      if (H.boolConversionCheck(ctrlKey) && key === "f") {
        this._search$0();
        return true;
      }
      return false;
    },
    entering$0: function() {
      this._updateListeningState$0();
    },
    createContent$1: function(framework) {
      var screenDiv, t1, t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null, _s3_ = "div", _s6_ = "layout", _s6_0 = "btn-sm",
        _s8_ = "disabled",
        _s10_ = "horizontal";
      E.setupDimensions();
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null);
      t1 = screenDiv.element;
      t1.setAttribute(_s6_, "");
      t1.setAttribute("vertical", "");
      t1 = N.PButton$icon("Resume", C.UrlIcon_JmU, _null);
      t1.clazz$1("btn-primary");
      t1.clazz$1(_s6_0);
      t1.attribute$2(_s8_, true);
      _this.resumeButton = t1;
      t1 = N.PButton$icon("Pause", C.UrlIcon_lyL, _null);
      t1.clazz$1(_s6_0);
      _this.pauseButton = t1;
      _this.set$heapPopupList(A.HtmlPopupListView$(type$.String));
      t1 = A.CoreElement$("input", _null, "search-text", _null, _null);
      t2 = t1.element;
      t2.setAttribute("type", "text");
      t2.setAttribute("placeholder", "search");
      t2.setAttribute("id", "popup_search_memory");
      _this.vmSearchField = t1;
      t1 = N.PButton$icon("", C.UrlIcon_QOR, "Memory Search");
      t1.clazz$1(_s6_0);
      t1.click$1(0, _this.get$_search());
      t1.attribute$2(_s8_, true);
      _this.vmMemorySearchButton = t1;
      t1 = N.PButton$icon("Snapshot", C.UrlIcon_gTM, "Memory Snapshot");
      t1.clazz$1("margin-left");
      t1.clazz$1(_s6_0);
      t1.click$2(0, _this.get$_loadAllocationProfile(), new O.HtmlMemoryScreen_createContent_closure(_this));
      t1.attribute$2(_s8_, true);
      _this.vmMemorySnapshotButton = t1;
      t1 = N.PButton$icon("Reset", C.UrlIcon_omH, "Reset Accumulators");
      t1.clazz$1(_s6_0);
      t1.click$1(0, _this.get$_resetAllocatorCounts());
      t1.attribute$2(_s8_, true);
      _this.resetAccumulatorsButton = t1;
      t1 = new A.HtmlPopupAutoCompleteView(_this.heapPopupList, screenDiv, _this.vmSearchField, _this.get$_callbackPopupSelectClass(), type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t1.CoreElement$5$attributes$classes$html$text(_s3_, _null, "popup-view", _null, _null);
      t1._html_popup$_initialize$0();
      _this.heapAutoCompletePopup = t1;
      t1 = N.PButton$icon("GC", C.UrlIcon_m7u, "Manual Garbage Collect");
      t1.clazz$1(_s6_0);
      t1.click$1(0, _this.get$_gcNow());
      t1.attribute$2(_s8_, true);
      _this.gcNowButton = t1;
      t1 = N.PButton$icon("", C.UrlIcon_USK, "Settings");
      t1.clazz$1(_s6_0);
      t1.click$1(0, _this.get$_displaySettingsDialog());
      t1.attribute$2(_s8_, true);
      _this.settingsButton = t1;
      _this.resumeButton.click$1(0, new O.HtmlMemoryScreen_createContent_closure0(_this));
      _this.pauseButton.click$1(0, new O.HtmlMemoryScreen_createContent_closure1(_this));
      t1 = _this.hoverPopup;
      t1.get$onMouseOver(t1).listen$1(new O.HtmlMemoryScreen_createContent_closure2(_this));
      t1.get$onMouseLeave(t1).listen$1(new O.HtmlMemoryScreen_createContent_closure3(_this));
      _this.history = A.CoreElement$(_s3_, "hidden", "history-navigation section", _null, _null);
      _this.createSettingsDialog$0();
      t2 = _this.settings;
      t3 = t2.element.style;
      t3.display = "none";
      t3 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t4 = A.CoreElement$("form", _null, _null, _null, _null);
      t5 = t4.element;
      t5.setAttribute(_s6_, "");
      t5.setAttribute(_s10_, "");
      t4.clazz$1("align-items-center");
      t5 = A.CoreElement$(_s3_, _null, "btn-group collapsible-885 flex-no-wrap", _null, _null);
      t6 = type$.JSArray_CoreElement;
      t5.add$1(0, H.setRuntimeTypeInfo([_this.pauseButton, _this.resumeButton], t6));
      t7 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t7.flex$0(0);
      t8 = A.CoreElement$(_s3_, _null, "btn-group collapsible-785 nowrap margin-left memory-buttons", _null, _null);
      t8.flex$0(0);
      t8.add$1(0, H.setRuntimeTypeInfo([_this.vmSearchField, _this.vmMemorySearchButton, _this.vmMemorySnapshotButton, _this.resetAccumulatorsButton, _this.gcNowButton, _this.settingsButton], t6));
      t4.add$1(0, H.setRuntimeTypeInfo([t5, t7, t8], t6));
      t3.add$1(0, H.setRuntimeTypeInfo([t4], t6));
      t4 = _this.memoryController;
      t8 = Y.HtmlMemoryChart$(t4);
      t8.attribute$2(_s8_, true);
      _this.memoryChart = t8;
      t7 = A.CoreElement$(_s3_, _null, "section overflow-auto", _null, _null);
      t5 = t7.element;
      t5.setAttribute(_s6_, "");
      t5.setAttribute(_s10_, "");
      t7.flex$0(0);
      _this.tableContainer = t7;
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t2, t3, t8, t7, _this.history, _this.heapAutoCompletePopup, t1], t6));
      t6 = t4._disconnectController;
      new P._BroadcastStream(t6, H._instanceType(t6)._eval$1("_BroadcastStream<1>")).listen$1(new O.HtmlMemoryScreen_createContent_closure4(_this));
      Y.maybeAddDebugMessage(framework, "memory");
      _this._pushNextTable$2(_null, _this._createHeapStatsTableView$0());
      _this._html_memory_screen$_updateStatus$1(_null);
      _this.vmMemorySnapshotButton.attribute$2(_s8_, true);
      t4.computeLibraries$0().then$1$1(new O.HtmlMemoryScreen_createContent_closure5(_this), type$.Null);
      return screenDiv;
    },
    createSettingsDialog$0: function() {
      var t6, t7, t8, t9, t10, t11, t12, t13, _this = this, _null = null, _s3_ = "div", _s4_ = "type", _s2_ = "br", _s6_ = "button",
        t1 = A.CoreElement$(_s3_, _null, "section settings-box", _null, _null),
        t2 = A.CoreElement$("h2", _null, "settings-title", _null, "Settings"),
        t3 = A.CoreElement$(_s3_, _null, "settings-area", _null, _null),
        t4 = A.CoreElement$("form", _null, _null, _null, _null),
        t5 = t4.element;
      t5.setAttribute("layout", "");
      t5.setAttribute("horizontal", "");
      t4.clazz$1("align-items-center");
      t5 = A.CoreElement$(_s3_, _null, "collapsible-885 flex-no-wrap settings-left", _null, "Display Snapshot Classes from Library");
      t6 = A.CoreElement$(_s3_, _null, "settings-libraries", _null, _null);
      _this.librariesUi = t6;
      t7 = type$.JSArray_CoreElement;
      t5.add$1(0, H.setRuntimeTypeInfo([t6], t7));
      t6 = A.CoreElement$(_s3_, _null, "setttings-options", _null, _null);
      t8 = A.CoreElement$(_s3_, _null, "filter-pattern-area", _null, _null);
      t9 = A.CoreElement$("span", _null, "settings-class-pattern", _null, "Class Filter: ");
      t10 = type$.Element;
      t11 = new A.TextField(t10._as(W._ElementFactoryProvider_createElement_tag("input", _null)));
      t11.CoreElement$5$attributes$classes$html$text("input", _null, "filter-class", _null, _null);
      t11.get$element().setAttribute(_s4_, "text");
      t12 = _this.memoryController.settings;
      t13 = t12.pattern;
      type$.InputElement._as(t11.element).value = t13;
      t11.changed$1(_this.get$_classPatternChanged());
      t11.get$element().setAttribute("placeholder", "Any");
      _this.classNameFilter = t11;
      t8.add$1(0, H.setRuntimeTypeInfo([t9, t11, A.CoreElement$(_s2_, _null, _null, _null, _null)], t7));
      t8 = H.setRuntimeTypeInfo([t8], t7);
      t11 = _this.createCheckBox$3("Hide Private Classes ", t12.hidePrivateClasses, _this.get$_liveUpdateFilters());
      _this.set$privateClasses(t11);
      C.JSArray_methods.addAll$1(t8, t11);
      C.JSArray_methods.addAll$1(t8, H.setRuntimeTypeInfo([A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null)], t7));
      t6.add$1(0, t8);
      t8 = A.CoreElement$(_s3_, _null, "setttings-options-2", _null, _null);
      t12 = _this.createCheckBox$3("Navigation Experiment ", t12.experiment, new O.HtmlMemoryScreen_createSettingsDialog_closure(_this));
      _this.set$experimentCheckbox(t12);
      t8.add$1(0, [t12, A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null), A.CoreElement$(_s2_, _null, _null, _null, _null)]);
      t12 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t12.flex$0(0);
      t11 = A.CoreElement$(_s3_, _null, "settings-buttons btn-group collapsible-785 nowrap margin-left text-right", _null, _null);
      t11.flex$0(0);
      t9 = t10._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t13 = new N.PButton(t9);
      t13.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Apply");
      t9.setAttribute(_s4_, _s6_);
      t13.click$1(0, _this.get$_applySettings());
      t10 = t10._as(W._ElementFactoryProvider_createElement_tag(_s6_, _null));
      t9 = new N.PButton(t10);
      t9.CoreElement$5$attributes$classes$html$text(_s6_, _null, "btn", _null, "Cancel");
      t10.setAttribute(_s4_, _s6_);
      t9.click$1(0, _this.get$_cancelSettings());
      t11.add$1(0, H.setRuntimeTypeInfo([t13, t9], t7));
      t4.add$1(0, H.setRuntimeTypeInfo([t5, t6, t8, t12, t11], t7));
      t3.add$1(0, H.setRuntimeTypeInfo([t4], t7));
      t1.add$1(0, H.setRuntimeTypeInfo([t2, t3], t7));
      _this.settings = t1;
      t1 = _this.experimentCheckbox;
      (t1 && C.JSArray_methods).get$first(t1).attribute$2("disabled", _this.isProfileBuild);
    },
    _displaySettingsDialog$0: function() {
      var t1, _this = this;
      _this.settingsButton.attribute$2("disabled", true);
      _this.librariesUi.add$1(0, _this.createLibrariesUi$0());
      t1 = _this.settings.element.style;
      t1.display = "block";
      t1 = _this.classNameFilter;
      t1.toString;
      type$.InputElement._as(t1.element).focus();
    },
    _classPatternChanged$1: function(value) {
      this._liveUpdateFilters$0();
    },
    _liveUpdateFilters$0: function() {
      var t2, pattern, checkbox, librariesChecked, t3, t4, _this = this,
        t1 = _this.classNameFilter;
      t1.toString;
      t2 = type$.InputElement;
      if (t2._as(t1.element).value != null) {
        t1 = _this.classNameFilter;
        t1.toString;
        pattern = t2._as(t1.element).value;
      } else
        pattern = "";
      t1 = _this.privateClasses;
      checkbox = t2._as((t1 && C.JSArray_methods).get$first(t1).get$element());
      t1 = H.setRuntimeTypeInfo(["Dart", "Flutter"], type$.JSArray_String);
      C.JSArray_methods.set$length(t1, 0);
      librariesChecked = J.get$children$x(_this.librariesUi.element);
      for (t3 = librariesChecked.get$iterator(librariesChecked); t3.moveNext$0();) {
        t4 = t3._current;
        if (t4.tagName === "INPUT" && t4.getAttribute("type") === "checkbox") {
          t2._as(t4);
          if (!H.boolConversionCheck(t4.checked))
            C.JSArray_methods.add$1(t1, t4.value);
        }
      }
      _this.memoryController.libraryCollection.computeDisplayClasses$1(new T.FilteredLibraries(t1));
      _this._displayClassesSnapshot$2$classPattern$hidePrivates(pattern, checkbox.checked);
    },
    _applySettings$0: function() {
      var librariesChecked, t3, t4, t5, _this = this,
        t1 = _this.memoryController,
        t2 = t1.libraryFilters._filteredLibraries;
      C.JSArray_methods.set$length(t2, 0);
      librariesChecked = J.get$children$x(_this.librariesUi.element);
      for (t3 = librariesChecked.get$iterator(librariesChecked), t4 = type$.InputElement; t3.moveNext$0();) {
        t5 = t3._current;
        if (t5.tagName === "INPUT" && t5.getAttribute("type") === "checkbox") {
          t4._as(t5);
          if (!H.boolConversionCheck(t5.checked))
            C.JSArray_methods.add$1(t2, t5.value);
        }
      }
      t1.libraryCollection.computeDisplayClasses$0();
      J.get$children$x(_this.librariesUi.element).clear$0(0);
      t1 = t1.settings;
      t2 = _this.classNameFilter;
      t2.toString;
      t1.pattern = t4._as(t2.element).value;
      t2 = _this.privateClasses;
      t4 = type$.CheckboxInputElement;
      t1.hidePrivateClasses = t4._as((t2 && C.JSArray_methods).get$first(t2).get$element()).checked;
      t2 = _this.experimentCheckbox;
      t1.experiment = t4._as((t2 && C.JSArray_methods).get$first(t2).get$element()).checked;
      _this._closeSettingsDialog$0();
    },
    _cancelSettings$0: function() {
      var _this = this,
        t1 = _this.memoryController;
      t1.libraryCollection.computeDisplayClasses$1(t1.libraryFilters);
      t1 = t1.settings;
      _this._displayClassesSnapshot$2$classPattern$hidePrivates(t1.pattern, t1.hidePrivateClasses);
      J.get$children$x(_this.librariesUi.element).clear$0(0);
      _this._closeSettingsDialog$0();
    },
    _closeSettingsDialog$0: function() {
      var t1 = this.settings.element.style;
      t1.display = "none";
      this.settingsButton.attribute$2("disabled", false);
    },
    createCheckBox$3: function($name, checked, handle) {
      var t1, t2, _null = null;
      type$.void_Function._as(handle);
      t1 = A.checkbox(H.boolConversionCheck(checked) ? "checked" : _null, "settings-checkbox-option", $name);
      t2 = t1.element;
      t2.setAttribute("name", $name);
      t2.setAttribute("value", $name);
      t1.click$1(0, handle);
      t2 = A.CoreElement$("label", _null, "settings-checkbox-label-option", _null, $name);
      t2.element.setAttribute("for", $name);
      return H.setRuntimeTypeInfo([t1, t2, A.CoreElement$("br", _null, _null, _null, _null)], type$.JSArray_CoreElement);
    },
    createLibrariesUi$0: function() {
      var sortedLibraries, t4, lastLibraryDisplayed, _i, normalizedName, t5, t6, _null = null,
        t1 = type$.JSArray_CoreElement,
        libraryUiItems = H.setRuntimeTypeInfo([], t1),
        t2 = this.memoryController,
        t3 = t2.libraryCollection.librarires;
      t3 = t3.get$keys(t3);
      sortedLibraries = P.List_List$from(t3, true, H._instanceType(t3)._eval$1("Iterable.E"));
      C.JSArray_methods.sort$0(sortedLibraries);
      for (t3 = sortedLibraries.length, t4 = this.get$_liveUpdateFilters(), t2 = t2.libraryFilters._filteredLibraries, lastLibraryDisplayed = "", _i = 0; _i < sortedLibraries.length; sortedLibraries.length === t3 || (0, H.throwConcurrentModificationError)(sortedLibraries), ++_i) {
        normalizedName = sortedLibraries[_i];
        if (!J.$eq$(normalizedName, lastLibraryDisplayed)) {
          H._asStringS(normalizedName);
          t5 = A.CoreElement$("input", !C.JSArray_methods.contains$1(t2, normalizedName) ? "checked" : _null, "settings-libraries-checkbox", _null, normalizedName);
          t6 = t5.element;
          t6.setAttribute("type", "checkbox");
          t6.setAttribute("id", normalizedName);
          t6.setAttribute("value", normalizedName);
          t5.click$1(0, t4);
          t6 = A.CoreElement$("label", _null, "settings-libraries-label", _null, normalizedName);
          t6.element.setAttribute("for", normalizedName);
          C.JSArray_methods.addAll$1(libraryUiItems, H.setRuntimeTypeInfo([t5, t6, A.CoreElement$("br", _null, _null, _null, _null)], t1));
          lastLibraryDisplayed = normalizedName;
        }
      }
      return libraryUiItems;
    },
    findClass$1: function(className) {
      var t1 = this.tableStack;
      return C.JSArray_methods.firstWhere$2$orElse(type$.List_ClassHeapDetailStats._as(t1.get$first(t1).get$model().data), new O.HtmlMemoryScreen_findClass_closure(className), new O.HtmlMemoryScreen_findClass_closure0());
    },
    findInstances$1: function(row) {
      return this.findInstances$body$HtmlMemoryScreen(row);
    },
    findInstances$body$HtmlMemoryScreen: function(row) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_InstanceSummary),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, instances, e, t1, exception, $async$exception;
      var $async$findInstances$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = row.classRef;
              $async$goto = 7;
              return P._asyncAwait($async$self.memoryController.getInstances$3(t1.id, t1.name, row.instancesCurrent), $async$findInstances$1);
            case 7:
              // returning from await.
              instances = $async$result;
              $async$returnValue = instances;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              B.log("findInstances: " + H.S(e), C.LogLevel_2);
              t1 = H.setRuntimeTypeInfo([], type$.JSArray_InstanceSummary);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$findInstances$1, $async$completer);
    },
    findClassDetails$1: function(classRefId) {
      var t1 = this.tableStack;
      return C.JSArray_methods.firstWhere$2$orElse(type$.List_ClassHeapDetailStats._as(t1.get$first(t1).get$model().data), new O.HtmlMemoryScreen_findClassDetails_closure(classRefId), new O.HtmlMemoryScreen_findClassDetails_closure0());
    },
    _selectClass$1: function(className) {
      var t2, row, _i, t3,
        t1 = this.tableStack,
        classesData = type$.List_ClassHeapDetailStats._as(t1.get$first(t1).get$model().data);
      for (t2 = classesData.length, row = 0, _i = 0; _i < t2; ++_i) {
        if (classesData[_i].classRef.name === className) {
          t2 = t1._head;
          if (t2 === t1._tail)
            H.throwExpression(H.IterableElementError_noElement());
          t3 = t1._collection$_table;
          if (t2 >= t3.length)
            return H.ioore(t3, t2);
          t3[t2].selectByIndex$2$scrollBehavior(row, "auto");
          this.memoryPath.add$1(0, new O.NavigationState(className));
          return;
        }
        ++row;
      }
      this.framework.toast$2$title("Unable to find class " + className, "Error");
    },
    _callbackPopupSelectClass$1: function(cancel) {
      var selectedClass, t1, t2, inputElement, _this = this;
      if (cancel) {
        _this.heapAutoCompletePopup._html_popup$_matcher.reset$0(0);
        _this.heapPopupList.set$highlightedItem(null);
      } else {
        _this.history.attribute$2("hidden", true);
        J.get$children$x(_this.history.element).clear$0(0);
        _this.memoryPath = new O.NavigationPath(H.setRuntimeTypeInfo([], type$.JSArray_NavigationState));
        selectedClass = _this.heapPopupList.highlightedItem;
        if (selectedClass != null)
          _this._selectClass$1(selectedClass);
      }
      t1 = _this.heapAutoCompletePopup;
      t2 = t1.element.style;
      t2.display = "none";
      inputElement = type$.InputElement._as(t1._html_popup$_popupTextfield.element);
      inputElement.value = "";
      t1 = inputElement.style;
      t1.visibility = "hidden";
    },
    _callbackPopupSelectClass$0: function() {
      return this._callbackPopupSelectClass$1(null);
    },
    _selectInstanceByObjectRef$1: function(objectRefToFind) {
      var t1, instanceTable, nodes, foundNode;
      this.removeInstanceTableView$0();
      t1 = this.tableStack;
      instanceTable = t1.get$last(t1);
      nodes = type$.List_InboundsTreeNode._as(instanceTable.get$model().data);
      foundNode = C.JSArray_methods.firstWhere$2$orElse(nodes, new O.HtmlMemoryScreen__selectInstanceByObjectRef_closure(objectRefToFind), new O.HtmlMemoryScreen__selectInstanceByObjectRef_closure0());
      if (foundNode != null)
        instanceTable.selectByIndex$2$scrollBehavior(C.JSArray_methods.indexOf$1(nodes, foundNode), "auto");
    },
    _pushNextTable$3: function(current, next, inboundTree) {
      var t2, t3, t4, t5, t6, result, _this = this,
        t1 = _this.tableStack;
      while (true) {
        if (!((t1._tail - t1._head & t1._collection$_table.length - 1) >>> 0 > 1 && !J.$eq$(t1.get$last(t1), current)))
          break;
        t2 = t1._tail;
        t3 = t1._head;
        t4 = t1._collection$_table;
        t5 = t4.length;
        t6 = t5 - 1;
        if ((t2 - t3 & t6) >>> 0 === 2)
          _this._inboundTree = null;
        if (t3 === t2)
          H.throwExpression(H.IterableElementError_noElement());
        ++t1._modificationCount;
        t2 = t1._tail = (t2 - 1 & t6) >>> 0;
        if (t2 < 0 || t2 >= t5)
          return H.ioore(t4, t2);
        result = t4[t2];
        C.JSArray_methods.$indexSet(t4, t2, null);
        t2 = result.element.element;
        t3 = t2.parentNode;
        if (t3 != null)
          t3.removeChild(t2);
        result.get$model().set$client(0, null);
        t2 = result._resizeObserver;
        if (t2 != null)
          t2.disconnect();
      }
      if (next != null) {
        t2 = t1._head;
        t3 = t1._tail;
        t1._add$1(0, t1.$ti._precomputed1._as(next));
        _this.tableContainer.add$1(0, next.element);
        if (inboundTree != null)
          _this._inboundTree = inboundTree;
        if (t2 !== t3)
          next.element.clazz$1("margin-left");
        t1 = _this.tableContainer.element;
        J.scrollTo$1$x(t1, P.LinkedHashMap_LinkedHashMap$_literal(["left", C.JSNumber_methods.round$0(t1.scrollWidth), "top", 0, "behavior", "smooth"], type$.String, type$.dynamic));
      }
    },
    _pushNextTable$2: function(current, next) {
      return this._pushNextTable$3(current, next, null);
    },
    _resetAllocatorCounts$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, spinner, e, t1, t2, t3, capacityTrace, timestamp, exception, $async$exception;
      var $async$_resetAllocatorCounts$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "reset", 0);
              t1 = $async$self.memoryChart;
              t2 = t1.element;
              t3 = t2.style;
              if (t3.height !== "230px") {
                t3.height = "230px";
                t2.dispatchEvent(W.Event_Event$eventType("Event", "resize", true, true));
              }
              t1 = t1._plotlyChart;
              if (t1.eventTimeline == null)
                t1.createEventTimeline$0();
              capacityTrace = type$.Data._as(J.$index$asx(type$.List_dynamic._as(t1._memoryChart.element.data), 3));
              t2 = J.getInterceptor$x(capacityTrace);
              t3 = t2.get$x(capacityTrace);
              t2 = J.get$length$asx(t2.get$x(capacityTrace));
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              timestamp = H._asIntS(J.$index$asx(t3, t2 - 1));
              t1 = t1.eventTimeline;
              self.extendTraces1(t1._domName, [timestamp], [1], [t1.resetTraceIndex]);
              t1.displayDuration$2(timestamp, "r");
              $async$self.resetAccumulatorsButton.attribute$2("disabled", true);
              t1 = $async$self.tableStack;
              t2 = t1.get$first(t1).element.element.style;
              t2.display = "";
              spinner = type$.HtmlSpinner._as(t1.get$first(t1).element.add$1(0, G.HtmlSpinner_centered(C.List_empty0)));
              $async$handler = 4;
              t1 = $async$self.memoryController;
              $async$goto = 7;
              return P._asyncAwait(t1.getAllocationProfile$1$reset(true), $async$_resetAllocatorCounts$0);
            case 7:
              // returning from await.
              $async$self.set$originalHeapStats($async$result);
              $async$self.removeAllButClassesTableView$0();
              t1 = t1.settings;
              $async$self._displayClassesSnapshot$2$classPattern$hidePrivates(t1.pattern, t1.hidePrivateClasses);
              J.remove$0$ax(spinner.element);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              $async$self.framework.toast$2$title("Reset failed " + H.S(J.toString$0$(e)), "Error");
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$self.resetAccumulatorsButton.attribute$2("disabled", false);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_resetAllocatorCounts$0, $async$completer);
    },
    getKnownSnapshotClasses$0: function() {
      var t2, classesData, _i,
        t1 = this._knownSnapshotClasses;
      if (t1.length === 0) {
        t2 = this.tableStack;
        classesData = type$.List_ClassHeapDetailStats._as(t2.get$first(t2).get$model().data);
        for (t2 = classesData.length, _i = 0; _i < classesData.length; classesData.length === t2 || (0, H.throwConcurrentModificationError)(classesData), ++_i)
          C.JSArray_methods.add$1(t1, classesData[_i].classRef.name);
      }
      return t1;
    },
    _search$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, r, t2, nameHeight, leftPosition, t3;
      var $async$_search$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "search", 0);
              if (J.get$isEmpty$asx($async$self.heapPopupList.items.items))
                $async$self.heapPopupList.setList$1($async$self.getKnownSnapshotClasses$0());
              t1 = $async$self.vmSearchField.element.style;
              if (t1.visibility !== "visible") {
                t1.visibility = "visible";
                J.focus$0$x($async$self.vmSearchField.element);
                t1 = $async$self.heapAutoCompletePopup;
                t1.add$1(0, t1._listView);
                t1._html_popup$_matcher.selectFirstItem$0();
                r = t1._containerElement.element.getBoundingClientRect();
                t2 = t1._html_popup$_popupTextfield;
                nameHeight = J.round$0$n(t2.element.getBoundingClientRect().height);
                leftPosition = J.round$0$n(t2.element.getBoundingClientRect().left);
                t2 = t1.element.style;
                t3 = r.top;
                if (typeof t3 !== "number") {
                  $async$returnValue = t3.$add();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 = H.S(t3 + nameHeight) + "px";
                t2.top = t3;
                t3 = "" + leftPosition + "px";
                t2.left = t3;
                t2.display = "inline";
                t1._html_popup$_matcher.displayMatchingItems$1("");
              } else
                $async$self.heapAutoCompletePopup._html_popup$_matcher.finish$0(0);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_search$0, $async$completer);
    },
    _loadAllocationProfile$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, spinner, e, t1, t2, t3, capacityTrace, timestamp, exception, $async$exception;
      var $async$_loadAllocationProfile$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "snapshot", 0);
              t1 = $async$self.memoryChart;
              t2 = t1.element;
              t3 = t2.style;
              if (t3.height !== "230px") {
                t3.height = "230px";
                t2.dispatchEvent(W.Event_Event$eventType("Event", "resize", true, true));
              }
              t1 = t1._plotlyChart;
              if (t1.eventTimeline == null)
                t1.createEventTimeline$0();
              capacityTrace = type$.Data._as(J.$index$asx(type$.List_dynamic._as(t1._memoryChart.element.data), 3));
              t2 = J.getInterceptor$x(capacityTrace);
              t3 = t2.get$x(capacityTrace);
              t2 = J.get$length$asx(t2.get$x(capacityTrace));
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              timestamp = H._asIntS(J.$index$asx(t3, t2 - 1));
              t1 = t1.eventTimeline;
              self.extendTraces1(t1._domName, [timestamp], [1], [t1.snapshotTraceIndex]);
              t1.displayDuration$2(timestamp, "s");
              $async$self.heapPopupList.setList$1(H.setRuntimeTypeInfo([], type$.JSArray_String));
              $async$self.vmMemorySnapshotButton.attribute$2("disabled", true);
              t1 = $async$self.tableStack;
              t2 = t1.get$first(t1).element.element.style;
              t2.display = "";
              spinner = type$.HtmlSpinner._as(t1.get$first(t1).element.add$1(0, G.HtmlSpinner_centered(C.List_empty0)));
              $async$handler = 4;
              t1 = $async$self.memoryController;
              $async$goto = 7;
              return P._asyncAwait(t1.getAllocationProfile$0(), $async$_loadAllocationProfile$0);
            case 7:
              // returning from await.
              $async$self.set$originalHeapStats($async$result);
              J.remove$0$ax(spinner.element);
              $async$self.removeAllButClassesTableView$0();
              t1 = t1.settings;
              $async$self._displayClassesSnapshot$2$classPattern$hidePrivates(t1.pattern, t1.hidePrivateClasses);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              $async$self.framework.toast$2$title("Snapshot failed " + H.S(J.toString$0$(e)), "Error");
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$self.vmMemorySnapshotButton.attribute$2("disabled", false);
              $async$self.vmMemorySearchButton.attribute$2("disabled", false);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_loadAllocationProfile$0, $async$completer);
    },
    _matchPattern$2: function(classPattern, className) {
      var t1, index, startMatch, endMatch;
      classPattern = J.trim$0$s(classPattern);
      t1 = classPattern.length;
      if (t1 === 0)
        return true;
      if (!C.JSString_methods.contains$1(classPattern, "*"))
        return J.startsWith$1$s(className, classPattern);
      if (C.JSString_methods.startsWith$1(classPattern, "*"))
        return J.endsWith$1$s(className, C.JSString_methods.substring$1(classPattern, 1));
      else if (C.JSString_methods.endsWith$1(classPattern, "*"))
        return J.startsWith$1$s(className, C.JSString_methods.substring$2(classPattern, 0, t1 - 1));
      index = C.JSString_methods.indexOf$1(classPattern, "*");
      startMatch = C.JSString_methods.substring$2(classPattern, 0, index);
      endMatch = C.JSString_methods.substring$1(classPattern, index + 1);
      return J.getInterceptor$s(className).startsWith$1(className, startMatch) && C.JSString_methods.endsWith$1(className, endMatch);
    },
    _displayClassesSnapshot$2$classPattern$hidePrivates: function(classPattern, hidePrivates) {
      var t1, spinner, heapStats, t2, t3, t4, t5, t6, _this = this;
      if (_this.originalHeapStats == null)
        return;
      t1 = _this.tableStack;
      spinner = type$.HtmlSpinner._as(t1.get$first(t1).element.add$1(0, G.HtmlSpinner_centered(C.List_empty0)));
      heapStats = H.setRuntimeTypeInfo([], type$.JSArray_ClassHeapDetailStats);
      for (t2 = J.get$iterator$ax(_this.originalHeapStats), t3 = _this.memoryController; t2.moveNext$0();) {
        t4 = t2.get$current(t2);
        if (H.boolConversionCheck(hidePrivates) && J.startsWith$1$s(t4.classRef.name, "_"))
          continue;
        if (_this._matchPattern$2(classPattern, t4.classRef.name)) {
          t5 = t3.libraryCollection;
          t6 = t4.classRef.id;
          if (t5.displayClasses.containsKey$1(0, t6))
            C.JSArray_methods.add$1(heapStats, t4);
        }
      }
      C.JSArray_methods.set$length(_this._knownSnapshotClasses, 0);
      t1.get$first(t1).get$model().setRows$1(heapStats);
      _this._html_memory_screen$_updateStatus$1(heapStats);
      J.remove$0$ax(spinner.element);
    },
    _gcNow$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, e, exception, $async$exception;
      var $async$_gcNow$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "gc", 0);
              $async$self.gcNowButton.attribute$2("disabled", true);
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait($async$self.memoryController.gc$0(), $async$_gcNow$0);
            case 6:
              // returning from await.
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              $async$self.framework.toast$2$title("Unable to GC " + H.S(J.toString$0$(e)), "Error");
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              $async$self.gcNowButton.attribute$2("disabled", false);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_gcNow$0, $async$completer);
    },
    _updateListeningState$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$_updateListeningState$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceAvailable.future, $async$_updateListeningState$0);
            case 2:
              // returning from await.
              $async$goto = $async$self.get$isCurrentScreen() && $async$self.memoryController._memoryTracker == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self.memoryController.startTimeline$0(), $async$_updateListeningState$0);
            case 5:
              // returning from await.
              $async$self.pauseButton.attribute$2("disabled", false);
              $async$self.resumeButton.attribute$2("disabled", true);
              $async$self.vmMemorySnapshotButton.attribute$2("disabled", false);
              $async$self.resetAccumulatorsButton.attribute$2("disabled", false);
              $async$self.gcNowButton.attribute$2("disabled", false);
              $async$self.memoryChart.attribute$2("disabled", false);
            case 4:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_updateListeningState$0, $async$completer);
    },
    removeInstanceTableView$0: function() {
      var t1 = J.get$children$x(this.tableContainer.element);
      if (t1.get$length(t1) === 3)
        J.get$children$x(this.tableContainer.element).removeLast$0(0);
    },
    removeAllButClassesTableView$0: function() {
      while (true) {
        var t1 = J.get$children$x(this.tableContainer.element);
        t1 = t1.get$length(t1);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (!(t1 > 1))
          break;
        J.get$children$x(this.tableContainer.element).removeLast$0(0);
      }
    },
    _createHeapStatsTableView$0: function() {
      var t3, _null = null,
        _s11_ = "Accumulator",
        t1 = type$.ClassHeapDetailStats,
        table = Q.HtmlTable_HtmlTable$virtual(t1),
        t2 = table.element.element.style;
      t2.display = "none";
      table.element.clazz$1("memory-table");
      t2 = table.model;
      t3 = new Z.MemoryColumnSize("Size", _null, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Size", C.ColumnAlignment_0, _null, _null, false, _null, false, t1);
      t2.addColumn$1(t3);
      t3 = new Z.MemoryColumnInstanceCount("Count", _null, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Count", C.ColumnAlignment_0, _null, _null, false, _null, false, t1);
      t2.addColumn$1(t3);
      t3 = new Z.MemoryColumnInstanceAccumulatedCount(_s11_, _null, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s11_, C.ColumnAlignment_0, _null, _null, false, _null, false, t1);
      t2.addColumn$1(t3);
      t2.addColumn$1(new Z.MemoryColumnClassName("Class", _null, 100, C.ColumnAlignment_0));
      t2.set$sortColumn(C.JSArray_methods.get$first(t2._columns));
      t2 = t2.selectController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new O.HtmlMemoryScreen__createHeapStatsTableView_closure(this, table));
      return table;
    },
    displayInboundReferences$1: function(row) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.HtmlInboundsTree),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, t6, instanceNode, t7, inboundsTreeTable, treeData, t1, $async$temp1;
      var $async$displayInboundReferences$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              treeData = new T.InboundsTreeData();
              t1 = type$.JSArray_InboundsTreeNode;
              treeData.data = new T.InboundsTreeNode("Instances", null, "", null, H.setRuntimeTypeInfo([], t1));
              t2 = row.classRef;
              $async$temp1 = J;
              $async$goto = 3;
              return P._asyncAwait($async$self.memoryController.getInstances$3(t2.id, t2.name, row.instancesCurrent), $async$displayInboundReferences$1);
            case 3:
              // returning from await.
              t2 = $async$temp1.get$iterator$ax($async$result), t3 = type$.InboundsTreeNode._eval$1("TreeNode0.T");
            case 4:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t4 = t2.get$current(t2);
              t5 = t4.objectRef;
              t6 = H.setRuntimeTypeInfo([], t1);
              instanceNode = new T.InboundsTreeNode(t5, t4, "", null, t6);
              t4 = treeData.data;
              t4.toString;
              t5 = H._instanceType(t4)._eval$1("TreeNode0.T");
              t5._as(instanceNode);
              t7 = t4.children;
              C.JSArray_methods.add$1(t7, instanceNode);
              instanceNode.set$parent(0, t5._as(t4));
              instanceNode.index = t7.length - 1;
              t7 = t3._as(new T.InboundsTreeNode(null, null, null, null, H.setRuntimeTypeInfo([], t1)));
              C.JSArray_methods.add$1(t6, t7);
              t7.set$parent(0, t3._as(instanceNode));
              t7.index = t6.length - 1;
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              t1 = row.classRef.name;
              t2 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", null));
              inboundsTreeTable = new T.HtmlInboundsTree($async$self, treeData, t2);
              inboundsTreeTable.CoreElement$5$attributes$classes$html$text("div", null, "memory-table", null, null);
              inboundsTreeTable.flex$0(0);
              t2.setAttribute("layout", "");
              t2.setAttribute("vertical", "");
              inboundsTreeTable._html_memory_inbounds$_init$1(t1);
              inboundsTreeTable.update$0(0);
              $async$returnValue = inboundsTreeTable;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$displayInboundReferences$1, $async$completer);
    },
    computeInboundReference$2: function(objectRef, instanceNode) {
      return this.computeInboundReference$body$HtmlMemoryScreen(objectRef, instanceNode);
    },
    computeInboundReference$body$HtmlMemoryScreen: function(objectRef, instanceNode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, hashCodeResult, t2, t1, refs;
      var $async$computeInboundReference$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $async$goto = 3;
              return P._asyncAwait(O.getInboundReferences(objectRef, 1000), $async$computeInboundReference$2);
            case 3:
              // returning from await.
              refs = $async$result;
              t1.instanceHashCode = null;
              $async$goto = H.boolConversionCheck($async$self.memoryController.settings.experiment) && !$async$self.isProfileBuild ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait(O.evaluate(objectRef, "hashCode"), $async$computeInboundReference$2);
            case 6:
              // returning from await.
              hashCodeResult = $async$result;
              t1.instanceHashCode = hashCodeResult == null ? null : hashCodeResult.get$valueAsString(hashCodeResult);
            case 5:
              // join
              t2 = $async$self.tableStack;
              O.computeInboundRefs(type$.List_ClassHeapDetailStats._as(t2.get$first(t2).get$model().data), refs, new O.HtmlMemoryScreen_computeInboundReference_closure(t1, $async$self, instanceNode));
              $async$returnValue = t1.instanceHashCode;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$computeInboundReference$2, $async$completer);
    },
    findLostObjectRef$2: function(classRef, instanceHashCode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InstanceSummary),
        $async$returnValue, $async$self = this, t1, t2, $eval, classDetails, $async$temp1;
      var $async$findLostObjectRef$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              classDetails = $async$self.findClassDetails$1(classRef);
              $async$goto = classDetails != null ? 3 : 4;
              break;
            case 3:
              // then
              t1 = classDetails.classRef;
              $async$temp1 = J;
              $async$goto = 5;
              return P._asyncAwait($async$self.memoryController.getInstances$3(t1.id, t1.name, classDetails.instancesCurrent), $async$findLostObjectRef$2);
            case 5:
              // returning from await.
              t1 = $async$temp1.get$iterator$ax($async$result);
            case 6:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 7;
                break;
              }
              t2 = t1.get$current(t1);
              $async$goto = 8;
              return P._asyncAwait(O.evaluate(t2.objectRef, "hashCode"), $async$findLostObjectRef$2);
            case 8:
              // returning from await.
              $eval = $async$result;
              if (P.int_parse($eval == null ? null : $eval.get$valueAsString($eval), null, null) == instanceHashCode) {
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$findLostObjectRef$2, $async$completer);
    },
    getInstance$1: function(objectRef) {
      return this.getInstance$body$HtmlMemoryScreen(objectRef);
    },
    getInstance$body$HtmlMemoryScreen: function(objectRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Instance),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, theObject, e, exception, instance, $async$exception;
      var $async$getInstance$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              instance = null;
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait($async$self.memoryController.getObject$1(0, objectRef), $async$getInstance$1);
            case 7:
              // returning from await.
              theObject = $async$result;
              if (theObject instanceof Q.Instance)
                instance = theObject;
              else if (theObject instanceof Q.Sentinel) {
                instance = null;
                $async$self.framework.toast$2$title("Sentinel " + H.S(objectRef), "Warning");
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              F.error("Memory select (getInstance): " + H.S(e), false);
              instance = null;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = instance;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInstance$1, $async$completer);
    },
    select$1: function(_, rowNode) {
      return this.select$body$HtmlMemoryScreen(_, type$.InboundsTreeNode._as(rowNode));
    },
    select$body$HtmlMemoryScreen: function(_, rowNode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, instance, newInstance, t1, t2, t3;
      var $async$select$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "inspectInstance", 0);
              $async$self.removeInstanceTableView$0();
              if ((rowNode == null ? null : rowNode._instance) == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($async$self.getInstance$1(rowNode._instance.objectRef), $async$select$1);
            case 3:
              // returning from await.
              instance = $async$result;
              $async$goto = instance == null ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait($async$self.findLostObjectRef$2(rowNode._instance.classRef, P.int_parse(rowNode.instanceHashCode, null, null)), $async$select$1);
            case 6:
              // returning from await.
              newInstance = $async$result;
              $async$self.framework.toast$2$title("Re-computed " + H.S(rowNode._instance.objectRef) + " -> " + H.S(newInstance.objectRef), "Message");
              rowNode.setInstance$3(newInstance, rowNode.instanceHashCode, true);
              $async$goto = 7;
              return P._asyncAwait($async$self.getInstance$1(rowNode._instance.objectRef), $async$select$1);
            case 7:
              // returning from await.
              instance = $async$result;
              $async$self._inboundTree.update$0(0);
              $async$self._selectInstanceByObjectRef$1(rowNode._instance.objectRef);
            case 5:
              // join
              t1 = $async$self.tableContainer;
              t2 = instance != null;
              t3 = t2 ? rowNode._instance.objectRef : "Unable to fetch instance " + H.S(rowNode._html_memory_inbounds$_name);
              t1.add$1(0, $async$self._createInstanceView$2(t3, rowNode._instance.className));
              t3 = $async$self.tableContainer.element;
              J.scrollTo$1$x(t3, P.LinkedHashMap_LinkedHashMap$_literal(["left", C.JSNumber_methods.round$0(t3.scrollWidth), "top", 0, "behavior", "smooth"], type$.String, type$.dynamic));
              t3 = $async$self.memoryDataView;
              t1 = t2 ? instance.fields : H.setRuntimeTypeInfo([], type$.JSArray_BoundField);
              t3.toString;
              type$.List_BoundField._as(t1);
              t3._html_memory_data_view$_items.setItems$1(t1);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$select$1, $async$completer);
    },
    _createInstanceView$2: function(objectRef, className) {
      var t1, t2, _null = null;
      this.memoryDataView = A.HtmlMemoryDataView$(this.memoryController, new O.HtmlMemoryScreen__createInstanceView_closure(objectRef));
      t1 = A.CoreElement$("div", _null, "table-border table-virtual memory-table margin-left debugger-menu", _null, _null);
      t2 = t1.element;
      t2.setAttribute("layout", "");
      t2.setAttribute("vertical", "");
      t1.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$("div", _null, "memory-inspector", _null, H.S(className) + " instance " + H.S(objectRef)), this.memoryDataView._html_memory_data_view$_items], type$.JSArray_CoreElement));
      return t1;
    },
    _html_memory_screen$_updateStatus$1: function(data) {
      var t1, objectCount, _i, t2, _this = this;
      type$.List_ClassHeapDetailStats._as(data);
      t1 = _this.classCountStatus;
      if (data == null) {
        t1.element.element.textContent = "";
        _this.objectCountStatus.element.element.textContent = "";
      } else {
        t1.element.element.textContent = $.$get$nf().format$1(data.length) + " classes";
        for (t1 = data.length, objectCount = 0, _i = 0; _i < t1; ++_i) {
          t2 = data[_i].instancesCurrent;
          if (typeof t2 !== "number")
            return H.iae(t2);
          objectCount += t2;
        }
        _this.objectCountStatus.element.element.textContent = $.$get$nf().format$1(objectCount) + " objects";
      }
      t1 = _this.experimentStatus.element;
      t2 = H.boolConversionCheck(_this.memoryController.settings.experiment) && !_this.isProfileBuild ? "Experiment" : "Memory";
      t1.element.textContent = t2;
    },
    set$heapPopupList: function(heapPopupList) {
      this.heapPopupList = type$.HtmlPopupListView_String._as(heapPopupList);
    },
    set$originalHeapStats: function(originalHeapStats) {
      this.originalHeapStats = type$.List_ClassHeapDetailStats._as(originalHeapStats);
    },
    set$privateClasses: function(privateClasses) {
      this.privateClasses = type$.List_CoreElement._as(privateClasses);
    },
    set$experimentCheckbox: function(experimentCheckbox) {
      this.experimentCheckbox = type$.List_CoreElement._as(experimentCheckbox);
    },
    set$_currentHoverSummary: function(_currentHoverSummary) {
      this._currentHoverSummary = type$.HtmlHoverCell_InstanceSummary._as(_currentHoverSummary);
    }
  };
  O.HtmlMemoryScreen_createContent_closure.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this;
      t1.memoryController.settings.experiment = true;
      t2 = t1.experimentCheckbox;
      type$.CheckboxInputElement._as((t2 && C.JSArray_methods).get$first(t2).get$element()).checked = true;
      t1._loadAllocationProfile$0();
    },
    $signature: 0
  };
  O.HtmlMemoryScreen_createContent_closure0.prototype = {
    call$0: function() {
      var t1,
        _s8_ = "disabled";
      F.select("memory", "resume", 0);
      t1 = this.$this;
      t1.resumeButton.attribute$2(_s8_, true);
      t1.pauseButton.attribute$2(_s8_, false);
      t1.memoryChart._plotlyChart.liveUpdate = true;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen_createContent_closure1.prototype = {
    call$0: function() {
      var t1,
        _s8_ = "disabled";
      F.select("memory", "pause", 0);
      t1 = this.$this;
      t1.pauseButton.attribute$2(_s8_, true);
      t1.resumeButton.attribute$2(_s8_, false);
      t1.memoryChart._plotlyChart.liveUpdate = false;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen_createContent_closure2.prototype = {
    call$1: function(evt) {
      type$.MouseEvent._as(evt);
    },
    $signature: 6
  };
  O.HtmlMemoryScreen_createContent_closure3.prototype = {
    call$1: function(evt) {
      var t1;
      type$.MouseEvent._as(evt);
      t1 = this.$this;
      t1.set$_currentHoverSummary(null);
      t1 = t1.hoverPopup.element;
      J.get$children$x(t1).clear$0(0);
      t1 = t1.style;
      t1.display = "none";
    },
    $signature: 6
  };
  O.HtmlMemoryScreen_createContent_closure4.prototype = {
    call$1: function(__) {
      var _s8_ = "disabled",
        t1 = this.$this;
      t1.pauseButton.attribute$2(_s8_, true);
      t1.resumeButton.attribute$2(_s8_, true);
      t1.vmMemorySnapshotButton.attribute$2(_s8_, true);
      t1.resetAccumulatorsButton.attribute$2(_s8_, true);
      t1.settingsButton.attribute$2(_s8_, true);
      t1.gcNowButton.attribute$2(_s8_, true);
      t1.memoryChart.attribute$2(_s8_, true);
    },
    $signature: 27
  };
  O.HtmlMemoryScreen_createContent_closure5.prototype = {
    call$1: function(_) {
      var _s8_ = "disabled",
        t1 = this.$this;
      t1.vmMemorySnapshotButton.attribute$2(_s8_, false);
      t1.settingsButton.attribute$2(_s8_, false);
    },
    $signature: 2
  };
  O.HtmlMemoryScreen_createSettingsDialog_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.experimentCheckbox;
      t1.memoryController.settings.experiment = type$.CheckboxInputElement._as((t2 && C.JSArray_methods).get$first(t2).get$element()).checked;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen_findClass_closure.prototype = {
    call$1: function(stat) {
      return type$.ClassHeapDetailStats._as(stat).classRef.name == this.className;
    },
    $signature: 47
  };
  O.HtmlMemoryScreen_findClass_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen_findClassDetails_closure.prototype = {
    call$1: function(stat) {
      return type$.ClassHeapDetailStats._as(stat).classRef.id == this.classRefId;
    },
    $signature: 47
  };
  O.HtmlMemoryScreen_findClassDetails_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen__selectInstanceByObjectRef_closure.prototype = {
    call$1: function(node) {
      var t1 = type$.InboundsTreeNode._as(node)._instance;
      t1 = t1 == null ? null : t1.objectRef;
      return t1 == this.objectRefToFind;
    },
    $signature: 166
  };
  O.HtmlMemoryScreen__selectInstanceByObjectRef_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  O.HtmlMemoryScreen__createHeapStatsTableView_closure.prototype = {
    call$1: function(row) {
      return this.$call$body$HtmlMemoryScreen__createHeapStatsTableView_closure(type$.ClassHeapDetailStats._as(row));
    },
    $call$body$HtmlMemoryScreen__createHeapStatsTableView_closure: function(row) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, inboundTree;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              F.select("memory", "inspectClass", 0);
              t1 = $async$self.$this;
              t1.removeInstanceTableView$0();
              $async$goto = row == null ? 2 : 4;
              break;
            case 2:
              // then
              $async$result = null;
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 5;
              return P._asyncAwait(t1.displayInboundReferences$1(row), $async$call$1);
            case 5:
              // returning from await.
            case 3:
              // join
              inboundTree = $async$result;
              if (inboundTree != null)
                t1._pushNextTable$3($async$self.table, inboundTree.referencesTable, inboundTree);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 167
  };
  O.HtmlMemoryScreen_computeInboundReference_closure.prototype = {
    call$3: function(referenceName, owningAllocator, owningAllocatorIsAbstract) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, inboundNode, t2;
      var $async$call$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!H.boolConversionCheck(owningAllocatorIsAbstract) && owningAllocator.length !== 0) {
                t1 = type$.JSArray_InboundsTreeNode;
                inboundNode = new T.InboundsTreeNode(owningAllocator, null, referenceName, $async$self._box_0.instanceHashCode, H.setRuntimeTypeInfo([], t1));
                $async$self.instanceNode.addChild$1(inboundNode);
                t2 = $async$self.$this;
                if (H.boolConversionCheck(t2.memoryController.settings.experiment) && !t2.isProfileBuild)
                  inboundNode.addChild$1(new T.InboundsTreeNode(null, null, null, null, H.setRuntimeTypeInfo([], t1)));
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$3, $async$completer);
    },
    $signature: 91
  };
  O.HtmlMemoryScreen__createInstanceView_closure.prototype = {
    call$1: function(field) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, value;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              value = field.value;
              if (value instanceof Q.Sentinel) {
                $async$returnValue = value.valueAsString;
                // goto return
                $async$goto = 1;
                break;
              }
              if (type$.TypeArgumentsRef._is(value)) {
                $async$returnValue = value.get$name(value);
                // goto return
                $async$goto = 1;
                break;
              }
              type$.InstanceRef._as(value);
              if ((value == null ? null : value.get$valueAsString(value)) != null && !H.boolConversionCheck(value.get$valueAsStringIsTruncated())) {
                $async$returnValue = value.get$valueAsString(value);
                // goto return
                $async$goto = 1;
                break;
              } else
                F.error("Memory _createInstanceView: UNKNOWN BoundField " + H.S($async$self.objectRef), false);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 168
  };
  O.NavigationState.prototype = {
    get$isClass: function() {
      return this._className.length !== 0 && this.field.length === 0 && true;
    }
  };
  O.NavigationPath.prototype = {
    add$1: function(_, state) {
      var lastState,
        t1 = state._className,
        t2 = t1.length !== 0;
      t2;
      t2;
      this._inboundFieldName = "";
      t2 = this._path;
      if (t2.length !== 0) {
        lastState = C.JSArray_methods.get$last(t2);
        if (lastState.get$isClass() && state.get$isClass() && lastState._className === t1)
          return;
      }
      C.JSArray_methods.add$1(t2, state);
    }
  };
  O._HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin.prototype = {};
  T.MemoryController.prototype = {
    _memory_controller$_handleConnectionStart$1: function(service) {
      var t1;
      type$.VmServiceWrapper._as(service);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_HeapSample);
      t1 = new T.MemoryTracker(service, t1, P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_HeapSpace), new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_void));
      this._memoryTracker = t1;
      t1.start$0(0);
      t1 = this._memoryTracker._memory_protocol$_changeController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new T.MemoryController__handleConnectionStart_closure(this));
    },
    _memory_controller$_handleConnectionStop$1: function($event) {
      var t2, _this = this,
        t1 = _this._memoryTracker;
      if (t1 != null) {
        t2 = t1._pollingTimer;
        if (t2 != null)
          t2.cancel$0(0);
        t1.service = null;
      }
      _this._memoryTrackerController.add$1(0, _this._memoryTracker);
      _this._disconnectController.add$1(0, null);
    },
    startTimeline$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$startTimeline$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolateController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new T.MemoryController_startTimeline_closure($async$self));
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionAvailableController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1($async$self.get$_memory_controller$_handleConnectionStart());
              if (t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection())
                $async$self._memory_controller$_handleConnectionStart$1(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service);
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionClosedController;
              new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1($async$self.get$_memory_controller$_handleConnectionStop());
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$startTimeline$0, $async$completer);
    },
    getAllocationProfile$1$reset: function(reset) {
      return this.getAllocationProfile$body$MemoryController(reset);
    },
    getAllocationProfile$0: function() {
      return this.getAllocationProfile$1$reset(false);
    },
    getAllocationProfile$body$MemoryController: function(reset) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_ClassHeapDetailStats),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], t1, t2, exception, t3, allocationProfile, $async$exception;
      var $async$getAllocationProfile$1$reset = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              allocationProfile = null;
              $async$handler = 4;
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 7;
              return P._asyncAwait(t2.getAllocationProfile$2$reset(t1.get$id(t1), reset), $async$getAllocationProfile$1$reset);
            case 7:
              // returning from await.
              allocationProfile = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (H.unwrapException($async$exception) instanceof Q.SentinelException) {
                $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_ClassHeapDetailStats);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t1 = allocationProfile.members;
              t1.toString;
              t2 = H._arrayInstanceType(t1);
              t3 = t2._eval$1("MappedListIterable<1,ClassHeapDetailStats>");
              t3 = new H.MappedListIterable(t1, t2._eval$1("ClassHeapDetailStats(1)")._as(new T.MemoryController_getAllocationProfile_closure()), t3).super$Iterable$where(0, t3._eval$1("bool(ListIterable.E)")._as(new T.MemoryController_getAllocationProfile_closure0()));
              $async$returnValue = P.List_List$from(t3, true, t3.$ti._eval$1("Iterable.E"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$getAllocationProfile$1$reset, $async$completer);
    },
    getInstances$3: function(classRef, className, maxInstances) {
      return this.getInstances$body$MemoryController(classRef, className, maxInstances);
    },
    getInstances$body$MemoryController: function(classRef, className, maxInstances) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_InstanceSummary),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], t1, t2, exception, instanceSet, $async$exception;
      var $async$getInstances$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              instanceSet = null;
              $async$handler = 4;
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 7;
              return P._asyncAwait(t2.getInstances$4$classId(t1.get$id(t1), classRef, maxInstances, classRef), $async$getInstances$3);
            case 7:
              // returning from await.
              instanceSet = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (H.unwrapException($async$exception) instanceof Q.SentinelException) {
                $async$returnValue = H.setRuntimeTypeInfo([], type$.JSArray_InstanceSummary);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t1 = instanceSet.instances;
              t1.toString;
              t2 = H._arrayInstanceType(t1);
              $async$returnValue = new H.MappedListIterable(t1, t2._eval$1("InstanceSummary(1)")._as(new T.MemoryController_getInstances_closure(classRef, className)), t2._eval$1("MappedListIterable<1,InstanceSummary>")).toList$0(0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInstances$3, $async$completer);
    },
    computeLibraries$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, t2;
      var $async$computeLibraries$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.libraryCollection == null) {
                t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
                t2 = type$.VM;
                t1._trackFuture$1$2("getVM", t1._vmService._call$1$1(0, "getVM", t2), t2).then$1$1(new T.MemoryController_computeLibraries_closure($async$self), type$.void);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$computeLibraries$0, $async$completer);
    },
    getObject$1: function(_, objectRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, t1, t2;
      var $async$getObject$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              t1 = t1.get$id(t1);
              $async$goto = 3;
              return P._asyncAwait(t2._trackFuture$1$2("getObject", t2._vmService.getObject$2(0, t1, objectRef), type$.Obj), $async$getObject$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getObject$1, $async$completer);
    },
    gc$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        t1, t2;
      var $async$gc$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 2;
              return P._asyncAwait(t2.getAllocationProfile$2$gc(t1.get$id(t1), true), $async$gc$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$gc$0, $async$completer);
    },
    matchObject$3: function(objectRef, fieldName, instanceHashCode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, fields, t1, t2, _i, field, t3, ref, evalResult, object;
      var $async$matchObject$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.getObject$1(0, objectRef), $async$matchObject$3);
            case 3:
              // returning from await.
              object = $async$result;
              $async$goto = object instanceof Q.Instance ? 4 : 5;
              break;
            case 4:
              // then
              fields = object.fields;
              t1 = fields.length, t2 = type$.InstanceRef, _i = 0;
            case 6:
              // for condition
              if (!(_i < fields.length)) {
                // goto after for
                $async$goto = 8;
                break;
              }
              field = fields[_i];
              t3 = field.decl;
              $async$goto = t3.get$name(t3) == fieldName ? 9 : 10;
              break;
            case 9:
              // then
              ref = t2._as(field.value);
              if (ref == null) {
                // goto for update
                $async$goto = 7;
                break;
              }
              $async$goto = 11;
              return P._asyncAwait(O.evaluate(ref.get$id(ref), "hashCode"), $async$matchObject$3);
            case 11:
              // returning from await.
              evalResult = $async$result;
              if (P.int_parse(evalResult == null ? null : evalResult.get$valueAsString(evalResult), null, null) == instanceHashCode) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
            case 10:
              // join
            case 7:
              // for update
              fields.length === t1 || (0, H.throwConcurrentModificationError)(fields), ++_i;
              // goto for condition
              $async$goto = 6;
              break;
            case 8:
              // after for
            case 5:
              // join
              if (object instanceof Q.Sentinel)
                B.log("Trying to matchObject with a Sentinel " + H.S(objectRef), C.LogLevel_2);
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$matchObject$3, $async$completer);
    }
  };
  T.MemoryController__handleConnectionStart_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1._memoryTrackerController.add$1(0, t1._memoryTracker);
    },
    $signature: 27
  };
  T.MemoryController_startTimeline_closure.prototype = {
    call$1: function(_) {
      type$.IsolateRef._as(_);
    },
    $signature: 38
  };
  T.MemoryController_getAllocationProfile_closure.prototype = {
    call$1: function(stats) {
      var t1 = type$.ClassHeapStats._as(stats).json,
        t2 = new T.ClassHeapDetailStats(t1),
        t3 = J.getInterceptor$asx(t1),
        t4 = type$.Map_String_dynamic._as(t3.$index(t1, "class"));
      t2.classRef = t4 == null ? null : Q.ClassRef$_fromJson(t4);
      if (type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.protocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 18, 0))) {
        t2.instancesCurrent = H._asIntS(t3.$index(t1, "instancesCurrent"));
        t2.instancesAccumulated = H._asIntS(t3.$index(t1, "instancesAccumulated"));
        t2.bytesCurrent = H._asIntS(t3.$index(t1, "bytesCurrent"));
        t2.bytesAccumulated = H._asIntS(t3.$index(t1, "bytesAccumulated"));
      } else {
        t4 = type$.List_dynamic;
        t2._update$1(0, t4._as(t3.$index(t1, "new")));
        t2._update$1(0, t4._as(t3.$index(t1, "old")));
      }
      return t2;
    },
    $signature: 169
  };
  T.MemoryController_getAllocationProfile_closure0.prototype = {
    call$1: function(stats) {
      var t1;
      type$.ClassHeapDetailStats._as(stats);
      t1 = stats.instancesCurrent;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 <= 0) {
        t1 = stats.instancesAccumulated;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 0;
      } else
        t1 = true;
      return t1;
    },
    $signature: 47
  };
  T.MemoryController_getInstances_closure.prototype = {
    call$1: function(ref) {
      type$.ObjRef._as(ref);
      return new T.InstanceSummary(this.classRef, this.className, ref.get$id(ref));
    },
    $signature: 170
  };
  T.MemoryController_computeLibraries_closure.prototype = {
    call$1: function(vm) {
      var t2,
        t1 = type$.VM._as(vm).isolates;
      t1.toString;
      t2 = H._arrayInstanceType(t1);
      P.Future_wait(new H.MappedListIterable(t1, t2._eval$1("Future<Isolate>(1)")._as(new T.MemoryController_computeLibraries__closure()), t2._eval$1("MappedListIterable<1,Future<Isolate>>")), type$.Isolate).then$1$1(new T.MemoryController_computeLibraries__closure0(this.$this), type$.Null);
    },
    $signature: 171
  };
  T.MemoryController_computeLibraries__closure.prototype = {
    call$1: function(ref) {
      var t1, t2, t3, t4, t5,
        _s10_ = "getIsolate";
      type$.IsolateRef._as(ref);
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
      t2 = ref.get$id(ref);
      t3 = t1._vmService;
      t3.toString;
      t4 = type$.dynamic;
      t5 = type$.Isolate;
      return t1._trackFuture$1$2(_s10_, t3._call$1$2(0, _s10_, P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5);
    },
    $signature: 94
  };
  T.MemoryController_computeLibraries__closure0.prototype = {
    call$1: function(isolates) {
      var t1, t2, t3, t4, t5, t6, _i, libraryRef, t7, t8, t9;
      type$.List_Isolate._as(isolates);
      t1 = this.$this;
      t2 = type$.String;
      t1.libraryCollection = new T.LibraryCollection(t1.libraryFilters, P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.List_Library), P.LinkedHashMap_LinkedHashMap$_empty(t2, t2));
      for (t2 = J.get$first$ax(isolates).libraries, t3 = t2.length, t4 = type$.ServiceConnectionManager, t5 = type$.Obj, t6 = type$.Null, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        libraryRef = t2[_i];
        t7 = t4._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
        t8 = t4._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
        t8 = t8.get$id(t8);
        t9 = J.get$id$x(libraryRef);
        t7._trackFuture$1$2("getObject", t7._vmService.getObject$2(0, t8, t9), t5).then$1$1(new T.MemoryController_computeLibraries___closure(t1), t6);
      }
      t1.libraryCollection.computeDisplayClasses$0();
    },
    $signature: 173
  };
  T.MemoryController_computeLibraries___closure.prototype = {
    call$1: function(theLibrary) {
      var t1, normalizedUri, t2;
      type$.Obj._as(theLibrary);
      t1 = this.$this.libraryCollection;
      type$.Library._as(theLibrary);
      t1.toString;
      normalizedUri = T.FilteredLibraries_normalizeLibraryUri(theLibrary);
      t2 = t1.librarires;
      if (t2.$index(0, normalizedUri) == null)
        t2.$indexSet(0, normalizedUri, H.setRuntimeTypeInfo([theLibrary], type$.JSArray_Library));
      else {
        t2 = t2.$index(0, normalizedUri);
        (t2 && C.JSArray_methods).add$1(t2, theLibrary);
      }
      t1._filterOrShowClasses$1(theLibrary);
    },
    $signature: 174
  };
  T.SettingsModel.prototype = {};
  T.FilteredLibraries.prototype = {};
  T.LibraryCollection.prototype = {
    _filterOrShowClasses$1: function(library) {
      var t1, t2, t3, _i;
      if (C.JSArray_methods.contains$1(this._libraryFilters._filteredLibraries, T.FilteredLibraries_normalizeLibraryUri(library)))
        return;
      for (t1 = library.classes, t2 = t1.length, t3 = this.displayClasses, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t3.$indexSet(0, J.get$id$x(t1[_i]), library.id);
    },
    computeDisplayClasses$1: function(filters) {
      var _this = this,
        librariesFiltered = filters == null ? _this._libraryFilters : filters;
      _this.displayClasses.clear$0(0);
      _this.librarires.forEach$1(0, new T.LibraryCollection_computeDisplayClasses_closure(_this, librariesFiltered));
    },
    computeDisplayClasses$0: function() {
      return this.computeDisplayClasses$1(null);
    }
  };
  T.LibraryCollection_computeDisplayClasses_closure.prototype = {
    call$2: function(normalizedUri, libraries) {
      var t1, t2, t3, t4, _i, t5;
      H._asStringS(normalizedUri);
      type$.List_Library._as(libraries);
      t1 = this.librariesFiltered._filteredLibraries;
      t1 = H.setRuntimeTypeInfo(t1.slice(0), H._arrayInstanceType(t1)._eval$1("JSArray<1>"));
      if (C.JSArray_methods.contains$1(t1, normalizedUri))
        for (t1 = J.get$iterator$ax(libraries), t2 = this.$this.displayClasses; t1.moveNext$0();)
          for (t3 = t1.get$current(t1).classes, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i)
            t2.remove$1(0, J.get$id$x(t3[_i]));
      else
        for (t1 = J.get$iterator$ax(libraries), t2 = this.$this.displayClasses; t1.moveNext$0();) {
          t3 = t1.get$current(t1);
          for (t4 = t3.classes, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i)
            t2.$indexSet(0, J.get$id$x(t4[_i]), t3.id);
        }
    },
    $signature: 175
  };
  Z.MemoryColumnClassName.prototype = {
    getValue$1: function(dataObject) {
      return type$.ClassHeapDetailStats._as(dataObject).classRef.name;
    }
  };
  Z.MemoryColumnSize.prototype = {
    get$numeric: function() {
      return true;
    },
    getValue$1: function(dataObject) {
      return type$.ClassHeapDetailStats._as(dataObject).bytesCurrent;
    },
    render$1: function(value) {
      var t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 1024))
        return " " + K.ColumnData_fastIntl(H._asNumS(value));
      else
        return " " + K.ColumnData_fastIntl(t1.$tdiv(value, 1024)) + "k";
    }
  };
  Z.MemoryColumnInstanceCount.prototype = {
    get$numeric: function() {
      return true;
    },
    getValue$1: function(dataObject) {
      return type$.ClassHeapDetailStats._as(dataObject).instancesCurrent;
    },
    render$1: function(value) {
      return K.ColumnData_fastIntl(H._asNumS(value));
    }
  };
  Z.MemoryColumnInstanceAccumulatedCount.prototype = {
    get$numeric: function() {
      return true;
    },
    getValue$1: function(dataObject) {
      return type$.ClassHeapDetailStats._as(dataObject).instancesAccumulated;
    },
    render$1: function(value) {
      return K.ColumnData_fastIntl(H._asNumS(value));
    }
  };
  M.MemoryPlotly.prototype = {
    getXAxisLayout$2: function(startTime, endTime) {
      var t1 = {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)},
        t2 = {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)},
        t3 = Y.colorToCss(S.Color$fromARGB(50, 187, 187, 187)),
        t4 = startTime === -1,
        t5 = type$.JSArray_num;
      t5 = t4 ? H.setRuntimeTypeInfo([], t5) : H.setRuntimeTypeInfo([startTime, endTime], t5);
      t4 = t4 ? {} : {autorange: true};
      return {tickformat: "%-I:%M:%S %p", type: "date", range: t5, rangeslider: t4, showgrid: true, tickfont: t2, hoverformat: "%H:%M:%S.%L %p", titlefont: t1, gridcolor: t3, gridwidth: 1};
    },
    getXAxisLayout$0: function() {
      return this.getXAxisLayout$2(-1, -1);
    },
    getMemoryLayout$2: function(chartTitle, addEventTimeline) {
      var t4, t5, t6, t7, layout,
        t1 = new M.MemoryPlotly_getMemoryLayout_getYAxis(),
        t2 = new M.MemoryPlotly_getMemoryLayout_getLegend(),
        margins = {l: 80, r: 5, b: 5, t: 5, pad: 5},
        t3 = type$.JSArray_num;
      if (addEventTimeline) {
        t4 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025);
        t5 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025);
        t6 = this.getXAxisLayout$0();
        t1 = t1.call$1(H.setRuntimeTypeInfo([0, 0.9], t3));
        t7 = H.setRuntimeTypeInfo([0.9, 1], t3);
        t3 = H.setRuntimeTypeInfo([0.5, 1.5], t3);
        t7 = {ticks: "", title: {text: "Events", font: {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371), size: 10}}, type: "linear", range: t3, showgrid: false, showticklabels: false, domain: t7, zeroline: false, anchor: "y", side: "right", showline: false};
        t2 = t2.call$1(true);
        layout = {title: chartTitle, xaxis: t6, yaxis: t1, yaxis2: t7, margin: margins, shapes: H.setRuntimeTypeInfo([{type: "rect", xref: "paper", yref: "y2", layer: "below", x0: 0, y0: 0, x1: 1, y1: 2, line: {width: 0}, fillcolor: "#ccc", opacity: 0.5}], type$.JSArray_Shape), legend: t2, plot_bgcolor: t4, paper_bgcolor: t5};
      } else {
        t4 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025);
        t5 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025);
        t2 = t2.call$0();
        layout = {title: chartTitle, xaxis: this.getXAxisLayout$0(), yaxis: t1.call$1(H.setRuntimeTypeInfo([], t3)), margin: margins, legend: t2, plot_bgcolor: t4, paper_bgcolor: t5};
      }
      return layout;
    },
    _createTrace$6$color$dash$group$size$symbol: function($name, color, dash, group, size, symbol) {
      var widthValue, modeName, line, marker, t1, t2;
      if (color != null) {
        if (dash != null) {
          widthValue = 2;
          modeName = "lines";
        } else {
          widthValue = 0;
          modeName = "";
        }
        line = {color: color, dash: dash, width: widthValue};
      } else {
        modeName = "";
        line = null;
      }
      if (symbol != null) {
        marker = {color: color, symbol: symbol, size: size};
        modeName = "markers";
      } else
        marker = null;
      t1 = type$.JSArray_String;
      if (marker == null) {
        t1 = H.setRuntimeTypeInfo([], t1);
        t2 = group != null ? "one" : "";
        return {x: [null], y: [null], type: "scatter", mode: modeName, line: line, name: $name, text: t1, stackgroup: t2, hoverinfo: "y+name"};
      } else {
        t1 = H.setRuntimeTypeInfo([], t1);
        t2 = group != null ? "one" : "";
        return {x: [null], y: [null], type: "scatter", mode: modeName, marker: marker, name: $name, text: t1, stackgroup: t2, hoverinfo: "y+name"};
      }
    },
    _createTrace$4$color$size$symbol: function($name, color, size, symbol) {
      return this._createTrace$6$color$dash$group$size$symbol($name, color, null, null, size, symbol);
    },
    _createTrace$3$color$group: function($name, color, group) {
      return this._createTrace$6$color$dash$group$size$symbol($name, color, null, group, null, null);
    },
    _createTrace$3$color$dash: function($name, color, dash) {
      return this._createTrace$6$color$dash$group$size$symbol($name, color, dash, null, null, null);
    },
    createMemoryTraces$0: function() {
      var externalTrace, usedTrace, capacityTrace, rssTrace, _this = this,
        gcTrace = _this._createTrace$4$color$size$symbol("GC", $.$get$MemoryPlotly_gcColor(), 10, "circle");
      J.set$hoverinfo$x(gcTrace, "x+name");
      externalTrace = _this._createTrace$3$color$group("External", $.$get$MemoryPlotly_externalColor(), "one");
      usedTrace = _this._createTrace$3$color$group("Used", $.$get$MemoryPlotly_usedColor(), "one");
      capacityTrace = _this._createTrace$3$color$dash("Capacity", $.$get$MemoryPlotly_capacityColor(), "dot");
      rssTrace = _this._createTrace$3$color$dash("RSS", $.$get$MemoryPlotly_rssColor(), "dash");
      J.set$visible$x(rssTrace, "legendonly");
      return H.setRuntimeTypeInfo([gcTrace, externalTrace, usedTrace, capacityTrace, rssTrace], type$.JSArray_Data);
    },
    _doubleClick$1: function(data) {
      type$.DataEvent._as(data);
      this._memoryChart._plotlyChart.liveUpdate = true;
      return null;
    },
    createEventTimeline$0: function() {
      var eventTraces, t3, _this = this,
        memoryTraces = _this.createMemoryTraces$0(),
        t1 = _this._domName,
        t2 = new M.EventTimeline(Y.colorToCss(C.ThemedColor_Color_4278190335_Color_4279786209), Y.colorToCss(C.ThemedColor_Color_4278190335_Color_4279786209), Y.colorToCss(C.ThemedColor_Color_4289450719_Color_4286166774), t1, _this._memoryChart.element);
      _this.eventTimeline = t2;
      eventTraces = t2.getEventTimelineTraces$0();
      t2 = _this.eventTimeline;
      t2.toString;
      t3 = type$.List_Data._as(memoryTraces).length;
      t2.resetTraceIndex = t3;
      t2.snapshotTraceIndex = t3 + 1;
      self.Plotly.relayout(t1, _this.getMemoryLayout$2("", true));
      t3 = _this.eventTimeline;
      self.Plotly.addTraces(t1, eventTraces, H.setRuntimeTypeInfo([t3.resetTraceIndex, t3.snapshotTraceIndex], type$.JSArray_int));
    }
  };
  M.MemoryPlotly_getMemoryLayout_getYAxis.prototype = {
    call$1: function(range) {
      var t1;
      type$.List_num._as(range);
      t1 = {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)};
      return {fixedrange: true, showgrid: false, tickfont: {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}, titlefont: t1, domain: range, zeroline: false};
    },
    $signature: 177
  };
  M.MemoryPlotly_getMemoryLayout_getLegend.prototype = {
    call$1: function(events) {
      return events ? {orientation: "v", x: 1.03, y: 1.1, font: {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}, xanchor: "left"} : {font: {family: "sans-serif", color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}};
    },
    call$0: function() {
      return this.call$1(false);
    },
    $signature: 178
  };
  M.EventTimeline.prototype = {
    getEventTimelineTraces$0: function() {
      var t1 = this._eventBgColorCss;
      return H.setRuntimeTypeInfo([{x: [null], y: [null], type: "scatter", mode: "markers", marker: {color: this._resetColorCss, symbol: "hexagon2-open-dot", size: 5, line: {color: t1, width: 2}}, name: "Reset", hoverinfo: "name+x", showlegend: true, yaxis: "y2"}, {x: [null], y: [null], type: "scatter", mode: "markers", marker: {color: this._snapshotColorCss, symbol: "hexagon2-open", size: 10, line: {color: t1, width: 2}}, name: "Snapshot", hoverinfo: "name+x", showlegend: true, yaxis: "y2"}], type$.JSArray_Data);
    },
    displayDuration$2: function(time, eventType) {
      var nextShape, _this = this;
      if (eventType === "s") {
        _this.lastEventType = eventType;
        _this.lastEventTime = time;
        return;
      }
      nextShape = J.get$length$asx(J.get$shapes$x(type$.Layout._as(_this._chart.layout)));
      self.Plotly.relayout(_this._domName, self.createEventShape("mem: " + _this.lastEventType + " > " + eventType, nextShape, _this.lastEventTime, time));
      _this.lastEventTime = time;
      _this.lastEventType = eventType;
    }
  };
  T.MemoryTracker.prototype = {
    start$0: function(_) {
      var t1, _this = this;
      _this._pollingTimer = P.Timer_Timer(C.Duration_500000, _this.get$_pollMemory());
      t1 = _this.service._vmService._getEventController$1("GC");
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(_this.get$_handleGCEvent());
    },
    _handleGCEvent$1: function($event) {
      var t1, t2, t3, t4, heaps;
      type$.Event_2._as($event);
      t1 = $event.json;
      t2 = J.getInterceptor$asx(t1);
      t3 = type$.Map_String_dynamic;
      t4 = t3._as(t2.$index(t1, "new"));
      t4 = t4 == null ? null : L.HeapSpace$_fromJson(t4);
      t1 = t3._as(t2.$index(t1, "old"));
      heaps = H.setRuntimeTypeInfo([t4, t1 == null ? null : L.HeapSpace$_fromJson(t1)], type$.JSArray_HeapSpace);
      t1 = $event.isolate;
      this.isolateHeaps.$indexSet(0, t1.get$id(t1), type$.List_HeapSpace._as(heaps));
      this._recalculate$1(true);
    },
    _pollMemory$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, vm, t1, $async$temp1;
      var $async$_pollMemory$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.service;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = type$.VM;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getVM", t1._vmService._call$1$1(0, "getVM", t2), t2), $async$_pollMemory$0);
            case 3:
              // returning from await.
              vm = $async$result;
              t2 = vm.isolates;
              t2.toString;
              t1 = H._arrayInstanceType(t2);
              $async$temp1 = vm;
              $async$goto = 4;
              return P._asyncAwait(P.Future_wait(new H.MappedListIterable(t2, t1._eval$1("Future<Isolate>(1)")._as(new T.MemoryTracker__pollMemory_closure($async$self)), t1._eval$1("MappedListIterable<1,Future<Isolate>>")), type$.Isolate), $async$_pollMemory$0);
            case 4:
              // returning from await.
              $async$self._update$2(0, $async$temp1, $async$result);
              $async$self._pollingTimer = P.Timer_Timer(C.Duration_500000, $async$self.get$_pollMemory());
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_pollMemory$0, $async$completer);
    },
    _update$2: function(_, vm, isolates) {
      var t1, t2, t3, heaps;
      type$.List_Isolate._as(isolates);
      this.processRss = H._asIntS(J.$index$asx(vm.json, "_currentRSS"));
      t1 = this.isolateHeaps;
      t1.clear$0(0);
      for (t2 = J.get$iterator$ax(isolates); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        heaps = T.MemoryTracker_getHeaps(t3).toList$0(0);
        t1.$indexSet(0, t3.id, heaps);
      }
      this._recalculate$0();
    },
    _recalculate$1: function(fromGC) {
      var t1, t2, total, used, capacity, $external, t3, t4, t5, t6, time, _this = this;
      for (t1 = _this.isolateHeaps, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t2 = type$.int, total = 0, used = 0, capacity = 0, $external = 0; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t4 = J.getInterceptor$ax(t3);
        t5 = t4.fold$1$2(t3, 0, new T.MemoryTracker__recalculate_closure(), t2);
        if (typeof t5 !== "number")
          return H.iae(t5);
        used += t5;
        t5 = t4.fold$1$2(t3, 0, new T.MemoryTracker__recalculate_closure0(), t2);
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t4.fold$1$2(t3, 0, new T.MemoryTracker__recalculate_closure1(), t2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        $external += t6;
        capacity = capacity + t5 + $external;
        t3 = t4.fold$1$2(t3, 0, new T.MemoryTracker__recalculate_closure2(), t2);
        if (typeof t3 !== "number")
          return H.iae(t3);
        total += t3;
      }
      time = Date.now();
      t1 = _this.samples;
      if (t1.length !== 0)
        time = Math.max(time, C.JSArray_methods.get$last(t1).timestamp);
      C.JSArray_methods.add$1(t1, new E.HeapSample(time, _this.processRss, capacity, used, $external, fromGC));
      _this._memory_protocol$_changeController.add$1(0, null);
    },
    _recalculate$0: function() {
      return this._recalculate$1(false);
    }
  };
  T.MemoryTracker__pollMemory_closure.prototype = {
    call$1: function(ref) {
      return this.$call$body$MemoryTracker__pollMemory_closure(type$.IsolateRef._as(ref));
    },
    $call$body$MemoryTracker__pollMemory_closure: function(ref) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Isolate),
        $async$returnValue, $async$self = this, t4, t5, t1, t2, t3;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this.service;
              t2 = ref.get$id(ref);
              t3 = t1._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Isolate;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getIsolate", t3._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 94
  };
  T.MemoryTracker__recalculate_closure.prototype = {
    call$2: function(i, heap) {
      var t1;
      H._asIntS(i);
      t1 = type$.HeapSpace._as(heap).used;
      if (typeof i !== "number")
        return i.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return i + t1;
    },
    $signature: 41
  };
  T.MemoryTracker__recalculate_closure0.prototype = {
    call$2: function(i, heap) {
      var t1;
      H._asIntS(i);
      t1 = type$.HeapSpace._as(heap).capacity;
      if (typeof i !== "number")
        return i.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return i + t1;
    },
    $signature: 41
  };
  T.MemoryTracker__recalculate_closure1.prototype = {
    call$2: function(i, heap) {
      var t1;
      H._asIntS(i);
      t1 = type$.HeapSpace._as(heap).external;
      if (typeof i !== "number")
        return i.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return i + t1;
    },
    $signature: 41
  };
  T.MemoryTracker__recalculate_closure2.prototype = {
    call$2: function(i, heap) {
      var t1, t2;
      H._asIntS(i);
      type$.HeapSpace._as(heap);
      t1 = heap.capacity;
      if (typeof i !== "number")
        return i.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = heap.external;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return i + t1 + t2;
    },
    $signature: 41
  };
  T.MemoryTracker_getHeaps_closure.prototype = {
    call$1: function(json) {
      type$.Map_String_dynamic._as(json);
      return json == null ? null : L.HeapSpace$_fromJson(json);
    },
    $signature: 180
  };
  T.ClassHeapDetailStats.prototype = {
    _update$1: function(_, stats) {
      var _this = this,
        t1 = _this.instancesAccumulated,
        t2 = J.getInterceptor$asx(stats),
        t3 = H._asNumS(t2.$index(stats, 6));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this.instancesAccumulated = H._asIntS(t1 + t3);
      t3 = _this.bytesAccumulated;
      t1 = H._asNumS(t2.$index(stats, 7));
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.bytesAccumulated = H._asIntS(t3 + t1);
      t1 = _this.instancesCurrent;
      t3 = H._asNumS(J.$add$ansx(t2.$index(stats, 2), t2.$index(stats, 4)));
      if (typeof t1 !== "number")
        return t1.$add();
      _this.instancesCurrent = H._asIntS(t1 + t3);
      t3 = _this.bytesCurrent;
      t2 = H._asNumS(J.$add$ansx(t2.$index(stats, 3), t2.$index(stats, 5)));
      if (typeof t3 !== "number")
        return t3.$add();
      _this.bytesCurrent = H._asIntS(t3 + t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "[ClassHeapStats type: " + H.S(H._asStringS(J.$index$asx(_this.json, "type"))) + ", class: " + H.S(_this.classRef.name) + ", count: " + H.S(_this.instancesCurrent) + ", bytes: " + H.S(_this.bytesCurrent) + "]";
    },
    get$classRef: function() {
      return this.classRef;
    }
  };
  T.InstanceSummary.prototype = {
    toString$0: function(_) {
      return "[InstanceSummary id: " + H.S(this.objectRef) + ", class: " + H.S(this.classRef) + "]";
    },
    get$classRef: function() {
      return this.classRef;
    }
  };
  O.InboundReferences0.prototype = {
    InboundReferences$1: function(json) {
      this.set$elements(0, type$.Iterable_InboundReference._as(J.map$1$1$ax(J.$index$asx(json, "references"), new O.InboundReferences_closure(), type$.InboundReference_2).toList$0(0)));
    },
    set$elements: function(_, elements) {
      this.elements = type$.Iterable_InboundReference._as(elements);
    }
  };
  O.InboundReferences_closure.prototype = {
    call$1: function(rmap) {
      var t1, t2;
      type$.Map_String_dynamic._as(rmap);
      if (rmap == null)
        t1 = null;
      else {
        t1 = new O.InboundReference0(null);
        t2 = J.getInterceptor$asx(rmap);
        t1.parentField = Q.createServiceObject(t2.$index(rmap, "parentField"), H.setRuntimeTypeInfo(["FieldRef"], type$.JSArray_String));
        H._asIntS(t2.$index(rmap, "parentListIndex"));
        H._asIntS(t2.$index(rmap, "_parentWordOffset"));
      }
      return t1;
    },
    $signature: 181
  };
  O.InboundReference0.prototype = {
    get$classRef: function() {
      return J.get$runtimeType$(this.parentField).$eq(0, C.Type_FieldRef_YUI) ? type$.ClassRef._as(this.parentField) : null;
    }
  };
  O._searchClass_closure.prototype = {
    call$1: function(stat) {
      return J.get$name$x(stat.get$classRef()) == this.className;
    },
    $signature: 14
  };
  O._searchClass_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  R.HtmlApp.prototype = {
    _html_model$_bind$0: function() {
      var binding = {};
      binding.send = P.allowInterop(new R.HtmlApp__bind_closure(this), type$.Null_Function_String_int_dynamic);
      window.devtools = binding;
    },
    devToolsReady$1: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$devToolsReady$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._sendNotification$2("app.devToolsReady", message);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$devToolsReady$1, $async$completer);
    },
    echo$1: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$echo$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._sendNotification$2("app.echo", message);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$echo$1, $async$completer);
    },
    switchPage$1: function(pageId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, $screen, t1;
      var $async$switchPage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.framework;
              H._asStringS(pageId);
              $screen = t1.getScreen$1(pageId);
              if ($screen == null)
                throw H.wrapException("page " + H.S(pageId) + " not found");
              t1.load$1(0, $screen);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$switchPage$1, $async$completer);
    },
    currentPageId$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1;
      var $async$currentPageId$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.framework.current;
              $async$returnValue = t1 == null ? null : t1.id;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$currentPageId$1, $async$completer);
    },
    currentPageId$0: function() {
      return this.currentPageId$1(null);
    },
    connectDialogIsVisible$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$connectDialogIsVisible$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.framework.connectDialog.parent.element.style.display !== "none";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$connectDialogIsVisible$1, $async$completer);
    },
    connectDialogIsVisible$0: function() {
      return this.connectDialogIsVisible$1(null);
    },
    connectDialogConnectTo$1: function(uri) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$connectDialogConnectTo$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.framework.connectDialog.connectTo$1(P.Uri_parse(H._asStringS(uri), 0, null));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$connectDialogConnectTo$1, $async$completer);
    },
    connectDialogConnectTo$0: function() {
      return this.connectDialogConnectTo$1(null);
    },
    logsClearLogs$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$logsClearLogs$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              type$.HtmlLoggingScreen._as($async$self.framework.getScreen$1("logging")).controller._loggingTableModel.setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_LogData));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$logsClearLogs$1, $async$completer);
    },
    logsClearLogs$0: function() {
      return this.logsClearLogs$1(null);
    },
    logsLogCount$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, t1;
      var $async$logsLogCount$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.HtmlLoggingScreen._as($async$self.framework.getScreen$1("logging")).controller._loggingTableModel;
              $async$returnValue = t1.get$rowCount(t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$logsLogCount$1, $async$completer);
    },
    logsLogCount$0: function() {
      return this.logsLogCount$1(null);
    },
    debuggerGetState$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this;
      var $async$debuggerGetState$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = H.boolConversionCheck(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState._debugger_state$_isPaused._value) ? "paused" : "running";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetState$1, $async$completer);
    },
    debuggerGetState$0: function() {
      return this.debuggerGetState$1(null);
    },
    debuggerGetConsoleContents$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this;
      var $async$debuggerGetConsoleContents$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).consoleArea.styledContents$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetConsoleContents$1, $async$completer);
    },
    debuggerGetConsoleContents$0: function() {
      return this.debuggerGetConsoleContents$1(null);
    },
    debuggerGetLocation$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, t2, scriptAndPos;
      var $async$debuggerGetLocation$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              scriptAndPos = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).sourceEditor.executionPoint;
              if (scriptAndPos == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = H.S(scriptAndPos.script.uri) + ":";
              t2 = scriptAndPos.position.line;
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = t1 + (t2 - 1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetLocation$1, $async$completer);
    },
    debuggerGetLocation$0: function() {
      return this.debuggerGetLocation$1(null);
    },
    debuggerResume$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$debuggerResume$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState;
              t2 = t1._service;
              t1 = t1.isolateRef;
              $async$goto = 2;
              return P._asyncAwait(t2.resume$1(0, t1.get$id(t1)), $async$debuggerResume$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerResume$1, $async$completer);
    },
    debuggerResume$0: function() {
      return this.debuggerResume$1(null);
    },
    debuggerPause$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t3, t4, t5, t1, t2;
      var $async$debuggerPause$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState;
              t2 = t1._service;
              t1 = t1.isolateRef;
              t1 = t1.get$id(t1);
              t3 = t2._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Success;
              $async$goto = 2;
              return P._asyncAwait(t2._trackFuture$1$2("pause", t3._call$1$2(0, "pause", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t1], t4, t4), t5), t5), $async$debuggerPause$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerPause$1, $async$completer);
    },
    debuggerPause$0: function() {
      return this.debuggerPause$1(null);
    },
    debuggerStep$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$debuggerStep$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState.stepOver$0(), $async$debuggerStep$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerStep$1, $async$completer);
    },
    debuggerStep$0: function() {
      return this.debuggerStep$1(null);
    },
    debuggerClearBreakpoints$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$debuggerClearBreakpoints$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState.clearBreakpoints$0(), $async$debuggerClearBreakpoints$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerClearBreakpoints$1, $async$completer);
    },
    debuggerClearBreakpoints$0: function() {
      return this.debuggerClearBreakpoints$1(null);
    },
    debuggerGetBreakpoints$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_String),
        $async$returnValue, $async$self = this;
      var $async$debuggerGetBreakpoints$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = J.map$1$1$ax(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState._breakpoints._value, new R.HtmlApp_debuggerGetBreakpoints_closure(), type$.String).toList$0(0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetBreakpoints$1, $async$completer);
    },
    debuggerGetBreakpoints$0: function() {
      return this.debuggerGetBreakpoints$1(null);
    },
    debuggerSupportsScripts$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$debuggerSupportsScripts$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$serviceCapabilities(), $async$debuggerSupportsScripts$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.get$supportsGetScripts();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerSupportsScripts$1, $async$completer);
    },
    debuggerSupportsScripts$0: function() {
      return this.debuggerSupportsScripts$1(null);
    },
    debuggerGetScripts$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_String),
        $async$returnValue, $async$self = this;
      var $async$debuggerGetScripts$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = J.map$1$1$ax(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).scriptsView._html_scripts_view$_items.items, new R.HtmlApp_debuggerGetScripts_closure(), type$.String).toList$0(0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetScripts$1, $async$completer);
    },
    debuggerGetScripts$0: function() {
      return this.debuggerGetScripts$1(null);
    },
    debuggerGetCallStackFrames$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_String),
        $async$returnValue, $async$self = this;
      var $async$debuggerGetCallStackFrames$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = J.map$1$1$ax(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).callStackView._callstack_view$_items.items, new R.HtmlApp_debuggerGetCallStackFrames_closure(), type$.String).toList$0(0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetCallStackFrames$1, $async$completer);
    },
    debuggerGetCallStackFrames$0: function() {
      return this.debuggerGetCallStackFrames$1(null);
    },
    debuggerGetVariables$1: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_String),
        $async$returnValue, $async$self = this, t2, t1;
      var $async$debuggerGetVariables$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).variablesView._items.items;
              t1.toString;
              t2 = H._arrayInstanceType(t1);
              $async$returnValue = new H.MappedListIterable(t1, t2._eval$1("String(1)")._as(new R.HtmlApp_debuggerGetVariables_closure()), t2._eval$1("MappedListIterable<1,String>")).toList$0(0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerGetVariables$1, $async$completer);
    },
    debuggerGetVariables$0: function() {
      return this.debuggerGetVariables$1(null);
    },
    debuggerAddBreakpoint$1: function(params) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, path, line;
      var $async$debuggerAddBreakpoint$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(params);
              path = H._asStringS(t1.$index(params, 0));
              line = H._asIntS(J.$add$ansx(t1.$index(params, 1), 1));
              $async$goto = 2;
              return P._asyncAwait(type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState.addBreakpointByPathFragment$2(path, line), $async$debuggerAddBreakpoint$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerAddBreakpoint$1, $async$completer);
    },
    debuggerAddBreakpoint$0: function() {
      return this.debuggerAddBreakpoint$1(null);
    },
    debuggerSetExceptionPauseMode$1: function(params) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5;
      var $async$debuggerSetExceptionPauseMode$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              H._asStringS(params);
              t1 = type$.HtmlDebuggerScreen._as($async$self.framework.getScreen$1("debugger")).debuggerState;
              t2 = t1._service;
              t1 = t1.isolateRef;
              t1 = t1.get$id(t1);
              t3 = t2._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Success;
              $async$goto = 2;
              return P._asyncAwait(t2._trackFuture$1$2("setExceptionPauseMode", t3._call$1$2(0, "setExceptionPauseMode", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t1, "mode", params], t4, t4), t5), t5), $async$debuggerSetExceptionPauseMode$1);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$debuggerSetExceptionPauseMode$1, $async$completer);
    },
    debuggerSetExceptionPauseMode$0: function() {
      return this.debuggerSetExceptionPauseMode$1(null);
    },
    _sendNotification$2: function($event, params) {
      var map = P.LinkedHashMap_LinkedHashMap$_literal(["event", $event], type$.String, type$.dynamic);
      if (params != null)
        map.$indexSet(0, "params", params);
      B.log("[" + C.C_JsonCodec.encode$2$toEncodable(map, null) + "]", C.LogLevel_0);
    },
    _sendReponseError$3: function(id, error, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = type$.String;
      B.log("[" + C.C_JsonCodec.encode$2$toEncodable(P.LinkedHashMap_LinkedHashMap$_literal(["id", id, "error", P.LinkedHashMap_LinkedHashMap$_literal(["message", J.toString$0$(error), "stackTrace", J.toString$0$(stackTrace)], t1, t1)], t1, type$.dynamic), null) + "]", C.LogLevel_2);
    },
    _dispatch$3: function(method, id, arg) {
      var handler = this._handlers.$index(0, method);
      if (handler != null)
        return handler.call$1(arg);
      else {
        B.log("handler not found for " + H.S(method) + "()", C.LogLevel_2);
        throw H.wrapException("no handler found for " + H.S(method) + "()");
      }
    },
    _register$1$2: function(idMethod, fn, $T) {
      this._handlers.$indexSet(0, idMethod, $T._eval$1("Future<0>(@)")._as(fn));
    }
  };
  R.HtmlApp__bind_closure.prototype = {
    call$3: function(method, id, arg) {
      var result, error, stackTrace, t1, t2, exception;
      H._asStringS(method);
      H._asIntS(id);
      try {
        t1 = this.$this;
        result = t1._dispatch$3(method, id, arg);
        t2 = new P._Future($.Zone__current, type$._Future_dynamic);
        t2._asyncComplete$1(result);
        t2.then$1$1(new R.HtmlApp__bind__closure(t1, id), type$.Null).catchError$1(new R.HtmlApp__bind__closure0(t1, id));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        this.$this._sendReponseError$3(id, error, stackTrace);
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 188
  };
  R.HtmlApp__bind__closure.prototype = {
    call$1: function(result) {
      var map = P.LinkedHashMap_LinkedHashMap$_literal(["id", this.id], type$.String, type$.dynamic);
      if (result != null)
        map.$indexSet(0, "result", result);
      B.log("[" + C.C_JsonCodec.encode$2$toEncodable(map, null) + "]", C.LogLevel_0);
    },
    $signature: 2
  };
  R.HtmlApp__bind__closure0.prototype = {
    call$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this.$this._sendReponseError$3(this.id, error, stackTrace);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  R.HtmlApp_debuggerGetBreakpoints_closure.prototype = {
    call$1: function(breakpoint) {
      return type$.Breakpoint._as(breakpoint).id;
    },
    $signature: 189
  };
  R.HtmlApp_debuggerGetScripts_closure.prototype = {
    call$1: function(script) {
      return type$.ScriptRef._as(script).get$uri();
    },
    $signature: 190
  };
  R.HtmlApp_debuggerGetCallStackFrames_closure.prototype = {
    call$1: function(frame) {
      var t1, $name, desc;
      type$.Frame._as(frame);
      t1 = frame.code;
      $name = t1 == null ? null : t1.get$name(t1);
      if ($name == null)
        $name = "<none>";
      if (C.JSString_methods.startsWith$1($name, "[Unoptimized] "))
        $name = C.JSString_methods.substring$1($name, 14);
      if (frame.kind === "AsyncSuspensionMarker") {
        $name = "<async break>";
        desc = "";
      } else {
        desc = H.S(frame.location.script.get$uri());
        desc = ":" + (C.JSString_methods.contains$1(desc, "/") ? C.JSString_methods.substring$1(desc, C.JSString_methods.lastIndexOf$1(desc, "/") + 1) : desc);
      }
      return $name + desc;
    },
    $signature: 191
  };
  R.HtmlApp_debuggerGetVariables_closure.prototype = {
    call$1: function(variable) {
      var value, t1, valueStr;
      type$.BoundVariable._as(variable);
      value = variable.value;
      if (type$.InstanceRef._is(value))
        if (value.get$valueAsString(value) == null) {
          t1 = value.get$classRef();
          valueStr = t1.get$name(t1);
        } else
          valueStr = value.get$valueAsString(value);
      else
        valueStr = value instanceof Q.Sentinel ? value.valueAsString : J.toString$0$(value);
      return H.S(variable.name) + ":" + H.S(valueStr);
    },
    $signature: 121
  };
  M.HtmlPerformanceScreen.prototype = {
    createContent$1: function(framework) {
      var t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null, _s3_ = "div", _s6_ = "layout",
        _s8_ = "vertical",
        _s6_0 = "hidden",
        screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null),
        t1 = screenDiv.element;
      t1.setAttribute(_s6_, "");
      t1.setAttribute(_s8_, "");
      _this._initContent$0();
      t1 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t2 = t1.element;
      t2.setAttribute(_s6_, "");
      t2.setAttribute("horizontal", "");
      t2 = A.CoreElement$(_s3_, _null, "btn-group", _null, _null);
      t2.add$1(0, H.setRuntimeTypeInfo([_this._startRecordingButton, _this._stopRecordingButton], type$.JSArray_PButton));
      t3 = _this._clearButton;
      t4 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t4.flex$0(0);
      t5 = type$.JSArray_CoreElement;
      t1.add$1(0, H.setRuntimeTypeInfo([t2, t3, t4, _this._profileGranularitySelector.selector], t5));
      t4 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t3 = t4.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s8_, "");
      t4.flex$0(0);
      t3 = _this._tabNav._html_cpu_profiler$_tabNav;
      t3.attribute$2(_s6_0, true);
      t2 = A.CoreElement$(_s3_, _null, "profiler-container section-border", _null, _null);
      t6 = _this._cpuProfiler;
      t6.attribute$2(_s6_0, true);
      t7 = _this._recordingInstructions;
      t8 = _this._recordingStatus;
      t8.attribute$2(_s6_0, true);
      t2.add$1(0, H.setRuntimeTypeInfo([t6, t7, t8], t5));
      t4.add$1(0, H.setRuntimeTypeInfo([t3, t2], t5));
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t1, t4], t5));
      Y.maybeAddDebugMessage(framework, "performance");
      return screenDiv;
    },
    _initContent$0: function() {
      var t2, t3, t4, _this = this, _null = null, _s6_ = "btn-sm",
        _s11_ = "margin-left",
        _s3_ = "div",
        t1 = N.PButton$icon("Record", $.$get$recordPrimary(), _null);
      t1.clazz$1(_s6_);
      t1.clazz$1("btn-primary");
      t1.click$1(0, new M.HtmlPerformanceScreen__initContent_closure(_this));
      _this._startRecordingButton = t1;
      t1 = N.PButton$icon("Stop", $.$get$stop(), _null);
      t1.clazz$1(_s6_);
      t1.clazz$1(_s11_);
      t1.attribute$2("disabled", true);
      t1.click$1(0, new M.HtmlPerformanceScreen__initContent_closure0(_this));
      _this._stopRecordingButton = t1;
      t1 = N.PButton$icon("Clear", $.$get$clearIcon(), _null);
      t1.clazz$1(_s6_);
      t1.clazz$1(_s11_);
      t1.element.setAttribute("title", "Clear timeline");
      t1.click$1(0, _this.get$_clear(_this));
      _this._clearButton = t1;
      _this._profileGranularitySelector = T.ProfileGranularitySelector$(_this.framework);
      _this._recordingInstructions = Y.createRecordingInstructions("to start recording a CPU profile.");
      t1 = A.CoreElement$(_s3_, _null, "center-in-parent", _null, _null);
      t2 = t1.element;
      t2.setAttribute("layout", "");
      t2.setAttribute("vertical", "");
      t1.flex$0(0);
      t2 = A.CoreElement$(_s3_, _null, "recording-status-message", _null, _null);
      _this._recordingStatusMessage = t2;
      t1.add$1(0, H.setRuntimeTypeInfo([t2, G.HtmlSpinner_centered(H.setRuntimeTypeInfo(["recording-spinner"], type$.JSArray_String))], type$.JSArray_CoreElement));
      _this._recordingStatus = t1;
      t1 = new M.HtmlPerformanceScreen__initContent_closure1(_this);
      t2 = Z.HtmlCpuFlameChart$(t1);
      t3 = R.HtmlCpuCallTree$(t1);
      t1 = R.HtmlCpuBottomUp$(t1);
      t4 = new M._HtmlCpuProfiler(_this._performanceController, t2, t1, t3, C.CpuProfilerViewType_2, type$.Element._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t4.CoreElement$5$attributes$classes$html$text(_s3_, _null, _null, _null, _null);
      t4.HtmlCpuProfiler$4$defaultView(t2, t3, t1, C.CpuProfilerViewType_2);
      _this._cpuProfiler = t4;
      t4 = new A.HtmlCpuProfilerTabNav(t4, new A.CpuProfilerTabOrder(C.CpuProfilerViewType_2, C.CpuProfilerViewType_1, C.CpuProfilerViewType_0), Q.TreeTableToolbar$(type$.CpuStackFrame));
      t4._html_cpu_profiler$_init$0();
      _this._tabNav = t4;
    },
    entering$0: function() {
      this._profileGranularitySelector.setGranularity$0();
    },
    _startRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_startRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self._performanceController.startRecording$0(), $async$_startRecording$0);
            case 2:
              // returning from await.
              $async$self._updateCpuProfilerVisibility$1$hidden(true);
              $async$self._updateButtonStates$0();
              $async$self._recordingInstructions.attribute$2("hidden", true);
              $async$self._recordingStatusMessage.element.textContent = "Recording profile";
              $async$self._recordingStatus.attribute$2("hidden", false);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_startRecording$0, $async$completer);
    },
    _stopRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_stopRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._recordingStatusMessage.element.textContent = "Processing profile";
              $async$goto = 2;
              return P._asyncAwait($async$self._performanceController.stopRecording$0(), $async$_stopRecording$0);
            case 2:
              // returning from await.
              $async$self._recordingStatus.attribute$2("hidden", true);
              $async$self._updateCpuProfilerVisibility$1$hidden(false);
              $async$self._updateButtonStates$0();
              $async$goto = 3;
              return P._asyncAwait($async$self._cpuProfiler.update$0(0), $async$_stopRecording$0);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_stopRecording$0, $async$completer);
    },
    _clear$0: function(_) {
      this._performanceController.clear$0(0);
      this._updateCpuProfilerVisibility$1$hidden(true);
      this._recordingInstructions.attribute$2("hidden", false);
    },
    _updateButtonStates$0: function() {
      var _this = this,
        _s8_ = "disabled",
        t1 = _this._performanceController._recordingNotifier;
      _this._startRecordingButton.attribute$2(_s8_, H._asBoolS(t1._value));
      _this._clearButton.attribute$2(_s8_, H._asBoolS(t1._value));
      _this._stopRecordingButton.attribute$2(_s8_, !H.boolConversionCheck(H._asBoolS(t1._value)));
    },
    _updateCpuProfilerVisibility$1$hidden: function(hidden) {
      this._tabNav._html_cpu_profiler$_tabNav.attribute$2("hidden", hidden);
      this._cpuProfiler.attribute$2("hidden", hidden);
    }
  };
  M.HtmlPerformanceScreen__initContent_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.$this._startRecording$0(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 7
  };
  M.HtmlPerformanceScreen__initContent_closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.$this._stopRecording$0(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 7
  };
  M.HtmlPerformanceScreen__initContent_closure1.prototype = {
    call$0: function() {
      return type$.CpuProfileData._as(this.$this._performanceController.CpuProfilerControllerProviderMixin_cpuProfilerController._dataNotifier._value);
    },
    $signature: 100
  };
  M._HtmlCpuProfiler.prototype = {
    prepareCpuProfile$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$prepareCpuProfile$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._performanceController.CpuProfilerControllerProviderMixin_cpuProfilerController;
              $async$goto = 2;
              return P._asyncAwait(t1.transformer.processData$1(type$.CpuProfileData._as(t1._dataNotifier._value)), $async$prepareCpuProfile$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$prepareCpuProfile$0, $async$completer);
    },
    maybeShowMessageOnUpdate$0: function() {
      var t1 = type$.CpuProfileData._as(this._performanceController.CpuProfilerControllerProviderMixin_cpuProfilerController._dataNotifier._value);
      if (t1 == null || t1.profileMetaData.sampleCount === 0) {
        this.showMessage$1(A.CoreElement$("div", null, null, null, "No CPU samples recorded."));
        return true;
      }
      return false;
    }
  };
  B.PerformanceController.prototype = {
    startRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$startRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.clear$0(0), $async$startRecording$0);
            case 2:
              // returning from await.
              $async$self._recordingNotifier.set$value(0, true);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$startRecording$0, $async$completer);
    },
    stopRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$stopRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._recordingNotifier.set$value(0, false);
              $async$goto = 2;
              return P._asyncAwait($async$self.CpuProfilerControllerProviderMixin_cpuProfilerController.pullAndProcessProfile$2$extentMicros$startMicros($.$get$maxJsInt(), 0), $async$stopRecording$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$stopRecording$0, $async$completer);
    },
    clear$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$clear$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.CpuProfilerControllerProviderMixin_cpuProfilerController.clear$0(0), $async$clear$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$clear$0, $async$completer);
    }
  };
  B._PerformanceController_Object_CpuProfilerControllerProviderMixin.prototype = {};
  T.SelfTimeColumn.prototype = {
    get$numeric: function() {
      return true;
    },
    compare$2: function(a, b) {
      var result,
        t1 = type$.CpuStackFrame;
      t1._as(a);
      t1._as(b);
      result = this.super$ColumnData$compare(a, b);
      if (result === 0)
        return J.compareTo$1$ns(a.name, b.name);
      return result;
    },
    getValue$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).get$selfTime()._duration;
    },
    getDisplayValue$1: function(dataObject) {
      type$.CpuStackFrame._as(dataObject);
      return B.msText(dataObject.get$selfTime(), 2) + " (" + (C.JSNumber_methods.toStringAsFixed$1(dataObject.get$selfTimeRatio() * 100, 2) + "%") + ")";
    }
  };
  T.TotalTimeColumn.prototype = {
    get$numeric: function() {
      return true;
    },
    compare$2: function(a, b) {
      var result,
        t1 = type$.CpuStackFrame;
      t1._as(a);
      t1._as(b);
      result = this.super$ColumnData$compare(a, b);
      if (result === 0)
        return J.compareTo$1$ns(a.name, b.name);
      return result;
    },
    getValue$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).get$totalTime()._duration;
    },
    getDisplayValue$1: function(dataObject) {
      type$.CpuStackFrame._as(dataObject);
      return B.msText(dataObject.get$totalTime(), 2) + " (" + (C.JSNumber_methods.toStringAsFixed$1(dataObject.get$totalTimeRatio() * 100, 2) + "%") + ")";
    }
  };
  T.MethodNameColumn.prototype = {
    getValue$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).name;
    },
    getDisplayValue$1: function(dataObject) {
      var t1 = type$.CpuStackFrame._as(dataObject).name;
      if (t1.length > 75)
        return J.substring$2$s(t1, 0, 75) + "...";
      return t1;
    },
    get$supportsSorting: function() {
      return true;
    },
    getTooltip$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).name;
    }
  };
  T.SourceColumn.prototype = {
    getValue$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).url;
    },
    getDisplayValue$1: function(dataObject) {
      return F.getSimplePackageUrl(type$.CpuStackFrame._as(dataObject).url);
    },
    getTooltip$1: function(dataObject) {
      return type$.CpuStackFrame._as(dataObject).url;
    },
    get$supportsSorting: function() {
      return true;
    }
  };
  T.CpuProfilerController.prototype = {
    pullAndProcessProfile$2$extentMicros$startMicros: function(extentMicros, startMicros) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, cpuProfileData, t2, exception, t1, $async$exception;
      var $async$pullAndProcessProfile$2$extentMicros$startMicros = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._vmFlagManager._flagNotifiers;
              if (J.get$valueAsString$x((t1.containsKey$1(0, "profiler") ? t1.$index(0, "profiler") : null)._value) !== "true") {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self._processingNotifier;
              t1.set$value(0, true);
              cpuProfileData = $.$get$CpuProfilerController_baseStateCpuProfileData();
              t2 = $async$self._dataNotifier;
              t2.set$value(0, null);
              $async$goto = 3;
              return P._asyncAwait($async$self.service.getCpuProfile$2$extentMicros$startMicros(extentMicros, startMicros), $async$pullAndProcessProfile$2$extentMicros$startMicros);
            case 3:
              // returning from await.
              cpuProfileData = $async$result;
              $async$handler = 5;
              $async$goto = 8;
              return P._asyncAwait($async$self.transformer.processData$1(cpuProfileData), $async$pullAndProcessProfile$2$extentMicros$startMicros);
            case 8:
              // returning from await.
              t2.set$value(0, cpuProfileData);
              t1.set$value(0, false);
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              if (H.unwrapException($async$exception) instanceof P.AssertionError) {
                t2.set$value(0, cpuProfileData);
                t1.set$value(0, false);
                throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$pullAndProcessProfile$2$extentMicros$startMicros, $async$completer);
    },
    clear$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$clear$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.reset$0(0);
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 2;
              return P._asyncAwait(t2.clearCpuSamples$1(t1.get$id(t1)), $async$clear$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$clear$0, $async$completer);
    },
    reset$0: function(_) {
      var _this = this;
      _this._selectedCpuStackFrameNotifier.set$value(0, null);
      _this._dataNotifier.set$value(0, $.$get$CpuProfilerController_baseStateCpuProfileData());
      _this._processingNotifier.set$value(0, false);
      _this.transformer.reset$0(0);
    }
  };
  T.CpuProfilerControllerProviderMixin.prototype = {};
  E.CpuProfileData.prototype = {
    get$cpuProfileRoot: function() {
      return this._cpuProfileRoot;
    },
    get$json: function(_) {
      var t1 = this.profileMetaData,
        t2 = t1.time,
        t3 = t2._utils$_start._duration;
      return P.LinkedHashMap_LinkedHashMap$_literal(["type", "_CpuProfileTimeline", "samplePeriod", t1.samplePeriod, "sampleCount", t1.sampleCount, "stackDepth", t1.stackDepth, "timeOriginMicros", t3, "timeExtentMicros", t2._utils$_end._duration - t3, "stackFrames", this.stackFramesJson, "traceEvents", this.stackTraceEvents], type$.String, type$.dynamic);
    }
  };
  E.CpuProfileMetaData.prototype = {};
  E.CpuStackFrame.prototype = {
    get$inclusiveSampleCount: function() {
      var t1 = this._inclusiveSampleCount;
      return t1 == null ? this._calculateInclusiveSampleCount$0() : t1;
    },
    get$totalTimeRatio: function() {
      var _this = this,
        t1 = _this._totalTimeRatio;
      return t1 == null ? _this._totalTimeRatio = B.safeDivide(_this.get$inclusiveSampleCount(), _this.profileMetaData.sampleCount) : t1;
    },
    get$totalTime: function() {
      var t2, t3, _this = this,
        t1 = _this._totalTime;
      if (t1 == null) {
        t1 = _this.get$totalTimeRatio();
        t2 = _this.profileMetaData.time;
        t3 = t2._utils$_end;
        t2 = t2._utils$_start;
        t2 = _this._totalTime = P.Duration$(C.JSNumber_methods.round$0(t1 * (t3._duration - t2._duration)), 0);
        t1 = t2;
      }
      return t1;
    },
    get$selfTimeRatio: function() {
      var _this = this,
        t1 = _this._selfTimeRatio;
      return t1 == null ? _this._selfTimeRatio = B.safeDivide(_this.exclusiveSampleCount, _this.profileMetaData.sampleCount) : t1;
    },
    get$selfTime: function() {
      var t2, t3, _this = this,
        t1 = _this._selfTime;
      if (t1 == null) {
        t1 = _this.get$selfTimeRatio();
        t2 = _this.profileMetaData.time;
        t3 = t2._utils$_end;
        t2 = t2._utils$_start;
        t2 = _this._selfTime = P.Duration$(C.JSNumber_methods.round$0(t1 * (t3._duration - t2._duration)), 0);
        t1 = t2;
      }
      return t1;
    },
    _calculateInclusiveSampleCount$0: function() {
      var t1, t2, _i, child, t3,
        count = this.exclusiveSampleCount;
      for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t3 = child._inclusiveSampleCount;
        if (t3 == null)
          t3 = child._calculateInclusiveSampleCount$0();
        if (typeof t3 !== "number")
          return H.iae(t3);
        count += t3;
      }
      return this._inclusiveSampleCount = count;
    },
    shallowCopy$1$resetInclusiveSampleCount: function(resetInclusiveSampleCount) {
      var _this = this,
        copy = E.CpuStackFrame$(_this.category, _this.id, _this.name, _this.profileMetaData, _this.url);
      copy.exclusiveSampleCount = _this.exclusiveSampleCount;
      copy._inclusiveSampleCount = resetInclusiveSampleCount ? null : _this.get$inclusiveSampleCount();
      return copy;
    },
    shallowCopy$0: function() {
      return this.shallowCopy$1$resetInclusiveSampleCount(false);
    },
    deepCopy$0: function() {
      var t1, t2, t3, t4, _i, t5,
        copy = this.shallowCopy$0();
      for (t1 = this.children, t2 = t1.length, t3 = H._instanceType(copy)._eval$1("TreeNode0.T"), t4 = copy.children, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t5 = t3._as(t1[_i].deepCopy$0());
        C.JSArray_methods.add$1(t4, t5);
        t5.set$parent(0, t3._as(copy));
        t5.index = t4.length - 1;
      }
      return copy;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = H.S(_this.name) + " ";
      _this.get$totalTime();
      t1 += "- " + B.msText(_this.get$totalTime(), 2) + " ";
      t1 += "(" + H.S(_this.get$inclusiveSampleCount()) + " ";
      t1 = t1 + (_this.get$inclusiveSampleCount() === 1 ? "sample" : "samples") + (", " + (C.JSNumber_methods.toStringAsFixed$1(_this.get$totalTimeRatio() * 100, 2) + "%") + ")");
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$id: function(receiver) {
      return this.id;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Z.CpuProfilerService.prototype = {
    getCpuProfile$2$extentMicros$startMicros: function(extentMicros, startMicros) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CpuProfileData),
        $async$returnValue, t1, t2;
      var $async$getCpuProfile$2$extentMicros$startMicros = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._isolateManager._selectedIsolate;
              $async$goto = 3;
              return P._asyncAwait(t2.getCpuProfileTimeline$3(t1.get$id(t1), startMicros, extentMicros), $async$getCpuProfile$2$extentMicros$startMicros);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getCpuProfile$2$extentMicros$startMicros, $async$completer);
    }
  };
  V.CpuProfileTransformer.prototype = {
    processData$1: function(cpuProfileData) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3, quarterBatchSize, batchSize;
      var $async$processData$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (cpuProfileData.processed) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.reset$0(0);
              t1 = cpuProfileData.stackFramesJson;
              t2 = t1 == null;
              t3 = t2 ? null : J.get$length$asx(t1);
              $async$self._stackFramesCount = t3 == null ? 0 : t3;
              t3 = t2 ? null : J.get$keys$x(t1);
              t3 = t3 == null ? null : J.toList$0$ax(t3);
              $async$self._stackFrameKeys = t3 == null ? [] : t3;
              t1 = t2 ? null : J.get$values$x(t1);
              t1 = t1 == null ? null : J.toList$0$ax(t1);
              $async$self._stackFrameValues = t1 == null ? [] : t1;
              t1 = $async$self._stackFramesCount;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$div();
                // goto return
                $async$goto = 1;
                break;
              }
              quarterBatchSize = C.JSDouble_methods.round$0(t1 / 4);
              t1 = quarterBatchSize === 0 ? 1 : quarterBatchSize;
              batchSize = Math.min(100, t1);
              t1 = $async$self._progressNotifier;
            case 3:
              // while condition
              t2 = $async$self._stackFramesProcessed;
              t3 = $async$self._stackFramesCount;
              if (typeof t3 !== "number") {
                $async$returnValue = H.iae(t3);
                // goto return
                $async$goto = 1;
                break;
              }
              if (!(t2 < t3)) {
                // goto after while
                $async$goto = 4;
                break;
              }
              $async$self._processBatch$2(batchSize, cpuProfileData);
              t2 = $async$self._stackFramesProcessed;
              t3 = $async$self._stackFramesCount;
              if (typeof t3 !== "number") {
                $async$returnValue = H.iae(t3);
                // goto return
                $async$goto = 1;
                break;
              }
              t1.set$value(0, t2 / t3);
              $async$goto = 5;
              return P._asyncAwait(B.delayForBatchProcessing(5000), $async$processData$1);
            case 5:
              // returning from await.
              // goto while condition
              $async$goto = 3;
              break;
            case 4:
              // after while
              $async$self._setExclusiveSampleCounts$1(cpuProfileData);
              cpuProfileData.processed = true;
              $async$self.reset$0(0);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$processData$1, $async$completer);
    },
    _processBatch$2: function(batchSize, cpuProfileData) {
      var t1, t2, t3, t4, k, v, t5, t6, t7, stackFrame, _this = this,
        i = _this._stackFramesProcessed,
        batchEnd = Math.min(i + batchSize, H.checkNum(_this._stackFramesCount));
      for (t1 = cpuProfileData.profileMetaData, t2 = type$.JSArray_CpuStackFrame, t3 = cpuProfileData.stackFrames; i < batchEnd; ++i) {
        t4 = _this._stackFrameKeys;
        if (i >= t4.length)
          return H.ioore(t4, i);
        k = t4[i];
        t4 = _this._stackFrameValues;
        if (i >= t4.length)
          return H.ioore(t4, i);
        v = t4[i];
        H._asStringS(k);
        t4 = J.getInterceptor$asx(v);
        t5 = B.getSimpleStackFrameName(H._asStringS(t4.$index(v, "name")));
        t6 = H._asStringS(t4.$index(v, "category"));
        t7 = t4.$index(v, "resolvedUrl");
        stackFrame = new E.CpuStackFrame(k, t5, t6, H._asStringS(t7 == null ? "" : t7), t1, H.setRuntimeTypeInfo([], t2));
        t4 = t3.$index(0, t4.$index(v, "parent"));
        t3.$indexSet(0, k, stackFrame);
        if (t4 == null) {
          t4 = cpuProfileData._cpuProfileRoot;
          t5 = H._instanceType(t4)._eval$1("TreeNode0.T");
          t5._as(stackFrame);
          t6 = t4.children;
          C.JSArray_methods.add$1(t6, stackFrame);
          stackFrame.set$parent(0, t5._as(t4));
          stackFrame.index = t6.length - 1;
        } else {
          t5 = H._instanceType(t4)._eval$1("TreeNode0.T");
          t5._as(stackFrame);
          t6 = t4.children;
          C.JSArray_methods.add$1(t6, stackFrame);
          stackFrame.set$parent(0, t5._as(t4));
          stackFrame.index = t6.length - 1;
        }
        ++_this._stackFramesProcessed;
      }
    },
    _setExclusiveSampleCounts$1: function(cpuProfileData) {
      var t1, t2, t3;
      for (t1 = J.get$iterator$ax(cpuProfileData.stackTraceEvents), t2 = cpuProfileData.stackFrames; t1.moveNext$0();) {
        t3 = t2.$index(0, J.$index$asx(t1.get$current(t1), "sf"));
        if (t3 != null)
          ++t3.exclusiveSampleCount;
      }
    },
    reset$0: function(_) {
      var _this = this;
      _this._stackFramesProcessed = 0;
      _this._stackFrameValues = _this._stackFrameKeys = null;
      _this._progressNotifier.set$value(0, 0);
    }
  };
  V.mergeProfileRoots_closure.prototype = {
    call$1: function(other) {
      var t1;
      type$.CpuStackFrame._as(other);
      t1 = this.root;
      return other.name == t1.name && other.url === t1.url && other.category == t1.category && other != t1;
    },
    $signature: 194
  };
  Z.HtmlCpuFlameChart.prototype = {
    rebuildView$0: function() {
      var data, t1, t2, t3, t4, t5, t6, _this = this;
      _this.reset$0(0);
      data = _this.profileDataProvider.call$0();
      t1 = _this.element;
      t2 = t1.clientWidth;
      t2.toString;
      t1 = t1.clientHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 = Math.max(t1 - 27, (data._cpuProfileRoot.get$depth() + 1) * 27);
      t3 = data.profileMetaData.time;
      t4 = t3._utils$_end;
      t3 = t3._utils$_start;
      t3 = new P.Duration(t4._duration - t3._duration);
      t4 = type$._AsyncBroadcastStreamController_FlameChartNode_dynamic;
      t5 = new P._AsyncBroadcastStreamController(null, null, t4);
      t6 = new Z.CpuFlameChartCanvas(new U.HtmlDragScroll(), 150, data, t3, 70, t2, t1, t5, H.setRuntimeTypeInfo([], type$.JSArray_FlameChartRow), H.setRuntimeTypeInfo([], type$.JSArray_FlameChartSection), new F.TimelineGrid(t3, 70, t2));
      t6.initUiElements$0();
      t6.FlameChartCanvas$7$classes$data$duration$height$maxZoomLevel$startInset$width("cpu-flame-chart", data, t3, t1, 150, 70, t2, type$.CpuProfileData);
      _this.canvas = t6;
      new P._BroadcastStream(t5, t4._eval$1("_BroadcastStream<1>")).listen$1(new Z.HtmlCpuFlameChart_rebuildView_closure(_this));
      _this.add$1(0, _this.canvas._viewportCanvas._viewport_canvas$_element);
      _this.stackFrameDetails.attribute$2("hidden", false);
    },
    update$1$showLoadingSpinner: function(_, showLoadingSpinner) {
      this.reset$0(0);
      this.super$HtmlCpuProfilerView$update(0, showLoadingSpinner);
    },
    update$0: function($receiver) {
      return this.update$1$showLoadingSpinner($receiver, false);
    },
    updateForContainerResize$0: function() {
      var data, t1, t2, _this = this;
      if (_this.canvas == null)
        return;
      data = _this.profileDataProvider.call$0();
      t1 = _this.element;
      if (!H.boolConversionCheck(t1.hasAttribute("hidden")) && data != null && data.processed) {
        t2 = _this.canvas;
        t2.forceRebuildForSize$2(t2.get$calculatedWidth() + t2.startInset + 70, Math.max(C.JSNumber_methods.round$0(t1.scrollHeight) - 27, (data._cpuProfileRoot.get$depth() + 1) * 27));
      } else
        _this.viewNeedsRebuild = true;
    },
    reset$0: function(_) {
      var _this = this,
        t1 = _this.canvas,
        t2 = t1 == null ? null : t1._viewportCanvas._viewport_canvas$_element;
      if ((t2 == null ? null : t2.element) != null)
        J.remove$0$ax(t1._viewportCanvas._viewport_canvas$_element.element);
      _this.canvas = null;
      _this.stackFrameDetails.element.textContent = "[No stack frame selected]";
      _this.stackFrameDetails.attribute$2("hidden", true);
    }
  };
  Z.HtmlCpuFlameChart_rebuildView_closure.prototype = {
    call$1: function(node) {
      var t1, t2;
      type$.FlameChartNode_dynamic._as(node);
      t1 = this.$this.stackFrameDetails;
      t2 = J.toString$0$(node.data);
      t1.element.textContent = t2;
    },
    $signature: 54
  };
  Z.CpuFlameChartCanvas.prototype = {
    get$calculatedWidth: function() {
      var t1 = this.rows;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0].nodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0].rect.right - 70;
    },
    initUiElements$0: function() {
      var t1, totalWidth, _this = this;
      _this.super$FlameChart$initUiElements();
      t1 = _this.data;
      _this.expandRows$1(t1.get$cpuProfileRoot().get$depth());
      totalWidth = _this.width - 140;
      new Z.CpuFlameChartCanvas_initUiElements_createChartNodes(_this, totalWidth, new Z.CpuFlameChartCanvas_initUiElements_leftForStackFrame(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.double), totalWidth)).call$2(t1.get$cpuProfileRoot(), 0);
    }
  };
  Z.CpuFlameChartCanvas_initUiElements_leftForStackFrame.prototype = {
    call$1: function(stackFrame) {
      var left, stackFrameIndex, t1, t2, t3, previous,
        $parent = stackFrame.parent;
      if ($parent == null)
        left = 70;
      else {
        stackFrameIndex = stackFrame.index;
        t1 = this.stackFrameLefts;
        if (stackFrameIndex === 0)
          left = t1.$index(0, $parent.id);
        else {
          t2 = $parent.children;
          t3 = stackFrameIndex - 1;
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          previous = t2[t3];
          t1 = t1.$index(0, previous.id);
          t3 = previous.get$totalTimeRatio();
          if (typeof t1 !== "number")
            return t1.$add();
          left = t1 + this.totalWidth * t3;
        }
      }
      this.stackFrameLefts.$indexSet(0, stackFrame.id, left);
      return left;
    },
    $signature: 196
  };
  Z.CpuFlameChartCanvas_initUiElements_createChartNodes.prototype = {
    call$2: function(stackFrame, row) {
      var node, _i, _this = this,
        t1 = stackFrame.get$totalTimeRatio(),
        left = _this.leftForStackFrame.call$1(stackFrame),
        $top = row * 27 + 27,
        t2 = _this.$this,
        t3 = t2._colorOffset,
        color = $.uiColorPalette[C.JSInt_methods.$mod(t3, 3)];
      t2._colorOffset = t3 + 1;
      if (typeof left !== "number")
        return left.$add();
      node = F.FlameChartNode$(new S.Rect(left, $top, left + (_this.totalWidth * t1 - 1), $top + 25), color, C.Color_4278190080, C.Color_4278190080, stackFrame, new Z.CpuFlameChartCanvas_initUiElements_createChartNodes_closure(stackFrame), 70, type$.CpuStackFrame);
      t2 = t2.rows;
      if (row >= t2.length)
        return H.ioore(t2, row);
      t2[row].addNode$1(node);
      for (t1 = stackFrame.children, t2 = t1.length, t3 = row + 1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        _this.call$2(t1[_i], t3);
    },
    $signature: 197
  };
  Z.CpuFlameChartCanvas_initUiElements_createChartNodes_closure.prototype = {
    call$1: function(_) {
      type$.CpuStackFrame._as(_);
      return this.stackFrame.name;
    },
    $signature: 198
  };
  R.HtmlCpuCallTree.prototype = {
    _html_cpu_profile_tables$_init$0: function() {
      var _this = this, _null = null,
        _s10_ = "Total Time",
        _s9_ = "Self Time",
        t1 = type$._AsyncBroadcastStreamController_CpuStackFrame,
        t2 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        t3 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        methodNameColumn = new T.MethodNameColumn(t2, t3, "Method", _null, _null, C.ColumnAlignment_0),
        t4 = type$.CpuStackFrame;
      methodNameColumn.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Method", C.ColumnAlignment_0, _null, _null, false, _null, false, t4);
      new P._BroadcastStream(t2, t1._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlCpuCallTree__init_closure(_this));
      new P._BroadcastStream(t3, t1._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlCpuCallTree__init_closure0(_this));
      _this.set$callTreeTable(Q.HtmlTreeTable_HtmlTreeTable$virtual(t4));
      t1 = _this.callTreeTable;
      t1.toString;
      t1 = t1.$ti._eval$1("TreeTableData<1>")._as(t1.model);
      t3 = new T.TotalTimeColumn(_s10_, 160, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s10_, C.ColumnAlignment_0, _null, 160, false, _null, false, t4);
      t2 = H._instanceType(t1)._eval$1("ColumnData<1>");
      t1.super$TableData$addColumn(t2._as(t3));
      t3 = new T.SelfTimeColumn(_s9_, 160, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s9_, C.ColumnAlignment_0, _null, 160, false, _null, false, t4);
      t1.super$TableData$addColumn(t2._as(t3));
      t1.super$TableData$addColumn(t2._as(methodNameColumn));
      t3 = new T.SourceColumn("Source", _null, _null, C.ColumnAlignment_1);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Source", C.ColumnAlignment_1, _null, _null, false, _null, false, t4);
      t1.super$TableData$addColumn(t2._as(t3));
      t3 = _this.callTreeTable;
      t3.toString;
      t3 = t3.$ti._eval$1("TreeTableData<1>")._as(t3.model);
      t2 = _this.callTreeTable;
      t2.toString;
      t3.set$sortColumn(C.JSArray_methods.get$first(t2.$ti._eval$1("TreeTableData<1>")._as(t2.model)._columns));
      t3.setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
      _this.add$1(0, _this.callTreeTable.element);
    },
    rebuildView$0: function() {
      var t2, t3,
        root = this.profileDataProvider.call$0()._cpuProfileRoot.deepCopy$0(),
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame);
      root._trees$_isExpanded = true;
      C.JSArray_methods.add$1(t1, root);
      for (t2 = root.children, t3 = H._arrayInstanceType(t2)._eval$1("CastList<1,CpuStackFrame>"), t2 = new H.CastList(t2, t3), t3 = new H.ListIterator(t2, t2.get$length(t2), t3._eval$1("ListIterator<ListMixin.E>")); t3.moveNext$0();)
        C.JSArray_methods.add$1(t1, t3.__internal$_current);
      t2 = this.callTreeTable;
      t2.toString;
      t2.$ti._eval$1("TreeTableData<1>")._as(t2.model).setRows$1(t1);
    },
    reset$0: function(_) {
      var t1 = this.callTreeTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
    },
    set$callTreeTable: function(callTreeTable) {
      this.callTreeTable = type$.HtmlTreeTable_CpuStackFrame._as(callTreeTable);
    }
  };
  R.HtmlCpuCallTree__init_closure.prototype = {
    call$1: function(stackFrame) {
      var t1;
      type$.CpuStackFrame._as(stackFrame);
      t1 = this.$this.callTreeTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).expandNode$1(stackFrame);
    },
    $signature: 35
  };
  R.HtmlCpuCallTree__init_closure0.prototype = {
    call$1: function(stackFrame) {
      var t1;
      type$.CpuStackFrame._as(stackFrame);
      t1 = this.$this.callTreeTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).collapseNode$1(stackFrame);
    },
    $signature: 35
  };
  R.HtmlCpuBottomUp.prototype = {
    _html_cpu_profile_tables$_init$0: function() {
      var selfTimeColumn, _this = this, _null = null,
        _s9_ = "Self Time",
        _s10_ = "Total Time",
        t1 = type$._AsyncBroadcastStreamController_CpuStackFrame,
        t2 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        t3 = new P._AsyncBroadcastStreamController(_null, _null, t1),
        methodNameColumn = new T.MethodNameColumn(t2, t3, "Method", _null, _null, C.ColumnAlignment_0),
        t4 = type$.CpuStackFrame;
      methodNameColumn.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Method", C.ColumnAlignment_0, _null, _null, false, _null, false, t4);
      new P._BroadcastStream(t2, t1._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlCpuBottomUp__init_closure(_this));
      new P._BroadcastStream(t3, t1._eval$1("_BroadcastStream<1>")).listen$1(new R.HtmlCpuBottomUp__init_closure0(_this));
      selfTimeColumn = new T.SelfTimeColumn(_s9_, 160, _null, C.ColumnAlignment_0);
      selfTimeColumn.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s9_, C.ColumnAlignment_0, _null, 160, false, _null, false, t4);
      _this.set$bottomUpTable(Q.HtmlTreeTable_HtmlTreeTable$virtual(t4));
      t1 = _this.bottomUpTable;
      t1.toString;
      t1 = t1.$ti._eval$1("TreeTableData<1>")._as(t1.model);
      t3 = new T.TotalTimeColumn(_s10_, 160, _null, C.ColumnAlignment_0);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml(_s10_, C.ColumnAlignment_0, _null, 160, false, _null, false, t4);
      t2 = H._instanceType(t1)._eval$1("ColumnData<1>");
      t1.super$TableData$addColumn(t2._as(t3));
      t1.super$TableData$addColumn(t2._as(selfTimeColumn));
      t1.super$TableData$addColumn(t2._as(methodNameColumn));
      t3 = new T.SourceColumn("Source", _null, _null, C.ColumnAlignment_1);
      t3.ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml("Source", C.ColumnAlignment_1, _null, _null, false, _null, false, t4);
      t1.super$TableData$addColumn(t2._as(t3));
      t1.set$sortColumn(selfTimeColumn);
      t1.setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
      _this.add$1(0, _this.bottomUpTable.element);
    },
    rebuildView$0: function() {
      var t1,
        bottomUpRoots = V.BottomUpProfileTransformer_getRoots(this.profileDataProvider.call$0()._cpuProfileRoot, null, H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
      C.JSArray_methods.forEach$1(bottomUpRoots, V.cpu_profile_transformer_BottomUpProfileTransformer_cascadeSampleCounts$closure());
      V.mergeProfileRoots(bottomUpRoots);
      t1 = this.bottomUpTable;
      t1.toString;
      t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).setRows$1(bottomUpRoots);
    },
    reset$0: function(_) {
      var t1 = this.bottomUpTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).setRows$1(H.setRuntimeTypeInfo([], type$.JSArray_CpuStackFrame));
    },
    set$bottomUpTable: function(bottomUpTable) {
      this.bottomUpTable = type$.HtmlTreeTable_CpuStackFrame._as(bottomUpTable);
    }
  };
  R.HtmlCpuBottomUp__init_closure.prototype = {
    call$1: function(stackFrame) {
      var t1;
      type$.CpuStackFrame._as(stackFrame);
      t1 = this.$this.bottomUpTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).expandNode$1(stackFrame);
    },
    $signature: 35
  };
  R.HtmlCpuBottomUp__init_closure0.prototype = {
    call$1: function(stackFrame) {
      var t1;
      type$.CpuStackFrame._as(stackFrame);
      t1 = this.$this.bottomUpTable;
      t1.toString;
      return t1.$ti._eval$1("TreeTableData<1>")._as(t1.model).collapseNode$1(stackFrame);
    },
    $signature: 35
  };
  A.HtmlCpuProfiler.prototype = {
    HtmlCpuProfiler$4$defaultView: function(flameChart, callTree, bottomUp, defaultView) {
      var t2, t3, _this = this,
        t1 = _this.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      _this.flex$0(0);
      t1 = H.setRuntimeTypeInfo([_this.flameChart, _this.callTree, _this.bottomUp], type$.JSArray_HtmlCpuProfilerView);
      _this.set$views(t1);
      _this.add$1(0, t1);
      t1 = _this.views;
      t1.toString;
      t2 = H._arrayInstanceType(t1);
      t3 = t2._eval$1("bool(1)")._as(new A.HtmlCpuProfiler_closure(_this));
      t1 = C.JSArray_methods.get$iterator(t1);
      t2 = new H.WhereIterator(t1, t3, t2._eval$1("WhereIterator<1>"));
      for (; t2.moveNext$0();)
        t1.get$current(t1).attribute$2("hidden", true);
      _this._selectedViewType = _this.defaultView;
    },
    showView$1: function(showType) {
      var t1, t2, viewToShow, _i, view;
      this._selectedViewType = showType;
      if (this.showingMessage)
        return;
      for (t1 = this.views, t2 = t1.length, viewToShow = null, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        view = t1[_i];
        if (view.type === showType)
          viewToShow = view;
        else
          view.attribute$2("hidden", true);
      }
      viewToShow.attribute$2("hidden", false);
      if (viewToShow.viewNeedsRebuild) {
        viewToShow.viewNeedsRebuild = false;
        viewToShow.update$1$showLoadingSpinner(0, true);
      }
    },
    hideAll$0: function() {
      var t1, t2, _i;
      for (t1 = this.views, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attribute$2("hidden", true);
    },
    update$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, spinner, showingMessage, view, e, t1, t2, _i, exception, $async$exception;
      var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.reset$0(0);
              spinner = G.HtmlSpinner_centered(C.List_empty0);
              $async$handler = 4;
              $async$self.add$1(0, spinner);
              $async$goto = 7;
              return P._asyncAwait($async$self.prepareCpuProfile$0(), $async$update$0);
            case 7:
              // returning from await.
              showingMessage = $async$self.maybeShowMessageOnUpdate$0();
              if (H.boolConversionCheck(showingMessage)) {
                $async$next = [1];
                // goto finally
                $async$goto = 5;
                break;
              }
              for (t1 = $async$self.views, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                view = t1[_i];
                J.update$0$x(view);
              }
              $async$self.showView$1($async$self._selectedViewType);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              $async$self.showMessage$1(A.CoreElement$("div", null, null, null, "Error retrieving CPU profile: " + H.S(J.toString$0$(e))));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              J.remove$0$ax(spinner.element);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$update$0, $async$completer);
    },
    reset$0: function(_) {
      var t1, t2, _i;
      for (t1 = this.views, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        J.reset$0$x(t1[_i]);
      this._removeMessage$0();
    },
    showMessage$1: function(message) {
      this.hideAll$0();
      this.showingMessage = true;
      message.element.setAttribute("id", "cpu-profiler-message");
      message.clazz$1("centered-single-line-message");
      this.add$1(0, message);
    },
    _removeMessage$0: function() {
      var t1 = J.get$children$x(this.element);
      t1.removeWhere$1(t1, new A.HtmlCpuProfiler__removeMessage_closure());
      this.showingMessage = false;
    },
    set$views: function(views) {
      this.views = type$.List_HtmlCpuProfilerView._as(views);
    }
  };
  A.HtmlCpuProfiler_closure.prototype = {
    call$1: function(view) {
      return type$.HtmlCpuProfilerView._as(view).type !== this.$this.defaultView;
    },
    $signature: 200
  };
  A.HtmlCpuProfiler__removeMessage_closure.prototype = {
    call$1: function(e) {
      return type$.Element._as(e).id === "cpu-profiler-message";
    },
    $signature: 51
  };
  A.HtmlCpuProfilerView.prototype = {
    update$1$showLoadingSpinner: function(_, showLoadingSpinner) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, spinner;
      var $async$update$1$showLoadingSpinner = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.profileDataProvider.call$0() == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = !H.boolConversionCheck($async$self.element.hasAttribute("hidden")) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = showLoadingSpinner ? 6 : 8;
              break;
            case 6:
              // then
              spinner = G.HtmlSpinner_centered(C.List_empty0);
              $async$self.add$1(0, spinner);
              $async$goto = 9;
              return P._asyncAwait(P.Future_Future$delayed(C.Duration_1, type$.dynamic), $async$update$1$showLoadingSpinner);
            case 9:
              // returning from await.
              $async$self.rebuildView$0();
              J.remove$0$ax(spinner.element);
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$self.rebuildView$0();
            case 7:
              // join
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$self.viewNeedsRebuild = true;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$update$1$showLoadingSpinner, $async$completer);
    },
    update$0: function($receiver) {
      return this.update$1$showLoadingSpinner($receiver, false);
    }
  };
  A.CpuProfilerViewType.prototype = {
    toString$0: function(_) {
      return this._html_cpu_profiler$_name;
    }
  };
  A.HtmlCpuProfilerTabNav.prototype = {
    _html_cpu_profiler$_init$0: function() {
      var t3, t4, tabs, _this = this, _null = null, _s3_ = "div",
        _s10_ = "tabnav-tab",
        t1 = type$.Element,
        t2 = new A.CpuProfilerTab(C.CpuProfilerViewType_0, t1._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t2.CoreElement$5$attributes$classes$html$text(_s3_, _null, _s10_, _null, "CPU Flame Chart");
      t3 = new A.CpuProfilerTab(C.CpuProfilerViewType_2, t1._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t3.CoreElement$5$attributes$classes$html$text(_s3_, _null, _s10_, _null, "Call Tree");
      t1 = new A.CpuProfilerTab(C.CpuProfilerViewType_1, t1._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t1.CoreElement$5$attributes$classes$html$text(_s3_, _null, _s10_, _null, "Bottom Up");
      t4 = type$.JSArray_CpuProfilerTab;
      tabs = H.setRuntimeTypeInfo([t2, t3, t1], t4);
      t1 = C.JSArray_methods.firstWhere$1(tabs, new A.HtmlCpuProfilerTabNav__init_closure(_this));
      _this.set$selectedTab(t1);
      t4 = N.PTabNav$(H.setRuntimeTypeInfo([t1, C.JSArray_methods.firstWhere$1(tabs, new A.HtmlCpuProfilerTabNav__init_closure0(_this)), C.JSArray_methods.firstWhere$1(tabs, new A.HtmlCpuProfilerTabNav__init_closure1(_this))], t4));
      t1 = t4.element;
      t3 = t1.style;
      t3.borderBottom = "0";
      t1.setAttribute("layout", "");
      t1.setAttribute("horizontal", "");
      t1 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t1.flex$0(0);
      t4.add$1(0, H.setRuntimeTypeInfo([t1, _this.treeTableToolbar], type$.JSArray_CoreElement));
      _this._html_cpu_profiler$_tabNav = t4;
      _this._updateToolbarForSelection$1(type$.CpuProfilerTab._as(_this.selectedTab));
      t4 = _this._html_cpu_profiler$_tabNav._selectedTabController;
      new P._BroadcastStream(t4, H._instanceType(t4)._eval$1("_BroadcastStream<1>")).listen$1(new A.HtmlCpuProfilerTabNav__init_closure2(_this));
    },
    _updateToolbarForSelection$1: function(selectedTab) {
      var t1, _this = this, _s6_ = "hidden";
      switch (selectedTab.type) {
        case C.CpuProfilerViewType_0:
          _this.treeTableToolbar.attribute$2(_s6_, true);
          break;
        case C.CpuProfilerViewType_2:
          t1 = _this.treeTableToolbar;
          t1.attribute$2(_s6_, false);
          t1.set$treeTable(_this.cpuProfiler.callTree.callTreeTable);
          break;
        case C.CpuProfilerViewType_1:
          t1 = _this.treeTableToolbar;
          t1.attribute$2(_s6_, false);
          t1.set$treeTable(_this.cpuProfiler.bottomUp.bottomUpTable);
          break;
      }
    },
    set$selectedTab: function(selectedTab) {
      this.selectedTab = type$.PTabNavTab._as(selectedTab);
    }
  };
  A.HtmlCpuProfilerTabNav__init_closure.prototype = {
    call$1: function(tab) {
      return type$.CpuProfilerTab._as(tab).type === this.$this.tabOrder.first;
    },
    $signature: 56
  };
  A.HtmlCpuProfilerTabNav__init_closure0.prototype = {
    call$1: function(tab) {
      return type$.CpuProfilerTab._as(tab).type === this.$this.tabOrder.second;
    },
    $signature: 56
  };
  A.HtmlCpuProfilerTabNav__init_closure1.prototype = {
    call$1: function(tab) {
      return type$.CpuProfilerTab._as(tab).type === this.$this.tabOrder.third;
    },
    $signature: 56
  };
  A.HtmlCpuProfilerTabNav__init_closure2.prototype = {
    call$1: function(tab) {
      var t1;
      type$.PTabNavTab._as(tab);
      t1 = this.$this;
      if (tab == t1.selectedTab)
        return;
      t1.selectedTab = tab;
      type$.CpuProfilerTab._as(tab);
      t1._updateToolbarForSelection$1(tab);
      t1.cpuProfiler.showView$1(tab.type);
    },
    $signature: 202
  };
  A.CpuProfilerTab.prototype = {};
  A.CpuProfilerTabOrder.prototype = {};
  L.DevToolsServerConnection.prototype = {
    DevToolsServerConnection$_$1: function(sseClient) {
      var t1 = this.sseClient._incomingController;
      new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$1(new L.DevToolsServerConnection$__closure(this));
      this.initFrameworkController$0();
    },
    initFrameworkController$0: function() {
      var t1 = type$.FrameworkController,
        t2 = t1._as($.globals.$index(0, C.Type_FrameworkController_QHx))._connectedController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new L.DevToolsServerConnection_initFrameworkController_closure(this));
      t2 = t1._as($.globals.$index(0, C.Type_FrameworkController_QHx))._framework_controller$_pageChangeController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new L.DevToolsServerConnection_initFrameworkController_closure0(this));
      t1 = t1._as($.globals.$index(0, C.Type_FrameworkController_QHx))._disconnectedController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new L.DevToolsServerConnection_initFrameworkController_closure1(this));
    },
    notify$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, parsedOptions;
      var $async$notify$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(W.Notification_requestPermission(), $async$notify$0);
            case 3:
              // returning from await.
              if ($async$result !== "granted") {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.dismissNotifications$0();
              t1 = new E.Notification();
              t2 = type$.dynamic;
              parsedOptions = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
              parsedOptions.$indexSet(0, "body", "DevTools is available in this existing browser window");
              t1._impl = W.Notification__factoryNotification("Dart DevTools", parsedOptions);
              $async$self._lastNotification = t1;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$notify$0, $async$completer);
    },
    dismissNotifications$0: function() {
      var t1 = this._lastNotification;
      if (t1 != null)
        t1._impl.close();
    },
    _callMethod$1$2: function(method, params, $T) {
      var id, json, t1, t2;
      type$.Map_String_dynamic._as(params);
      id = "" + this._nextRequestId++;
      json = C.C_JsonCodec.encode$2$toEncodable(P.LinkedHashMap_LinkedHashMap$_literal(["id", id, "method", method, "params", params], type$.String, type$.Object), null);
      t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      this._server_api_client$_completers.$indexSet(0, id, new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>")));
      t2 = this.sseClient._outgoingController;
      t2.add$1(0, H._instanceType(t2)._precomputed1._as(json));
      return t1;
    },
    _callMethod$1$1: function(method, $T) {
      return this._callMethod$1$2(method, null, $T);
    },
    _handleMessage$1: function(msg) {
      var request, method, params, e, t1, t2, completer, exception;
      try {
        request = type$.Map_dynamic_dynamic._as(C.C_JsonCodec.decode$2$reviver(0, msg, null));
        if (H.boolConversionCheck(J.containsKey$1$x(request, "method"))) {
          method = H._asStringS(J.$index$asx(request, "method"));
          params = type$.Map_String_dynamic._as(J.$index$asx(request, "params"));
          this._handleMethod$2(method, params);
        } else if (H.boolConversionCheck(J.containsKey$1$x(request, "id"))) {
          t1 = H._asStringS(J.$index$asx(request, "id"));
          t2 = J.$index$asx(request, "result");
          completer = this._server_api_client$_completers.remove$1(0, t1);
          if (completer != null)
            completer.complete$1(0, t2);
        } else
          P.print("Unable to parse API message from server:\n\n" + H.S(msg));
      } catch (exception) {
        e = H.unwrapException(exception);
        P.print("Failed to handle API message from server:\n\n" + H.S(msg) + "\n\n" + H.S(e));
      }
    },
    _handleMethod$2: function(method, params) {
      var t1, uri, notify, t2, pageId;
      type$.Map_String_dynamic._as(params);
      switch (method) {
        case "connectToVm":
          t1 = J.getInterceptor$asx(params);
          uri = H._asStringS(t1.$index(params, "uri"));
          notify = J.$eq$(t1.$index(params, "notify"), true);
          t1 = type$.FrameworkController._as($.globals.$index(0, C.Type_FrameworkController_QHx));
          t2 = P.Uri_parse(uri, 0, null);
          t1._connectVmController.add$1(0, new O.ConnectVmEvent(t2, notify));
          return;
        case "showPage":
          pageId = H._asStringS(J.$index$asx(params, "page"));
          type$.FrameworkController._as($.globals.$index(0, C.Type_FrameworkController_QHx))._showPageIdController.add$1(0, pageId);
          return;
        case "enableNotifications":
          W.Notification_requestPermission();
          return;
        case "notify":
          this.notify$0();
          return;
        default:
          P.print("Unknown request " + H.S(method) + " from server");
      }
    }
  };
  L.DevToolsServerConnection$__closure.prototype = {
    call$1: function(msg) {
      this.$this._handleMessage$1(H._asStringS(msg));
    },
    $signature: 8
  };
  L.DevToolsServerConnection_initFrameworkController_closure.prototype = {
    call$1: function(vmServiceUri) {
      var t1 = type$.dynamic;
      this.$this._callMethod$1$2("connected", P.LinkedHashMap_LinkedHashMap$_literal(["uri", J.toString$0$(type$.Uri._as(vmServiceUri))], type$.String, t1), t1);
    },
    $signature: 203
  };
  L.DevToolsServerConnection_initFrameworkController_closure0.prototype = {
    call$1: function(pageId) {
      var t1 = type$.dynamic;
      this.$this._callMethod$1$2("currentPage", P.LinkedHashMap_LinkedHashMap$_literal(["id", H._asStringS(pageId)], type$.String, t1), t1);
    },
    $signature: 8
  };
  L.DevToolsServerConnection_initFrameworkController_closure1.prototype = {
    call$1: function(_) {
      this.$this._callMethod$1$1("disconnected", type$.dynamic);
    },
    $signature: 2
  };
  R._connectWithSse_closure.prototype = {
    call$1: function(_) {
      var _this = this,
        t1 = _this.client._outgoingController,
        t2 = new P._StreamSinkWrapper(t1, H._instanceType(t1)._eval$1("_StreamSinkWrapper<1>")),
        service = U.VmServiceWrapper$fromNewVmService(_this.stream, t2.get$add(t2), _this._box_0.uri);
      t1 = t1.get$done();
      if (t1 != null)
        t1.whenComplete$1(new R._connectWithSse__closure(_this.finishedCompleter, service));
      _this.serviceCompleter.complete$1(0, service);
    },
    $signature: 3
  };
  R._connectWithSse__closure.prototype = {
    call$0: function() {
      this.finishedCompleter.complete$0(0);
      this.service._vmService.dispose$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R._connectWithWebSocket_closure.prototype = {
    call$1: function(message) {
      var t1 = this.ws._html0$_sink;
      t1.toString;
      t1._stream_sink$_sink.add$1(0, H._instanceType(t1)._eval$1("DelegatingStreamSink.T")._as(message));
    },
    $signature: 8
  };
  R._connectWithWebSocket_closure0.prototype = {
    call$1: function(_) {
      this.finishedCompleter.complete$0(0);
      this.service._vmService.dispose$0();
    },
    $signature: 2
  };
  R.connect_onError.prototype = {
    call$1: function(error) {
      var t1 = this.connectedCompleter;
      if (t1.future._state === 0)
        t1.completeError$1(error);
    },
    $signature: 9
  };
  R.connect_connectHelper.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.VmServiceWrapper),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, service;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.uri;
              t2 = t1.get$scheme() === "sse" || t1.get$scheme() === "sses";
              t3 = $async$self.onError;
              t4 = $async$self.finishedCompleter;
              $async$goto = t2 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(R._connectWithSse(t1, t3, t4), $async$call$0);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return P._asyncAwait(R._connectWithWebSocket(t1, t3, t4), $async$call$0);
            case 7:
              // returning from await.
            case 4:
              // join
              service = $async$result;
              t1 = type$.Version;
              $async$goto = 8;
              return P._asyncAwait(service._trackFuture$1$2("getVersion", service._vmService._call$1$1(0, "getVersion", t1), t1), $async$call$0);
            case 8:
              // returning from await.
              $async$returnValue = service;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 204
  };
  R.connect_closure.prototype = {
    call$1: function(service) {
      var t1;
      type$.VmServiceWrapper._as(service);
      t1 = this.connectedCompleter;
      if (t1.future._state === 0)
        t1.complete$1(0, service);
    },
    $signature: 205
  };
  R.connect_closure0.prototype = {
    call$1: function(_) {
      if (this.connectedCompleter.future._state === 0)
        this.onError.call$1(null);
    },
    $signature: 27
  };
  E.ToggleableServiceExtensionDescription.prototype = {};
  E.ServiceExtensionDescription.prototype = {
    get$extension: function() {
      return this.extension;
    }
  };
  E.ServiceExtensionDescription_closure.prototype = {
    call$1: function(v) {
      return J.toString$0$(this.T._as(v));
    },
    $signature: function() {
      return this.T._eval$1("String(0)");
    }
  };
  E.closure.prototype = {
    call$1: function(extension) {
      return H._asStringS(extension.get$extension());
    },
    $signature: 206
  };
  E.closure0.prototype = {
    call$1: function(extension) {
      return type$.ServiceExtensionDescription_dynamic._as(extension);
    },
    $signature: 207
  };
  R.ServiceConnectionManager.prototype = {
    get$serviceCapabilities: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.VmServiceCapabilities),
        $async$returnValue, $async$self = this, t2, t1, $async$temp1;
      var $async$get$serviceCapabilities = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._serviceCapabilities;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self._serviceAvailable.future, $async$get$serviceCapabilities);
            case 5:
              // returning from await.
              t1 = $async$self.service;
              t2 = type$.Version;
              $async$temp1 = R;
              $async$goto = 6;
              return P._asyncAwait(t1._trackFuture$1$2("getVersion", t1._vmService._call$1$1(0, "getVersion", t2), t2), $async$get$serviceCapabilities);
            case 6:
              // returning from await.
              t2 = $async$self._serviceCapabilities = new $async$temp1.VmServiceCapabilities($async$result);
              t1 = t2;
            case 4:
              // join
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$serviceCapabilities, $async$completer);
    },
    get$hasConnection: function() {
      if (this.service != null) {
        var t1 = this.connectedApp;
        t1 = t1 != null && t1._isFlutterApp != null && t1._isProfileBuild != null && t1._isDartWebApp != null;
      } else
        t1 = false;
      return t1;
    },
    callService$2$isolateId: function($name, isolateId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Response_2),
        $async$returnValue, $async$self = this, t1, registered;
      var $async$callService$2$isolateId = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              registered = $async$self._registeredMethodsForService.$index(0, $name);
              if (registered == null)
                registered = C.List_empty0;
              t1 = J.getInterceptor$asx(registered);
              if (t1.get$isEmpty(registered))
                throw H.wrapException(P.Exception_Exception('There are no registered methods for service "' + $name + '"'));
              $async$returnValue = $async$self.service.callMethod$3$args$isolateId(t1.get$first(registered), null, isolateId);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$callService$2$isolateId, $async$completer);
    },
    registeredServiceListenable$1: function($name) {
      return this._registeredServiceNotifiers.putIfAbsent$2(0, $name, new R.ServiceConnectionManager_registeredServiceListenable_closure());
    },
    vmServiceOpened$2$onClosed: function(service, onClosed) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, serviceStreamName, t1, vm;
      var $async$vmServiceOpened$2$onClosed = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(service.get$serviceStreamName(), $async$vmServiceOpened$2$onClosed);
            case 2:
              // returning from await.
              serviceStreamName = $async$result;
              t1 = type$.VM;
              $async$goto = 3;
              return P._asyncAwait(service._trackFuture$1$2("getVM", service._vmService._call$1$1(0, "getVM", t1), t1), $async$vmServiceOpened$2$onClosed);
            case 3:
              // returning from await.
              vm = $async$self.vm = $async$result;
              t1 = $async$self.sdkVersion = vm.version;
              if (J.getInterceptor$asx(t1).contains$1(t1, " "))
                $async$self.sdkVersion = C.JSString_methods.substring$2(t1, 0, C.JSString_methods.indexOf$1(t1, " "));
              $async$self.service = service;
              $async$self._serviceAvailable.complete$1(0, service);
              t1 = new L.ConnectedApp();
              $async$self.connectedApp = t1;
              $async$self._serviceExtensionManager.connectedApp = t1;
              $async$self._deviceBusy.set$value(0, false);
              onClosed.then$1$1(new R.ServiceConnectionManager_vmServiceOpened_closure($async$self), type$.void);
              t1 = service._vmService._getEventController$1(serviceStreamName);
              new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent($async$self));
              $async$self._isolateManager._service_manager$_service = service;
              $async$self._serviceExtensionManager._service_manager$_service = service;
              t1 = $async$self._vmFlagManager;
              t1._service_manager$_service = service;
              t1._initFlags$0();
              $async$self._stateController.add$1(0, true);
              $async$goto = 4;
              return P._asyncAwait($async$self._isolateManager._initIsolates$1(vm.isolates), $async$vmServiceOpened$2$onClosed);
            case 4:
              // returning from await.
              t2 = service._vmService._getEventController$1("Isolate");
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1($async$self._isolateManager.get$_handleIsolateEvent());
              t2 = service._vmService._getEventController$1("Extension");
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1($async$self._serviceExtensionManager.get$_handleExtensionEvent());
              t2 = service._vmService._getEventController$1("VM");
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(t1.get$handleVmEvent());
              $async$goto = 5;
              return P._asyncAwait(P.Future_wait(new H.MappedListIterable(H.setRuntimeTypeInfo(["Debug", "Extension", "GC", "Isolate", "Logging", "Stderr", "Stdout", "Timeline", "VM", serviceStreamName], type$.JSArray_String), type$.Future_Null_Function_String._as(new R.ServiceConnectionManager_vmServiceOpened_closure0(service)), type$.MappedListIterable_of_String_and_Future_Null), type$.Null), $async$vmServiceOpened$2$onClosed);
            case 5:
              // returning from await.
              $async$goto = 6;
              return P._asyncAwait($async$self.connectedApp.initializeValues$0(), $async$vmServiceOpened$2$onClosed);
            case 6:
              // returning from await.
              $async$self._connectionAvailableController.add$1(0, service);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$vmServiceOpened$2$onClosed, $async$completer);
    },
    performHotReload$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$performHotReload$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 2;
              return P._asyncAwait($async$self.callService$2$isolateId("reloadSources", t1.get$id(t1)), $async$performHotReload$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$performHotReload$0, $async$completer);
    },
    performHotRestart$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$performHotRestart$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 2;
              return P._asyncAwait($async$self.callService$2$isolateId("hotRestart", t1.get$id(t1)), $async$performHotRestart$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$performHotRestart$0, $async$completer);
    },
    getFlutterVersion$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Response_2),
        $async$returnValue, $async$self = this, t1;
      var $async$getFlutterVersion$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 3;
              return P._asyncAwait($async$self.callService$2$isolateId("flutterVersion", t1.get$id(t1)), $async$getFlutterVersion$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getFlutterVersion$0, $async$completer);
    },
    getDisplayRefreshRate$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.double),
        $async$returnValue, $async$self = this, t2, flutterView, message, viewId, t3, fps, t1, $async$temp1, $async$temp2;
      var $async$getDisplayRefreshRate$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.connectedApp;
              $async$temp1 = t1 == null;
              if ($async$temp1)
                $async$result = $async$temp1;
              else {
                // goto then
                $async$goto = 3;
                break;
              }
              // goto join
              $async$goto = 4;
              break;
            case 3:
              // then
              $async$temp1 = H;
              $async$goto = 5;
              return P._asyncAwait(t1.get$isFlutterApp(), $async$getDisplayRefreshRate$0);
            case 5:
              // returning from await.
              $async$result = !$async$temp1.boolConversionCheck($async$result);
            case 4:
              // join
              if ($async$result) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.service;
              t2 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 6;
              return P._asyncAwait(t1.callServiceExtension$2$isolateId("_flutter.listViews", t2.get$id(t2)), $async$getDisplayRefreshRate$0);
            case 6:
              // returning from await.
              t2 = $async$result.json;
              flutterView = J.firstWhere$2$orElse$ax(type$.List_dynamic._as(J.cast$1$0$ax(J.$index$asx(t2, "views"), type$.Map_String_dynamic)), new R.ServiceConnectionManager_getDisplayRefreshRate_closure(), new R.ServiceConnectionManager_getDisplayRefreshRate_closure0());
              if (flutterView == null) {
                message = "No Flutter Views to query: " + H.S(t2);
                B.log(message, C.LogLevel_2);
                throw H.wrapException(P.Exception_Exception(message));
              }
              viewId = J.$index$asx(flutterView, "id");
              t1 = $async$self.service;
              t2 = $async$self._isolateManager._selectedIsolate;
              t2 = t2.get$id(t2);
              t3 = type$.dynamic;
              $async$temp1 = H;
              $async$temp2 = J;
              $async$goto = 7;
              return P._asyncAwait(t1.callServiceExtension$3$args$isolateId("_flutter.getDisplayRefreshRate", P.LinkedHashMap_LinkedHashMap$_literal(["viewId", viewId], t3, t3), t2), $async$getDisplayRefreshRate$0);
            case 7:
              // returning from await.
              fps = $async$temp1._asDoubleS($async$temp2.$index$asx($async$result.json, "fps"));
              if (fps === 0) {
                $async$returnValue = 60;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = J.roundToDouble$0$n(fps);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getDisplayRefreshRate$0, $async$completer);
    },
    libraryUriAvailableNow$1: function(uri) {
      var t2,
        t1 = this._isolateManager.selectedIsolateLibraries;
      t1.toString;
      t2 = H._arrayInstanceType(t1);
      return C.JSArray_methods.any$1(new H.MappedListIterable(t1, t2._eval$1("String(1)")._as(new R.ServiceConnectionManager_libraryUriAvailableNow_closure()), t2._eval$1("MappedListIterable<1,String>")).toList$0(0), new R.ServiceConnectionManager_libraryUriAvailableNow_closure0(uri));
    },
    libraryUriAvailable$1: function(uri) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$libraryUriAvailable$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self._isolateManager.selectedIsolateAvailable.future, $async$libraryUriAvailable$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$self.libraryUriAvailableNow$1(uri);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$libraryUriAvailable$1, $async$completer);
    },
    set$_serviceAvailable: function(_serviceAvailable) {
      this._serviceAvailable = type$.Completer_VmService._as(_serviceAvailable);
    }
  };
  R.ServiceConnectionManager_registeredServiceListenable_closure.prototype = {
    call$0: function() {
      return new B.ImmediateValueNotifier(false, H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function), type$.ImmediateValueNotifier_bool);
    },
    $signature: 72
  };
  R.ServiceConnectionManager_vmServiceOpened_closure.prototype = {
    call$1: function(_) {
      var t2, t3,
        t1 = this.$this;
      t1.set$_serviceAvailable(new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_VmService), type$._AsyncCompleter_VmService));
      t1.connectedApp = t1.sdkVersion = t1.vm = t1.service = null;
      t2 = t1._serviceExtensionManager;
      t2.connectedApp = null;
      t2.resetAvailableExtensions$0();
      t2 = t1.serviceTrafficLogger;
      if (t2 != null) {
        t3 = t2._sendSub;
        if (t3 != null)
          t3.cancel$0(0);
        t2 = t2._receiveSub;
        if (t2 != null)
          t2.cancel$0(0);
      }
      t1._deviceBusy.set$value(0, false);
      t1._stateController.add$1(0, false);
      t1._connectionClosedController.add$1(0, null);
      return null;
    },
    $signature: 209
  };
  R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent.prototype = {
    call$1: function(e) {
      var serviceName, t1;
      type$.Event_2._as(e);
      if (e.kind === "ServiceRegistered") {
        serviceName = e.service;
        t1 = this.$this;
        J.add$1$ax(t1._registeredMethodsForService.putIfAbsent$2(0, serviceName, new R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure()), e.method);
        t1._registeredServiceNotifiers.putIfAbsent$2(0, serviceName, new R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure0()).set$value(0, true);
      }
      if (e.kind === "ServiceUnregistered") {
        serviceName = e.service;
        t1 = this.$this;
        t1._registeredMethodsForService.remove$1(0, serviceName);
        t1._registeredServiceNotifiers.putIfAbsent$2(0, serviceName, new R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure1()).set$value(0, false);
      }
    },
    $signature: 12
  };
  R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], type$.JSArray_String);
    },
    $signature: 210
  };
  R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure0.prototype = {
    call$0: function() {
      return new B.ImmediateValueNotifier(true, H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function), type$.ImmediateValueNotifier_bool);
    },
    $signature: 72
  };
  R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure1.prototype = {
    call$0: function() {
      return new B.ImmediateValueNotifier(false, H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function), type$.ImmediateValueNotifier_bool);
    },
    $signature: 72
  };
  R.ServiceConnectionManager_vmServiceOpened_closure0.prototype = {
    call$1: function(id) {
      H._asStringS(id);
      return this.$call$body$ServiceConnectionManager_vmServiceOpened_closure(id);
    },
    $call$body$ServiceConnectionManager_vmServiceOpened_closure: function(id) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, e, exception, $async$exception;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait($async$self.service.streamListen$1(id), $async$call$1);
            case 6:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              if (!J.endsWith$1$s(id, "Logging"))
                B.log("Service client stream not supported: '" + H.S(id) + "'\n  " + H.S(e), C.LogLevel_2);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 211
  };
  R.ServiceConnectionManager_getDisplayRefreshRate_closure.prototype = {
    call$1: function(view) {
      return J.$eq$(J.$index$asx(view, "type"), "FlutterView");
    },
    $signature: 14
  };
  R.ServiceConnectionManager_getDisplayRefreshRate_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  R.ServiceConnectionManager_libraryUriAvailableNow_closure.prototype = {
    call$1: function(ref) {
      return type$.LibraryRef._as(ref).get$uri();
    },
    $signature: 212
  };
  R.ServiceConnectionManager_libraryUriAvailableNow_closure0.prototype = {
    call$1: function(u) {
      return J.startsWith$1$s(H._asStringS(u), this.uri);
    },
    $signature: 21
  };
  R.IsolateManager.prototype = {
    selectIsolate$1: function(isolateRefId) {
      var t1 = this._isolates;
      this._setSelectedIsolate$1((t1 && C.JSArray_methods).firstWhere$2$orElse(t1, new R.IsolateManager_selectIsolate_closure(isolateRefId), new R.IsolateManager_selectIsolate_closure0()));
    },
    _initIsolates$1: function(isolates) {
      return this._initIsolates$body$IsolateManager(type$.List_IsolateRef._as(isolates));
    },
    _initIsolates$body$IsolateManager: function(isolates) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$_initIsolates$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.set$_isolates(isolates);
              $async$goto = 2;
              return P._asyncAwait($async$self._initSelectedIsolate$1(isolates), $async$_initIsolates$1);
            case 2:
              // returning from await.
              t1 = $async$self._selectedIsolate;
              $async$goto = t1 != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$self._isolateCreatedController.add$1(0, t1);
              $async$self._selectedIsolateController.add$1(0, $async$self._selectedIsolate);
              $async$goto = 5;
              return P._asyncAwait($async$self._serviceExtensionManager._addRegisteredExtensionRPCs$1($async$self._selectedIsolate), $async$_initIsolates$1);
            case 5:
              // returning from await.
            case 4:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_initIsolates$1, $async$completer);
    },
    _handleIsolateEvent$1: function($event) {
      return this._handleIsolateEvent$body$IsolateManager(type$.Event_2._as($event));
    },
    _handleIsolateEvent$body$IsolateManager: function($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$_handleIsolateEvent$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              type$.MessageBus._as($.globals.$index(0, C.Type_MessageBus_MAi))._controller.add$1(0, new A.BusEvent("debugger", $event));
              t1 = $event.kind;
              $async$goto = t1 === "IsolateStart" ? 2 : 4;
              break;
            case 2:
              // then
              t1 = $async$self._isolates;
              (t1 && C.JSArray_methods).add$1(t1, $event.isolate);
              $async$self._isolateCreatedController.add$1(0, $event.isolate);
              $async$goto = $async$self._selectedIsolate == null ? 5 : 6;
              break;
            case 5:
              // then
              $async$goto = 7;
              return P._asyncAwait($async$self._setSelectedIsolate$1($event.isolate), $async$_handleIsolateEvent$1);
            case 7:
              // returning from await.
            case 6:
              // join
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = t1 === "ServiceExtensionAdded" ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 11;
              return P._asyncAwait($async$self._serviceExtensionManager._maybeAddServiceExtension$1($event.extensionRPC), $async$_handleIsolateEvent$1);
            case 11:
              // returning from await.
              $async$goto = $async$self._selectedIsolate == null && J.startsWith$1$s($event.extensionRPC, "ext.flutter.") ? 12 : 13;
              break;
            case 12:
              // then
              $async$goto = 14;
              return P._asyncAwait($async$self._setSelectedIsolate$1($event.isolate), $async$_handleIsolateEvent$1);
            case 14:
              // returning from await.
            case 13:
              // join
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              if (t1 === "IsolateExit") {
                t1 = $async$self._isolates;
                (t1 && C.JSArray_methods).remove$1(t1, $event.isolate);
                $async$self._isolateExitedController.add$1(0, $event.isolate);
                if (J.$eq$($async$self._selectedIsolate, $event.isolate)) {
                  t1 = $async$self._isolates;
                  $async$self.set$_selectedIsolate(t1.length === 0 ? null : C.JSArray_methods.get$first(t1));
                  t1 = $async$self._selectedIsolate;
                  if (t1 == null)
                    $async$self.selectedIsolateAvailable = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
                  $async$self._selectedIsolateController.add$1(0, t1);
                  $async$self._serviceExtensionManager.resetAvailableExtensions$0();
                }
              }
            case 9:
              // join
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleIsolateEvent$1, $async$completer);
    },
    _initSelectedIsolate$1: function(isolates) {
      return this._initSelectedIsolate$body$IsolateManager(type$.List_IsolateRef._as(isolates));
    },
    _initSelectedIsolate$body$IsolateManager: function(isolates) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, _i, ref, t4, t5, t6, _i0, t1;
      var $async$_initSelectedIsolate$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = isolates.length;
              if (t1 === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = type$.dynamic, t3 = type$.Isolate, _i = 0;
            case 3:
              // for condition
              if (!(_i < isolates.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              ref = isolates[_i];
              $async$goto = $async$self._selectedIsolate == null ? 6 : 7;
              break;
            case 6:
              // then
              t4 = $async$self._service_manager$_service;
              t5 = J.get$id$x(ref);
              t6 = t4._vmService;
              t6.toString;
              $async$goto = 8;
              return P._asyncAwait(t4._trackFuture$1$2("getIsolate", t6._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t5], t2, t2), t3), t3), $async$_initSelectedIsolate$1);
            case 8:
              // returning from await.
              t4 = $async$result.extensionRPCs;
              $async$goto = t4 != null ? 9 : 10;
              break;
            case 9:
              // then
              t5 = t4.length, _i0 = 0;
            case 11:
              // for condition
              if (!(_i0 < t5)) {
                // goto after for
                $async$goto = 13;
                break;
              }
              $async$goto = J.startsWith$1$s(H._asStringS(t4[_i0]), "ext.flutter.") ? 14 : 15;
              break;
            case 14:
              // then
              $async$goto = 16;
              return P._asyncAwait($async$self._setSelectedIsolate$1(ref), $async$_initSelectedIsolate$1);
            case 16:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 15:
              // join
            case 12:
              // for update
              ++_i0;
              // goto for condition
              $async$goto = 11;
              break;
            case 13:
              // after for
            case 10:
              // join
            case 7:
              // join
            case 4:
              // for update
              isolates.length === t1 || (0, H.throwConcurrentModificationError)(isolates), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              ref = C.JSArray_methods.firstWhere$2$orElse(isolates, new R.IsolateManager__initSelectedIsolate_closure(), new R.IsolateManager__initSelectedIsolate_closure0());
              $async$goto = 17;
              return P._asyncAwait($async$self._setSelectedIsolate$1(ref == null ? C.JSArray_methods.get$first(isolates) : ref), $async$_initSelectedIsolate$1);
            case 17:
              // returning from await.
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_initSelectedIsolate$1, $async$completer);
    },
    _setSelectedIsolate$1: function(ref) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5;
      var $async$_setSelectedIsolate$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (J.$eq$($async$self._selectedIsolate, ref)) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self._service_manager$_service;
              t2 = ref.get$id(ref);
              t3 = t1._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Isolate;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getIsolate", t3._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5), $async$_setSelectedIsolate$1);
            case 3:
              // returning from await.
              $async$self.set$selectedIsolateLibraries($async$result.libraries);
              $async$self._selectedIsolate = ref;
              t1 = $async$self.selectedIsolateAvailable;
              if (t1.future._state === 0)
                t1.complete$0(0);
              $async$self._selectedIsolateController.add$1(0, ref);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_setSelectedIsolate$1, $async$completer);
    },
    getSelectedIsolate$1: function(onData) {
      var t1;
      type$.void_Function_IsolateRef._as(onData);
      t1 = this._selectedIsolate;
      if (t1 != null)
        onData.call$1(t1);
      t1 = this._selectedIsolateController;
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(onData);
    },
    set$_isolates: function(_isolates) {
      this._isolates = type$.List_IsolateRef._as(_isolates);
    },
    set$_selectedIsolate: function(_selectedIsolate) {
      this._selectedIsolate = type$.IsolateRef._as(_selectedIsolate);
    },
    set$selectedIsolateLibraries: function(selectedIsolateLibraries) {
      this.selectedIsolateLibraries = type$.List_LibraryRef._as(selectedIsolateLibraries);
    }
  };
  R.IsolateManager_selectIsolate_closure.prototype = {
    call$1: function(ref) {
      type$.IsolateRef._as(ref);
      return ref.get$id(ref) == this.isolateRefId;
    },
    $signature: 74
  };
  R.IsolateManager_selectIsolate_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  R.IsolateManager__initSelectedIsolate_closure.prototype = {
    call$1: function(ref) {
      type$.IsolateRef._as(ref);
      return J.contains$1$asx(ref.get$name(ref), ":main(");
    },
    $signature: 74
  };
  R.IsolateManager__initSelectedIsolate_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  R.ServiceExtensionManager.prototype = {
    _handleExtensionEvent$1: function($event) {
      return this._handleExtensionEvent$body$ServiceExtensionManager(type$.Event_2._as($event));
    },
    _handleExtensionEvent$body$ServiceExtensionManager: function($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, $name, valueFromJson, extension, value, enabled;
      var $async$_handleExtensionEvent$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
            case 3:
              // switch
              switch ($event.extensionKind) {
                case "Flutter.FirstFrame":
                  // goto case
                  $async$goto = 5;
                  break;
                case "Flutter.Frame":
                  // goto case
                  $async$goto = 6;
                  break;
                case "Flutter.ServiceExtensionStateChanged":
                  // goto case
                  $async$goto = 7;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
            case 6:
              // case
              $async$goto = 8;
              return P._asyncAwait($async$self._onFrameEventReceived$0(), $async$_handleExtensionEvent$1);
            case 8:
              // returning from await.
              // goto after switch
              $async$goto = 4;
              break;
            case 7:
              // case
              t1 = $event.json;
              t2 = J.getInterceptor$asx(t1);
              $name = J.toString$0$(J.$index$asx(t2.$index(t1, "extensionData"), "extension"));
              valueFromJson = J.toString$0$(J.$index$asx(t2.$index(t1, "extensionData"), "value"));
              extension = $.$get$serviceExtensionsWhitelist().$index(0, $name);
              $async$goto = extension != null ? 9 : 10;
              break;
            case 9:
              // then
              value = $async$self._getExtensionValueFromJson$2($name, valueFromJson);
              if (extension instanceof E.ToggleableServiceExtensionDescription) {
                t1 = extension.values;
                if (0 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 0);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = extension.$ti._precomputed1._as(t1[0]);
                enabled = value == null ? t1 == null : value === t1;
              } else
                enabled = true;
              $async$goto = 11;
              return P._asyncAwait($async$self.setServiceExtensionState$4$callExtension($name, enabled, value, false), $async$_handleExtensionEvent$1);
            case 11:
              // returning from await.
            case 10:
              // join
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleExtensionEvent$1, $async$completer);
    },
    _getExtensionValueFromJson$2: function($name, valueFromJson) {
      switch (J.get$runtimeType$(C.JSArray_methods.get$first($.$get$serviceExtensionsWhitelist().$index(0, $name).values))) {
        case C.Type_bool_lhE:
          return valueFromJson === "true" && true;
        case C.Type_int_tHn:
        case C.Type_double_K1J:
          return P.num_parse(valueFromJson);
        default:
          return valueFromJson;
      }
    },
    _onFrameEventReceived$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, extensionsToProcess, t2, _i;
      var $async$_onFrameEventReceived$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._firstFrameEventReceived) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._firstFrameEventReceived = true;
              t1 = $async$self._pendingServiceExtensions;
              extensionsToProcess = t1.toList$0(0);
              t1.clear$0(0);
              t1 = H.setRuntimeTypeInfo([], type$.JSArray_Future_void);
              for (t2 = extensionsToProcess.length, _i = 0; _i < extensionsToProcess.length; extensionsToProcess.length === t2 || (0, H.throwConcurrentModificationError)(extensionsToProcess), ++_i)
                C.JSArray_methods.add$1(t1, $async$self._addServiceExtension$1(extensionsToProcess[_i]));
              $async$goto = 3;
              return P._asyncAwait(P.Future_wait(t1, type$.void), $async$_onFrameEventReceived$0);
            case 3:
              // returning from await.
              $async$self.extensionStatesUpdated.complete$0(0);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_onFrameEventReceived$0, $async$completer);
    },
    _addRegisteredExtensionRPCs$1: function(isolateRef) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, isolate, _i, value, didSendFirstFrameEvent, t1, $async$temp1;
      var $async$_addRegisteredExtensionRPCs$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._service_manager$_service;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = isolateRef.get$id(isolateRef);
              t3 = t1._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Isolate;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getIsolate", t3._call$1$2(0, "getIsolate", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", t2], t4, t4), t5), t5), $async$_addRegisteredExtensionRPCs$1);
            case 3:
              // returning from await.
              isolate = $async$result;
              $async$goto = isolate.extensionRPCs != null ? 4 : 5;
              break;
            case 4:
              // then
              $async$temp1 = H;
              $async$goto = 9;
              return P._asyncAwait($async$self.connectedApp.get$isFlutterApp(), $async$_addRegisteredExtensionRPCs$1);
            case 9:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 6 : 8;
              break;
            case 6:
              // then
              t1 = isolate.extensionRPCs, t2 = t1.length, _i = 0;
            case 10:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 12;
                break;
              }
              $async$goto = 13;
              return P._asyncAwait($async$self._maybeAddServiceExtension$1(t1[_i]), $async$_addRegisteredExtensionRPCs$1);
            case 13:
              // returning from await.
            case 11:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 10;
              break;
            case 12:
              // after for
              if ($async$self._pendingServiceExtensions._collection$_length === 0)
                $async$self.extensionStatesUpdated.complete$0(0);
              $async$goto = !$async$self._firstFrameEventReceived ? 14 : 15;
              break;
            case 14:
              // then
              $async$goto = $async$self.isServiceExtensionAvailable$1("ext.flutter.didSendFirstFrameEvent") ? 16 : 18;
              break;
            case 16:
              // then
              t1 = $async$self._service_manager$_service;
              t2 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 19;
              return P._asyncAwait(t1.callServiceExtension$2$isolateId("ext.flutter.didSendFirstFrameEvent", t2.get$id(t2)), $async$_addRegisteredExtensionRPCs$1);
            case 19:
              // returning from await.
              value = $async$result;
              didSendFirstFrameEvent = J.$eq$(J.$index$asx(value == null ? null : value.json, "enabled"), "true");
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              $async$goto = 20;
              return P._asyncAwait(B.EvalOnDartLibrary$(H.setRuntimeTypeInfo(["package:flutter/src/widgets/binding.dart"], type$.JSArray_String), $async$self._service_manager$_service).eval$2$isAlive("WidgetsBinding.instance.debugDidSendFirstFrameEvent", null), $async$_addRegisteredExtensionRPCs$1);
            case 20:
              // returning from await.
              value = $async$result;
              didSendFirstFrameEvent = (value == null ? null : value.get$valueAsString(value)) === "true";
            case 17:
              // join
              $async$goto = didSendFirstFrameEvent ? 21 : 22;
              break;
            case 21:
              // then
              $async$goto = 23;
              return P._asyncAwait($async$self._onFrameEventReceived$0(), $async$_addRegisteredExtensionRPCs$1);
            case 23:
              // returning from await.
            case 22:
              // join
            case 15:
              // join
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              t1 = isolate.extensionRPCs, t2 = t1.length, _i = 0;
            case 24:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 26;
                break;
              }
              $async$goto = 27;
              return P._asyncAwait($async$self._addServiceExtension$1(t1[_i]), $async$_addRegisteredExtensionRPCs$1);
            case 27:
              // returning from await.
            case 25:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 24;
              break;
            case 26:
              // after for
            case 7:
              // join
            case 5:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_addRegisteredExtensionRPCs$1, $async$completer);
    },
    _maybeAddServiceExtension$1: function($name) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_maybeAddServiceExtension$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self._firstFrameEventReceived ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self._addServiceExtension$1($name), $async$_maybeAddServiceExtension$1);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$self._pendingServiceExtensions.add$1(0, $name);
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_maybeAddServiceExtension$1, $async$completer);
    },
    _addServiceExtension$1: function($name) {
      var t1, _this = this,
        streamController = _this._getServiceExtensionController$1($name);
      _this._serviceExtensions.add$1(0, $name);
      streamController.add$1(0, true);
      t1 = _this._enabledServiceExtensions;
      if (t1.containsKey$1(0, $name))
        return _this._callServiceExtension$2($name, t1.$index(0, $name).value);
      else
        return _this._restoreExtensionFromDevice$1($name);
    },
    _restoreExtensionFromDevice$1: function($name) {
      return this._restoreExtensionFromDevice$body$ServiceExtensionManager($name);
    },
    _restoreExtensionFromDevice$body$ServiceExtensionManager: function($name) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, expectedValueType, response, enabled, value, value0, t2, exception, t1, $async$exception;
      var $async$_restoreExtensionFromDevice$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$serviceExtensionsWhitelist();
              if (!t1.containsKey$1(0, $name)) {
                // goto return
                $async$goto = 1;
                break;
              }
              expectedValueType = J.get$runtimeType$(C.JSArray_methods.get$first(t1.$index(0, $name).values));
              $async$handler = 4;
              t1 = $async$self._service_manager$_service;
              t2 = $async$self._isolateManager._selectedIsolate;
              $async$goto = 7;
              return P._asyncAwait(t1.callServiceExtension$2$isolateId($name, t2.get$id(t2)), $async$_restoreExtensionFromDevice$1);
            case 7:
              // returning from await.
              response = $async$result;
            case 8:
              // switch
              switch (expectedValueType) {
                case C.Type_bool_lhE:
                  // goto case
                  $async$goto = 10;
                  break;
                case C.Type_String_k8F:
                  // goto case
                  $async$goto = 11;
                  break;
                case C.Type_int_tHn:
                  // goto case
                  $async$goto = 12;
                  break;
                case C.Type_double_K1J:
                  // goto case
                  $async$goto = 13;
                  break;
                default:
                  // goto default
                  $async$goto = 14;
                  break;
              }
              break;
            case 10:
              // case
              enabled = J.$eq$(J.$index$asx(response.json, "enabled"), "true") && true;
              $async$goto = 15;
              return P._asyncAwait($async$self._maybeRestoreExtension$2($name, enabled), $async$_restoreExtensionFromDevice$1);
            case 15:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              value = H._asStringS(J.$index$asx(response.json, "value"));
              $async$goto = 16;
              return P._asyncAwait($async$self._maybeRestoreExtension$2($name, value), $async$_restoreExtensionFromDevice$1);
            case 16:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // case
            case 13:
              // case
              value0 = P.num_parse(H._asStringS(J.$index$asx(response.json, C.JSString_methods.substring$1($name, J.lastIndexOf$1$s($name, ".") + 1))));
              $async$goto = 17;
              return P._asyncAwait($async$self._maybeRestoreExtension$2($name, value0), $async$_restoreExtensionFromDevice$1);
            case 17:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 14:
              // default
              // goto return
              $async$goto = 1;
              break;
            case 9:
              // after switch
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              H.unwrapException($async$exception);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_restoreExtensionFromDevice$1, $async$completer);
    },
    _maybeRestoreExtension$2: function($name, value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, extensionDescription;
      var $async$_maybeRestoreExtension$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              extensionDescription = $.$get$serviceExtensionsWhitelist().$index(0, $name);
              $async$goto = extensionDescription instanceof E.ToggleableServiceExtensionDescription ? 3 : 5;
              break;
            case 3:
              // then
              t1 = extensionDescription.values;
              if (0 >= t1.length) {
                $async$returnValue = H.ioore(t1, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = extensionDescription.$ti._precomputed1._as(t1[0]);
              $async$goto = (value == null ? t1 == null : value === t1) ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return P._asyncAwait($async$self.setServiceExtensionState$4$callExtension($name, true, value, false), $async$_maybeRestoreExtension$2);
            case 8:
              // returning from await.
            case 7:
              // join
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 9;
              return P._asyncAwait($async$self.setServiceExtensionState$4$callExtension($name, true, value, false), $async$_maybeRestoreExtension$2);
            case 9:
              // returning from await.
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_maybeRestoreExtension$2, $async$completer);
    },
    _callServiceExtension$2: function($name, value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, t1;
      var $async$_callServiceExtension$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._service_manager$_service;
              if (t1 == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = H._isBool(value) ? 3 : 5;
              break;
            case 3:
              // then
              t2 = $async$self._isolateManager._selectedIsolate;
              t2 = t2.get$id(t2);
              t3 = type$.dynamic;
              $async$goto = 6;
              return P._asyncAwait(t1.callServiceExtension$3$args$isolateId($name, P.LinkedHashMap_LinkedHashMap$_literal(["enabled", value], t3, t3), t2), $async$_callServiceExtension$2);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = typeof value == "string" ? 7 : 9;
              break;
            case 7:
              // then
              t2 = $async$self._isolateManager._selectedIsolate;
              t2 = t2.get$id(t2);
              t3 = type$.dynamic;
              $async$goto = 10;
              return P._asyncAwait(t1.callServiceExtension$3$args$isolateId($name, P.LinkedHashMap_LinkedHashMap$_literal(["value", value], t3, t3), t2), $async$_callServiceExtension$2);
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = typeof value == "number" ? 11 : 12;
              break;
            case 11:
              // then
              t2 = $async$self._isolateManager._selectedIsolate;
              t2 = t2.get$id(t2);
              t3 = type$.dynamic;
              $async$goto = 13;
              return P._asyncAwait(t1.callServiceExtension$3$args$isolateId($name, P.LinkedHashMap_LinkedHashMap$_literal([C.JSString_methods.substring$1($name, J.getInterceptor$s($name).lastIndexOf$1($name, ".") + 1), value], t3, t3), t2), $async$_callServiceExtension$2);
            case 13:
              // returning from await.
            case 12:
              // join
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_callServiceExtension$2, $async$completer);
    },
    resetAvailableExtensions$0: function() {
      var _this = this;
      _this.extensionStatesUpdated = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
      _this._firstFrameEventReceived = false;
      _this._pendingServiceExtensions.clear$0(0);
      _this._serviceExtensions.clear$0(0);
      _this._serviceExtensionController.forEach$1(0, new R.ServiceExtensionManager_resetAvailableExtensions_closure());
    },
    setServiceExtensionState$4$callExtension: function($name, enabled, value, callExtension) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, streamController, t1;
      var $async$setServiceExtensionState$4$callExtension = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = callExtension && $async$self._serviceExtensions.contains$1(0, $name) ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return P._asyncAwait($async$self._callServiceExtension$2($name, value), $async$setServiceExtensionState$4$callExtension);
            case 4:
              // returning from await.
            case 3:
              // join
              streamController = $async$self._getServiceExtensionStateController$1($name);
              streamController.add$1(0, new R.ServiceExtensionState(enabled, value));
              t1 = $async$self._enabledServiceExtensions;
              if (H.boolConversionCheck(enabled))
                t1.$indexSet(0, $name, new R.ServiceExtensionState(enabled, value));
              else
                t1.remove$1(0, $name);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$setServiceExtensionState$4$callExtension, $async$completer);
    },
    setServiceExtensionState$3: function($name, enabled, value) {
      return this.setServiceExtensionState$4$callExtension($name, enabled, value, true);
    },
    isServiceExtensionAvailable$1: function($name) {
      return this._serviceExtensions.contains$1(0, $name) || this._pendingServiceExtensions.contains$1(0, $name);
    },
    hasServiceExtensionListener$1: function($name) {
      return this._serviceExtensionListenables.putIfAbsent$2(0, $name, new R.ServiceExtensionManager_hasServiceExtensionListener_closure(this, $name));
    },
    hasServiceExtension$2: function($name, onData) {
      var streamController;
      type$.void_Function_bool._as(onData);
      if (this._serviceExtensions.contains$1(0, $name) && true)
        onData.call$1(true);
      streamController = this._getServiceExtensionController$1($name);
      return streamController.get$stream(streamController).listen$1(onData);
    },
    getServiceExtensionState$2: function($name, onData) {
      var t1, streamController;
      type$.void_Function_ServiceExtensionState._as(onData);
      t1 = this._enabledServiceExtensions;
      if (t1.containsKey$1(0, $name) && true)
        onData.call$1(t1.$index(0, $name));
      streamController = this._getServiceExtensionStateController$1($name);
      return streamController.get$stream(streamController).listen$1(onData);
    },
    _getServiceExtensionController$1: function($name) {
      return R._getStreamController($name, this._serviceExtensionController, new R.ServiceExtensionManager__getServiceExtensionController_closure(this, $name), type$.bool);
    },
    _getServiceExtensionStateController$1: function($name) {
      return R._getStreamController($name, this._serviceExtensionStateController, new R.ServiceExtensionManager__getServiceExtensionStateController_closure(this, $name), type$.ServiceExtensionState);
    }
  };
  R.ServiceExtensionManager_resetAvailableExtensions_closure.prototype = {
    call$2: function($name, stream) {
      H._asStringS($name);
      type$.StreamController_bool._as(stream).add$1(0, false);
    },
    $signature: 215
  };
  R.ServiceExtensionManager_hasServiceExtensionListener_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this.name;
      return new M.StreamValueListenable(new R.ServiceExtensionManager_hasServiceExtensionListener__closure(t1, t2), new R.ServiceExtensionManager_hasServiceExtensionListener__closure0(t1, t2), H.setRuntimeTypeInfo([], type$.JSArray_of_void_Function), type$.StreamValueListenable_bool);
    },
    $signature: 216
  };
  R.ServiceExtensionManager_hasServiceExtensionListener__closure.prototype = {
    call$1: function(notifier) {
      return this.$this.hasServiceExtension$2(this.name, new R.ServiceExtensionManager_hasServiceExtensionListener___closure(type$.StreamValueListenable_bool._as(notifier)));
    },
    $signature: 217
  };
  R.ServiceExtensionManager_hasServiceExtensionListener___closure.prototype = {
    call$1: function(value) {
      this.notifier.set$value(0, H._asBoolS(value));
    },
    $signature: 11
  };
  R.ServiceExtensionManager_hasServiceExtensionListener__closure0.prototype = {
    call$0: function() {
      return this.$this._serviceExtensions.contains$1(0, this.name);
    },
    $signature: 28
  };
  R.ServiceExtensionManager__getServiceExtensionController_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this.name;
      J.add$1$ax(t1._serviceExtensionController.$index(0, t2), t1._serviceExtensions.contains$1(0, t2));
    },
    $signature: 0
  };
  R.ServiceExtensionManager__getServiceExtensionStateController_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._enabledServiceExtensions,
        t3 = this.name;
      t1 = t1._serviceExtensionStateController;
      if (t2.containsKey$1(0, t3))
        J.add$1$ax(t1.$index(0, t3), t2.$index(0, t3));
      else {
        t1 = t1.$index(0, t3);
        J.add$1$ax(t1, new R.ServiceExtensionState(false, null));
      }
    },
    $signature: 0
  };
  R._getStreamController_closure.prototype = {
    call$0: function() {
      return new P._AsyncBroadcastStreamController(this.onFirstListenerSubscribed, null, this.T._eval$1("_AsyncBroadcastStreamController<0>"));
    },
    $signature: function() {
      return this.T._eval$1("StreamController<0>()");
    }
  };
  R.ServiceExtensionState.prototype = {
    get$value: function(receiver) {
      return this.value;
    }
  };
  R.VmFlagManager.prototype = {
    _initFlags$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, flags, t3, t4, t5, _i, flag, t1, t2, flagList;
      var $async$_initFlags$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._service_manager$_service;
              t2 = type$.FlagList;
              $async$goto = 3;
              return P._asyncAwait(t1._trackFuture$1$2("getFlagList", t1._vmService._call$1$1(0, "getFlagList", t2), t2), $async$_initFlags$0);
            case 3:
              // returning from await.
              flagList = $async$result;
              $async$self._flags.set$value(0, flagList);
              if (flagList == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              flags = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Flag);
              for (t1 = flagList.flags, t2 = t1.length, t3 = $async$self._flagNotifiers, t4 = type$.JSArray_of_void_Function, t5 = type$.ValueNotifier_Flag, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                flag = t1[_i];
                flags.$indexSet(0, flag.name, flag);
                t3.$indexSet(0, flag.name, new U.ValueNotifier(flag, H.setRuntimeTypeInfo([], t4), t5));
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_initFlags$0, $async$completer);
    },
    handleVmEvent$1: function($event) {
      return this.handleVmEvent$body$VmFlagManager(type$.Event_2._as($event));
    },
    handleVmEvent$body$VmFlagManager: function($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, currentFlag, t2, $async$temp1;
      var $async$handleVmEvent$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $event.kind === "VMFlagUpdate" ? 2 : 3;
              break;
            case 2:
              // then
              t1 = $async$self._flagNotifiers;
              $async$goto = t1.containsKey$1(0, $event.flag) ? 4 : 5;
              break;
            case 4:
              // then
              currentFlag = t1.$index(0, $event.flag)._value;
              t1 = t1.$index(0, $event.flag);
              t2 = Q.Flag$_fromJson(P.LinkedHashMap_LinkedHashMap$_literal(["name", currentFlag.name, "comment", currentFlag.comment, "modified", true, "valueAsString", $event.newValue], type$.String, type$.dynamic));
              t1.set$value(0, t2);
              t1 = $async$self._service_manager$_service;
              t2 = type$.FlagList;
              $async$temp1 = $async$self._flags;
              $async$goto = 6;
              return P._asyncAwait(t1._trackFuture$1$2("getFlagList", t1._vmService._call$1$1(0, "getFlagList", t2), t2), $async$handleVmEvent$1);
            case 6:
              // returning from await.
              $async$temp1.set$value(0, $async$result);
            case 5:
              // join
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$handleVmEvent$1, $async$completer);
    }
  };
  R.VmServiceCapabilities.prototype = {
    get$supportsGetScripts: function() {
      var t1 = this.version,
        t2 = t1.major;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 <= 3)
        if (t2 === 3) {
          t1 = t1.minor;
          if (typeof t1 !== "number")
            return t1.$ge();
          t1 = t1 >= 12;
        } else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    get$version: function(receiver) {
      return this.version;
    }
  };
  M.StreamValueListenable.prototype = {
    get$value: function(_) {
      var _this = this;
      if (_this._listeners.length === 0)
        _this.set$_stream_value_listenable$_value(_this._lookupValue.call$0());
      return _this._stream_value_listenable$_value;
    },
    set$value: function(_, newValue) {
      var _this = this;
      _this.$ti._precomputed1._as(newValue);
      if (J.$eq$(_this._stream_value_listenable$_value, newValue))
        return;
      _this.set$_stream_value_listenable$_value(newValue);
      _this.notifyListeners$0();
    },
    toString$0: function(_) {
      var _this = this;
      return H.getRuntimeType(_this).toString$0(0) + "#" + U.shortHash(_this) + "(" + H.S(_this.get$value(_this)) + ")";
    },
    addListener$1: function(_, listener) {
      var _this = this;
      type$.void_Function._as(listener);
      if (_this._listeners.length === 0) {
        _this.set$subscription(_this._stream_value_listenable$_onListen.call$1(_this));
        _this.set$_stream_value_listenable$_value(_this._lookupValue.call$0());
      }
      _this.super$ChangeNotifier$addListener(0, listener);
    },
    removeListener$1: function(_, listener) {
      var t1, _this = this;
      _this.super$ChangeNotifier$removeListener(0, type$.void_Function._as(listener));
      if (_this._listeners.length === 0) {
        t1 = _this.subscription;
        if (t1 != null)
          t1.cancel$0(0);
        _this.subscription = null;
      }
    },
    set$subscription: function(subscription) {
      this.subscription = type$.StreamSubscription_dynamic._as(subscription);
    },
    set$_stream_value_listenable$_value: function(_value) {
      this._stream_value_listenable$_value = this.$ti._precomputed1._as(_value);
    },
    $isValueListenable: 1
  };
  K.HoverCellData.prototype = {};
  K.TableData.prototype = {
    setState$1: function(modifyState) {
      var t1;
      type$.void_Function._as(modifyState);
      t1 = this.client;
      if (t1 != null)
        t1.setState$1(modifyState);
    },
    get$rowCount: function(_) {
      var t1 = this.data.length;
      return t1;
    },
    set$sortColumn: function(column) {
      H._instanceType(this)._eval$1("ColumnData<1>")._as(column);
      this.set$_sortColumn(column);
      this._sortDirection = column.get$numeric() ? C.SortDirection_1 : C.SortDirection_0;
    },
    addColumn$1: function(column) {
      C.JSArray_methods.add$1(this._columns, H._instanceType(this)._eval$1("ColumnData<1>")._as(column));
    },
    setRows$1: function(data) {
      var t1, t2, column, _this = this, _null = null;
      H._instanceType(_this)._eval$1("List<1>")._as(data);
      t1 = J.getInterceptor$asx(data);
      if (!t1.contains$1(data, _this._selectedObject)) {
        if (_this.get$rowCount(_this) > 0) {
          t2 = _this.client;
          if (t2 != null)
            t2.scrollToIndex$2$scrollBehavior(0, "auto");
        }
        t2 = _this.client;
        if (t2 != null)
          t2._select$3(_null, _null, _null);
      }
      _this.set$data(0, t1.toList$0(data));
      _this._rowsChangedController.add$1(0, _null);
      t1 = _this.client;
      if (t1 != null)
        t1.onSetRows$0();
      if (_this._sortColumn == null) {
        column = C.JSArray_methods.firstWhere$2$orElse(_this._columns, new K.TableData_setRows_closure(_this), new K.TableData_setRows_closure0());
        if (column != null)
          _this.set$sortColumn(column);
      }
      if (_this._sortColumn != null)
        _this._doSort$0();
      _this.scheduleRebuild$0();
    },
    scrollTo$2$scrollBehavior: function(_, row, scrollBehavior) {
      var index, t1, _this = this;
      H._instanceType(_this)._precomputed1._as(row);
      index = C.JSArray_methods.indexOf$1(_this.data, row);
      if (index === -1)
        return;
      if (_this._hasPendingRebuild) {
        _this.setState$1(new K.TableData_scrollTo_closure(_this, index, scrollBehavior));
        return;
      }
      t1 = _this.client;
      if (t1 != null)
        t1.scrollToIndex$2$scrollBehavior(index, scrollBehavior);
    },
    scheduleRebuild$0: function() {
      var _this = this;
      if (!_this._hasPendingRebuild) {
        _this._hasPendingRebuild = true;
        _this.setState$1(new K.TableData_scheduleRebuild_closure(_this));
      }
    },
    _doSort$0: function() {
      var _this = this,
        column = _this._sortColumn,
        t1 = _this._sortDirection,
        direction = t1 === C.SortDirection_0 ? 1 : -1,
        t2 = _this.client;
      if (t2 != null)
        t2.onColumnSortChanged$2(column, t1);
      _this._sortData$2(column, direction);
    },
    _sortData$2: function(column, direction) {
      C.JSArray_methods.sort$1(this.data, new K.TableData__sortData_closure(this, column, direction));
    },
    onColumnClicked$1: function(column) {
      var _this = this;
      H._instanceType(_this)._eval$1("ColumnData<1>")._as(column);
      if (!column.get$supportsSorting())
        return;
      if (_this._sortColumn === column)
        _this._sortDirection = _this._sortDirection === C.SortDirection_0 ? C.SortDirection_1 : C.SortDirection_0;
      else
        _this.set$sortColumn(column);
      _this._doSort$0();
      _this.scheduleRebuild$0();
    },
    handleLeftKey$0: function() {
    },
    handleRightKey$0: function() {
    },
    set$client: function(_, client) {
      this.client = H._instanceType(this)._eval$1("TableDataClient<1>")._as(client);
    },
    set$data: function(_, data) {
      this.data = H._instanceType(this)._eval$1("List<1>")._as(data);
    },
    set$_sortColumn: function(_sortColumn) {
      this._sortColumn = H._instanceType(this)._eval$1("ColumnData<1>")._as(_sortColumn);
    },
    set$_selectedObject: function(_selectedObject) {
      this._selectedObject = H._instanceType(this)._precomputed1._as(_selectedObject);
    }
  };
  K.TableData_setRows_closure.prototype = {
    call$1: function(c) {
      return H._instanceType(this.$this)._eval$1("ColumnData<1>")._as(c).get$supportsSorting();
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("bool(ColumnData<1>)");
    }
  };
  K.TableData_setRows_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  K.TableData_scrollTo_closure.prototype = {
    call$0: function() {
      var t1 = this.$this.client;
      if (t1 != null)
        t1.scrollToIndex$2$scrollBehavior(this.index, this.scrollBehavior);
    },
    $signature: 0
  };
  K.TableData_scheduleRebuild_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._hasPendingRebuild = false;
      t1 = t1.client;
      if (t1 != null)
        t1.rebuildTable$0();
    },
    $signature: 0
  };
  K.TableData__sortData_closure.prototype = {
    call$2: function(a, b) {
      var t1 = H._instanceType(this.$this)._precomputed1;
      return this.column.compare$2(t1._as(a), t1._as(b)) * this.direction;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("int(1,1)");
    }
  };
  K.TreeTableData.prototype = {
    addColumn$1: function(column) {
      this.super$TableData$addColumn(this.$ti._eval$1("ColumnData<1>")._as(column));
    },
    handleLeftKey$0: function() {
      var parentIndex, _this = this,
        t1 = _this._selectedObject;
      if (t1 != null)
        if (t1._trees$_isExpanded)
          _this.collapseNode$1(t1);
        else {
          parentIndex = C.JSArray_methods.indexOf$1(_this.data, t1.parent);
          if (parentIndex !== -1) {
            t1 = _this.client;
            if (t1 != null)
              t1.selectByIndex$1(parentIndex);
          }
        }
    },
    handleRightKey$0: function() {
      var firstChildIndex, nextIndex, _this = this,
        t1 = _this._selectedObject;
      if (t1 != null)
        if (t1._trees$_isExpanded) {
          firstChildIndex = C.JSArray_methods.indexOf$1(_this.data, C.JSArray_methods.get$first(t1.children));
          t1 = _this.client;
          if (t1 != null)
            t1.selectByIndex$1(firstChildIndex);
        } else if (t1.children.length !== 0)
          _this.expandNode$1(t1);
        else {
          nextIndex = C.JSArray_methods.indexOf$1(_this.data, t1) + 1;
          if (nextIndex !== _this.data.length) {
            t1 = _this.client;
            if (t1 != null)
              t1.selectByIndex$1(nextIndex);
          }
        }
    },
    _sortData$2: function(column, direction) {
      var _this = this,
        sortedData = H.setRuntimeTypeInfo([], _this.$ti._eval$1("JSArray<1>")),
        t1 = _this.data,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      t3 = P.List_List$from(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new K.TreeTableData__sortData_closure(_this)), t3), true, t3._eval$1("Iterable.E"));
      C.JSArray_methods.sort$1(t3, new K.TreeTableData__sortData_closure0(_this, column, direction));
      C.JSArray_methods.forEach$1(t3, new K.TreeTableData__sortData__addToSortedData(_this, sortedData, column, direction));
      _this.set$data(0, sortedData);
    },
    collapseNode$1: function(dataObject) {
      var _this = this;
      _this.$ti._precomputed1._as(dataObject);
      C.JSArray_methods.forEach$1(dataObject.children, new K.TreeTableData_collapseNode_cascadingRemove(_this));
      dataObject._trees$_isExpanded = false;
      if (_this._selectedObject == null)
        _this.set$_selectedObject(dataObject);
      _this.setRows$1(_this.data);
    },
    expandNode$1: function(dataObject) {
      var _this = this;
      _this.$ti._precomputed1._as(dataObject);
      new K.TreeTableData_expandNode_expand(_this).call$1(dataObject);
      if (_this._selectedObject == null)
        _this.set$_selectedObject(dataObject);
      _this.setRows$1(_this.data);
    },
    expandAll$0: function() {
      var t1, t2, _i, root, _this = this,
        visited = P.LinkedHashSet_LinkedHashSet$_empty(_this.$ti._precomputed1);
      for (t1 = _this.data, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        root = J.get$root$x(t1[_i]);
        if (!visited.contains$1(0, root)) {
          root.expandCascading$0();
          visited.add$1(0, root);
        }
      }
      _this.setRows$1(_this.data);
    },
    collapseAll$0: function() {
      var t1, t2, _i, root, _this = this,
        visited = P.LinkedHashSet_LinkedHashSet$_empty(_this.$ti._precomputed1);
      for (t1 = _this.data, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        root = J.get$root$x(t1[_i]);
        if (!visited.contains$1(0, root)) {
          root.collapseCascading$0();
          visited.add$1(0, root);
        }
      }
      _this.setRows$1(_this.data);
    }
  };
  K.TreeTableData__sortData__addToSortedData.prototype = {
    call$1: function(dataObject) {
      var t2, _this = this,
        t1 = _this.$this;
      t1.$ti._precomputed1._as(dataObject);
      C.JSArray_methods.add$1(_this.sortedData, dataObject);
      if (dataObject._trees$_isExpanded) {
        t2 = dataObject.children;
        C.JSArray_methods.sort$1(t2, new K.TreeTableData__sortData__addToSortedData_closure(t1, _this.column, _this.direction));
        C.JSArray_methods.forEach$1(t2, _this);
      }
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  K.TreeTableData__sortData__addToSortedData_closure.prototype = {
    call$2: function(a, b) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(a);
      t2._as(b);
      t1 = t1._precomputed1;
      return this.column.compare$2(t1._as(a), t1._as(b)) * this.direction;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  K.TreeTableData__sortData_closure.prototype = {
    call$1: function(dataObject) {
      this.$this.$ti._precomputed1._as(dataObject);
      return dataObject.get$level(dataObject) === 0;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  K.TreeTableData__sortData_closure0.prototype = {
    call$2: function(a, b) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(a);
      t2._as(b);
      t1 = t1._precomputed1;
      return this.column.compare$2(t1._as(a), t1._as(b)) * this.direction;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  K.TreeTableData_collapseNode_cascadingRemove.prototype = {
    call$1: function(_dataObject) {
      var t1 = this.$this;
      t1.$ti._precomputed1._as(_dataObject);
      if (!C.JSArray_methods.contains$1(t1.data, _dataObject))
        return;
      C.JSArray_methods.remove$1(t1.data, _dataObject);
      C.JSArray_methods.forEach$1(_dataObject.children, this);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  K.TreeTableData_expandNode_expand.prototype = {
    call$1: function(node) {
      var insertIndex, t2, child,
        t1 = this.$this;
      t1.$ti._precomputed1._as(node);
      insertIndex = C.JSArray_methods.indexOf$1(t1.data, node) + 1;
      for (t2 = C.JSArray_methods.get$iterator(node.children); t2.moveNext$0();) {
        child = t2.get$current(t2);
        C.JSArray_methods.insert$2(t1.data, insertIndex, child);
        if (child._trees$_isExpanded)
          this.call$1(child);
        ++insertIndex;
      }
      node._trees$_isExpanded = true;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  K.ColumnData.prototype = {
    ColumnData$7$alignment$cssClass$fixedWidthPx$hover$percentWidth$usesHtml: function(title, alignment, cssClass, fixedWidthPx, hover, percentWidth, usesHtml, $T) {
      var t1 = this.percentWidth;
      if (t1 != null)
        C.JSInt_methods.clamp$2(t1, 0, 100);
    },
    get$numeric: function() {
      return false;
    },
    get$supportsSorting: function() {
      return this.get$numeric();
    },
    compare$2: function(a, b) {
      var t1 = H._instanceType(this)._eval$1("ColumnData.T");
      t1._as(a);
      t1._as(b);
      t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(this.getValue$1(a)), t1._as(this.getValue$1(b)));
    },
    getDisplayValue$1: function(dataObject) {
      return this.getValue$1(H._instanceType(this)._eval$1("ColumnData.T")._as(dataObject));
    },
    getTooltip$1: function(dataObject) {
      H._instanceType(this)._eval$1("ColumnData.T")._as(dataObject);
      return "";
    },
    render$1: function(value) {
      if (typeof value == "number")
        return K.ColumnData_fastIntl(value);
      return J.toString$0$(value);
    },
    toString$0: function(_) {
      return this.title;
    },
    get$cssClass: function() {
      return null;
    },
    get$usesHtml: function() {
      return false;
    }
  };
  K.TreeColumnData.prototype = {};
  K.ColumnAlignment.prototype = {
    toString$0: function(_) {
      return this._table_data$_name;
    }
  };
  Z.HtmlEventDetails.prototype = {
    HtmlEventDetails$1: function(_timelineController) {
      var t1, _this = this;
      _this.flex$0(0);
      t1 = _this.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("vertical", "");
      _this._html_event_details$_initContent$0();
      _this._initListeners$0();
      new ResizeObserver(H.convertDartClosureToJS(new Z.HtmlEventDetails_closure(_this), 2)).observe(t1);
      _this.add$1(0, H.setRuntimeTypeInfo([_this._cpuProfilerTabNav._html_cpu_profiler$_tabNav, _this._summaryTabNav, _this._html_event_details$_content], type$.JSArray_CoreElement));
    },
    _html_event_details$_initContent$0: function() {
      var t2, t3, t4, t5, details, t6, t7, t8, t9, t10, _this = this, _null = null, _s3_ = "div", _s6_ = "hidden", _s6_0 = "layout",
        _s8_ = "vertical",
        _s21_ = "event-summary-section",
        _s10_ = "horizontal",
        t1 = A.CoreElement$(_s3_, _null, "event-details-heading", _null, "[No event selected]");
      _this._title = t1;
      t1 = t1.element.style;
      t2 = Y.colorToCss(_this.titleTextColor);
      t1.color = t2;
      t2 = Y.colorToCss(_this.titleBackgroundColor);
      t1.backgroundColor = t2;
      t1 = new Z.HtmlEventDetails__initContent_closure(_this);
      t2 = Z.HtmlCpuFlameChart$(t1);
      t3 = R.HtmlCpuCallTree$(t1);
      t1 = R.HtmlCpuBottomUp$(t1);
      t4 = type$.Element;
      t5 = new Z._CpuProfiler(_this._timelineController, t2, t1, t3, C.CpuProfilerViewType_0, t4._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t5.CoreElement$5$attributes$classes$html$text(_s3_, _null, _null, _null, _null);
      t5.HtmlCpuProfiler$4$defaultView(t2, t3, t1, C.CpuProfilerViewType_0);
      t5.attribute$2(_s6_, true);
      _this._html_event_details$_cpuProfiler = t5;
      t5 = new A.HtmlCpuProfilerTabNav(t5, new A.CpuProfilerTabOrder(C.CpuProfilerViewType_0, C.CpuProfilerViewType_2, C.CpuProfilerViewType_1), Q.TreeTableToolbar$(type$.CpuStackFrame));
      t5._html_cpu_profiler$_init$0();
      _this._cpuProfilerTabNav = t5;
      t5 = new N.PTabNavTab(t4._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null)));
      t5.CoreElement$5$attributes$classes$html$text(_s3_, _null, "tabnav-tab", _null, "Summary");
      t5 = N.PTabNav$(H.setRuntimeTypeInfo([t5], type$.JSArray_PTabNavTab));
      t1 = t5.element.style;
      t1.borderBottom = "0";
      t5.attribute$2(_s6_, true);
      _this._summaryTabNav = t5;
      details = A.CoreElement$(_s3_, _null, "event-details", _null, _null);
      t1 = details.element;
      t1.setAttribute(_s6_0, "");
      t1.setAttribute(_s8_, "");
      details.flex$0(0);
      t1 = _this._html_event_details$_cpuProfiler;
      t4 = t4._as(W._ElementFactoryProvider_createElement_tag(_s3_, _null));
      t2 = new Z.HtmlEventSummary(new Z.HtmlEventDetails__initContent_closure0(_this), t4);
      t2.CoreElement$5$attributes$classes$html$text(_s3_, _null, "event-summary", _null, _null);
      t4.setAttribute(_s6_0, "");
      t4.setAttribute(_s8_, "");
      t4 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t3 = t4.element;
      t3.setAttribute(_s6_0, "");
      t3.setAttribute(_s10_, "");
      t2.time = t4;
      t3 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t5 = t3.element;
      t5.setAttribute(_s6_0, "");
      t5.setAttribute(_s10_, "");
      t2.category = t3;
      t5 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t6 = t5.element;
      t6.setAttribute(_s6_0, "");
      t6.setAttribute(_s10_, "");
      t2.thread = t5;
      t6 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t7 = t6.element;
      t7.setAttribute(_s6_0, "");
      t7.setAttribute(_s10_, "");
      t2.process = t6;
      t7 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t8 = t7.element;
      t8.setAttribute(_s6_0, "");
      t8.setAttribute(_s10_, "");
      t7.attribute$2(_s6_, true);
      t2.asyncId = t7;
      t8 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t9 = t8.element;
      t9.setAttribute(_s6_0, "");
      t9.setAttribute(_s8_, "");
      t8.attribute$2(_s6_, true);
      t2.connectedEvents = t8;
      t9 = A.CoreElement$(_s3_, _null, _s21_, _null, _null);
      t10 = t9.element;
      t10.setAttribute(_s6_0, "");
      t10.setAttribute(_s8_, "");
      t9.attribute$2(_s6_, true);
      t2.args = t9;
      t10 = type$.JSArray_CoreElement;
      t2.add$1(0, H.setRuntimeTypeInfo([t4, t3, t5, t6, t7, t8, t9], t10));
      t2.attribute$2(_s6_, true);
      _this._eventSummary = t2;
      details.add$1(0, H.setRuntimeTypeInfo([t1, t2], t10));
      t2 = A.CoreElement$(_s3_, _null, "event-details-section section-border", _null, _null);
      t2.flex$0(0);
      t2.add$1(0, H.setRuntimeTypeInfo([_this._title, details], t10));
      _this._html_event_details$_content = t2;
    },
    _initListeners$0: function() {
      var _this = this,
        t1 = _this._timelineController,
        t2 = type$.void_Function;
      C.JSArray_methods.add$1(t1.frameBasedTimeline._selectedFrameNotifier._listeners, t2._as(new Z.HtmlEventDetails__initListeners_closure(_this)));
      C.JSArray_methods.add$1(t1._selectedTimelineEventNotifier._listeners, t2._as(new Z.HtmlEventDetails__initListeners_closure0(_this)));
      t1 = t1._loadOfflineDataController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new Z.HtmlEventDetails__initListeners_closure1(_this));
    },
    _html_event_details$_update$1$hide: function(_, hide) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, selectedEvent, t2, t3, t4, t5, t6, showEventSummary, showCpuProfiler, t1;
      var $async$_html_event_details$_update$1$hide = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._timelineController;
              t1 = t1.get$timeline(t1).data;
              selectedEvent = t1 == null ? null : t1.selectedEvent;
              t1 = $async$self._title;
              t2 = selectedEvent == null;
              t3 = !t2;
              if (t3) {
                t4 = H.S(C.JSArray_methods.get$first(selectedEvent.traceEvents).event.name) + " - ";
                t5 = selectedEvent.time;
                t6 = t5._utils$_end;
                t5 = t5._utils$_start;
                t5 = t4 + B.msText(new P.Duration(t6._duration - t5._duration), 1);
                t4 = t5;
              } else
                t4 = "[No event selected]";
              t1.element.textContent = t4;
              t4 = $async$self._title.element.style;
              t1 = Y.colorToCss($async$self.titleBackgroundColor);
              t4.backgroundColor = t1;
              t1 = Y.colorToCss($async$self.titleTextColor);
              t4.color = t1;
              $async$self.attribute$2("hidden", hide);
              showEventSummary = t3 && selectedEvent.type !== C.TimelineEventType_0;
              t1 = !showEventSummary;
              $async$self._summaryTabNav.attribute$2("hidden", t1);
              $async$self._eventSummary.attribute$2("hidden", t1);
              if (showEventSummary)
                $async$self._eventSummary.update$0(0);
              t1 = t2 ? null : selectedEvent.type === C.TimelineEventType_0;
              showCpuProfiler = t1 === true;
              t1 = !showCpuProfiler;
              $async$self._html_event_details$_cpuProfiler.attribute$2("hidden", t1);
              $async$self._cpuProfilerTabNav._html_cpu_profiler$_tabNav.attribute$2("hidden", t1);
              $async$goto = showCpuProfiler ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return P._asyncAwait($async$self._html_event_details$_cpuProfiler.update$0(0), $async$_html_event_details$_update$1$hide);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_html_event_details$_update$1$hide, $async$completer);
    },
    _html_event_details$_update$0: function($receiver) {
      return this._html_event_details$_update$1$hide($receiver, false);
    },
    reset$1$hide: function(_, hide) {
      this.titleTextColor = C.ThemedColor_Color_4278190080_Color_4293980400;
      this.titleBackgroundColor = C.ThemedColor_Color_4294375158_Color_4281151025;
      this._html_event_details$_update$1$hide(0, hide);
    },
    reset$0: function($receiver) {
      return this.reset$1$hide($receiver, false);
    },
    _backgroundColorForEvent$1: function($event) {
      var t1 = $event.type;
      if (t1 === C.TimelineEventType_2)
        return $.$get$mainAsyncColor();
      else if (t1 === C.TimelineEventType_0)
        return C.ThemedColor_Color_4286698746_Color_4288593657;
      else if (t1 === C.TimelineEventType_1)
        return C.ThemedColor_Color_4278356177_Color_4279923688;
      else
        return C.ThemedColor_Color_4294375158_Color_4281151025;
    }
  };
  Z.HtmlEventDetails_closure.prototype = {
    call$2: function(entries, _) {
      type$.List_dynamic._as(entries);
      type$.ResizeObserver._as(_);
      this.$this._html_event_details$_cpuProfiler.flameChart.updateForContainerResize$0();
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 58
  };
  Z.HtmlEventDetails__initContent_closure.prototype = {
    call$0: function() {
      var t1 = this.$this._timelineController;
      t1 = t1.get$timeline(t1).data;
      return t1 == null ? null : t1.cpuProfileData;
    },
    $signature: 100
  };
  Z.HtmlEventDetails__initContent_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this._timelineController;
      return t1.get$timeline(t1).data.selectedEvent;
    },
    $signature: 219
  };
  Z.HtmlEventDetails__initListeners_closure.prototype = {
    call$0: function() {
      return this.$this.reset$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Z.HtmlEventDetails__initListeners_closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.$this._html_event_details$_update$0(0), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 7
  };
  Z.HtmlEventDetails__initListeners_closure1.prototype = {
    call$1: function(_) {
      return this.$call$body$HtmlEventDetails__initListeners_closure(type$.OfflineData_TimelineData._as(_));
    },
    $call$body$HtmlEventDetails__initListeners_closure: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._timelineController.offlineTimelineData.selectedEvent;
              $async$goto = t2 != null ? 2 : 3;
              break;
            case 2:
              // then
              t1.titleBackgroundColor = t1._backgroundColorForEvent$1(t2);
              t1.titleTextColor = C.Color_4278190080;
              $async$goto = 4;
              return P._asyncAwait(t1._html_event_details$_update$0(0), $async$call$1);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 220
  };
  Z._CpuProfiler.prototype = {
    prepareCpuProfile$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$prepareCpuProfile$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = !$.offlineMode || $async$self._timelineController.offlineTimelineData == null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return P._asyncAwait($async$self._timelineController.getCpuProfileForSelectedEvent$0(), $async$prepareCpuProfile$0);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$prepareCpuProfile$0, $async$completer);
    },
    maybeShowMessageOnUpdate$0: function() {
      var t1, t2, offlineModeMessage, cpuProfileData, offset, t3, _this = this, _null = null, _s4_ = "span";
      if ($.offlineMode) {
        t1 = _this._timelineController;
        t2 = t1.get$timeline(t1).data.selectedEvent;
        t2 = t2 == null ? _null : t2.get$json(t2);
        t1 = t1.offlineTimelineData.selectedEvent;
        t1 = !C.C_DeepCollectionEquality.equals$2(t2, t1 == null ? _null : t1.get$json(t1));
      } else
        t1 = false;
      if (t1) {
        offlineModeMessage = A.CoreElement$("div", _null, _null, _null, _null);
        offlineModeMessage.add$1(0, A.CoreElement$(_s4_, _null, _null, _null, "CPU profiling is not yet available for snapshots. You can only view "));
        if (_this._timelineController.offlineTimelineData.hasCpuProfileData$0()) {
          offlineModeMessage.add$1(0, A.CoreElement$(_s4_, _null, _null, _null, "the "));
          t1 = A.CoreElement$(_s4_, _null, "message-action", _null, "CPU profile");
          t1.click$1(0, new Z._CpuProfiler_maybeShowMessageOnUpdate_closure(_this));
          offlineModeMessage.add$1(0, t1);
          offlineModeMessage.add$1(0, A.CoreElement$(_s4_, _null, _null, _null, " included in the snapshot."));
        } else
          offlineModeMessage.add$1(0, A.CoreElement$(_s4_, _null, _null, _null, "a CPU profile if it is included in the imported snapshot file."));
        _this.showMessage$1(offlineModeMessage);
        return true;
      }
      t1 = _this._timelineController;
      t2 = t1.get$timeline(t1).data;
      cpuProfileData = t2 == null ? _null : t2.cpuProfileData;
      if (cpuProfileData != null) {
        t2 = cpuProfileData.stackFrames;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        offset = J.$eq$(t1._timelineModeNotifier._value, C.TimelineMode_0) ? t1.frameBasedTimeline.data.selectedFrame.time._utils$_start : C.JSArray_methods.get$first(t1.fullTimeline.data.timelineEvents).time._utils$_start;
        t2 = t1.get$timeline(t1).data.selectedEvent.time._utils$_start._duration;
        t3 = offset._duration;
        t1 = t1.get$timeline(t1).data.selectedEvent.time._utils$_end._duration;
        _this.showMessage$1(A.CoreElement$("div", _null, _null, _null, "CPU profile unavailable for time range [" + B.msText(new P.Duration(t2 - t3), 2) + " - " + B.msText(new P.Duration(t1 - t3), 2) + "]"));
        return true;
      }
      return false;
    }
  };
  Z._CpuProfiler_maybeShowMessageOnUpdate_closure.prototype = {
    call$0: function() {
      this.$this._timelineController.setOfflineData$0();
    },
    $signature: 0
  };
  Z.HtmlEventSummary.prototype = {
    update$0: function(_) {
      var t1, t2, t3, t4, firstTraceEvent, t5, t6, t7, _i, e, t8, t9, t10, t11, eventArgs, formattedArgs, _this = this, _null = null, _s4_ = "span", _s3_ = "div", _s6_ = "hidden",
        $event = _this.selectedEventProvider.call$0();
      if ($event == null)
        return;
      J.get$children$x(_this.time.element).clear$0(0);
      J.get$children$x(_this.category.element).clear$0(0);
      J.get$children$x(_this.thread.element).clear$0(0);
      J.get$children$x(_this.process.element).clear$0(0);
      J.get$children$x(_this.asyncId.element).clear$0(0);
      J.get$children$x(_this.connectedEvents.element).clear$0(0);
      J.get$children$x(_this.args.element).clear$0(0);
      t1 = _this.time;
      t2 = A.CoreElement$(_s4_, _null, _null, _null, "Time: ");
      t3 = $event.time;
      t4 = type$.JSArray_CoreElement;
      t1.add$1(0, H.setRuntimeTypeInfo([t2, A.CoreElement$(_s3_, _null, _null, _null, "" + t3._utils$_start._duration + " \u03bcs \u2014  " + t3._utils$_end._duration + " \u03bcs")], t4));
      t2 = $event.traceEvents;
      firstTraceEvent = C.JSArray_methods.get$first(t2).event;
      _this.category.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s4_, _null, _null, _null, "Category: "), A.CoreElement$(_s3_, _null, _null, _null, H.S(firstTraceEvent.category))], t4));
      _this.thread.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s4_, _null, _null, _null, "Thread id: "), A.CoreElement$(_s3_, _null, _null, _null, H.S(firstTraceEvent.threadId))], t4));
      _this.process.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s4_, _null, _null, _null, "Process id: "), A.CoreElement$(_s3_, _null, _null, _null, H.S(firstTraceEvent.processId))], t4));
      if ($event.type === C.TimelineEventType_2) {
        type$.AsyncTimelineEvent._as($event);
        t1 = _this.asyncId;
        t1.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s4_, _null, _null, _null, "Async id: "), A.CoreElement$(_s3_, _null, _null, _null, H.S($event.asyncId))], t4));
        t1.attribute$2(_s6_, false);
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent);
        for (t5 = $event.children, t6 = H._arrayInstanceType(t5), t7 = t6._eval$1("bool(1)")._as(new Z.HtmlEventSummary_update_closure()), t5 = C.JSArray_methods.get$iterator(t5), t6 = new H.WhereIterator(t5, t7, t6._eval$1("WhereIterator<1>")); t6.moveNext$0();)
          C.JSArray_methods.add$1(t1, t5.get$current(t5));
        if (t1.length !== 0) {
          t5 = _this.connectedEvents;
          t6 = H.setRuntimeTypeInfo([], t4);
          C.JSArray_methods.add$1(t6, A.CoreElement$(_s4_, _null, _null, _null, "Connected events: "));
          for (t7 = t1.length, _i = 0; _i < t1.length; t1.length === t7 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            e = t1[_i];
            t8 = e.traceEvents;
            t9 = H.S(C.JSArray_methods.get$first(t8).event.name) + " - {startTime: ";
            t10 = e.time._utils$_start;
            t11 = t3._utils$_start;
            t11 = C.JSDouble_methods.toStringAsFixed$1((t10._duration - t11._duration) / 1000, 1);
            C.JSArray_methods.add$1(t6, A.CoreElement$(_s3_, _null, _null, _null, t9 + (t11 + " ms") + ", args: " + H.S(C.JSArray_methods.get$first(t8).event.args) + "}"));
          }
          t5.add$1(0, t6);
          t5.attribute$2(_s6_, false);
        }
      }
      t1 = type$.dynamic;
      eventArgs = P.LinkedHashMap_LinkedHashMap$from(firstTraceEvent.args, t1, t1);
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        for (t5 = J.get$entries$x(t2[_i].event.args), t5 = t5.get$iterator(t5); t5.moveNext$0();) {
          t6 = t5.get$current(t5);
          t1.$indexSet(0, t6.key, t6.value);
        }
      eventArgs.addAll$1(0, t1);
      if (eventArgs.get$isNotEmpty(eventArgs)) {
        formattedArgs = P._JsonStringStringifier_stringify(eventArgs, _null, "  ");
        t1 = _this.args;
        t1.add$1(0, H.setRuntimeTypeInfo([A.CoreElement$(_s4_, _null, _null, _null, "Arguments: "), A.CoreElement$(_s3_, _null, "event-args", _null, formattedArgs)], t4));
        t1.attribute$2(_s6_, false);
      }
    }
  };
  Z.HtmlEventSummary_update_closure.prototype = {
    call$1: function(e) {
      return C.JSArray_methods.get$first(type$.TimelineEvent_2._as(e).traceEvents).event.phase === "n";
    },
    $signature: 16
  };
  T.FramesBarChart.prototype = {
    FramesBarChart$1: function(timelineController) {
      var t2, t3, t4, t5, _this = this, _null = null, _s4_ = "100%",
        t1 = _this.element;
      t1.setAttribute("layout", "");
      t1.setAttribute("horizontal", "");
      t1 = t1.style;
      t1.toString;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, C.CssStyleDeclaration_methods._browserPropertyName$1(t1, "align-items"), "flex-end", "");
      t1.height = "140px";
      t1.width = _s4_;
      t1.paddingTop = "2px";
      t1 = _this.timelineController;
      t2 = H.setRuntimeTypeInfo([], type$.JSArray_int);
      t3 = type$.JSArray_num;
      t4 = H.setRuntimeTypeInfo([], t3);
      t3 = H.setRuntimeTypeInfo([], t3);
      t5 = type$.Element._as(W._ElementFactoryProvider_createElement_tag("div", _null));
      t3 = new T.PlotlyDivGraph(t1, P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.TimelineFrame), t2, t4, t3, t5);
      t3.CoreElement$5$attributes$classes$html$text("div", _null, _null, _null, _null);
      t5.id = "graph_frame_timeline";
      t5 = t5.style;
      t5.height = _s4_;
      t5.width = _s4_;
      _this.frameUIgraph = t3;
      _this.add$1(0, t3);
      _this.setState$1(new T.FramesBarChart_closure(_this));
      C.JSArray_methods.add$1(t1.frameBasedTimeline._frameAddedNotifier._listeners, type$.void_Function._as(new T.FramesBarChart_closure0(_this)));
    },
    createFirstPlot$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$createFirstPlot$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.frameUIgraph;
              $async$temp1 = t1;
              $async$temp2 = t1.element;
              $async$goto = 2;
              return P._asyncAwait($async$self.timelineController.frameBasedTimeline.get$displayRefreshRate(), $async$createFirstPlot$0);
            case 2:
              // returning from await.
              $async$temp1.createPlot$2($async$temp2, $async$result);
              $async$self._createdPlot = true;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$createFirstPlot$0, $async$completer);
    }
  };
  T.FramesBarChart_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (!t1._createdPlot)
        t1.createFirstPlot$0();
    },
    $signature: 0
  };
  T.FramesBarChart_closure0.prototype = {
    call$0: function() {
      this.$this.frameUIgraph.processNextFrame$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  T.PlotlyDivGraph.prototype = {
    _plotlyClick$1: function(data) {
      var t1, xPosition, t2, newSelection, t3, t4, t5, timelineFrame, _this = this;
      type$.DataEvent._as(data);
      t1 = J.getInterceptor$x(data);
      xPosition = J.get$x$x(J.$index$asx(t1.get$points(data), 0));
      t2 = type$.JSArray_SelectTrace;
      newSelection = H.setRuntimeTypeInfo([], t2);
      for (t1 = J.get$iterator$ax(t1.get$points(data)); t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t4 = J.getInterceptor$x(t3);
        if (!J.$eq$(t4.get$curveNumber(t3), 1) && !J.$eq$(t4.get$curveNumber(t3), 3))
          C.JSArray_methods.add$1(newSelection, new Z.SelectTrace(t4.get$curveNumber(t3), t4.get$pointNumber(t3), t4.get$x(t3), t4.get$y(t3)));
      }
      t1 = _this.currentSelection;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo([], t2);
        t1 = _this.currentSelection = new Z.Selection("graph_frame_timeline", type$.List_Data._as(_this.element.data), t1);
      }
      t2 = newSelection.length;
      if (t2 === 2) {
        type$.List_SelectTrace._as(newSelection);
        t3 = t1.selectInfo;
        t4 = t3.length;
        if (t4 === 2) {
          if (0 >= t4)
            return H.ioore(t3, 0);
          t5 = t3[0];
          if (0 >= t2)
            return H.ioore(newSelection, 0);
          if (t5.xValue == newSelection[0].xValue) {
            if (1 >= t4)
              return H.ioore(t3, 1);
            t3 = t3[1];
            if (1 >= t2)
              return H.ioore(newSelection, 1);
            t3 = t3.xValue == newSelection[1].xValue;
            t2 = t3;
          } else
            t2 = false;
        } else
          t2 = false;
        t2 = !t2;
      } else
        t2 = false;
      if (t2) {
        t1.select$1(0, newSelection);
        t1 = _this._frames;
        if (t1.containsKey$1(0, xPosition)) {
          timelineFrame = t1.$index(0, xPosition);
          _this.timelineController.frameBasedTimeline.selectFrame$1(timelineFrame);
          t1 = timelineFrame.get$gpuDuration();
          t2 = timelineFrame.get$uiDuration();
          F.GTag_event("timeline", {event_category: "select", event_label: "frame", user_app: $._userAppType, user_build: $._userBuildType, user_platform: $._userPlatformType, devtools_platform: $._devtoolsPlatformType, devtools_chrome: $._devtoolsChrome, devtools_version: "0.2.5", ide_launched: $._ideLaunched, flutter_client_id: $._flutterClientId, raster_duration: t1, ui_duration: t2});
        }
      }
    },
    _plotlyHover$1: function(data) {
      var hoverDisplay, t1, t2, t3, ptNumber;
      type$.DataEvent._as(data);
      hoverDisplay = H.setRuntimeTypeInfo([], type$.JSArray_HoverFX);
      for (t1 = J.get$iterator$ax(J.get$points$x(data)); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        t3 = J.getInterceptor$x(t2);
        ptNumber = t3.get$pointNumber(t2);
        if (H._asIntS(J.$index$asx(J.get$x$x(t3.get$data(t2)), ptNumber)) !== -1)
          C.JSArray_methods.add$1(hoverDisplay, {curveNumber: t3.get$curveNumber(t2), pointNumber: t3.get$pointNumber(t2)});
      }
      self.Plotly.Fx.hover("graph_frame_timeline", hoverDisplay);
    },
    createPlot$2: function(element, displayRefreshRate) {
      var t1, t2, t3, t4, allTraces, _this = this,
        _s20_ = "graph_frame_timeline";
      H._asDoubleS(displayRefreshRate);
      t1 = {text: "Milliseconds"};
      t2 = H.setRuntimeTypeInfo([0, 2], type$.JSArray_num);
      t3 = {color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)};
      t4 = type$.JSArray_int;
      t3 = {tickformat: ".0f", title: t1, type: "log", range: t2, showgrid: false, tickfont: {color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}, nticks: 10, tickmode: "array", tickvals: H.setRuntimeTypeInfo([1, 10, 100], t4), ticktext: H.setRuntimeTypeInfo([1, 10, 100], t4), hoverformat: ".3f", titlefont: t3};
      t2 = {text: "Milliseconds"};
      t1 = {color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)};
      t1 = new Z.FramesBarPlotly(_s20_, element, false, false, displayRefreshRate, t3, {title: t2, fixedrange: true, tickfont: {color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}, titlefont: t1});
      _this.plotlyChart = t1;
      allTraces = H.setRuntimeTypeInfo([], type$.JSArray_Data);
      t2 = {font: {color: Y.colorToCss(C.Color_4278190080)}};
      C.JSArray_methods.insert$2(allTraces, 0, {x: [-1], y: [0], type: "bar", marker: {color: Y.colorToCss(C.ThemedColor_Color_4278356177_Color_4279923688)}, name: "GPU", hoverinfo: "y+name", hoverlabel: t2, width: H.setRuntimeTypeInfo([0], t4)});
      t2 = Y.colorToCss(C.ThemedColor_Color_4290098613_Color_4291414473);
      t3 = {color: Y.colorToCss(C.Color_4278190080)};
      t3 = {bgcolor: t2, bordercolor: Y.colorToCss(C.ThemedColor_Color_4290098613_Color_4291414473), font: t3};
      C.JSArray_methods.insert$2(allTraces, 1, {x: [-1], y: [0], type: "bar", marker: {color: Y.colorToCss(C.ThemedColor_Color_4290098613_Color_4291414473)}, hoverinfo: "y+name", hoverlabel: t3, showlegend: false});
      t3 = {font: {color: Y.colorToCss(C.Color_4278190080)}};
      C.JSArray_methods.insert$2(allTraces, 2, {x: [-1], y: [0], type: "bar", marker: {color: Y.colorToCss(C.ThemedColor_Color_4286698746_Color_4288593657)}, name: "UI", hoverinfo: "y+name", hoverlabel: t3, width: H.setRuntimeTypeInfo([0], t4)});
      t4 = Y.colorToCss(C.ThemedColor_Color_4292138970_Color_4294967295);
      t3 = {color: Y.colorToCss(C.Color_4278190080)};
      t3 = {bgcolor: t4, bordercolor: Y.colorToCss(C.ThemedColor_Color_4292138970_Color_4294967295), font: t3};
      C.JSArray_methods.insert$2(allTraces, 3, {x: [-1], y: [0], type: "bar", marker: {color: Y.colorToCss(C.ThemedColor_Color_4292138970_Color_4294967295)}, hoverinfo: "y+name", hoverlabel: t3, showlegend: false});
      self.Plotly.newPlot(_s20_, allTraces, t1.getFPSTimeseriesLayout$0(), {displayModeBar: false, responsive: true, displaylogo: false});
      _this.plotlyChart.toString;
      t1 = type$.Function;
      self.hookupPlotlyClick(_s20_, P.allowInterop(_this.get$_plotlyClick(), t1));
      _this.plotlyChart.toString;
      self.hookupPlotlyHover(_s20_, P.allowInterop(_this.get$_plotlyHover(), t1));
      P.Timer_Timer$periodic(C.Duration_166000, new T.PlotlyDivGraph_createPlot_closure(_this));
    },
    processNextFrame$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t2, t1, frame;
      var $async$processNextFrame$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.TimelineFrame;
              frame = t1._as($async$self.timelineController.frameBasedTimeline._frameAddedNotifier._value);
              if (frame == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = frame.get$uiDurationMs();
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$gt();
                // goto return
                $async$goto = 1;
                break;
              }
              if (t2 > 0) {
                t2 = frame.get$gpuDurationMs();
                if (typeof t2 !== "number") {
                  $async$returnValue = t2.$gt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = t2 > 0;
              } else
                t2 = false;
              if (t2) {
                C.JSArray_methods.add$1($async$self.dataIndexes, $async$self._frameIndex);
                C.JSArray_methods.add$1($async$self.uiDurations, frame.get$uiDurationMs());
                C.JSArray_methods.add$1($async$self.gpuDurations, frame.get$gpuDurationMs());
                $async$self._frames.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal([$async$self._frameIndex, frame], type$.int, t1));
                ++$async$self._frameIndex;
              } else
                B.log("Ignored onFrameAdded - bad data.\n [uiDuration: " + H.S(frame.get$uiDuration()) + ", gpuDuration: " + H.S(frame.get$gpuDuration()), C.LogLevel_1);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$processNextFrame$0, $async$completer);
    },
    reset$1$displayRefreshRate: function(_, displayRefreshRate) {
      var _this = this;
      H._asDoubleS(displayRefreshRate);
      C.JSArray_methods.set$length(_this.dataIndexes, 0);
      C.JSArray_methods.set$length(_this.uiDurations, 0);
      C.JSArray_methods.set$length(_this.gpuDurations, 0);
      _this._frames.clear$0(0);
      _this._frameIndex = 0;
      _this._lastPlottedFrameIndex = -1;
      _this.currentSelection = null;
      _this.createPlot$2(_this.element, displayRefreshRate);
    }
  };
  T.PlotlyDivGraph_createPlot_closure.prototype = {
    call$1: function(t) {
      var t1, t2, t3, dataLength, t4;
      type$.Timer._as(t);
      t1 = this.$this;
      t2 = t1._lastPlottedFrameIndex;
      t3 = t1._frameIndex;
      if (t2 === t3)
        return;
      t1._lastPlottedFrameIndex = t3;
      t2 = t1.dataIndexes;
      dataLength = t2.length;
      if (dataLength > 0) {
        t3 = t1.uiDurations;
        t4 = t1.gpuDurations;
        t1.plotlyChart.plotFPSDataList$4(t2, t3, t4, H._asBoolS(t1.timelineController.frameBasedTimeline._pausedNotifier._value));
        C.JSArray_methods.removeRange$2(t2, 0, dataLength);
        C.JSArray_methods.removeRange$2(t3, 0, dataLength);
        C.JSArray_methods.removeRange$2(t4, 0, dataLength);
      }
    },
    $signature: 222
  };
  T._FramesBarChart_CoreElement_HtmlSetStateMixin.prototype = {};
  Z.FramesBarPlotly.prototype = {
    getFPSTimeseriesLayout$0: function() {
      var t1 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025),
        t2 = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025),
        t3 = {font: {color: Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371)}},
        t4 = {autorange: true, rangemode: "nonnegative", rangeslider: null, tickfont: {color: Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025), size: 1}},
        t5 = this.displayRefreshRate;
      if (typeof t5 !== "number")
        return H.iae(t5);
      t5 = 1000 / t5;
      t5 = H.setRuntimeTypeInfo([{type: "line", xref: "paper", layer: "below", x0: 0, y0: t5, x1: 1, y1: t5, line: {color: Y.colorToCss(C.Color_4292138970), dash: "dot", width: 1}}], type$.JSArray_Shape);
      return {xaxis: t4, yaxis: this._yAxisLinearScale, autosize: true, margin: {l: 60, r: 0, b: 8, t: 5, pad: 8}, hovermode: "x", barmode: "stack", dragmode: "pan", shapes: t5, legend: t3, plot_bgcolor: t1, paper_bgcolor: t2};
    },
    plotFPSDataList$4: function(dataIndexes, uiDurations, gpuDurations, paused) {
      var t1, uiGoodX, t2, uiGoodTrace, gpuGoodX, gpuGoodTrace, totalIndexes, t3, t4, t5, dataIndex, uiDuration, gpuDuration, t6, t7, data, traces;
      type$.List_int._as(dataIndexes);
      t1 = type$.List_num;
      t1._as(uiDurations);
      t1._as(gpuDurations);
      t1 = type$.JSArray_int;
      uiGoodX = H.setRuntimeTypeInfo([], t1);
      t2 = type$.JSArray_num;
      uiGoodTrace = H.setRuntimeTypeInfo([], t2);
      gpuGoodX = H.setRuntimeTypeInfo([], t1);
      gpuGoodTrace = H.setRuntimeTypeInfo([], t2);
      totalIndexes = dataIndexes.length;
      for (t3 = this._html_frames_bar_plotly$_chart, t4 = type$.Layout, t5 = this._html_frames_bar_plotly$_domName, dataIndex = 0; dataIndex < totalIndexes; ++dataIndex) {
        if (dataIndex >= uiDurations.length)
          return H.ioore(uiDurations, dataIndex);
        uiDuration = uiDurations[dataIndex];
        if (dataIndex >= gpuDurations.length)
          return H.ioore(gpuDurations, dataIndex);
        gpuDuration = gpuDurations[dataIndex];
        if (dataIndex >= dataIndexes.length)
          return H.ioore(dataIndexes, dataIndex);
        C.JSArray_methods.add$1(uiGoodX, dataIndexes[dataIndex]);
        C.JSArray_methods.add$1(uiGoodTrace, uiDuration);
        if (dataIndex >= dataIndexes.length)
          return H.ioore(dataIndexes, dataIndex);
        C.JSArray_methods.add$1(gpuGoodX, dataIndexes[dataIndex]);
        C.JSArray_methods.add$1(gpuGoodTrace, gpuDuration);
        if (typeof uiDuration !== "number")
          return uiDuration.$add();
        if (typeof gpuDuration !== "number")
          return H.iae(gpuDuration);
        t6 = uiDuration + gpuDuration;
        t7 = this.displayRefreshRate;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (t6 > 1000 / t7) {
          if (dataIndex >= dataIndexes.length)
            return H.ioore(dataIndexes, dataIndex);
          t7 = dataIndexes[dataIndex];
          self.Plotly.relayout(t5, self.createGlowShape(J.get$length$asx(J.get$shapes$x(t4._as(t3.layout))), t7, t6, Y.colorToCss(C.ThemedColor_Color_1727987712_Color_1727175833), Y.colorToCss(C.ThemedColor_Color_2164195328_Color_2580420892)));
        }
      }
      t3 = type$.JSArray_List_dynamic;
      data = {x: H.setRuntimeTypeInfo([], t3), y: H.setRuntimeTypeInfo([], t3)};
      traces = H.setRuntimeTypeInfo([], t1);
      if (uiGoodX.length !== 0) {
        t1 = J.getInterceptor$x(data);
        J.add$1$ax(t1.get$x(data), uiGoodX);
        J.add$1$ax(t1.get$y(data), uiGoodTrace);
        C.JSArray_methods.add$1(traces, 2);
      }
      if (gpuGoodX.length !== 0) {
        t1 = J.getInterceptor$x(data);
        J.add$1$ax(t1.get$x(data), gpuGoodX);
        J.add$1$ax(t1.get$y(data), gpuGoodTrace);
        C.JSArray_methods.add$1(traces, 0);
      }
      self.extendTraces2(t5, uiGoodX, gpuGoodX, uiGoodTrace, gpuGoodTrace, [2, 0]);
      if (!H.boolConversionCheck(paused)) {
        t1 = C.JSArray_methods.get$last(dataIndexes) + 1;
        t3 = H.setRuntimeTypeInfo([{}], type$.JSArray_Data);
        t4 = {color: Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4281151025)};
        t2 = H.setRuntimeTypeInfo([t1 - 90, t1], t2);
        self.Plotly.update(t5, t3, {xaxis: {rangemode: "nonnegative", range: t2, rangeslider: null, tickfont: t4}});
      }
    }
  };
  Z.SelectTrace.prototype = {};
  Z.Selection.prototype = {
    select$1: function(_, newSelection) {
      var oldSelectInfo, t1, t2, oldPtNum0, oldPtNum1, t3, t4, newPtNum0, t5, newPtNum1, _i, selectTrace, gpuSelectionHoverName, uiSelectionHoverName, _this = this;
      type$.List_SelectTrace._as(newSelection);
      oldSelectInfo = _this.unselect$0();
      t1 = oldSelectInfo.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return H.ioore(oldSelectInfo, 0);
        t2 = oldSelectInfo[0];
        oldPtNum0 = t2.ptNumber;
        if (1 >= t1)
          return H.ioore(oldSelectInfo, 1);
        t1 = oldSelectInfo[1];
        oldPtNum1 = t1.ptNumber;
        t3 = newSelection.length;
        if (0 >= t3)
          return H.ioore(newSelection, 0);
        t4 = newSelection[0];
        newPtNum0 = t4.ptNumber;
        if (1 >= t3)
          return H.ioore(newSelection, 1);
        t5 = newSelection[1];
        newPtNum1 = t5.ptNumber;
        if (t2.traceIndex == t4.traceIndex) {
          if (typeof newPtNum0 !== "number")
            return newPtNum0.$ge();
          if (typeof oldPtNum0 !== "number")
            return H.iae(oldPtNum0);
          t2 = newPtNum0 >= oldPtNum0;
        } else
          t2 = false;
        if (t2) {
          if (typeof newPtNum0 !== "number")
            return newPtNum0.$add();
          t4.ptNumber = newPtNum0 + 1;
        }
        if (t1.traceIndex == t5.traceIndex) {
          if (typeof newPtNum1 !== "number")
            return newPtNum1.$ge();
          if (typeof oldPtNum1 !== "number")
            return H.iae(oldPtNum1);
          t1 = newPtNum1 >= oldPtNum1;
        } else
          t1 = false;
        if (t1) {
          if (1 >= t3)
            return H.ioore(newSelection, 1);
          t1 = t5.ptNumber;
          if (typeof t1 !== "number")
            return t1.$add();
          t5.ptNumber = t1 + 1;
        }
      }
      _this.set$selectInfo(newSelection);
      for (t1 = _this.selectInfo, t2 = t1.length, t3 = _this._html_frames_bar_plotly$_data, t4 = J.getInterceptor$asx(t3), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        selectTrace = t1[_i];
        t5 = selectTrace.traceIndex;
        J.removeAt$1$ax(J.get$x$x(t4.$index(t3, t5)), selectTrace.ptNumber);
        J.removeAt$1$ax(J.get$y$x(t4.$index(t3, t5)), selectTrace.ptNumber);
      }
      t1 = _this._html_frames_bar_plotly$_domName;
      t2 = _this.selectInfo;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t2 = t2[1];
      self.extendTraces2(t1, [t4.xValue], [t2.xValue], [t4.yValue], [t2.yValue], [1, 3]);
      t2 = _this.selectInfo;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      gpuSelectionHoverName = t2[0].traceIndex === 0 ? "GPU" : "GPU Jank";
      if (1 >= t3)
        return H.ioore(t2, 1);
      uiSelectionHoverName = t2[1].traceIndex === 2 ? "UI" : "UI Jank";
      t2 = type$.JSArray_int;
      self.Plotly.restyle(t1, "name", [gpuSelectionHoverName], H.setRuntimeTypeInfo([1], t2));
      self.Plotly.restyle(t1, "name", [uiSelectionHoverName], H.setRuntimeTypeInfo([3], t2));
    },
    unselect$0: function() {
      var t3, t4, _i, selectTrace, trace, ptNumber, oldSelectInfo, _this = this,
        t1 = _this.selectInfo,
        t2 = t1.length;
      if (t2 !== 0) {
        for (t3 = _this._html_frames_bar_plotly$_data, t4 = J.getInterceptor$asx(t3), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          selectTrace = t1[_i];
          trace = selectTrace.traceIndex;
          ptNumber = selectTrace.ptNumber;
          J.insert$2$ax(J.get$x$x(t4.$index(t3, trace)), ptNumber, selectTrace.xValue);
          J.insert$2$ax(J.get$y$x(t4.$index(t3, trace)), ptNumber, selectTrace.yValue);
        }
        J.removeAt$1$ax(J.get$x$x(t4.$index(t3, 1)), 1);
        J.removeAt$1$ax(J.get$y$x(t4.$index(t3, 1)), 1);
        J.removeAt$1$ax(J.get$x$x(t4.$index(t3, 3)), 1);
        J.removeAt$1$ax(J.get$y$x(t4.$index(t3, 3)), 1);
        t1 = type$.JSArray_SelectTrace;
        oldSelectInfo = H.setRuntimeTypeInfo([], t1);
        t2 = _this.selectInfo;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        C.JSArray_methods.add$1(oldSelectInfo, t2[0]);
        t2 = _this.selectInfo;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        C.JSArray_methods.add$1(oldSelectInfo, t2[1]);
        _this.set$selectInfo(H.setRuntimeTypeInfo([], t1));
        return oldSelectInfo;
      }
      return H.setRuntimeTypeInfo([], type$.JSArray_SelectTrace);
    },
    set$selectInfo: function(selectInfo) {
      this.selectInfo = type$.List_SelectTrace._as(selectInfo);
    }
  };
  U.TimelineController.prototype = {
    get$timeline: function(_) {
      var t1 = J.$eq$(this._timelineModeNotifier._value, C.TimelineMode_0) ? this.frameBasedTimeline : this.fullTimeline;
      return type$.TimelineBase_TimelineData_TimelineProcessor._as(t1);
    },
    htmlSelectTimelineEvent$1: function($event) {
      var _this = this;
      if ($event == null || _this.get$timeline(_this).data.selectedEvent === $event)
        return;
      _this.get$timeline(_this).data.selectedEvent = $event;
      _this._selectedTimelineEventNotifier.set$value(0, $event);
    },
    getCpuProfileForSelectedEvent$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3, selectedEvent;
      var $async$getCpuProfileForSelectedEvent$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              selectedEvent = $async$self.get$timeline($async$self).data.selectedEvent;
              if (selectedEvent.type !== C.TimelineEventType_0) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.cpuProfilerController;
              t2 = selectedEvent.time;
              t3 = t2._utils$_start._duration;
              $async$goto = 3;
              return P._asyncAwait(t1.pullAndProcessProfile$2$extentMicros$startMicros(t2._utils$_end._duration - t3, t3), $async$getCpuProfileForSelectedEvent$0);
            case 3:
              // returning from await.
              $async$self.get$timeline($async$self).data.cpuProfileData = type$.CpuProfileData._as(t1._dataNotifier._value);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getCpuProfileForSelectedEvent$0, $async$completer);
    },
    loadOfflineData$1: function(offlineData) {
      return this.loadOfflineData$body$TimelineController(type$.OfflineData_TimelineData._as(offlineData));
    },
    loadOfflineData$body$TimelineController: function(offlineData) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, uiThreadId, gpuThreadId;
      var $async$loadOfflineData$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self._offlineModeChanged$0(), $async$loadOfflineData$1);
            case 2:
              // returning from await.
              t1 = H.setRuntimeTypeInfo([], type$.JSArray_TraceEventWrapper);
              for (t2 = J.get$iterator$ax(offlineData.traceEvents); t2.moveNext$0();) {
                t3 = L.TraceEvent$(t2.get$current(t2));
                t4 = Date.now();
                t5 = $._traceEventWrapperId;
                $._traceEventWrapperId = t5 + 1;
                C.JSArray_methods.add$1(t1, new L.TraceEventWrapper(t3, 1000 * t4, t5));
              }
              t2 = type$.String;
              uiThreadId = $async$self._threadIdForEvents$2(P.LinkedHashSet_LinkedHashSet$_literal(["VsyncProcessCallback", "VSYNC"], t2), t1);
              gpuThreadId = $async$self._threadIdForEvents$2(P.LinkedHashSet_LinkedHashSet$_literal(["GPURasterizer::Draw"], t2), t1);
              $async$self._timelineModeNotifier.set$value(0, offlineData.timelineMode);
              $async$self.offlineTimelineData = offlineData.shallowClone$0();
              t2 = $async$self.get$timeline($async$self);
              t2.set$data(0, offlineData.shallowClone$0());
              t2 = t2.processor;
              t2.uiThreadId = uiThreadId;
              t2.gpuThreadId = gpuThreadId;
              $async$goto = 3;
              return P._asyncAwait($async$self.get$timeline($async$self).processTraceEvents$1(t1), $async$loadOfflineData$1);
            case 3:
              // returning from await.
              $async$goto = $async$self.get$timeline($async$self).data.cpuProfileData != null ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait($async$self.cpuProfilerController.transformer.processData$1($async$self.offlineTimelineData.cpuProfileData), $async$loadOfflineData$1);
            case 6:
              // returning from await.
            case 5:
              // join
              $async$self.setOfflineData$0();
              $async$self._loadOfflineDataController.add$1(0, type$.OfflineData_TimelineData._as($async$self.offlineTimelineData));
              t1 = $async$self.offlineTimelineData.selectedEvent;
              if (t1 != null)
                $async$self._selectedTimelineEventNotifier.set$value(0, t1);
              if ($async$self.offlineTimelineData instanceof A.OfflineFullTimelineData)
                $async$self.fullTimeline._timelineProcessedController.add$1(0, true);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadOfflineData$1, $async$completer);
    },
    _threadIdForEvents$2: function(targetEventNames, traceEvents) {
      var t1;
      type$.Set_String._as(targetEventNames);
      t1 = C.JSArray_methods.firstWhere$2$orElse(type$.List_TraceEventWrapper._as(traceEvents), new U.TimelineController__threadIdForEvents_closure(targetEventNames), new U.TimelineController__threadIdForEvents_closure0());
      t1 = t1 == null ? null : t1.event;
      t1 = t1 == null ? null : t1.threadId;
      return t1 == null ? -1 : t1;
    },
    setOfflineData$0: function() {
      var frameToSelect, eventToSelect, t2, t3, _i, timelineEvent, t4, t5, e, _this = this, _null = null,
        t1 = _this.offlineTimelineData;
      if (t1 instanceof A.OfflineFrameBasedTimelineData) {
        frameToSelect = C.JSArray_methods.firstWhere$2$orElse(t1.frames, new U.TimelineController_setOfflineData_closure(t1), new U.TimelineController_setOfflineData_closure0());
        if (frameToSelect != null) {
          t1 = _this.frameBasedTimeline;
          t1.data.selectedFrame = frameToSelect;
          t1._selectedFrameNotifier.set$value(0, frameToSelect);
          t1 = _this.offlineTimelineData.selectedEvent;
          eventToSelect = t1 != null ? frameToSelect.findTimelineEvent$1(t1) : _null;
        } else
          eventToSelect = _null;
      } else if (t1 instanceof A.OfflineFullTimelineData)
        if (t1.selectedEvent != null) {
          t2 = _this.fullTimeline.data.timelineEvents;
          t3 = t2.length;
          _i = 0;
          while (true) {
            if (!(_i < t2.length)) {
              eventToSelect = _null;
              break;
            }
            timelineEvent = t2[_i];
            timelineEvent.toString;
            t4 = H._instanceType(timelineEvent);
            t5 = t4._eval$1("bool(TreeNode0.T)")._as(new U.TimelineController_setOfflineData_closure1(t1));
            t4 = t4._eval$1("TreeNode0.T");
            e = X.breadthFirstTraversal(t4._as(timelineEvent), _null, t5, t4);
            if (e != null) {
              eventToSelect = e;
              break;
            }
            t2.length === t3 || (0, H.throwConcurrentModificationError)(t2);
            ++_i;
          }
        } else
          eventToSelect = _null;
      else
        eventToSelect = _null;
      if (eventToSelect != null) {
        t1 = _this.get$timeline(_this).data;
        t1.selectedEvent = eventToSelect;
        t1.cpuProfileData = _this.offlineTimelineData.cpuProfileData;
        _this._selectedTimelineEventNotifier.set$value(0, eventToSelect);
      }
      t1 = _this.offlineTimelineData.cpuProfileData;
      if (t1 != null)
        _this.cpuProfilerController._dataNotifier.set$value(0, t1);
    },
    _offlineModeChanged$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_offlineModeChanged$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.clearData$0(0), $async$_offlineModeChanged$0);
            case 2:
              // returning from await.
              $async$goto = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self.timelineService.updateListeningState$1(true), $async$_offlineModeChanged$0);
            case 5:
              // returning from await.
            case 4:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_offlineModeChanged$0, $async$completer);
    },
    exitOfflineMode$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$exitOfflineMode$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.offlineMode = false;
              $async$goto = 2;
              return P._asyncAwait($async$self._offlineModeChanged$0(), $async$exitOfflineMode$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$exitOfflineMode$0, $async$completer);
    },
    clearData$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, _i, t1;
      var $async$clearData$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              $async$goto = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).get$hasConnection() ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.clearVMTimeline$0(), $async$clearData$0);
            case 4:
              // returning from await.
            case 3:
              // join
              for (t1 = $async$self.timelines, t1.length, _i = 0; _i < 2; ++_i)
                t1[_i].clear$0(0);
              C.JSArray_methods.set$length($async$self.allTraceEvents, 0);
              $async$self.offlineTimelineData = null;
              $async$self._selectedTimelineEventNotifier.set$value(0, null);
              $async$self.cpuProfilerController.reset$0(0);
              $async$self._clearController.add$1(0, true);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$clearData$0, $async$completer);
    },
    recordTrace$1: function(trace) {
      var t1;
      type$.Map_String_dynamic._as(trace);
      t1 = this.get$timeline(this).data;
      t1 = t1 == null ? null : t1.traceEvents;
      if (t1 != null)
        J.add$1$ax(t1, trace);
    },
    recordTraceForTimelineEvent$1: function($event) {
      type$.TimelineEvent_2._as($event);
      this.recordTrace$1(C.JSArray_methods.get$first($event.traceEvents).event.json);
      C.JSArray_methods.forEach$1($event.children, this.get$recordTraceForTimelineEvent());
      if ($event.get$endTraceEventJson() != null)
        this.recordTrace$1($event.get$endTraceEventJson());
    },
    set$timelines: function(timelines) {
      this.timelines = type$.List_TimelineBase_TimelineData_TimelineProcessor._as(timelines);
    }
  };
  U.TimelineController__threadIdForEvents_closure.prototype = {
    call$1: function(trace) {
      return this.targetEventNames.contains$1(0, type$.TraceEventWrapper._as(trace).event.name);
    },
    $signature: 102
  };
  U.TimelineController__threadIdForEvents_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  U.TimelineController_setOfflineData_closure.prototype = {
    call$1: function(frame) {
      return type$.TimelineFrame._as(frame).id === this.offlineData._selectedFrameId;
    },
    $signature: 103
  };
  U.TimelineController_setOfflineData_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  U.TimelineController_setOfflineData_closure1.prototype = {
    call$1: function($event) {
      var t1;
      type$.TimelineEvent_2._as($event);
      t1 = this.offlineData;
      return C.JSArray_methods.get$first($event.traceEvents).event.name == C.JSArray_methods.get$first(t1.selectedEvent.traceEvents).event.name && $event.time.$eq(0, t1.selectedEvent.time);
    },
    $signature: 16
  };
  U.FrameBasedTimeline.prototype = {
    get$displayRefreshRate: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.double),
        $async$returnValue, $async$self = this, t1, refreshRate;
      var $async$get$displayRefreshRate = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).getDisplayRefreshRate$0(), $async$get$displayRefreshRate);
            case 3:
              // returning from await.
              refreshRate = $async$result;
              if (refreshRate == null)
                refreshRate = 60;
              t1 = $async$self.data;
              if (t1 != null)
                t1.displayRefreshRate = refreshRate;
              $async$returnValue = refreshRate;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$displayRefreshRate, $async$completer);
    },
    selectFrame$1: function(frame) {
      var t1, _this = this;
      if (frame == null || _this.data.selectedFrame === frame || false)
        return;
      _this.data.selectedFrame = frame;
      _this._selectedFrameNotifier.set$value(0, frame);
      _this.data.selectedEvent = null;
      t1 = _this._html_timeline_controller$_timelineController;
      t1._selectedTimelineEventNotifier.set$value(0, null);
      _this.data.cpuProfileData = null;
      t1.cpuProfilerController.reset$0(0);
    },
    processTraceEvents$1: function(traceEvents) {
      var t1, _i, $event;
      type$.List_TraceEventWrapper._as(traceEvents);
      for (t1 = traceEvents.length, _i = 0; _i < traceEvents.length; traceEvents.length === t1 || (0, H.throwConcurrentModificationError)(traceEvents), ++_i) {
        $event = traceEvents[_i];
        this.processor.processTraceEvent$2$immediate($event, true);
      }
      this.processor.maybeAddPendingEvents$0();
    },
    clear$0: function(_) {
      var _this = this;
      _this.super$TimelineBase$clear(0);
      _this._frameAddedNotifier.set$value(0, null);
      _this._selectedFrameNotifier.set$value(0, null);
      _this._pausedNotifier.set$value(0, false);
    }
  };
  U.FullTimeline.prototype = {
    startRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$startRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._html_timeline_controller$_recordingNotifier.set$value(0, true);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$startRecording$0, $async$completer);
    },
    stopRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$stopRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._html_timeline_controller$_recordingNotifier.set$value(0, false);
              t1 = $async$self._html_timeline_controller$_timelineController.allTraceEvents;
              if (t1.length === 0) {
                $async$self._emptyRecordingNotifier.set$value(0, true);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self._html_timeline_controller$_processingNotifier;
              t2.set$value(0, true);
              $async$goto = 3;
              return P._asyncAwait($async$self.processTraceEvents$1(t1), $async$stopRecording$0);
            case 3:
              // returning from await.
              t2.set$value(0, false);
              $async$self._timelineProcessedController.add$1(0, true);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$stopRecording$0, $async$completer);
    },
    processTraceEvents$1: function(traceEvents) {
      return this.processTraceEvents$body$FullTimeline(type$.List_TraceEventWrapper._as(traceEvents));
    },
    processTraceEvents$body$FullTimeline: function(traceEvents) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$processTraceEvents$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.processor.processTimeline$1(traceEvents), $async$processTraceEvents$1);
            case 2:
              // returning from await.
              t1 = $async$self._html_timeline_controller$_timelineController;
              t1.fullTimeline.data.initializeEventGroups$0();
              if (t1.fullTimeline.data.eventGroups._collection$_root == null)
                $async$self._emptyRecordingNotifier.set$value(0, true);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$processTraceEvents$1, $async$completer);
    },
    clear$0: function(_) {
      var _this = this;
      _this.super$TimelineBase$clear(0);
      _this._html_timeline_controller$_recordingNotifier.set$value(0, false);
      _this._html_timeline_controller$_processingNotifier.set$value(0, false);
      _this._emptyRecordingNotifier.set$value(0, false);
    }
  };
  U.TimelineBase.prototype = {
    clear$0: function(_) {
      var t1 = this.data;
      if (t1 != null)
        t1.clear$0(0);
      t1 = this.processor;
      if (t1 != null)
        t1.reset$0(0);
    },
    set$data: function(_, data) {
      this.data = H._instanceType(this)._eval$1("TimelineBase.T")._as(data);
    },
    set$processor: function(processor) {
      this.processor = H._instanceType(this)._eval$1("TimelineBase.V")._as(processor);
    }
  };
  U.TimelineMode.prototype = {
    toString$0: function(_) {
      return this._html_timeline_controller$_name;
    }
  };
  M.FrameBasedTimelineFlameChartCanvas.prototype = {
    initUiElements$0: function() {
      var t1, frameStartOffset, t2, t3, t4, t5, uiSectionLabel, t6, gpuSectionLabel, t7, _this = this;
      _this.super$FlameChart$initUiElements();
      t1 = _this.data;
      _this.expandRows$1(t1.get$uiEventFlow().get$depth() + t1.get$gpuEventFlow().get$depth());
      frameStartOffset = t1.get$time(t1)._utils$_start._duration;
      t2 = new M.FrameBasedTimelineFlameChartCanvas_initUiElements_getTopForRow(_this);
      t3 = _this.width;
      t4 = t1.get$time(t1);
      t5 = t4._utils$_end;
      t4 = t4._utils$_start;
      t5 = t5._duration;
      t4 = t4._duration;
      uiSectionLabel = _this.sectionLabel$4$top$width("UI", C.ThemedColor_Color_4286698746_Color_4288593657, t2.call$1(0), 24);
      t6 = _this.rows;
      if (0 >= t6.length)
        return H.ioore(t6, 0);
      t6[0].addNode$1(uiSectionLabel);
      gpuSectionLabel = _this.sectionLabel$4$top$width("GPU", C.ThemedColor_Color_4278356177_Color_4279923688, t2.call$1(t1.get$uiEventFlow().get$depth()), 42);
      t7 = t1.get$uiEventFlow().get$depth();
      if (t7 < 0 || t7 >= t6.length)
        return H.ioore(t6, t7);
      t6[t7].addNode$1(gpuSectionLabel);
      t2 = new M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes(_this, frameStartOffset, (t3 - _this.startInset - 70) / (t5 - t4), t2);
      t2.call$2(t1.get$uiEventFlow(), 0);
      t2.call$2(t1.get$gpuEventFlow(), t1.get$uiEventFlow().get$depth());
    },
    get$calculatedWidth: function() {
      var t1 = this.rows,
        t2 = this.data,
        t3 = t2.get$uiEventFlow().get$depth();
      if (t3 < 0 || t3 >= t1.length)
        return H.ioore(t1, t3);
      t3 = C.JSArray_methods.get$last(t1[t3].nodes).rect;
      t2 = t2.get$uiEventFlow().get$depth();
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return Math.max(t3.right, C.JSArray_methods.get$last(t1[t2].nodes).rect.right) - this.startInset;
    },
    relativeYPosition$1: function(absoluteY) {
      var t1 = absoluteY - 27;
      if (C.JSNumber_methods._tdivFast$1(t1, 27) >= this.data.get$uiEventFlow().get$depth())
        return t1 - 15;
      return t1;
    }
  };
  M.FrameBasedTimelineFlameChartCanvas_initUiElements_getTopForRow.prototype = {
    call$1: function(row) {
      var additionalPadding = row >= this.$this.data.get$uiEventFlow().get$depth() ? 15 : 0;
      return row * 27 + 27 + additionalPadding;
    },
    $signature: 55
  };
  M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes.prototype = {
    call$2: function($event, row) {
      var $top, backgroundColor, t7, node, _i, _this = this,
        t1 = $event.time,
        t2 = t1._utils$_start._duration,
        t3 = _this.frameStartOffset,
        t4 = _this.pxPerMicro,
        t5 = _this.$this,
        t6 = t5.startInset;
      t1 = t1._utils$_end._duration;
      $top = _this.getTopForRow.call$1(row);
      backgroundColor = $event.type === C.TimelineEventType_0 ? M._nextUiColor() : M._nextGpuColor();
      if (typeof $top !== "number")
        return $top.$add();
      t7 = $event.type === C.TimelineEventType_0 ? new K.ThemedColor(C.Color_4278190080, C.Color_4278190080) : new K.ThemedColor(C.Color_4293980400, C.Color_4293980400);
      node = F.FlameChartNode$(new S.Rect((t2 - t3) * t4 + t6, $top, (t1 - t3) * t4 + t6, $top + 25), backgroundColor, t7, C.Color_4278190080, $event, new M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes_closure($event), t6, type$.TimelineEvent_2);
      t5 = t5.rows;
      if (row < 0 || row >= t5.length)
        return H.ioore(t5, row);
      C.JSArray_methods.add$1(t5[row].nodes, node);
      for (t1 = $event.children, t2 = t1.length, t3 = row + 1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        _this.call$2(t1[_i], t3);
    },
    $signature: 227
  };
  M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes_closure.prototype = {
    call$1: function(_) {
      type$.TimelineEvent_2._as(_);
      return C.JSArray_methods.get$first(this.event.traceEvents).event.name;
    },
    $signature: 53
  };
  M.FullTimelineFlameChartCanvas.prototype = {
    chartX$1: function(dur) {
      var t5,
        t1 = this.data,
        startTimeOffset = t1.get$time(t1)._utils$_start._duration,
        t2 = dur._duration,
        t3 = this.width,
        t4 = this.startInset;
      t1 = t1.get$time(t1);
      t5 = t1._utils$_end;
      t1 = t1._utils$_start;
      return (t2 - startTimeOffset) * ((t3 - t4 - 70) / (t5._duration - t1._duration)) + t4;
    },
    initUiElements$0: function() {
      var getTopForRow, createChartNode, t1, t2, t3, t4, t5, currentRowIndex, currentSectionIndex, groupName, group, t6, t7, i, t8, t9, _i, sectionLabelBackgroundColor, currentSectionLabel, _this = this, _box_0 = {};
      _this.super$FlameChart$initUiElements();
      getTopForRow = new M.FullTimelineFlameChartCanvas_initUiElements_getTopForRow();
      _box_0.maxRight = -1;
      createChartNode = new M.FullTimelineFlameChartCanvas_initUiElements_createChartNode(_box_0, _this, getTopForRow);
      for (t1 = _this.data, t2 = t1.get$eventGroups(), t3 = t2.$ti, t3 = new P._SplayTreeKeyIterator(t2, H.setRuntimeTypeInfo([], t3._eval$1("JSArray<_SplayTreeNode<1>>")), t2._modificationCount, t2._splayCount, t3._eval$1("_SplayTreeKeyIterator<1>")), t3._findLeftMostDescendent$1(t2._collection$_root), t2 = _this.rows, t4 = _this.sections, t5 = type$.FullTimelineEventGroup, currentRowIndex = 0, currentSectionIndex = 0; t3.moveNext$0();) {
        groupName = H._asStringS(t3.get$current(t3));
        group = t5._as(t1.get$eventGroups().$index(0, groupName));
        t6 = t2.length;
        t7 = group.rows;
        _this.expandRows$1(t6 + t7.length);
        for (i = 0; t6 = t7.length, i < t6; ++i)
          for (t6 = t7[i].events, t8 = t6.length, t9 = currentRowIndex + i, _i = 0; _i < t6.length; t6.length === t8 || (0, H.throwConcurrentModificationError)(t6), ++_i)
            createChartNode.call$3(t6[_i], t9, currentSectionIndex);
        C.JSArray_methods.add$1(t4, new F.FlameChartSection(currentSectionIndex, currentRowIndex, currentRowIndex + t6, getTopForRow.call$2(currentRowIndex, currentSectionIndex)));
        switch (groupName) {
          case "UI":
            sectionLabelBackgroundColor = C.ThemedColor_Color_4286698746_Color_4288593657;
            break;
          case "GPU":
            sectionLabelBackgroundColor = C.ThemedColor_Color_4278356177_Color_4279923688;
            break;
          case "Unknown":
            sectionLabelBackgroundColor = $.$get$mainUnknownColor();
            break;
          default:
            sectionLabelBackgroundColor = $.$get$mainAsyncColor();
        }
        t6 = getTopForRow.call$2(currentRowIndex, currentSectionIndex);
        t8 = $.FullTimelineFlameChartCanvas_sectionLabelWidths.$index(0, groupName);
        if (typeof t8 !== "number")
          return t8.$add();
        currentSectionLabel = _this.sectionLabel$4$top$width(groupName, sectionLabelBackgroundColor, t6, Math.max(20, t8 + 13));
        if (currentRowIndex < 0 || currentRowIndex >= t2.length)
          return H.ioore(t2, currentRowIndex);
        t2[currentRowIndex].addNode$2$index(currentSectionLabel, 0);
        currentRowIndex += t7.length;
        ++currentSectionIndex;
      }
      for (t1 = t2.length, _i = 0; _i < t2.length; t2.length === t1 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        t3 = t2[_i].nodes;
        t4 = H._arrayInstanceType(t3);
        t5 = t4._eval$1("int(1,1)")._as(new M.FullTimelineFlameChartCanvas_initUiElements_closure());
        if (!!t3.immutable$list)
          H.throwExpression(P.UnsupportedError$("sort"));
        t4 = t4._precomputed1;
        t6 = t3.length - 1;
        if (t6 - 0 <= 32)
          H.Sort__insertionSort(t3, 0, t6, t5, t4);
        else
          H.Sort__dualPivotQuicksort(t3, 0, t6, t5, t4);
      }
      _this._calculateAsyncGuidelines$0();
    },
    _calculateAsyncGuidelines$0: function() {
      var t2, t3, t4, t5, _i, t6, t7, _i0, node, t8, t9, t10, t11, verticalGuidelineX, verticalGuidelineStartY, i, child, childNode, previousChildIndex, t12, _this = this,
        t1 = _this.verticalGuidelines;
      C.JSArray_methods.set$length(t1, 0);
      t2 = _this.horizontalGuidelines;
      C.JSArray_methods.set$length(t2, 0);
      for (t3 = _this.rows, t4 = t3.length, t5 = _this.chartNodesByEvent, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i)
        for (t6 = t3[_i].nodes, t7 = t6.length, _i0 = 0; _i0 < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i0) {
          node = t6[_i0];
          t8 = node.data;
          if (t8 instanceof A.AsyncTimelineEvent) {
            t9 = t8.children;
            if (t9.length !== 0) {
              t10 = node.rect;
              t11 = t10.left;
              if (typeof t11 !== "number")
                return t11.$add();
              verticalGuidelineX = t11 + 1;
              verticalGuidelineStartY = t10.bottom;
              t10 = t5.$index(0, t8._lowestDisplayChild).rect;
              t11 = t10.top;
              C.JSArray_methods.add$1(t1, new N.VerticalLineSegment(new S.Offset(verticalGuidelineX, verticalGuidelineStartY), new S.Offset(verticalGuidelineX, t11 + (t10.bottom - t11) / 2)));
              t11 = t5.$index(0, C.JSArray_methods.get$first(t9)).rect;
              t10 = t11.top;
              t10 += (t11.bottom - t10) / 2;
              C.JSArray_methods.add$1(t2, new N.HorizontalLineSegment(new S.Offset(verticalGuidelineX, t10), new S.Offset(t11.left, t10)));
              for (i = 1; i < t9.length; ++i) {
                t10 = {};
                t10.horizontalGuidelineStartX = verticalGuidelineX;
                child = t9[i];
                childNode = t5.$index(0, child);
                t11 = childNode.row;
                if (t11.index === node.row.index + 1) {
                  previousChildIndex = C.JSArray_methods.indexOf$1(t11.nodes, childNode) - 1;
                  t11 = childNode.row.nodes;
                  if (previousChildIndex < 0 || previousChildIndex >= t11.length)
                    return H.ioore(t11, previousChildIndex);
                  new M.FullTimelineFlameChartCanvas__calculateAsyncGuidelines_generateSubsequentVerticalGuideline(t10, _this, t8, child, node, childNode, verticalGuidelineStartY).call$1(t11[previousChildIndex].rect.right);
                }
                t11 = childNode.rect;
                t12 = t11.top;
                t12 += (t11.bottom - t12) / 2;
                C.JSArray_methods.add$1(t2, new N.HorizontalLineSegment(new S.Offset(t10.horizontalGuidelineStartX, t12), new S.Offset(t11.left, t12)));
              }
            }
          }
        }
      C.JSArray_methods.sort$0(t1);
      C.JSArray_methods.sort$0(t2);
    },
    get$calculatedWidth: function() {
      var t1 = this.rows,
        t2 = this.widestRow;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return C.JSArray_methods.get$last(t1[t2].nodes).rect.right - this.startInset;
    },
    get$zoomMultiplier: function() {
      return this.zoomLevel * 0.008;
    },
    updateChartForZoom$0: function() {
      var _this = this;
      _this.updateNodesForZoom$0();
      _this.width = _this.get$calculatedWidth() + _this.startInset + 70;
      _this._calculateAsyncGuidelines$0();
      _this.timelineGrid.updateForZoom$2(_this.zoomLevel, _this.get$calculatedWidth());
      _this.rebuildAndPositionAfterZoom$0();
    },
    relativeYPosition$1: function(absoluteY) {
      var t1 = C.JSArray_methods.lastWhere$2$orElse(this.sections, new M.FullTimelineFlameChartCanvas_relativeYPosition_closure(absoluteY), new M.FullTimelineFlameChartCanvas_relativeYPosition_closure0()),
        section = t1 == null ? null : t1.index;
      if (section == null)
        section = 0;
      return absoluteY - 27 - section * 15;
    },
    paintCallback$2: function(canvas, visible) {
      var t1, t2, t3, firstVerticalGuidelineIndex, t4, firstHorizontalGuidelineIndex, _this = this;
      _this.paintSections$2(canvas, visible);
      _this.paintRows$2(canvas, visible);
      t1 = _this.verticalGuidelines;
      t2 = visible.left;
      t3 = visible.top;
      firstVerticalGuidelineIndex = N.lowerBound(t1, new N.VerticalLineSegment(new S.Offset(t2, t3), new S.Offset(t2, visible.bottom)), type$.VerticalLineSegment);
      t4 = _this.horizontalGuidelines;
      firstHorizontalGuidelineIndex = N.lowerBound(t4, new N.HorizontalLineSegment(new S.Offset(t2, t3), new S.Offset(visible.right, t3)), type$.HorizontalLineSegment);
      t2 = firstHorizontalGuidelineIndex === -1;
      if (!t2 || firstVerticalGuidelineIndex !== -1) {
        canvas.strokeStyle = $.$get$guidelineColorCss();
        canvas.lineWidth = 0.4;
      }
      if (firstVerticalGuidelineIndex !== -1)
        _this._paintGuidelines$4(canvas, visible, t1, firstVerticalGuidelineIndex);
      if (!t2)
        _this._paintGuidelines$4(canvas, visible, t4, firstHorizontalGuidelineIndex);
      _this.timelineGrid.paint$3(canvas, _this._viewportCanvas._viewport, visible);
    },
    _paintGuidelines$4: function(canvas, visible, guidelines, firstLineIndex) {
      var i, line, t1, t2, t3, t4, intersectRect, t5;
      type$.List_LineSegment._as(guidelines);
      for (i = firstLineIndex; i < guidelines.length; ++i) {
        line = guidelines[i];
        if (!line.crossAxisIntersects$1(visible))
          break;
        t1 = line.start;
        t2 = line.end;
        t3 = t1._dx;
        t4 = t2._dx;
        t1 = t1._dy;
        t2 = t2._dy;
        intersectRect = new S.Rect(Math.min(H.checkNum(t3), H.checkNum(t4)), Math.min(t1, t2), Math.max(H.checkNum(t3), H.checkNum(t4)), Math.max(t1, t2)).intersect$1(visible);
        t5 = intersectRect.left;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (intersectRect.right - t5 >= 0 && intersectRect.bottom - intersectRect.top >= 0) {
          canvas.beginPath();
          canvas.moveTo(t3, t1);
          canvas.lineTo(t4, t2);
          canvas.closePath();
          canvas.stroke();
        }
      }
    }
  };
  M.FullTimelineFlameChartCanvas_initUiElements_getTopForRow.prototype = {
    call$2: function(row, section) {
      return row * 27 + 27 + section * 15;
    },
    $signature: 228
  };
  M.FullTimelineFlameChartCanvas_initUiElements_createChartNode.prototype = {
    call$3: function($event, row, section) {
      var $top, t1, t2, left, right, t3, color, backgroundColor, textColor, node;
      if (!$event.get$isWellFormed())
        return;
      $top = this.getTopForRow.call$2(row, section);
      t1 = this.$this;
      t2 = $event.time;
      left = t1.chartX$1(t2._utils$_start);
      right = t1.chartX$1(t2._utils$_end);
      t2 = this._box_0;
      if (right > t2.maxRight) {
        t2.maxRight = right;
        t1.widestRow = row;
      }
      t2 = $event.type;
      if (t2 === C.TimelineEventType_2) {
        t2 = $.$get$asyncColorPalette();
        t3 = $._asyncColorOffset;
        color = t2[C.JSInt_methods.$mod(t3, 3)];
        $._asyncColorOffset = t3 + 1;
        backgroundColor = color;
      } else if (t2 === C.TimelineEventType_0)
        backgroundColor = M._nextUiColor();
      else if (t2 === C.TimelineEventType_1)
        backgroundColor = M._nextGpuColor();
      else {
        t2 = $.$get$unknownColorPalette();
        t3 = $._unknownColorOffset;
        color = t2[C.JSInt_methods.$mod(t3, 3)];
        $._unknownColorOffset = t3 + 1;
        backgroundColor = color;
      }
      textColor = $event.type === C.TimelineEventType_1 ? new K.ThemedColor(C.Color_4293980400, C.Color_4293980400) : new K.ThemedColor(C.Color_4278190080, C.Color_4278190080);
      if (typeof $top !== "number")
        return $top.$add();
      node = F.FlameChartNode$(new S.Rect(left, $top, right, $top + 25), backgroundColor, textColor, C.Color_4278190080, $event, new M.FullTimelineFlameChartCanvas_initUiElements_createChartNode_closure($event), t1.startInset, type$.TimelineEvent_2);
      t1.chartNodesByEvent.$indexSet(0, $event, node);
      t1 = t1.rows;
      if (row >= t1.length)
        return H.ioore(t1, row);
      t1[row].addNode$1(node);
    },
    $signature: 229
  };
  M.FullTimelineFlameChartCanvas_initUiElements_createChartNode_closure.prototype = {
    call$1: function(_) {
      type$.TimelineEvent_2._as(_);
      return C.JSArray_methods.get$first(this.event.traceEvents).event.name;
    },
    $signature: 53
  };
  M.FullTimelineFlameChartCanvas_initUiElements_closure.prototype = {
    call$2: function(a, b) {
      var t1 = type$.FlameChartNode_dynamic;
      t1._as(a);
      t1._as(b);
      return J.compareTo$1$ns(a.rect.left, b.rect.left);
    },
    $signature: 230
  };
  M.FullTimelineFlameChartCanvas__calculateAsyncGuidelines_generateSubsequentVerticalGuideline.prototype = {
    call$1: function(previousXInRow) {
      var newVerticalGuidelineX, _this = this,
        t1 = _this.event.time._utils$_end,
        t2 = _this.child.time._utils$_start;
      if (t1._duration < t2._duration)
        newVerticalGuidelineX = _this.node.rect.right;
      else {
        t1 = _this.childNode.rect.left;
        if (typeof t1 !== "number")
          return t1.$sub();
        newVerticalGuidelineX = t1 - Math.min(8, (t1 - previousXInRow) / 2);
      }
      C.JSArray_methods.add$1(_this.$this.verticalGuidelines, new N.VerticalLineSegment(new S.Offset(newVerticalGuidelineX, _this.verticalGuidelineStartY), new S.Offset(newVerticalGuidelineX, _this.childNode.rect.get$centerLeft()._dy)));
      _this._box_0.horizontalGuidelineStartX = newVerticalGuidelineX;
    },
    $signature: 231
  };
  M.FullTimelineFlameChartCanvas_relativeYPosition_closure.prototype = {
    call$1: function(s) {
      return this.absoluteY >= type$.FlameChartSection._as(s).absStartY;
    },
    $signature: 104
  };
  M.FullTimelineFlameChartCanvas_relativeYPosition_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  A.FrameBasedTimelineData.prototype = {
    get$json: function(_) {
      var _this = this,
        t1 = _this.selectedFrame;
      t1 = t1 == null ? null : t1.id;
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["selectedFrameId", t1, "displayRefreshRate", _this.displayRefreshRate], type$.String, type$.dynamic);
      t1.addAll$1(0, A.TimelineData.prototype.get$json.call(_this, _this));
      return t1;
    },
    clear$0: function(_) {
      this.super$TimelineData$clear(0);
      C.JSArray_methods.set$length(this.frames, 0);
      this.selectedFrame = null;
    }
  };
  A.FullTimelineData.prototype = {
    get$displayDepth: function() {
      var t2, depth,
        t1 = this.eventGroups;
      if (t1._collection$_root == null)
        this.initializeEventGroups$0();
      for (t2 = t1.$ti, t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t2 = new P._SplayTreeValueIterator(t1, H.setRuntimeTypeInfo([], t2._eval$1("JSArray<_SplayTreeNode<1>>")), t1._modificationCount, t1._splayCount, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeValueIterator<1,2>")), t2._findLeftMostDescendent$1(t1._collection$_root), depth = 0; t2.moveNext$0();)
        depth += t2.get$current(t2).rows.length;
      return depth;
    },
    initializeEventGroups$0: function() {
      var t2, t3, _i, $event,
        t1 = this.timelineEvents;
      C.JSArray_methods.sort$1(t1, new A.FullTimelineData_initializeEventGroups_closure());
      for (t2 = t1.length, t3 = this.eventGroups, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        $event = t1[_i];
        t3.putIfAbsent$2(0, this._computeEventGroupKey$1($event), new A.FullTimelineData_initializeEventGroups_closure0()).addEventAtCalculatedRow$1($event);
      }
    },
    addTimelineEvent$1: function($event) {
      C.JSArray_methods.add$1(this.timelineEvents, $event);
      this.set$_endTimestampMicros(Math.max(this._endTimestampMicros, $event.get$maxEndMicros()));
    },
    _computeEventGroupKey$1: function($event) {
      var t1 = $event.type;
      if (t1 === C.TimelineEventType_2)
        return C.JSArray_methods.get$first($event.traceEvents).event.name;
      else if (t1 === C.TimelineEventType_0)
        return "UI";
      else if (t1 === C.TimelineEventType_1)
        return "GPU";
      else
        return "Unknown";
    },
    clear$0: function(_) {
      var _this = this;
      _this.super$TimelineData$clear(0);
      C.JSArray_methods.set$length(_this.timelineEvents, 0);
      _this.eventGroups._collection$_clear$0(0);
      _this.time = new B.TimeRange(true);
      _this._displayDepth = null;
      _this._endTimestampMicros = -1;
    },
    set$_endTimestampMicros: function(_endTimestampMicros) {
      this._endTimestampMicros = H._asIntS(_endTimestampMicros);
    },
    get$eventGroups: function() {
      return this.eventGroups;
    },
    get$time: function(receiver) {
      return this.time;
    }
  };
  A.FullTimelineData_initializeEventGroups_closure.prototype = {
    call$2: function(a, b) {
      var t1 = type$.TimelineEvent_2;
      t1._as(a);
      t1._as(b);
      return C.JSInt_methods.compareTo$1(a.time._utils$_start._duration, b.time._utils$_start._duration);
    },
    $signature: 232
  };
  A.FullTimelineData_initializeEventGroups_closure0.prototype = {
    call$0: function() {
      return new A.FullTimelineEventGroup(H.setRuntimeTypeInfo([], type$.JSArray_FullTimelineRowData));
    },
    $signature: 233
  };
  A.FullTimelineEventGroup.prototype = {
    addEventAtCalculatedRow$1: function($event) {
      var displayRow,
        currentLargestRowIndex = this.rows.length;
      for (displayRow = 0; displayRow < currentLargestRowIndex;) {
        if (this._eventFitsAtDisplayRow$3($event, displayRow, currentLargestRowIndex))
          break;
        ++displayRow;
      }
      this._addEventAtDisplayRow$2$row($event, displayRow);
    },
    _eventFitsAtDisplayRow$3: function($event, displayRow, currentLargestRowIndex) {
      var t1, level, t2, lastEventAtLevel, firstNewEventAtLevel, t3, t4, t5,
        maxLevelToVerify = Math.min($event.get$displayRows().length, currentLargestRowIndex - displayRow);
      for (t1 = this.rows, level = 0; level < maxLevelToVerify; ++level) {
        t2 = displayRow + level;
        lastEventAtLevel = t2 < t1.length ? t1[t2].lastEvent : null;
        t2 = $event._displayRows;
        if (t2 == null) {
          t2 = $event._calculateDisplayRows$0();
          $event.set$_displayRows(t2);
        }
        if (level >= t2.length)
          return H.ioore(t2, level);
        t2 = t2[level];
        firstNewEventAtLevel = t2.length !== 0 ? C.JSArray_methods.get$first(t2) : null;
        if (lastEventAtLevel != null && firstNewEventAtLevel != null) {
          t2 = lastEventAtLevel.time;
          t3 = firstNewEventAtLevel.time;
          t4 = t3._utils$_end;
          t5 = t2._utils$_start;
          t4 = t4._duration;
          t5 = t5._duration;
          if (t4 > t5) {
            t3 = t3._utils$_start;
            t2 = t2._utils$_end;
            t2 = t3._duration < t2._duration;
          } else
            t2 = false;
          if (t2)
            return false;
          if (t4 < t5)
            return false;
        }
      }
      return true;
    },
    _addEventAtDisplayRow$2$row: function($event, row) {
      var t3, displayRow, _i, e, t4, t5, t6,
        t1 = $event.get$displayRows().length,
        t2 = this.rows,
        i = t2.length;
      if (row + t1 >= i) {
        t1 = type$.JSArray_TimelineEvent;
        while (true) {
          t3 = $event._displayRows;
          if (t3 == null) {
            t3 = $event._calculateDisplayRows$0();
            $event.set$_displayRows(t3);
          }
          if (!(i < row + t3.length))
            break;
          C.JSArray_methods.add$1(t2, new A.FullTimelineRowData(H.setRuntimeTypeInfo([], t1)));
          ++i;
        }
      }
      i = 0;
      while (true) {
        t1 = $event._displayRows;
        if (t1 == null) {
          t1 = $event._calculateDisplayRows$0();
          $event.set$_displayRows(t1);
        }
        if (!(i < t1.length))
          break;
        t1 = $event._displayRows;
        if (t1 == null) {
          t1 = $event._calculateDisplayRows$0();
          $event.set$_displayRows(t1);
        }
        if (i >= t1.length)
          return H.ioore(t1, i);
        displayRow = t1[i];
        for (t1 = displayRow.length, t3 = row + i, _i = 0; _i < displayRow.length; displayRow.length === t1 || (0, H.throwConcurrentModificationError)(displayRow), ++_i) {
          e = displayRow[_i];
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          C.JSArray_methods.add$1(t2[t3].events, e);
          t4 = e.time._utils$_end;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          t5 = t2[t3];
          t6 = t5.lastEvent;
          t6 = t6 == null ? null : t6.time;
          t6 = t6 == null ? null : t6._utils$_end;
          if (t6 == null)
            t6 = C.Duration_0;
          if (t4._duration > t6._duration)
            t5.set$lastEvent(e);
        }
        ++i;
      }
    }
  };
  A.FullTimelineRowData.prototype = {
    set$lastEvent: function(lastEvent) {
      this.lastEvent = type$.TimelineEvent_2._as(lastEvent);
    }
  };
  A.TimelineData.prototype = {
    get$json: function(_) {
      var t2, _this = this,
        t1 = _this.cpuProfileData;
      t1 = t1 == null ? null : t1.get$json(t1);
      if (t1 == null) {
        t1 = type$.dynamic;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      }
      t2 = _this.selectedEvent;
      t2 = t2 == null ? null : t2.get$json(t2);
      if (t2 == null) {
        t2 = type$.dynamic;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      }
      return P.LinkedHashMap_LinkedHashMap$_literal(["traceEvents", _this.traceEvents, "cpuProfile", t1, "selectedEvent", t2, "timelineMode", _this.timelineMode._html_timeline_controller$_name, "dartDevToolsScreen", "timeline"], type$.String, type$.dynamic);
    },
    clear$0: function(_) {
      J.clear$0$ax(this.traceEvents);
      this.cpuProfileData = this.selectedEvent = null;
    },
    hasCpuProfileData$0: function() {
      var t1 = this.cpuProfileData;
      if (t1 != null) {
        t1 = t1.stackFrames;
        t1 = t1.get$isNotEmpty(t1);
      } else
        t1 = false;
      return t1;
    }
  };
  A.OfflineFrameBasedTimelineData.prototype = {
    shallowClone$0: function() {
      var _this = this,
        t1 = _this.selectedFrame,
        t2 = _this.selectedEvent,
        t3 = _this.displayRefreshRate;
      return A.OfflineFrameBasedTimelineData$_(_this.cpuProfileData, t3, _this.frames, t2, t1, _this._selectedFrameId, _this.traceEvents);
    }
  };
  A.OfflineFullTimelineData.prototype = {
    shallowClone$0: function() {
      var t1 = this.traceEvents,
        t2 = this.selectedEvent,
        t3 = this.cpuProfileData,
        t4 = P.SplayTreeMap$(A.html_timeline_model_FullTimelineData_eventGroupComparator$closure(), type$.String, type$.FullTimelineEventGroup),
        t5 = H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent);
      return new A.OfflineFullTimelineData(t5, t4, new B.TimeRange(true), C.TimelineMode_1, t1, t2, t3);
    }
  };
  A.OfflineData.prototype = {$isTimelineData: 1};
  A.OfflineTimelineEvent.prototype = {
    OfflineTimelineEvent$1: function(firstTrace) {
      var t1 = P.Duration$(H._asIntS(J.$add$ansx(firstTrace.$index(0, "ts"), firstTrace.$index(0, "dur"))), 0);
      this.time._utils$_end = t1;
      this.set$type(0, C.JSArray_methods.firstWhere$2$orElse(C.List_G1V, new A.OfflineTimelineEvent_closure(firstTrace), new A.OfflineTimelineEvent_closure0()));
    },
    couldBeParentOf$1: function(e) {
      throw H.wrapException(P.UnimplementedError$("This method should never be called for an instance of OfflineTimelineEvent"));
    },
    _calculateDisplayRows$0: function() {
      return H.throwExpression(P.UnimplementedError$("This method should never be called for an instance of OfflineTimelineEvent"));
    }
  };
  A.OfflineTimelineEvent_closure.prototype = {
    call$1: function(t) {
      return J.toString$0$(type$.TimelineEventType._as(t)) === J.toString$0$(J.$index$asx(this.firstTrace.$index(0, "args"), "type"));
    },
    $signature: 234
  };
  A.OfflineTimelineEvent_closure0.prototype = {
    call$0: function() {
      return C.TimelineEventType_3;
    },
    $signature: 235
  };
  A.TimelineFrame.prototype = {
    get$uiEventFlow: function() {
      var t1 = this.eventFlows;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    get$gpuEventFlow: function() {
      var t1 = this.eventFlows;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    get$uiDuration: function() {
      var t2,
        t1 = this.eventFlows;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      t1 = t1 == null ? null : t1.time;
      if (t1 == null)
        t1 = null;
      else {
        t2 = t1._utils$_end;
        t1 = t1._utils$_start;
        t1 = new P.Duration(t2._duration - t1._duration);
      }
      return t1 == null ? null : t1._duration;
    },
    get$uiDurationMs: function() {
      if (this.get$uiDuration() != null) {
        var t1 = this.get$uiDuration();
        if (typeof t1 !== "number")
          return t1.$div();
        t1 /= 1000;
      } else
        t1 = null;
      return t1;
    },
    get$gpuDuration: function() {
      var t2,
        t1 = this.eventFlows;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      t1 = t1 == null ? null : t1.time;
      if (t1 == null)
        t1 = null;
      else {
        t2 = t1._utils$_end;
        t1 = t1._utils$_start;
        t1 = new P.Duration(t2._duration - t1._duration);
      }
      return t1 == null ? null : t1._duration;
    },
    get$gpuDurationMs: function() {
      if (this.get$gpuDuration() != null) {
        var t1 = this.get$gpuDuration();
        if (typeof t1 !== "number")
          return t1.$div();
        t1 /= 1000;
      } else
        t1 = null;
      return t1;
    },
    findTimelineEvent$1: function($event) {
      var t2, t3,
        t1 = $event.type;
      if (t1 === C.TimelineEventType_0 || t1 === C.TimelineEventType_1) {
        t2 = this.eventFlows;
        t1 = t1.index;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        t1 = t2[t1];
        t1.toString;
        t2 = H.instanceType(t1);
        t3 = t2._eval$1("bool(TreeNode0.T)")._as(new A.TimelineFrame_findTimelineEvent_closure($event));
        t2 = t2._eval$1("TreeNode0.T");
        return X.breadthFirstTraversal(t2._as(t1), null, t3, t2);
      }
      return null;
    },
    toString$0: function(_) {
      var t1 = "Frame " + this.id + " - " + this.time.toString$0(0) + ", ui: ",
        t2 = this.eventFlows;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1 = t1 + t2[0].time.toString$0(0) + ", gpu: ";
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      return t1 + t2[1].time.toString$0(0);
    },
    get$id: function(receiver) {
      return this.id;
    },
    get$time: function(receiver) {
      return this.time;
    }
  };
  A.TimelineFrame_closure.prototype = {
    call$1: function(_) {
      return null;
    },
    $signature: 83
  };
  A.TimelineFrame_findTimelineEvent_closure.prototype = {
    call$1: function(e) {
      var t1;
      type$.TimelineEvent_2._as(e);
      t1 = this.event;
      return C.JSArray_methods.get$first(e.traceEvents).event.name == C.JSArray_methods.get$first(t1.traceEvents).event.name && e.time.$eq(0, t1.time);
    },
    $signature: 16
  };
  A.TimelineEvent0.prototype = {
    get$name: function(_) {
      return C.JSArray_methods.get$first(this.traceEvents).event.name;
    },
    get$endTraceEventJson: function() {
      var t1 = this.traceEvents;
      return t1.length > 1 ? C.JSArray_methods.get$last(t1).event.json : null;
    },
    get$isWellFormed: function() {
      var t1 = this.time;
      return t1._utils$_start != null && t1._utils$_end != null;
    },
    _isWellFormedDeep$1: function($event) {
      return !this.subtreeHasNodeWithCondition$1(new A.TimelineEvent__isWellFormedDeep_closure());
    },
    get$displayRows: function() {
      var t1 = this._displayRows;
      if (t1 == null) {
        t1 = this._calculateDisplayRows$0();
        this.set$_displayRows(t1);
      }
      return t1;
    },
    _expandDisplayRows$1: function(newRowLength) {
      var currentLength, t1, i, t2, _this = this;
      if (_this._displayRows == null)
        _this.set$_displayRows(H.setRuntimeTypeInfo([], type$.JSArray_List_TimelineEvent));
      currentLength = _this._displayRows.length;
      for (t1 = type$.JSArray_TimelineEvent, i = currentLength; i < newRowLength; ++i) {
        t2 = _this._displayRows;
        (t2 && C.JSArray_methods).add$1(t2, H.setRuntimeTypeInfo([], t1));
      }
    },
    _mergeChildDisplayRows$2: function(mergeStartLevel, child) {
      var i, t1, t2, _this = this,
        childDisplayRows = child.get$displayRows();
      _this._expandDisplayRows$1(mergeStartLevel + childDisplayRows.length);
      for (i = 0; i < childDisplayRows.length; ++i) {
        t1 = _this._displayRows;
        if (t1 == null) {
          t1 = _this._calculateDisplayRows$0();
          _this.set$_displayRows(t1);
        }
        t2 = mergeStartLevel + i;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        if (i >= childDisplayRows.length)
          return H.ioore(childDisplayRows, i);
        C.JSArray_methods.addAll$1(t2, childDisplayRows[i]);
      }
      if (mergeStartLevel >= _this._lowestDisplayChildRow) {
        _this._lowestDisplayChildRow = mergeStartLevel;
        _this._lowestDisplayChild = child;
      }
    },
    addEndEvent$1: function(eventWrapper) {
      var t1 = P.Duration$(eventWrapper.event.timestampMicros, 0);
      this.time._utils$_end = t1;
      C.JSArray_methods.add$1(this.traceEvents, eventWrapper);
    },
    maybeRemoveDuplicate$0: function() {
      var t2,
        t1 = new A.TimelineEvent_maybeRemoveDuplicate__maybeRemoveDuplicate();
      if (this.children.length !== 0)
        t1.call$1$parent(this);
      t2 = this.parent;
      if (t2 != null)
        t1.call$1$parent(t2);
    },
    removeChild$1: function(childToRemove) {
      C.JSArray_methods.forEach$1(P.List_List$from(childToRemove.children, true, type$.TimelineEvent_2), this.get$_addChild());
      C.JSArray_methods.remove$1(this.children, childToRemove);
    },
    addChild$1: function(child) {
      new A.TimelineEvent_addChild__putChildInTree(child).call$1(this);
    },
    _addChild$1: function(child) {
      type$.TimelineEvent_2._as(child);
      C.JSArray_methods.add$1(this.children, child);
      child.set$parent(0, this);
    },
    format$2: function(buf, indent) {
      var t1, t2, _i;
      buf._contents += indent + H.S(C.JSArray_methods.get$first(this.traceEvents).event.name) + " " + this.time.toString$0(0) + "\n";
      for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].format$2(buf, "  " + indent);
    },
    get$json: function(_) {
      var t3, t4,
        t1 = type$.dynamic,
        modifiedTrace = P.LinkedHashMap_LinkedHashMap$from(C.JSArray_methods.get$first(this.traceEvents).event.json, t1, t1),
        t2 = type$.String;
      J.addAll$1$ax(modifiedTrace.$index(0, "args"), P.LinkedHashMap_LinkedHashMap$_literal(["type", J.toString$0$(this.type)], t2, t2));
      if (!modifiedTrace.containsKey$1(0, "dur")) {
        t3 = this.time;
        t4 = t3._utils$_end;
        t3 = t3._utils$_start;
        modifiedTrace.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["dur", t4._duration - t3._duration], t1, t1));
      }
      return P.LinkedHashMap_LinkedHashMap$_literal(["firstTrace", modifiedTrace], t2, t1);
    },
    toString$0: function(_) {
      var t1,
        buf = new P.StringBuffer("");
      this.format$2(buf, "  ");
      t1 = buf._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$type: function(_, type) {
      this.type = type$.TimelineEventType._as(type);
    },
    set$_displayRows: function(_displayRows) {
      this._displayRows = type$.List_List_TimelineEvent._as(_displayRows);
    }
  };
  A.TimelineEvent__isWellFormedDeep_closure.prototype = {
    call$1: function(e) {
      return !type$.TimelineEvent_2._as(e).get$isWellFormed();
    },
    $signature: 16
  };
  A.TimelineEvent_maybeRemoveDuplicate__maybeRemoveDuplicate.prototype = {
    call$1$parent: function($parent) {
      var t1 = $parent.children;
      if (t1.length === 1 && C.C_DeepCollectionEquality.equals$2(C.JSArray_methods.get$first($parent.traceEvents).event.json, C.JSArray_methods.get$first(C.JSArray_methods.get$first(t1).traceEvents).event.json) && C.C_DeepCollectionEquality.equals$2($parent.get$endTraceEventJson(), C.JSArray_methods.get$first(t1).get$endTraceEventJson()))
        $parent.removeChild$1(C.JSArray_methods.get$first(t1));
    },
    call$0: function() {
      return this.call$1$parent(null);
    },
    $signature: 236
  };
  A.TimelineEvent_addChild__putChildInTree.prototype = {
    call$1: function(root) {
      var t2, _children, childrenToReorder, t3, _i, otherChild, t4, t5,
        t1 = root.children;
      if (t1.length === 0) {
        t2 = this.child;
        C.JSArray_methods.add$1(t1, t2);
        t2.set$parent(0, root);
        return;
      }
      _children = H.setRuntimeTypeInfo(t1.slice(0), H._arrayInstanceType(t1)._eval$1("JSArray<1>"));
      childrenToReorder = [];
      for (t2 = _children.length, t3 = this.child, _i = 0; _i < _children.length; _children.length === t2 || (0, H.throwConcurrentModificationError)(_children), ++_i) {
        otherChild = _children[_i];
        if (t3.couldBeParentOf$1(otherChild))
          childrenToReorder.push(otherChild);
      }
      if (childrenToReorder.length !== 0) {
        C.JSArray_methods.add$1(t1, t3);
        t3.set$parent(0, root);
        for (t2 = childrenToReorder.length, t4 = t3.children, _i = 0; _i < childrenToReorder.length; childrenToReorder.length === t2 || (0, H.throwConcurrentModificationError)(childrenToReorder), ++_i) {
          t5 = childrenToReorder[_i];
          C.JSArray_methods.add$1(t4, t5);
          t5.set$parent(0, t3);
          C.JSArray_methods.remove$1(t1, t5);
        }
        return;
      }
      for (t2 = H._arrayInstanceType(_children)._eval$1("ReversedListIterable<1>"), t4 = new H.ReversedListIterable(_children, t2), t2 = new H.ListIterator(t4, t4.get$length(t4), t2._eval$1("ListIterator<ListIterable.E>")); t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        if (t4.couldBeParentOf$1(t3)) {
          this.call$1(t4);
          return;
        }
      }
      C.JSArray_methods.add$1(t1, t3);
      t3.set$parent(0, root);
    },
    $signature: 60
  };
  A.SyncTimelineEvent.prototype = {
    get$isUiEventFlow: function() {
      return this.subtreeHasNodeWithCondition$1(new A.SyncTimelineEvent_isUiEventFlow_closure());
    },
    get$isGpuEventFlow: function() {
      return this.subtreeHasNodeWithCondition$1(new A.SyncTimelineEvent_isGpuEventFlow_closure());
    },
    get$maxEndMicros: function() {
      return this.time._utils$_end._duration;
    },
    _calculateDisplayRows$0: function() {
      var t1, t2, _i, _this = this;
      _this._expandDisplayRows$1(_this.get$depth());
      t1 = _this._displayRows;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      C.JSArray_methods.add$1(t1[0], _this);
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        _this._mergeChildDisplayRows$2(1, t1[_i]);
      return _this._displayRows;
    },
    couldBeParentOf$1: function(e) {
      var endTime, eStartTime, eEndTime,
        t1 = this.time,
        startTime = t1._utils$_start._duration;
      t1 = t1._utils$_end;
      endTime = t1 == null ? null : t1._duration;
      t1 = e.time;
      eStartTime = t1._utils$_start._duration;
      t1 = t1._utils$_end;
      eEndTime = t1 == null ? null : t1._duration;
      t1 = endTime != null;
      if (t1 && eEndTime != null) {
        if (startTime === eStartTime && endTime === eEndTime)
          return C.JSArray_methods.get$first(this.traceEvents).id < C.JSArray_methods.get$first(e.traceEvents).id;
        if (startTime <= eStartTime) {
          if (typeof endTime !== "number")
            return endTime.$ge();
          t1 = endTime >= eEndTime;
        } else
          t1 = false;
        return t1;
      } else if (t1)
        return startTime <= eStartTime && endTime > eStartTime;
      else if (startTime === eStartTime)
        return C.JSArray_methods.get$first(this.traceEvents).id < C.JSArray_methods.get$first(e.traceEvents).id;
      else
        return startTime < eStartTime;
    }
  };
  A.SyncTimelineEvent_isUiEventFlow_closure.prototype = {
    call$1: function($event) {
      return J.contains$1$asx(C.JSArray_methods.get$first(type$.TimelineEvent_2._as($event).traceEvents).event.name, "Engine::BeginFrame");
    },
    $signature: 16
  };
  A.SyncTimelineEvent_isGpuEventFlow_closure.prototype = {
    call$1: function($event) {
      return J.contains$1$asx(C.JSArray_methods.get$first(type$.TimelineEvent_2._as($event).traceEvents).event.name, "PipelineConsume");
    },
    $signature: 16
  };
  A.AsyncTimelineEvent.prototype = {
    get$maxEndMicros: function() {
      var t1 = this._maxEndMicros;
      return t1 == null ? this._calculateMaxEndMicros$0() : t1;
    },
    _calculateMaxEndMicros$0: function() {
      var maxEnd, t3, _i, _this = this,
        t1 = _this.children,
        t2 = t1.length;
      if (t2 === 0)
        return _this.time._utils$_end._duration;
      maxEnd = _this.time._utils$_end._duration;
      for (t3 = type$.AsyncTimelineEvent, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        maxEnd = Math.max(maxEnd, t3._as(t1[_i])._calculateMaxEndMicros$0());
      return _this._maxEndMicros = maxEnd;
    },
    _calculateDisplayRows$0: function() {
      var t1, t2, i, child, t3, _this = this;
      _this._expandDisplayRows$1(1);
      t1 = _this._displayRows;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      C.JSArray_methods.add$1(t1[0], _this);
      for (t1 = _this.children, t2 = type$.AsyncTimelineEvent, i = 0; i < t1.length; ++i) {
        child = t2._as(t1[i]);
        if (i === 0 || _this._eventFitsAtDisplayRow$3(child, 1, _this._displayRows.length))
          _this._mergeChildDisplayRows$2(1, child);
        else {
          t3 = _this._displayRows;
          if (t3 == null) {
            t3 = _this._calculateDisplayRows$0();
            _this.set$_displayRows(t3);
          }
          _this._mergeChildDisplayRows$2(t3.length, child);
        }
      }
      return _this._displayRows;
    },
    _eventFitsAtDisplayRow$3: function($event, displayRow, currentLargestRowIndex) {
      var level, t1, t2, lastEventAtLevel, firstNewEventAtLevel, t3, t4, t5, lastEventParent, firstNewEventParent,
        maxLevelToVerify = Math.min($event.get$displayRows().length, currentLargestRowIndex - displayRow);
      for (level = 0; level < maxLevelToVerify; ++level) {
        t1 = this._displayRows;
        t2 = displayRow + level;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        lastEventAtLevel = t2.length !== 0 ? C.JSArray_methods.get$last(t2) : null;
        t1 = $event._displayRows;
        if (t1 == null) {
          t1 = $event._calculateDisplayRows$0();
          $event.set$_displayRows(t1);
        }
        if (level >= t1.length)
          return H.ioore(t1, level);
        t1 = t1[level];
        firstNewEventAtLevel = t1.length !== 0 ? C.JSArray_methods.get$first(t1) : null;
        if (lastEventAtLevel != null && firstNewEventAtLevel != null) {
          t1 = lastEventAtLevel.time;
          t2 = firstNewEventAtLevel.time;
          t3 = t2._utils$_end;
          t4 = t1._utils$_start;
          t3 = t3._duration;
          t4 = t4._duration;
          if (t3 > t4) {
            t2 = t2._utils$_start;
            t5 = t1._utils$_end;
            t5 = t2._duration < t5._duration;
            t2 = t5;
          } else
            t2 = false;
          if (t2)
            return false;
          if (t3 < t4)
            return false;
          lastEventParent = lastEventAtLevel.parent;
          firstNewEventParent = firstNewEventAtLevel.parent;
          if (lastEventParent != null)
            if (firstNewEventParent != null)
              if (lastEventParent === firstNewEventParent) {
                t1 = t1._utils$_end;
                t2 = lastEventParent.time._utils$_end;
                t2 = t1._duration >= t2._duration;
                t1 = t2;
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            return false;
        }
      }
      return true;
    },
    addChild$1: function(child) {
      var _this = this,
        t1 = child.parentId;
      if (t1 != null && t1 === J.$index$asx(C.JSArray_methods.get$first(_this.traceEvents).event.json, "id")) {
        C.JSArray_methods.add$1(_this.children, child);
        child.set$parent(0, _this);
      } else
        _this.super$TimelineEvent$addChild(child);
    },
    couldBeParentOf$1: function(e) {
      var t1, t2, t3, startTime, endTime, eStartTime, eEndTime, _null = null;
      type$.AsyncTimelineEvent._as(e);
      t1 = e.parentId;
      if (t1 != null)
        return this.asyncId === t1;
      t1 = this.asyncId;
      t2 = e.asyncId;
      if (t1 != t2)
        return false;
      t3 = this.time;
      startTime = t3._utils$_start._duration;
      t3 = t3._utils$_end;
      endTime = t3 == null ? _null : t3._duration;
      t3 = e.time;
      eStartTime = t3._utils$_start._duration;
      t3 = t3._utils$_end;
      eEndTime = t3 == null ? _null : t3._duration;
      t3 = endTime != null;
      if (t3 && eEndTime != null) {
        if (startTime === eStartTime && endTime === eEndTime) {
          t1 = P.int_parse(t1, _null, 16);
          t2 = P.int_parse(t2, _null, 16);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1 < t2;
        }
        if (startTime <= eStartTime) {
          if (typeof endTime !== "number")
            return endTime.$ge();
          t1 = endTime >= eEndTime;
        } else
          t1 = false;
        return t1;
      } else if (t3)
        return startTime <= eStartTime && endTime > eStartTime;
      else if (startTime === eStartTime) {
        t1 = P.int_parse(t1, _null, 16);
        t2 = P.int_parse(t2, _null, 16);
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 < t2;
      } else
        return startTime < eStartTime;
    },
    endAsyncEvent$1: function(eventWrapper) {
      var t1, t2, t3, _i, _this = this;
      if (_this.get$endTraceEventJson() != null)
        return;
      if (C.JSArray_methods.get$first(_this.traceEvents).event.name == eventWrapper.event.name) {
        _this.addEndEvent$1(eventWrapper);
        return;
      }
      for (t1 = _this.children, t2 = t1.length, t3 = type$.AsyncTimelineEvent, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t3._as(t1[_i]).endAsyncEvent$1(eventWrapper);
    }
  };
  A._OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData.prototype = {};
  A._OfflineFullTimelineData_FullTimelineData_OfflineData.prototype = {};
  Y.FrameBasedTimelineProcessor.prototype = {
    processTraceEvent$2$immediate: function(eventWrapper, immediate) {
      var t1, t2, heap, _this = this,
        _s12_ = "PipelineItem",
        $event = eventWrapper.event;
      $event._type = _this.inferEventType$1($event);
      t1 = $event.phase;
      if (P.LinkedHashSet_LinkedHashSet$_literal(["s", "f", "B", "E", "X"], type$.String).contains$1(0, t1))
        if ($event.category !== "GC")
          if ($event.name !== "MessageLoop::RunExpiredTasks")
            t2 = $event.get$type($event) === C.TimelineEventType_1 || $event.get$type($event) === C.TimelineEventType_0;
          else
            t2 = false;
        else
          t2 = false;
      else
        t2 = false;
      if (!t2)
        return;
      switch (t1) {
        case "s":
          if (J.contains$1$asx($event.name, _s12_))
            _this._handleFrameStartEvent$1($event);
          break;
        case "f":
          if (J.contains$1$asx($event.name, _s12_))
            _this._handleFrameEndEvent$1($event);
          break;
        default:
          if (immediate)
            _this._processDurationEvent$1(eventWrapper);
          else {
            t1 = _this.heaps;
            t2 = $event.get$type($event).index;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            heap = t1[t2];
            t2 = L.TraceEventWrapper$($event, Date.now());
            heap.toString;
            heap._priority_queue$_add$1(0, heap.$ti._precomputed1._as(t2));
            B.executeWithDelay(P.Duration$(0, 1000), new Y.FrameBasedTimelineProcessor_processTraceEvent_closure(_this, heap), _this._shouldProcessTopEvent$1(heap));
          }
      }
    },
    processTraceEvent$1: function(eventWrapper) {
      return this.processTraceEvent$2$immediate(eventWrapper, false);
    },
    _shouldProcessTopEvent$1: function(heap) {
      var t1, t2;
      type$.HeapPriorityQueue_TraceEventWrapper._as(heap);
      if (heap._priority_queue$_length !== 0) {
        t1 = Date.now();
        if (heap._priority_queue$_length === 0)
          H.throwExpression(P.StateError$("No such element"));
        t2 = heap._priority_queue$_queue;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = t1 - t2[0].timeReceived >= 1000;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    _processDurationEvents$1: function(heap) {
      var t1, t2, t3, result, newLength, last,
        _s15_ = "No such element";
      type$.HeapPriorityQueue_TraceEventWrapper._as(heap);
      while (true) {
        t1 = heap._priority_queue$_length;
        t2 = t1 !== 0;
        if (t2)
          if (t2) {
            t1 = Date.now();
            t2 = heap._priority_queue$_length;
            if (t2 === 0)
              H.throwExpression(P.StateError$(_s15_));
            t3 = heap._priority_queue$_queue;
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t3 = t1 - t3[0].timeReceived >= 1000;
            t1 = t3;
          } else {
            t2 = t1;
            t1 = false;
          }
        else {
          t2 = t1;
          t1 = false;
        }
        if (!t1)
          break;
        if (t2 === 0)
          H.throwExpression(P.StateError$(_s15_));
        t1 = heap._priority_queue$_queue;
        t3 = t1.length;
        if (0 >= t3)
          return H.ioore(t1, 0);
        result = t1[0];
        newLength = t2 - 1;
        if (newLength < 0 || newLength >= t3)
          return H.ioore(t1, newLength);
        last = t1[newLength];
        C.JSArray_methods.$indexSet(t1, newLength, null);
        heap._priority_queue$_length = newLength;
        if (newLength > 0)
          heap._bubbleDown$2(last, 0);
        this._processDurationEvent$1(result);
      }
    },
    _processDurationEvent$1: function(eventWrapper) {
      var t3, _this = this,
        $event = eventWrapper.event,
        t1 = _this.currentEventNodes,
        t2 = $event.get$type($event).index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      if (t1[t2] != null) {
        t2 = $event.timestampMicros;
        t3 = $event.get$type($event).index;
        if (t3 >= t1.length)
          return H.ioore(t1, t3);
        t3 = J.get$root$x(t1[t3]).time._utils$_start._duration;
        if (typeof t2 !== "number")
          return t2.$lt();
        t3 = t2 < t3;
        t1 = t3;
      } else
        t1 = false;
      if (t1)
        return;
      switch ($event.phase) {
        case "B":
          _this._handleDurationBeginEvent$1(eventWrapper);
          break;
        case "E":
          _this._handleDurationEndEvent$1(eventWrapper);
          break;
        case "X":
          _this._handleDurationCompleteEvent$1(eventWrapper);
          break;
      }
    },
    _handleFrameStartEvent$1: function($event) {
      var id, pendingFrame, t3,
        t1 = $event.json,
        t2 = J.getInterceptor$asx(t1);
      if (t2.$index(t1, "id") != null) {
        id = H.S($event.name) + "-" + H.S(t2.$index(t1, "id"));
        pendingFrame = this.pendingFrames.putIfAbsent$2(0, id, new Y.FrameBasedTimelineProcessor__handleFrameStartEvent_closure(id));
        t1 = pendingFrame.pipelineItemTime;
        t2 = t1._utils$_start;
        t2 = t2 == null ? null : t2._duration;
        t3 = $event.timestampMicros;
        t2 = P.Duration$(B.nullSafeMin(t2, t3, type$.int), 0);
        t1._utils$_start = t2;
        if (t2._duration === t3)
          pendingFrame.pipelineItemStartTrace = $event;
        this.maybeAddPendingEvents$0();
      }
    },
    _handleFrameEndEvent$1: function($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, id, pendingFrame, t3, t1, t2;
      var $async$_handleFrameEndEvent$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $event.json;
              t2 = J.getInterceptor$asx(t1);
              if (t2.$index(t1, "id") != null) {
                id = H.S($event.name) + "-" + H.S(t2.$index(t1, "id"));
                pendingFrame = $async$self.pendingFrames.putIfAbsent$2(0, id, new Y.FrameBasedTimelineProcessor__handleFrameEndEvent_closure(id));
                t1 = pendingFrame.pipelineItemTime;
                t2 = t1._utils$_end;
                t2 = t2 == null ? null : t2._duration;
                t3 = $event.timestampMicros;
                t2 = P.Duration$(B.nullSafeMax(t2, t3, type$.int), 0);
                t1._utils$_end = t2;
                if (t2._duration === t3)
                  pendingFrame.pipelineItemEndTrace = $event;
                $async$self.maybeAddPendingEvents$0();
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleFrameEndEvent$1, $async$completer);
    },
    _handleDurationBeginEvent$1: function(eventWrapper) {
      var current, t3, timelineEvent, t4,
        $event = eventWrapper.event,
        t1 = this.currentEventNodes,
        t2 = $event.get$type($event).index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      current = t1[t2];
      t2 = current == null;
      if (t2) {
        t3 = $event.name;
        t3 = !(J.getInterceptor$asx(t3).contains$1(t3, "VsyncProcessCallback") || C.JSString_methods.contains$1(t3, "VSYNC") || C.JSString_methods.contains$1(t3, "GPURasterizer::Draw"));
      } else
        t3 = false;
      if (t3)
        return;
      t3 = new B.TimeRange(true);
      timelineEvent = new A.SyncTimelineEvent(H.setRuntimeTypeInfo([eventWrapper], type$.JSArray_TraceEventWrapper), $event.get$type($event), t3, H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent));
      t4 = P.Duration$($event.timestampMicros, 0);
      t3._utils$_start = t4;
      if (!t2)
        current.addChild$1(timelineEvent);
      C.JSArray_methods.$indexSet(t1, $event.get$type($event).index, timelineEvent);
    },
    _handleDurationEndEvent$1: function(eventWrapper) {
      var current, t3, t4, t5, t6, _this = this, _null = null,
        $event = eventWrapper.event,
        t1 = _this.currentEventNodes,
        t2 = $event.get$type($event).index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      current = t1[t2];
      if (current == null)
        return;
      t2 = $event.name;
      t3 = current.traceEvents;
      if (t2 != C.JSArray_methods.get$first(t3).event.name) {
        t4 = _this._previousDurationEndEvents;
        t5 = $event.get$type($event).index;
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t5 = t4[t5];
        t5 = t5 == null ? _null : t5.json;
        if (C.C_DeepCollectionEquality.equals$2($event.json, t5))
          return;
        else {
          t5 = C.JSArray_methods.get$first(t3);
          t6 = $event.get$type($event).index;
          if (t6 >= t4.length)
            return H.ioore(t4, t6);
          t6 = t4[t6];
          t4 = t6 == null ? _null : t6.name;
          if (t5.event.name == t4) {
            t4 = current.parent;
            if ((t4 == null ? _null : C.JSArray_methods.get$first(t4.traceEvents).event.name) == t2) {
              t2 = current.children;
              t2 = t2.length === 1 && C.C_DeepCollectionEquality.equals$2(C.JSArray_methods.get$first(t3).event.json, C.JSArray_methods.get$first(C.JSArray_methods.get$first(t2).traceEvents).event.json);
            } else
              t2 = false;
          } else
            t2 = false;
          if (t2) {
            current.parent.removeChild$1(current);
            current = type$.SyncTimelineEvent._as(current.parent);
            C.JSArray_methods.$indexSet(t1, $event.get$type($event).index, current);
          } else {
            C.JSArray_methods.$indexSet(t1, $event.get$type($event).index, _null);
            return;
          }
        }
      }
      C.JSArray_methods.$indexSet(_this._previousDurationEndEvents, $event.get$type($event).index, $event);
      current.addEndEvent$1(eventWrapper);
      current.maybeRemoveDuplicate$0();
      t2 = type$.SyncTimelineEvent;
      while (true) {
        t3 = current.parent;
        if (t3 != null) {
          t4 = t3.time._utils$_end;
          t4 = (t4 == null ? _null : t4._duration) != null;
        } else
          t4 = false;
        if (!t4)
          break;
        t2._as(t3);
        current = t3;
      }
      C.JSArray_methods.$indexSet(t1, $event.get$type($event).index, t2._as(current.parent));
      if (current.parent == null)
        _this._maybeAddEvent$1(current);
    },
    _handleDurationCompleteEvent$1: function(eventWrapper) {
      var current,
        $event = eventWrapper.event,
        t1 = new B.TimeRange(true),
        timelineEvent = new A.SyncTimelineEvent(H.setRuntimeTypeInfo([eventWrapper], type$.JSArray_TraceEventWrapper), $event.get$type($event), t1, H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent)),
        t2 = $event.timestampMicros,
        t3 = P.Duration$(t2, 0);
      t1._utils$_start = t3;
      t3 = $event.duration;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = P.Duration$(t2 + t3, 0);
      t1._utils$_end = t3;
      t1 = this.currentEventNodes;
      t2 = $event.get$type($event).index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      current = t1[t2];
      if (current != null) {
        if (current.subtreeHasNodeWithCondition$1(new Y.FrameBasedTimelineProcessor__handleDurationCompleteEvent_closure(timelineEvent)))
          return;
        current.addChild$1(timelineEvent);
      } else
        this._maybeAddEvent$1(timelineEvent);
    },
    maybeAddPendingEvents$0: function() {
      var t2, $frames, t3, _i, frame, eventsToRemove, t4, _i0, $event, _this = this,
        t1 = _this.pendingEvents;
      if (t1.length !== 0) {
        t2 = _this.pendingFrames;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = true;
      if (t2)
        return;
      C.JSArray_methods.sort$1(t1, new Y.FrameBasedTimelineProcessor_maybeAddPendingEvents_closure());
      $frames = _this._getAndSortWellFormedFrames$0();
      for (t2 = $frames.length, t3 = C.JSArray_methods.get$remove(t1), _i = 0; _i < $frames.length; $frames.length === t2 || (0, H.throwConcurrentModificationError)($frames), ++_i) {
        frame = $frames[_i];
        eventsToRemove = [];
        for (t4 = t1.length, _i0 = 0; _i0 < t1.length; t1.length === t4 || (0, H.throwConcurrentModificationError)(t1), ++_i0) {
          $event = t1[_i0];
          if (_this._maybeAddEventToFrame$2($event, frame)) {
            eventsToRemove.push($event);
            break;
          }
        }
        if (eventsToRemove.length !== 0)
          C.JSArray_methods.forEach$1(eventsToRemove, t3);
      }
    },
    _maybeAddEvent$1: function($event) {
      var $frames, t1, eventAdded, _i, _this = this;
      if (!$event.get$isUiEventFlow() && !$event.get$isGpuEventFlow())
        return;
      $frames = _this._getAndSortWellFormedFrames$0();
      for (t1 = $frames.length, eventAdded = false, _i = 0; _i < $frames.length; $frames.length === t1 || (0, H.throwConcurrentModificationError)($frames), ++_i) {
        eventAdded = _this._maybeAddEventToFrame$2($event, $frames[_i]);
        if (eventAdded) {
          _this.maybeAddPendingEvents$0();
          break;
        }
      }
      if (!eventAdded)
        C.JSArray_methods.add$1(_this.pendingEvents, $event);
    },
    _maybeAddEventToFrame$2: function($event, frame) {
      var type, t3,
        t1 = frame.eventFlows,
        t2 = $event.type.index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      if (t1[t2] != null || !this.eventOccursWithinFrameBounds$2($event, frame))
        return false;
      type = $event.type;
      if (type === C.TimelineEventType_0) {
        t2 = frame.time;
        t3 = $event.time;
        t3 = t3._utils$_start;
        t2._utils$_start = t3;
      }
      if (type === C.TimelineEventType_1) {
        t2 = frame.time;
        t3 = $event.time;
        t3 = t3._utils$_end;
        t2._utils$_end = t3;
      }
      C.JSArray_methods.$indexSet(t1, type.index, $event);
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (t1[0] != null) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        if (t1[1] != null) {
          t2 = frame.pipelineItemTime;
          t3 = t2._utils$_start;
          if ((t3 == null ? null : t3._duration) != null) {
            t2 = t2._utils$_end;
            t2 = (t2 == null ? null : t2._duration) != null;
          } else
            t2 = false;
        } else
          t2 = false;
      } else
        t2 = false;
      if (t2 && frame._addedToTimeline == null) {
        t2 = this.timelineController;
        t2.recordTrace$1(frame.pipelineItemStartTrace.json);
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2.recordTraceForTimelineEvent$1(t1[0]);
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t2.recordTraceForTimelineEvent$1(t1[1]);
        t2.recordTrace$1(frame.pipelineItemEndTrace.json);
        t2 = t2.frameBasedTimeline;
        C.JSArray_methods.add$1(t2.data.frames, frame);
        t2._frameAddedNotifier.set$value(0, frame);
        this.pendingFrames.remove$1(0, frame.id);
        frame._addedToTimeline = true;
      }
      return true;
    },
    eventOccursWithinFrameBounds$2: function(e, f) {
      var epsilon, t3, t4,
        t1 = e.time,
        t2 = t1._utils$_end;
      t1 = t1._utils$_start;
      t2 = t2._duration;
      t1 = t1._duration;
      epsilon = Math.min(C.JSInt_methods._tdivFast$1(t2 - t1, 2), 1000);
      t3 = f.pipelineItemTime;
      t4 = t3._utils$_start._duration;
      t3 = t3._utils$_end._duration;
      return t4 - t1 - epsilon <= 0 && t3 - t2 + epsilon >= 0 && H.boolConversionCheck(new Y.FrameBasedTimelineProcessor_eventOccursWithinFrameBounds_satisfiesUiGpuOrder(e, f).call$0());
    },
    _getAndSortWellFormedFrames$0: function() {
      var t2, t3, $frames,
        t1 = this.pendingFrames;
      t1 = t1.get$values(t1);
      t2 = H._instanceType(t1);
      t3 = t2._eval$1("WhereIterable<Iterable.E>");
      $frames = P.List_List$from(new H.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure()), t3), true, t3._eval$1("Iterable.E"));
      C.JSArray_methods.sort$1($frames, new Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure0());
      return $frames;
    },
    reset$0: function(_) {
      var t1, t2, _i, heap, _this = this;
      _this.pendingFrames.clear$0(0);
      C.JSArray_methods.set$length(_this.pendingEvents, 0);
      for (t1 = _this.heaps, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        heap = t1[_i];
        heap.set$_priority_queue$_queue(C.List_empty1);
        heap._priority_queue$_length = 0;
      }
      t1 = _this.currentEventNodes;
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.addAll$1(t1, H.setRuntimeTypeInfo([null, null], type$.JSArray_SyncTimelineEvent));
      t1 = _this._previousDurationEndEvents;
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.addAll$1(t1, H.setRuntimeTypeInfo([null, null], type$.JSArray_TraceEvent));
    }
  };
  Y.FrameBasedTimelineProcessor_closure.prototype = {
    call$1: function(_) {
      var t2,
        t1 = new Array(7);
      t1.fixed$length = Array;
      t1 = H.setRuntimeTypeInfo(t1, type$.JSArray_TraceEventWrapper);
      t2 = B.defaultCompare(type$.TraceEventWrapper);
      return new Y.HeapPriorityQueue(t2, t1, type$.HeapPriorityQueue_TraceEventWrapper);
    },
    $signature: 237
  };
  Y.FrameBasedTimelineProcessor_processTraceEvent_closure.prototype = {
    call$0: function() {
      return this.$this._processDurationEvents$1(this.heap);
    },
    $signature: 1
  };
  Y.FrameBasedTimelineProcessor__handleFrameStartEvent_closure.prototype = {
    call$0: function() {
      return new A.TimelineFrame(this.id, P.List_List$generate(2, new A.TimelineFrame_closure(), true, type$.TimelineEvent_2), new B.TimeRange(true), new B.TimeRange(false));
    },
    $signature: 120
  };
  Y.FrameBasedTimelineProcessor__handleFrameEndEvent_closure.prototype = {
    call$0: function() {
      return new A.TimelineFrame(this.id, P.List_List$generate(2, new A.TimelineFrame_closure(), true, type$.TimelineEvent_2), new B.TimeRange(true), new B.TimeRange(false));
    },
    $signature: 120
  };
  Y.FrameBasedTimelineProcessor__handleDurationCompleteEvent_closure.prototype = {
    call$1: function($event) {
      return C.C_DeepCollectionEquality.equals$2(C.JSArray_methods.get$first(type$.TimelineEvent_2._as($event).traceEvents).event.json, C.JSArray_methods.get$first(this.timelineEvent.traceEvents).event.json);
    },
    $signature: 16
  };
  Y.FrameBasedTimelineProcessor_maybeAddPendingEvents_closure.prototype = {
    call$2: function(a, b) {
      var t1 = type$.SyncTimelineEvent;
      t1._as(a);
      t1._as(b);
      return C.JSInt_methods.compareTo$1(a.time._utils$_start._duration, b.time._utils$_start._duration);
    },
    $signature: 239
  };
  Y.FrameBasedTimelineProcessor_eventOccursWithinFrameBounds_satisfiesUiGpuOrder.prototype = {
    call$0: function() {
      var t2, _this = this,
        t1 = _this.e;
      if (t1.get$isUiEventFlow()) {
        t2 = _this.f.eventFlows;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        t2 = t2[1] != null;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.time._utils$_start._duration;
        t2 = _this.f.eventFlows;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        return t1 < t2[1].time._utils$_start._duration;
      } else {
        if (t1.get$isGpuEventFlow()) {
          t2 = _this.f.eventFlows;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = t2[0] != null;
        } else
          t2 = false;
        if (t2) {
          t1 = t1.time._utils$_start._duration;
          t2 = _this.f.eventFlows;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          return t1 > t2[0].time._utils$_start._duration;
        }
      }
      return true;
    },
    $signature: 28
  };
  Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure.prototype = {
    call$1: function(frame) {
      var t1 = type$.TimelineFrame._as(frame).pipelineItemTime,
        t2 = t1._utils$_start;
      if ((t2 == null ? null : t2._duration) != null) {
        t1 = t1._utils$_end;
        t1 = (t1 == null ? null : t1._duration) != null;
      } else
        t1 = false;
      return t1;
    },
    $signature: 103
  };
  Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure0.prototype = {
    call$2: function(a, b) {
      var t1 = type$.TimelineFrame;
      t1._as(a);
      t1._as(b);
      return C.JSInt_methods.compareTo$1(a.pipelineItemTime._utils$_start._duration, b.pipelineItemTime._utils$_start._duration);
    },
    $signature: 240
  };
  Y.FullTimelineProcessor.prototype = {
    processTimeline$1: function(traceEvents) {
      return this.processTimeline$body$FullTimelineProcessor(type$.List_TraceEventWrapper._as(traceEvents));
    },
    processTimeline$body$FullTimelineProcessor: function(traceEvents) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, _traceEvents, batchSize, t3, t4, t5;
      var $async$processTimeline$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.reset$0(0);
              t1 = H._arrayInstanceType(traceEvents);
              t2 = t1._eval$1("WhereIterable<1>");
              _traceEvents = P.List_List$from(new H.WhereIterable(traceEvents, t1._eval$1("bool(1)")._as(new Y.FullTimelineProcessor_processTimeline_closure()), t2), true, t2._eval$1("Iterable.E"));
              C.JSArray_methods.sort$0(_traceEvents);
              t2 = H._arrayInstanceType(_traceEvents);
              t1 = $async$self.timelineController;
              C.JSArray_methods.forEach$1(new H.MappedListIterable(_traceEvents, t2._eval$1("Map<String,@>(1)")._as(new Y.FullTimelineProcessor_processTimeline_closure0()), t2._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0), t1.get$recordTrace());
              batchSize = C.JSNumber_methods.round$0(Math.min(2000, _traceEvents.length / 4));
              t2 = $async$self._html_timeline_processor$_progressNotifier;
            case 2:
              // for condition
              if (!($async$self._traceEventsProcessed < _traceEvents.length)) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$self._html_timeline_processor$_processBatch$2(batchSize, _traceEvents);
              t2.set$value(0, $async$self._traceEventsProcessed / _traceEvents.length);
              $async$goto = 4;
              return P._asyncAwait(B.delayForBatchProcessing(0), $async$processTimeline$1);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              for (t2 = $async$self._asyncEventsById, t2 = t2.get$values(t2), t3 = H._instanceType(t2), t4 = t3._eval$1("bool(Iterable.E)")._as(new Y.FullTimelineProcessor_processTimeline_closure1()), t2 = t2.get$iterator(t2), t3 = new H.WhereIterator(t2, t4, t3._eval$1("WhereIterator<Iterable.E>")); t3.moveNext$0();) {
                t4 = t2.get$current(t2);
                if (!t4._isWellFormedDeep$1(t4))
                  continue;
                t5 = t1.fullTimeline.data;
                C.JSArray_methods.add$1(t5.timelineEvents, t4);
                t5.set$_endTimestampMicros(Math.max(t5._endTimestampMicros, t4.get$maxEndMicros()));
              }
              $async$self._addPendingCompleteRootToTimeline$1$force(true);
              t2 = t1.fullTimeline.data.time;
              t3 = P.Duration$(C.JSArray_methods.get$first(_traceEvents).event.timestampMicros, 0);
              t2._utils$_start = t3;
              t1 = P.Duration$(t1.fullTimeline.data._endTimestampMicros, 0);
              t2._utils$_end = t1;
              $async$self.reset$0(0);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$processTimeline$1, $async$completer);
    },
    _html_timeline_processor$_processBatch$2: function(batchSize, traceEvents) {
      var i, batchEnd, t1, t2, t3, eventWrapper, t4, t5, t6, current, t7, t8, t9, timelineEvent, _this = this;
      type$.List_TraceEventWrapper._as(traceEvents);
      i = _this._traceEventsProcessed;
      batchEnd = Math.min(i + batchSize, traceEvents.length);
      for (t1 = _this._currentDurationEventNodes, t2 = type$.JSArray_TimelineEvent, t3 = type$.JSArray_TraceEventWrapper; i < batchEnd; ++i) {
        if (i >= traceEvents.length)
          return H.ioore(traceEvents, i);
        eventWrapper = traceEvents[i];
        ++_this._traceEventsProcessed;
        t4 = eventWrapper.event;
        t4._type = _this.inferEventType$1(t4);
        t5 = t4.timestampMicros;
        _this._addPendingCompleteRootToTimeline$1$currentProcessingTime(t5);
        switch (t4.phase) {
          case "b":
          case "n":
            _this._addAsyncEvent$1(eventWrapper);
            break;
          case "e":
            _this._endAsyncEvent$1(eventWrapper);
            break;
          case "B":
            t6 = t4.threadId;
            current = t1.$index(0, t6);
            t7 = new B.TimeRange(true);
            t8 = H.setRuntimeTypeInfo([eventWrapper], t3);
            t9 = t4._type;
            t4 = t9 == null ? t4._type = C.TimelineEventType_3 : t9;
            timelineEvent = new A.SyncTimelineEvent(t8, t4, t7, H.setRuntimeTypeInfo([], t2));
            t5 = P.Duration$(t5, 0);
            t7._utils$_start = t5;
            if (current != null)
              current.addChild$1(timelineEvent);
            t1.$indexSet(0, t6, timelineEvent);
            break;
          case "E":
            _this._handleDurationEndEvent$1(eventWrapper);
            break;
          case "X":
            _this._handleDurationCompleteEvent$1(eventWrapper);
            break;
          case "s":
          case "f":
          default:
            break;
        }
      }
    },
    _addPendingCompleteRootToTimeline$2$currentProcessingTime$force: function(currentProcessingTime, force) {
      var t2,
        t1 = this._pendingRootCompleteEvent;
      if (t1 != null)
        if (!force) {
          t2 = t1.time._utils$_end._duration;
          if (typeof currentProcessingTime !== "number")
            return currentProcessingTime.$gt();
          t2 = currentProcessingTime > t2;
        } else
          t2 = true;
      else
        t2 = false;
      if (t2) {
        this.timelineController.fullTimeline.data.addTimelineEvent$1(t1);
        this._pendingRootCompleteEvent = null;
      }
    },
    _addPendingCompleteRootToTimeline$1$force: function(force) {
      return this._addPendingCompleteRootToTimeline$2$currentProcessingTime$force(null, force);
    },
    _addPendingCompleteRootToTimeline$1$currentProcessingTime: function(currentProcessingTime) {
      return this._addPendingCompleteRootToTimeline$2$currentProcessingTime$force(currentProcessingTime, false);
    },
    _addAsyncEvent$1: function(eventWrapper) {
      var $parent, currentEventWithId, _s2_ = "id",
        t1 = eventWrapper.event,
        t2 = t1.json,
        t3 = J.getInterceptor$asx(t2),
        t4 = H._asStringS(t3.$index(t2, _s2_)),
        t5 = H._asStringS(J.$index$asx(t1.args, "parentId")),
        t6 = new B.TimeRange(true),
        timelineEvent = new A.AsyncTimelineEvent(t4, t5, H.setRuntimeTypeInfo([eventWrapper], type$.JSArray_TraceEventWrapper), t1.get$type(t1), t6, H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent));
      t4 = P.Duration$(t1.timestampMicros, 0);
      t6._utils$_start = t4;
      timelineEvent.type = C.TimelineEventType_2;
      if (t1.phase === "n")
        t6._utils$_end = t4;
      if (t5 != null) {
        t1 = this._asyncEventsById;
        $parent = t1.$index(0, t5);
        if ($parent != null)
          $parent.addChild$1(timelineEvent);
        t1.$indexSet(0, H._asStringS(t3.$index(t2, _s2_)), timelineEvent);
        return;
      }
      t1 = this._asyncEventsById;
      currentEventWithId = t1.$index(0, t3.$index(t2, _s2_));
      if (currentEventWithId != null)
        if (currentEventWithId._isWellFormedDeep$1(currentEventWithId)) {
          this.timelineController.fullTimeline.data.addTimelineEvent$1(currentEventWithId);
          t1.$indexSet(0, H._asStringS(t3.$index(t2, _s2_)), timelineEvent);
        } else if (currentEventWithId.get$isWellFormed())
          B.log("Id collision on id " + H.S(t3.$index(t2, _s2_)), C.LogLevel_1);
        else
          currentEventWithId.addChild$1(timelineEvent);
      else
        t1.$indexSet(0, H._asStringS(t3.$index(t2, _s2_)), timelineEvent);
    },
    _endAsyncEvent$1: function(eventWrapper) {
      var root = this._asyncEventsById.$index(0, J.$index$asx(eventWrapper.event.json, "id"));
      if (root == null)
        return;
      root.endAsyncEvent$1(eventWrapper);
    },
    _handleDurationEndEvent$1: function(eventWrapper) {
      var t3, t4, t5, t6, _this = this, _null = null,
        $event = eventWrapper.event,
        t1 = _this._currentDurationEventNodes,
        t2 = $event.threadId,
        current = t1.$index(0, t2);
      if (current == null)
        return;
      t3 = $event.name;
      t4 = current.traceEvents;
      if (t3 != C.JSArray_methods.get$first(t4).event.name) {
        t5 = _this._previousDurationEndEvents;
        t6 = t5.$index(0, t2);
        t6 = t6 == null ? _null : t6.json;
        if (C.C_DeepCollectionEquality.equals$2($event.json, t6))
          return;
        else {
          t6 = C.JSArray_methods.get$first(t4);
          t5 = t5.$index(0, t2);
          t5 = t5 == null ? _null : t5.name;
          if (t6.event.name == t5) {
            t5 = current.parent;
            if ((t5 == null ? _null : C.JSArray_methods.get$first(t5.traceEvents).event.name) == t3) {
              t3 = current.children;
              t3 = t3.length === 1 && C.C_DeepCollectionEquality.equals$2(C.JSArray_methods.get$first(t4).event.json, C.JSArray_methods.get$first(C.JSArray_methods.get$first(t3).traceEvents).event.json);
            } else
              t3 = false;
          } else
            t3 = false;
          if (t3) {
            current.parent.removeChild$1(current);
            current = type$.SyncTimelineEvent._as(current.parent);
            t1.$indexSet(0, t2, current);
          } else {
            t1.$indexSet(0, t2, _null);
            return;
          }
        }
      }
      _this._previousDurationEndEvents.$indexSet(0, t2, $event);
      current.addEndEvent$1(eventWrapper);
      current.maybeRemoveDuplicate$0();
      t3 = type$.SyncTimelineEvent;
      while (true) {
        t4 = current.parent;
        if (t4 != null) {
          t5 = t4.time._utils$_end;
          t5 = (t5 == null ? _null : t5._duration) != null;
        } else
          t5 = false;
        if (!t5)
          break;
        t3._as(t4);
        current = t4;
      }
      t1.$indexSet(0, t2, t3._as(t4));
      if (current.parent == null)
        _this.timelineController.fullTimeline.data.addTimelineEvent$1(current);
    },
    _handleDurationCompleteEvent$1: function(eventWrapper) {
      var current,
        $event = eventWrapper.event,
        t1 = new B.TimeRange(true),
        timelineEvent = new A.SyncTimelineEvent(H.setRuntimeTypeInfo([eventWrapper], type$.JSArray_TraceEventWrapper), $event.get$type($event), t1, H.setRuntimeTypeInfo([], type$.JSArray_TimelineEvent)),
        t2 = $event.timestampMicros,
        t3 = P.Duration$(t2, 0);
      t1._utils$_start = t3;
      t3 = $event.duration;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = P.Duration$(t2 + t3, 0);
      t1._utils$_end = t3;
      current = this._currentDurationEventNodes.$index(0, $event.threadId);
      if (current != null) {
        if (current.subtreeHasNodeWithCondition$1(new Y.FullTimelineProcessor__handleDurationCompleteEvent_closure(timelineEvent)))
          return;
        current.addChild$1(timelineEvent);
      } else {
        t1 = this._pendingRootCompleteEvent;
        if (t1 == null)
          this._pendingRootCompleteEvent = timelineEvent;
        else
          t1.addChild$1(timelineEvent);
      }
    },
    reset$0: function(_) {
      var _this = this;
      _this._asyncEventsById.clear$0(0);
      _this._currentDurationEventNodes.clear$0(0);
      _this._previousDurationEndEvents.clear$0(0);
      _this._pendingRootCompleteEvent = null;
      _this._traceEventsProcessed = 0;
      _this._html_timeline_processor$_progressNotifier.set$value(0, 0);
    }
  };
  Y.FullTimelineProcessor_processTimeline_closure.prototype = {
    call$1: function($event) {
      return type$.TraceEventWrapper._as($event).event.timestampMicros != null;
    },
    $signature: 102
  };
  Y.FullTimelineProcessor_processTimeline_closure0.prototype = {
    call$1: function($event) {
      return type$.TraceEventWrapper._as($event).event.json;
    },
    $signature: 241
  };
  Y.FullTimelineProcessor_processTimeline_closure1.prototype = {
    call$1: function(e) {
      return type$.AsyncTimelineEvent._as(e).parent == null;
    },
    $signature: 242
  };
  Y.FullTimelineProcessor__handleDurationCompleteEvent_closure.prototype = {
    call$1: function($event) {
      return C.C_DeepCollectionEquality.equals$2(C.JSArray_methods.get$first(type$.TimelineEvent_2._as($event).traceEvents).event.json, C.JSArray_methods.get$first(this.timelineEvent.traceEvents).event.json);
    },
    $signature: 16
  };
  Y.TimelineProcessor.prototype = {
    inferEventType$1: function($event) {
      var t1 = $event.phase;
      if (t1 === "b" || t1 === "n" || t1 === "e")
        return C.TimelineEventType_2;
      else {
        t1 = $event.threadId;
        if (t1 == this.uiThreadId)
          return C.TimelineEventType_0;
        else if (t1 == this.gpuThreadId)
          return C.TimelineEventType_1;
        else
          return C.TimelineEventType_3;
      }
    }
  };
  M.HtmlTimelineScreen.prototype = {
    createContent$1: function(framework) {
      var screenDiv, t1, t2, t3, t4, t5, t6, t7, _this = this, _null = null, _s3_ = "div", _s6_ = "layout",
        _s8_ = "vertical",
        _s6_0 = "btn-sm",
        _s11_ = "btn-primary",
        _s11_0 = "margin-left",
        _s8_0 = "disabled",
        _s5_ = "title",
        _s8_1 = "checkbox",
        _s10_ = "horizontal",
        _s25_ = "btn-group collapsible-950";
      E.setupDimensions();
      screenDiv = A.CoreElement$(_s3_, _null, "custom-scrollbar", _null, _null);
      t1 = screenDiv.element;
      t1.setAttribute(_s6_, "");
      t1.setAttribute(_s8_, "");
      t1 = N.PButton$icon("Pause recording", C.UrlIcon_46y, _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_);
      t1.click$1(0, _this.get$_pauseFrameRecording());
      _this.pauseButton = t1;
      t1 = N.PButton$icon("Resume recording", C.UrlIcon_y9i, _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_0);
      t2 = _this.timelineController;
      t1.attribute$2(_s8_0, t2.frameBasedTimeline.manuallyPaused);
      t1.click$1(0, _this.get$_resumeFrameRecording());
      _this.resumeButton = t1;
      t1 = N.PButton$icon("Record", $.$get$recordPrimary(), _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_);
      t1.click$1(0, new M.HtmlTimelineScreen_createContent_closure(_this));
      _this._html_timeline_screen$_startRecordingButton = t1;
      t1 = N.PButton$icon("Stop", $.$get$stop(), _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_0);
      t1.attribute$2(_s8_0, !H.boolConversionCheck(H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value)));
      t1.click$1(0, _this.get$_stopFullRecording());
      _this._html_timeline_screen$_stopRecordingButton = t1;
      _this._html_timeline_screen$_recordingInstructions = Y.createRecordingInstructions("to start recording timeline trace.");
      t1 = A.CoreElement$(_s3_, _null, "center-in-parent", _null, _null);
      t3 = t1.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s8_, "");
      t1.flex$0(0);
      t3 = A.CoreElement$(_s3_, _null, "recording-status-message", _null, _null);
      _this._html_timeline_screen$_recordingStatusMessage = t3;
      t4 = G.HtmlSpinner_centered(H.setRuntimeTypeInfo(["recording-spinner"], type$.JSArray_String));
      _this._recordingSpinner = t4;
      t5 = type$.JSArray_CoreElement;
      t1.add$1(0, H.setRuntimeTypeInfo([t3, t4], t5));
      _this._html_timeline_screen$_recordingStatus = t1;
      t1 = N.PButton$icon("Export", $.$get$exportIcon(), _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_0);
      t1.element.setAttribute(_s5_, "Export timeline");
      t1.click$1(0, _this.get$_exportTimeline());
      _this.exportButton = t1;
      t1 = N.PButton$icon("Clear", $.$get$clearIcon(), _null);
      t1.clazz$1(_s6_0);
      t1.clazz$1(_s11_0);
      t1.element.setAttribute(_s5_, "Clear timeline");
      t1.click$1(0, new M.HtmlTimelineScreen_createContent_closure0(_this));
      _this.clearButton = t1;
      t1 = N.PButton$icon("Exit offline mode", $.$get$exitIcon(), _null);
      t1.clazz$1(_s6_0);
      t1.element.setAttribute(_s5_, "Exit offline mode to connect to a VM Service.");
      t1.click$1(0, _this.get$_exitOfflineMode());
      _this.exitOfflineModeButton = t1;
      _this.performanceOverlayButton = N.ServiceExtensionButton$($.$get$performanceOverlay());
      _this.trackWidgetBuildsButton = N.ServiceExtensionButton$($.$get$profileWidgetBuilds());
      _this._html_timeline_screen$_profileGranularitySelector = T.ProfileGranularitySelector$(framework);
      t1 = A.CoreElement$("input", _null, _s8_1, _null, _null);
      t4 = t1.element;
      t4.setAttribute("type", _s8_1);
      _this._timelineModeCheckbox = t1;
      type$.InputElement._as(t4);
      t4.checked = J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_0);
      t1 = type$._ElementEventStreamImpl_Event;
      t3 = t1._eval$1("~(1)")._as(new M.HtmlTimelineScreen_createContent_closure1(_this, t4));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t4, "change", t3, false, t1._precomputed1);
      t1 = A.CoreElement$(_s3_, _null, "checkbox-container", _null, _null);
      t3 = t1.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s10_, "");
      t1.add$1(0, H.setRuntimeTypeInfo([_this._timelineModeCheckbox, A.CoreElement$(_s3_, _null, "checkbox-text", _null, "Show frames")], t5));
      _this._timelineModeSettingContainer = t1;
      t1 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t3 = t1.element;
      t3.setAttribute(_s6_, "");
      t3.setAttribute(_s10_, "");
      t3 = H.setRuntimeTypeInfo([], t5);
      t4 = A.CoreElement$(_s3_, _null, "btn-group collapsible-1150", _null, _null);
      t6 = type$.JSArray_PButton;
      t4.add$1(0, H.setRuntimeTypeInfo([_this.pauseButton, _this.resumeButton, _this._html_timeline_screen$_startRecordingButton, _this._html_timeline_screen$_stopRecordingButton], t6));
      C.JSArray_methods.add$1(t3, t4);
      t4 = A.CoreElement$(_s3_, _null, _s25_, _null, _null);
      t4.add$1(0, _this.clearButton);
      C.JSArray_methods.add$1(t3, t4);
      C.JSArray_methods.add$1(t3, _this.exitOfflineModeButton);
      t4 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      t4.flex$0(0);
      C.JSArray_methods.add$1(t3, t4);
      t4 = A.CoreElement$(_s3_, _null, "btn-group", _null, _null);
      _this.debugButtonSection = t4;
      C.JSArray_methods.add$1(t3, t4);
      C.JSArray_methods.add$1(t3, _this._timelineModeSettingContainer);
      t4 = _this._html_timeline_screen$_profileGranularitySelector.selector;
      t4.clazz$1(_s11_0);
      C.JSArray_methods.add$1(t3, t4);
      t4 = A.CoreElement$(_s3_, _null, "btn-group collapsible-950 margin-left", _null, _null);
      t4.add$1(0, H.setRuntimeTypeInfo([_this.performanceOverlayButton.button, _this.trackWidgetBuildsButton.button], t6));
      C.JSArray_methods.add$1(t3, t4);
      t4 = A.CoreElement$(_s3_, _null, _s25_, _null, _null);
      t4.add$1(0, _this.exportButton);
      C.JSArray_methods.add$1(t3, t4);
      t1.add$1(0, t3);
      _this.upperButtonSection = t1;
      _this._maybeAddDebugButtons$0();
      t1 = _this.upperButtonSection;
      t3 = T.FramesBarChart$(t2);
      _this.framesBarChart = t3;
      t4 = A.CoreElement$(_s3_, _null, "section", _null, _null);
      t6 = t4.element;
      t6.setAttribute(_s6_, "");
      t6.setAttribute(_s8_, "");
      t4.flex$0(0);
      t6 = A.CoreElement$(_s3_, _null, "timeline-flame-chart-container section-border", _null, _null);
      t6.flex$0(0);
      t7 = t6.element;
      t7.setAttribute(_s6_, "");
      t7.setAttribute(_s8_, "");
      t7 = A.CoreElement$(_s3_, _null, _null, _null, _null);
      _this._emptyFlameChart = t7;
      t6.add$1(0, H.setRuntimeTypeInfo([t7, _this._html_timeline_screen$_recordingInstructions, _this._html_timeline_screen$_recordingStatus], t5));
      _this.flameChartContainer = t6;
      t2 = Z.HtmlEventDetails$(t2);
      _this.eventDetails = t2;
      t4.add$1(0, H.setRuntimeTypeInfo([t6, t2], t5));
      screenDiv.add$1(0, H.setRuntimeTypeInfo([t1, t3, t4], t5));
      Y.maybeAddDebugMessage(framework, "timeline");
      return screenDiv;
    },
    onContentAttached$0: function() {
      var t1, t2, t3, t4, _this = this;
      _this._updateVisibilityForTimelineMode$0();
      t1 = _this.timelineController;
      if (J.$eq$(t1._timelineModeNotifier._value, C.TimelineMode_1))
        _this._configureSplitter$0();
      t2 = type$.void_Function;
      C.JSArray_methods.add$1(t1.frameBasedTimeline._selectedFrameNotifier._listeners, t2._as(new M.HtmlTimelineScreen_onContentAttached_closure(_this)));
      t3 = t1.fullTimeline;
      t4 = t3._timelineProcessedController;
      new P._BroadcastStream(t4, H._instanceType(t4)._eval$1("_BroadcastStream<1>")).listen$1(new M.HtmlTimelineScreen_onContentAttached_closure0(_this));
      C.JSArray_methods.add$1(t3._emptyRecordingNotifier._listeners, t2._as(new M.HtmlTimelineScreen_onContentAttached_closure1(_this)));
      t2 = t1._loadOfflineDataController;
      new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new M.HtmlTimelineScreen_onContentAttached_closure2(_this));
      t1 = t1._nonFatalErrorController;
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new M.HtmlTimelineScreen_onContentAttached_closure3());
      new ResizeObserver(H.convertDartClosureToJS(new M.HtmlTimelineScreen_onContentAttached_closure4(_this), 2)).observe(_this.flameChartContainer.element);
    },
    _selectFrame$1: function(frame) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      _this.flameChartContainer.attribute$2("hidden", false);
      t1 = _this.flameChartContainer.element;
      t2 = t1.clientWidth;
      t2.toString;
      t1 = t1.clientHeight;
      t1.toString;
      t1 = Math.max(t1, _this._frameBasedTimelineChartHeight$0());
      t3 = frame.time;
      t4 = t3._utils$_end;
      t3 = t3._utils$_start;
      t3 = new P.Duration(t4._duration - t3._duration);
      t4 = type$._AsyncBroadcastStreamController_FlameChartNode_dynamic;
      t5 = new P._AsyncBroadcastStreamController(null, null, t4);
      t6 = new M.FrameBasedTimelineFlameChartCanvas(new U.HtmlDragScroll(), 150, frame, t3, 70, t2, t1, t5, H.setRuntimeTypeInfo([], type$.JSArray_FlameChartRow), H.setRuntimeTypeInfo([], type$.JSArray_FlameChartSection), new F.TimelineGrid(t3, 70, t2));
      t6.initUiElements$0();
      t6.FlameChartCanvas$7$classes$data$duration$height$maxZoomLevel$startInset$width(null, frame, t3, t1, 150, 70, t2, type$.TimelineFrame);
      _this.timelineFlameChartCanvas = t6;
      new P._BroadcastStream(t5, t4._eval$1("_BroadcastStream<1>")).listen$1(new M.HtmlTimelineScreen__selectFrame_closure(_this));
      t4 = _this.timelineFlameChartCanvas._viewportCanvas._viewport_canvas$_element;
      _this.flameChartContainer.replace$2(0, 0, t4);
      _this._configureSplitter$0();
    },
    _frameBasedTimelineChartHeight$0: function() {
      var t1 = this.timelineController.frameBasedTimeline.data,
        t2 = t1.selectedFrame.eventFlows;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2 = t2[0].get$depth();
      t1 = t1.selectedFrame.eventFlows;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return (t2 + t1[1].get$depth() + 2) * 27 + 15;
    },
    _fullTimelineChartHeight$0: function() {
      var t1 = this.timelineController,
        t2 = t1.fullTimeline.data.get$displayDepth();
      if (typeof t2 !== "number")
        return t2.$add();
      return (t2 + 1) * 27 + t1.fullTimeline.data.eventGroups._count * 15;
    },
    _configureSplitter$1$sizes: function(sizes) {
      var t1, t2, _this = this;
      type$.List_int._as(sizes);
      if (!_this.splitterConfigured) {
        t1 = H.setRuntimeTypeInfo([_this.flameChartContainer.element, _this.eventDetails.element], type$.JSArray_Element);
        t2 = sizes == null ? H.setRuntimeTypeInfo([75, 25], type$.JSArray_num) : sizes;
        _this.splitter = A.flexSplit(t1, 10, false, H.setRuntimeTypeInfo([50, 90], type$.JSArray_num), t2);
        _this.splitterConfigured = true;
      } else if (sizes != null)
        J.setSizes$1$x(_this.splitter, sizes);
    },
    _configureSplitter$0: function() {
      return this._configureSplitter$1$sizes(null);
    },
    _destroySplitter$0: function() {
      if (this.splitterConfigured) {
        J.destroy$0$x(this.splitter);
        this.splitterConfigured = false;
      }
    },
    entering$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$entering$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.timelineController.timelineService.updateListeningState$1(true), $async$entering$0);
            case 2:
              // returning from await.
              $async$self._html_timeline_screen$_updateButtonStates$0();
              $async$goto = 3;
              return P._asyncAwait($async$self._html_timeline_screen$_profileGranularitySelector.setGranularity$0(), $async$entering$0);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$entering$0, $async$completer);
    },
    exiting$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$exiting$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.timelineController.timelineService.updateListeningState$1(false), $async$exiting$0);
            case 2:
              // returning from await.
              $async$self._html_timeline_screen$_updateButtonStates$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$exiting$0, $async$completer);
    },
    prepareViewForOfflineData$1: function(timelineMode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$prepareViewForOfflineData$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.clearTimeline$0(), $async$prepareViewForOfflineData$1);
            case 2:
              // returning from await.
              $async$self.framesBarChart.attribute$2("hidden", true);
              t1 = $async$self._emptyFlameChart;
              $async$self.flameChartContainer.replace$2(0, 0, t1);
              $async$self.flameChartContainer.attribute$2("hidden", false);
              $async$self.eventDetails.attribute$2("hidden", true);
              $async$self._html_timeline_screen$_recordingInstructions.attribute$2("hidden", true);
              $async$self._html_timeline_screen$_recordingStatus.attribute$2("hidden", false);
              $async$self._html_timeline_screen$_recordingStatusMessage.element.textContent = "Loading timeline data";
              $async$self._destroySplitter$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$prepareViewForOfflineData$1, $async$completer);
    },
    _exitOfflineMode$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_exitOfflineMode$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.clearTimeline$0(), $async$_exitOfflineMode$0);
            case 2:
              // returning from await.
              $async$self.eventDetails.reset$1$hide(0, true);
              $async$goto = 3;
              return P._asyncAwait($async$self.timelineController.exitOfflineMode$0(), $async$_exitOfflineMode$0);
            case 3:
              // returning from await.
              $async$self.framework.exitOfflineMode$0();
              $async$self._setTimelineMode$2$clearTimeline$timelineMode(false, $async$self.startTimelineMode);
              $async$self._html_timeline_screen$_updateButtonStates$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_exitOfflineMode$0, $async$completer);
    },
    _pauseFrameRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$_pauseFrameRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.timelineController;
              t2 = t1.frameBasedTimeline;
              t2.manuallyPaused = true;
              t2._pausedNotifier.set$value(0, true);
              F.select("timeline", "pause", 0);
              $async$self._html_timeline_screen$_updateButtonStates$0();
              $async$goto = 2;
              return P._asyncAwait(t1.timelineService.updateListeningState$1($async$self.get$isCurrentScreen()), $async$_pauseFrameRecording$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_pauseFrameRecording$0, $async$completer);
    },
    _resumeFrameRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$_resumeFrameRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.timelineController;
              t2 = t1.frameBasedTimeline;
              t2.manuallyPaused = false;
              t2._pausedNotifier.set$value(0, false);
              F.select("timeline", "resume", 0);
              $async$self._html_timeline_screen$_updateButtonStates$0();
              $async$goto = 2;
              return P._asyncAwait(t1.timelineService.updateListeningState$1($async$self.get$isCurrentScreen()), $async$_resumeFrameRecording$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_resumeFrameRecording$0, $async$completer);
    },
    _startFullRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_startFullRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.clearTimeline$0(), $async$_startFullRecording$0);
            case 2:
              // returning from await.
              $async$self.timelineController.fullTimeline.startRecording$0();
              $async$self._html_timeline_screen$_recordingInstructions.attribute$2("hidden", true);
              $async$self._html_timeline_screen$_recordingStatusMessage.element.textContent = "Recording timeline trace";
              $async$self._html_timeline_screen$_recordingStatus.attribute$2("hidden", false);
              $async$self._recordingSpinner.attribute$2("hidden", false);
              $async$self._html_timeline_screen$_updateButtonStates$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_startFullRecording$0, $async$completer);
    },
    _stopFullRecording$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$_stopFullRecording$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._html_timeline_screen$_recordingStatusMessage.element.textContent = "Processing timeline trace";
              $async$goto = 2;
              return P._asyncAwait($async$self.timelineController.fullTimeline.stopRecording$0(), $async$_stopFullRecording$0);
            case 2:
              // returning from await.
              $async$self._html_timeline_screen$_recordingStatus.attribute$2("hidden", true);
              $async$self._html_timeline_screen$_updateButtonStates$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_stopFullRecording$0, $async$completer);
    },
    _setTimelineMode$2$clearTimeline$timelineMode: function(clearTimeline, timelineMode) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, $async$temp1;
      var $async$_setTimelineMode$2$clearTimeline$timelineMode = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (clearTimeline) {
                t1 = $async$self.timelineController;
                t1 = t1.get$timeline(t1).data;
                if (t1 != null)
                  t1.clear$0(0);
              }
              t1 = $async$self.timelineController;
              t1._timelineModeNotifier.set$value(0, timelineMode);
              $async$self._updateVisibilityForTimelineMode$0();
              $async$temp1 = $async$self.framesBarChart.frameUIgraph;
              $async$goto = 2;
              return P._asyncAwait(t1.frameBasedTimeline.get$displayRefreshRate(), $async$_setTimelineMode$2$clearTimeline$timelineMode);
            case 2:
              // returning from await.
              $async$temp1.reset$1$displayRefreshRate(0, $async$result);
              $async$self.timelineFlameChartCanvas = null;
              t1 = $async$self._emptyFlameChart;
              $async$self.flameChartContainer.replace$2(0, 0, t1);
              t1 = timelineMode === C.TimelineMode_0;
              $async$self.eventDetails.reset$1$hide(0, t1);
              if (t1)
                $async$self._destroySplitter$0();
              else
                $async$self._configureSplitter$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_setTimelineMode$2$clearTimeline$timelineMode, $async$completer);
    },
    _setTimelineMode$1$timelineMode: function(timelineMode) {
      return this._setTimelineMode$2$clearTimeline$timelineMode(true, timelineMode);
    },
    _html_timeline_screen$_updateButtonStates$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t2, t1, isDartCliApp;
      var $async$_html_timeline_screen$_updateButtonStates$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp;
              $async$goto = 2;
              return P._asyncAwait(t1 == null ? null : t1.get$isDartCliApp(), $async$_html_timeline_screen$_updateButtonStates$0);
            case 2:
              // returning from await.
              isDartCliApp = $async$result;
              if (isDartCliApp == null)
                isDartCliApp = false;
              t1 = $async$self.pauseButton;
              t2 = $async$self.timelineController;
              t1.attribute$2("disabled", t2.frameBasedTimeline.manuallyPaused);
              t1.attribute$2("hidden", $.offlineMode || J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_1));
              t1 = $async$self.resumeButton;
              t1.attribute$2("disabled", !t2.frameBasedTimeline.manuallyPaused);
              t1.attribute$2("hidden", $.offlineMode || J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_1));
              t1 = $async$self._html_timeline_screen$_startRecordingButton;
              t1.attribute$2("disabled", H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value));
              t1.attribute$2("hidden", $.offlineMode || J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_0));
              t1 = $async$self._html_timeline_screen$_stopRecordingButton;
              t1.attribute$2("disabled", !H.boolConversionCheck(H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value)));
              t1.attribute$2("hidden", $.offlineMode || J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_0));
              $async$self._timelineModeCheckbox.attribute$2("disabled", H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value));
              type$.InputElement._as($async$self._timelineModeCheckbox.element).checked = J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_0);
              t1 = $async$self._timelineModeSettingContainer;
              t1.attribute$2("hidden", $.offlineMode || isDartCliApp);
              t1 = $async$self.clearButton;
              t1.attribute$2("disabled", H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value));
              t1.attribute$2("hidden", $.offlineMode);
              t1 = $async$self.exportButton;
              t1.attribute$2("disabled", H._asBoolS(t2.fullTimeline._html_timeline_controller$_recordingNotifier._value));
              t1.attribute$2("hidden", $.offlineMode);
              t1 = $async$self.performanceOverlayButton.button;
              t1.attribute$2("hidden", $.offlineMode || isDartCliApp);
              t1 = $async$self.trackWidgetBuildsButton.button;
              t1.attribute$2("hidden", $.offlineMode || isDartCliApp);
              $async$self._html_timeline_screen$_profileGranularitySelector.selector.attribute$2("hidden", $.offlineMode);
              $async$self.exitOfflineModeButton.attribute$2("hidden", !$.offlineMode);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_html_timeline_screen$_updateButtonStates$0, $async$completer);
    },
    _updateVisibilityForTimelineMode$0: function() {
      var t1, _this = this, _s6_ = "hidden";
      _this._html_timeline_screen$_updateButtonStates$0();
      t1 = _this.timelineController._timelineModeNotifier;
      _this.framesBarChart.attribute$2(_s6_, J.$eq$(t1._value, C.TimelineMode_1));
      _this.flameChartContainer.attribute$2(_s6_, J.$eq$(t1._value, C.TimelineMode_0));
      _this._html_timeline_screen$_recordingInstructions.attribute$2(_s6_, J.$eq$(t1._value, C.TimelineMode_0));
      _this._html_timeline_screen$_recordingStatus.attribute$2(_s6_, true);
      _this.eventDetails.attribute$2(_s6_, J.$eq$(t1._value, C.TimelineMode_0));
    },
    clearTimeline$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, t1, $async$temp1;
      var $async$clearTimeline$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.timelineController;
              $async$goto = 2;
              return P._asyncAwait(t1.clearData$0(0), $async$clearTimeline$0);
            case 2:
              // returning from await.
              t2 = $async$self._emptyFlameChart;
              $async$self.flameChartContainer.replace$2(0, 0, t2);
              t2 = t1._timelineModeNotifier;
              $async$self.flameChartContainer.attribute$2("hidden", J.$eq$(t2._value, C.TimelineMode_0));
              t3 = $async$self.timelineFlameChartCanvas;
              t3 = t3 == null ? null : t3._viewportCanvas._viewport_canvas$_element;
              t3 = t3 == null ? null : t3.element;
              if (t3 != null)
                J.remove$0$ax(t3);
              $async$self.timelineFlameChartCanvas = null;
              $async$self.eventDetails.reset$1$hide(0, J.$eq$(t2._value, C.TimelineMode_0));
              $async$self._html_timeline_screen$_recordingStatus.attribute$2("hidden", true);
            case 3:
              // switch
              switch (t2._value) {
                case C.TimelineMode_0:
                  // goto case
                  $async$goto = 5;
                  break;
                case C.TimelineMode_1:
                  // goto case
                  $async$goto = 6;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              C.JSArray_methods.set$length($.debugHandledTraceEvents, 0);
              $.$get$debugFrameTracking()._contents = "";
              $async$temp1 = $async$self.framesBarChart.frameUIgraph;
              $async$goto = 7;
              return P._asyncAwait(t1.frameBasedTimeline.get$displayRefreshRate(), $async$clearTimeline$0);
            case 7:
              // returning from await.
              $async$temp1.reset$1$displayRefreshRate(0, $async$result);
              $async$self._destroySplitter$0();
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              $async$self._html_timeline_screen$_recordingInstructions.attribute$2("hidden", false);
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
              $async$self._html_timeline_screen$_updateButtonStates$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$clearTimeline$0, $async$completer);
    },
    _exportTimeline$0: function() {
      var encodedTimelineData, now,
        t1 = this.timelineController;
      t1 = t1.get$timeline(t1).data;
      encodedTimelineData = C.C_JsonCodec.encode$2$toEncodable(t1.get$json(t1), null);
      t1 = Date.now();
      now = new P.DateTime(t1, false);
      Y.downloadFile(encodedTimelineData, "timeline_" + ("" + H.Primitives_getYear(now) + "_" + H.Primitives_getMonth(now) + "_" + H.Primitives_getDay(now) + "-" + 1000 * t1) + ".json");
    },
    _maybeAddDebugButtons$0: function() {
    }
  };
  M.HtmlTimelineScreen_createContent_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.$this._startFullRecording$0(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 7
  };
  M.HtmlTimelineScreen_createContent_closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.$this.clearTimeline$0(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 7
  };
  M.HtmlTimelineScreen_createContent_closure1.prototype = {
    call$1: function(_) {
      var t1 = H.boolConversionCheck(this.checkbox.checked) ? C.TimelineMode_0 : C.TimelineMode_1;
      return this.$this._setTimelineMode$1$timelineMode(t1);
    },
    $signature: 19
  };
  M.HtmlTimelineScreen_onContentAttached_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        frame = t1.timelineController.frameBasedTimeline.data.selectedFrame;
      if (frame == null)
        return;
      t1._selectFrame$1(frame);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  M.HtmlTimelineScreen_onContentAttached_closure0.prototype = {
    call$1: function(_) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
      H._asBoolS(_);
      t1 = this.$this;
      t2 = t1.timelineController.fullTimeline.data;
      t3 = t1.flameChartContainer.element;
      t4 = t3.clientWidth;
      t4.toString;
      t3 = t3.clientHeight;
      t3.toString;
      t3 = Math.max(t3, t1._fullTimelineChartHeight$0());
      t5 = H.setRuntimeTypeInfo([], type$.JSArray_HorizontalLineSegment);
      t6 = H.setRuntimeTypeInfo([], type$.JSArray_VerticalLineSegment);
      t7 = t2.time;
      t8 = t7._utils$_end;
      t7 = t7._utils$_start;
      t7 = new P.Duration(t8._duration - t7._duration);
      t8 = M.FullTimelineFlameChartCanvas__calculateStartInset(t2);
      t9 = type$._AsyncBroadcastStreamController_FlameChartNode_dynamic;
      t10 = new P._AsyncBroadcastStreamController(null, null, t9);
      t5 = new M.FullTimelineFlameChartCanvas(P.LinkedHashMap_LinkedHashMap$_empty(type$.TimelineEvent_2, type$.FlameChartNode_dynamic), t5, t6, new U.HtmlDragScroll(), 40000, t2, t7, t8, t4, t3, t10, H.setRuntimeTypeInfo([], type$.JSArray_FlameChartRow), H.setRuntimeTypeInfo([], type$.JSArray_FlameChartSection), new F.TimelineGrid(t7, t8, t4));
      t5.initUiElements$0();
      t5.FlameChartCanvas$7$classes$data$duration$height$maxZoomLevel$startInset$width(null, t2, t7, t3, 40000, t8, t4, type$.FullTimelineData);
      t1.timelineFlameChartCanvas = t5;
      new P._BroadcastStream(t10, t9._eval$1("_BroadcastStream<1>")).listen$1(new M.HtmlTimelineScreen_onContentAttached__closure(t1));
      t9 = t1.timelineFlameChartCanvas._viewportCanvas._viewport_canvas$_element;
      t1.flameChartContainer.replace$2(0, 0, t9);
      t1._configureSplitter$0();
    },
    $signature: 11
  };
  M.HtmlTimelineScreen_onContentAttached__closure.prototype = {
    call$1: function(node) {
      var t1, t2;
      type$.FlameChartNode_dynamic._as(node);
      t1 = this.$this;
      t2 = t1.eventDetails;
      t2.titleBackgroundColor = node.backgroundColor;
      t2.titleTextColor = node.textColor;
      t1.timelineController.htmlSelectTimelineEvent$1(type$.TimelineEvent_2._as(node.data));
    },
    $signature: 54
  };
  M.HtmlTimelineScreen_onContentAttached_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._html_timeline_screen$_recordingStatusMessage.element.textContent = "No timeline events recorded";
      t1._html_timeline_screen$_recordingStatus.attribute$2("hidden", false);
      t1._recordingSpinner.attribute$2("hidden", true);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  M.HtmlTimelineScreen_onContentAttached_closure2.prototype = {
    call$1: function(_) {
      var t1, t2, t3, t4, _s6_ = "hidden";
      type$.OfflineData_TimelineData._as(_);
      t1 = this.$this;
      t1._html_timeline_screen$_recordingStatus.attribute$2(_s6_, true);
      t2 = t1.timelineController;
      t3 = t2.offlineTimelineData;
      if (t3 instanceof A.OfflineFrameBasedTimelineData) {
        t1.framesBarChart.attribute$2(_s6_, false);
        t4 = t1.framesBarChart.frameUIgraph.plotlyChart;
        t4.displayRefreshRate = t3.displayRefreshRate;
        self.Plotly.relayout(t4._html_frames_bar_plotly$_domName, t4.getFPSTimeseriesLayout$0());
        t4 = t1.flameChartContainer;
        t3 = t3._selectedFrameId == null;
        t4.attribute$2(_s6_, t3);
        t1.eventDetails.attribute$2(_s6_, t3);
        if (t3)
          t1._destroySplitter$0();
        else
          t1._selectFrame$1(t2.frameBasedTimeline.data.selectedFrame);
      } else
        t1.eventDetails.attribute$2(_s6_, false);
      if (t2.offlineTimelineData.hasCpuProfileData$0())
        t1._configureSplitter$1$sizes(H.setRuntimeTypeInfo([50, 50], type$.JSArray_int));
    },
    $signature: 243
  };
  M.HtmlTimelineScreen_onContentAttached_closure3.prototype = {
    call$1: function(message) {
      F.error(H._asStringS(message), false);
    },
    $signature: 8
  };
  M.HtmlTimelineScreen_onContentAttached_closure4.prototype = {
    call$2: function(entries, _) {
      var t1, t2, dataHeight;
      type$.List_dynamic._as(entries);
      type$.ResizeObserver._as(_);
      t1 = this.$this;
      if (t1.timelineFlameChartCanvas != null) {
        t2 = t1.timelineController;
        t2 = J.$eq$(t2._timelineModeNotifier._value, C.TimelineMode_0) && t2.frameBasedTimeline.data.selectedFrame == null;
      } else
        t2 = true;
      if (t2)
        return;
      dataHeight = J.$eq$(t1.timelineController._timelineModeNotifier._value, C.TimelineMode_0) ? t1._frameBasedTimelineChartHeight$0() : t1._fullTimelineChartHeight$0();
      t2 = t1.timelineFlameChartCanvas;
      t2.forceRebuildForSize$2(t2.get$calculatedWidth() + t2.startInset + 70, Math.max(C.JSNumber_methods.round$0(t1.flameChartContainer.element.scrollHeight), dataHeight));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 58
  };
  M.HtmlTimelineScreen__selectFrame_closure.prototype = {
    call$1: function(node) {
      var t1, t2;
      type$.FlameChartNode_dynamic._as(node);
      t1 = this.$this;
      t2 = t1.eventDetails;
      t2.titleBackgroundColor = node.backgroundColor;
      t2.titleTextColor = node.textColor;
      t1.timelineController.htmlSelectTimelineEvent$1(type$.TimelineEvent_2._as(node.data));
    },
    $signature: 54
  };
  R.TimelineService.prototype = {
    _html_timeline_service$_initListeners$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, t2;
      var $async$_html_timeline_service$_initListeners$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionAvailableController;
              new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1($async$self.get$_initTimelineListener());
              t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._connectionClosedController;
              new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1($async$self.get$_html_timeline_service$_handleConnectionStop());
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_html_timeline_service$_initListeners$0, $async$completer);
    },
    _initTimelineListener$1: function(service) {
      var t1, t2, t3, t4, t5;
      type$.VmServiceWrapper._as(service);
      t1 = type$.ServiceConnectionManager;
      if (H.boolConversionCheck(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp._isDartWebApp))
        return;
      t2 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
      t3 = t2._vmService;
      t3.toString;
      t4 = type$.dynamic;
      t5 = type$.Response_2;
      T.allowedError(t2._trackFuture$1$2("setFlag", t3._call$1$2(0, "setFlag", P.LinkedHashMap_LinkedHashMap$_literal(["name", "profile_period", "value", "250"], t4, t4), t5), t5), false, t4);
      t1 = t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service._vmService._getEventController$1("Timeline");
      new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new R.TimelineService__initTimelineListener_closure(this));
    },
    _html_timeline_service$_handleConnectionStop$1: function($event) {
    },
    startTimeline$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, traceEvents, events, threadIdsByName, uiThreadName, gpuThreadName, platformThreadName, _i, $event, $name, uiThreadId, gpuThreadId, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$startTimeline$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              $async$temp1 = H;
              $async$goto = 4;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).connectedApp.get$isFlutterApp(), $async$startTimeline$0);
            case 4:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 2 : 3;
              break;
            case 2:
              // then
              $async$temp1 = $async$self.timelineController.frameBasedTimeline;
              $async$temp2 = A;
              $async$goto = 5;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).getDisplayRefreshRate$0(), $async$startTimeline$0);
            case 5:
              // returning from await.
              $async$temp1.set$data(0, $async$temp2.FrameBasedTimelineData$(null, $async$result, null, null, null, null));
            case 3:
              // join
              t2 = $async$self.timelineController;
              t2.fullTimeline.set$data(0, A.FullTimelineData$(null, null, null, null));
              $async$goto = 6;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceAvailable.future, $async$startTimeline$0);
            case 6:
              // returning from await.
              t3 = type$.Success;
              $async$goto = 7;
              return P._asyncAwait(T.allowedError(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.setVMTimelineFlags$1(H.setRuntimeTypeInfo(["GC", "Dart", "Embedder"], type$.JSArray_String)), true, t3), $async$startTimeline$0);
            case 7:
              // returning from await.
              $async$goto = 8;
              return P._asyncAwait(T.allowedError(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.clearVMTimeline$0(), true, t3), $async$startTimeline$0);
            case 8:
              // returning from await.
              $async$temp1 = J;
              $async$temp2 = type$.List_dynamic;
              $async$temp3 = J;
              $async$goto = 9;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.getVMTimeline$0(), $async$startTimeline$0);
            case 9:
              // returning from await.
              traceEvents = $async$temp1.cast$1$0$ax($async$temp2._as($async$temp3.$index$asx($async$result.json, "traceEvents")), type$.Map_String_dynamic);
              t1 = traceEvents.$ti;
              t3 = t1._eval$1("MappedListIterable<ListMixin.E,TraceEvent>");
              t3 = new H.MappedListIterable(traceEvents, t1._eval$1("TraceEvent(ListMixin.E)")._as(new R.TimelineService_startTimeline_closure()), t3).super$Iterable$where(0, t3._eval$1("bool(ListIterable.E)")._as(new R.TimelineService_startTimeline_closure0()));
              events = P.List_List$from(t3, true, t3.$ti._eval$1("Iterable.E"));
              threadIdsByName = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
              for (t1 = events.length, uiThreadName = null, gpuThreadName = null, platformThreadName = null, _i = 0; _i < events.length; events.length === t1 || (0, H.throwConcurrentModificationError)(events), ++_i) {
                $event = events[_i];
                $name = J.$index$asx($event.args, "name");
                t3 = J.getInterceptor$asx($name);
                if (H.boolConversionCheck(H._asBoolS(t3.contains$1($name, ".ui"))))
                  uiThreadName = H._asStringS($name);
                if (H.boolConversionCheck(H._asBoolS(t3.contains$1($name, ".raster"))) || H.boolConversionCheck(H._asBoolS(t3.contains$1($name, ".gpu"))))
                  gpuThreadName = H._asStringS($name);
                if (H.boolConversionCheck(H._asBoolS(t3.contains$1($name, ".platform"))))
                  platformThreadName = H._asStringS($name);
                threadIdsByName.$indexSet(0, H._asStringS($name), $event.threadId);
              }
              uiThreadId = uiThreadName != null ? threadIdsByName.$index(0, uiThreadName) : null;
              gpuThreadId = gpuThreadName != null ? threadIdsByName.$index(0, gpuThreadName) : threadIdsByName.$index(0, platformThreadName);
              if (uiThreadId == null || gpuThreadId == null)
                t2._nonFatalErrorController.add$1(0, "Could not find UI thread and / or GPU thread from names: " + threadIdsByName.get$keys(threadIdsByName).toString$0(0));
              for (t1 = t2.timelines, t1.length, _i = 0; _i < 2; ++_i) {
                t2 = t1[_i].processor;
                t2.uiThreadId = uiThreadId;
                t2.gpuThreadId = gpuThreadId;
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$startTimeline$0, $async$completer);
    },
    updateListeningState$1: function(isCurrentScreen) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, isRunning, t1, shouldBeRunning, t2;
      var $async$updateListeningState$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.timelineController;
              shouldBeRunning = (!t1.frameBasedTimeline.manuallyPaused || H.boolConversionCheck(H._asBoolS(t1.fullTimeline._html_timeline_controller$_recordingNotifier._value))) && !$.offlineMode && isCurrentScreen;
              t2 = type$.ServiceConnectionManager;
              $async$goto = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceAvailable.future._state !== 0 ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = !H.boolConversionCheck(H._asBoolS(t1.frameBasedTimeline._pausedNotifier._value)) || H.boolConversionCheck(H._asBoolS(t1.fullTimeline._html_timeline_controller$_recordingNotifier._value)) ? 5 : 7;
              break;
            case 5:
              // then
              t1 = t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t2 = type$.TimelineFlags;
              $async$goto = 8;
              return P._asyncAwait(t1._trackFuture$1$2("getVMTimelineFlags", t1._vmService._call$1$1(0, "getVMTimelineFlags", t2), t2), $async$updateListeningState$1);
            case 8:
              // returning from await.
              t2 = $async$result.recordedStreams.length !== 0;
              isRunning = t2;
              // goto join
              $async$goto = 6;
              break;
            case 7:
              // else
              isRunning = false;
            case 6:
              // join
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              isRunning = false;
            case 3:
              // join
              $async$goto = 9;
              return P._asyncAwait($async$self._html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning(isRunning, shouldBeRunning), $async$updateListeningState$1);
            case 9:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$updateListeningState$1, $async$completer);
    },
    _html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning: function(isRunning, shouldBeRunning) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t1;
      var $async$_html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager;
              $async$goto = 2;
              return P._asyncAwait(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceAvailable.future, $async$_html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning);
            case 2:
              // returning from await.
              $async$goto = shouldBeRunning ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait($async$self.startTimeline$0(), $async$_html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = isRunning ? 7 : 8;
              break;
            case 7:
              // then
              t2 = $async$self.timelineController.frameBasedTimeline;
              t2.manuallyPaused = false;
              t2._pausedNotifier.set$value(0, true);
              $async$goto = 9;
              return P._asyncAwait(T.allowedError(t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service.setVMTimelineFlags$1(H.setRuntimeTypeInfo([], type$.JSArray_String)), true, type$.Success), $async$_html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning);
            case 9:
              // returning from await.
            case 8:
              // join
            case 4:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_html_timeline_service$_updateListeningState$2$isRunning$shouldBeRunning, $async$completer);
    }
  };
  R.TimelineService__initTimelineListener_closure.prototype = {
    call$1: function($event) {
      var t3, shouldProcessEventForFrameBasedTimeline, shouldProcessEventForFullTimeline, t4, t5, t6, t7, eventWrapper,
        events = J.cast$1$0$ax(type$.List_dynamic._as(J.$index$asx(type$.Event_2._as($event).json, "timelineEvents")), type$.Map_String_dynamic),
        t1 = this.$this.timelineController,
        t2 = t1._timelineModeNotifier;
      if (J.$eq$(t2._value, C.TimelineMode_0)) {
        t3 = t1.frameBasedTimeline;
        shouldProcessEventForFrameBasedTimeline = !t3.manuallyPaused && !H.boolConversionCheck(H._asBoolS(t3._pausedNotifier._value));
      } else
        shouldProcessEventForFrameBasedTimeline = false;
      shouldProcessEventForFullTimeline = J.$eq$(t2._value, C.TimelineMode_1) && H.boolConversionCheck(H._asBoolS(t1.fullTimeline._html_timeline_controller$_recordingNotifier._value));
      if (!$.offlineMode)
        t3 = shouldProcessEventForFrameBasedTimeline || shouldProcessEventForFullTimeline;
      else
        t3 = false;
      if (t3)
        for (t3 = new H.ListIterator(events, events.get$length(events), events.$ti._eval$1("ListIterator<ListMixin.E>")), t4 = t1.allTraceEvents; t3.moveNext$0();) {
          t5 = L.TraceEvent$(t3.__internal$_current);
          t6 = Date.now();
          t7 = $._traceEventWrapperId;
          $._traceEventWrapperId = t7 + 1;
          eventWrapper = new L.TraceEventWrapper(t5, t6, t7);
          C.JSArray_methods.add$1(t4, eventWrapper);
          if (J.$eq$(t2._value, C.TimelineMode_0)) {
            t5 = t1.frameBasedTimeline.processor;
            if (t5 != null)
              t5.processTraceEvent$1(eventWrapper);
          }
        }
    },
    $signature: 48
  };
  R.TimelineService_startTimeline_closure.prototype = {
    call$1: function($event) {
      return L.TraceEvent$(type$.Map_String_dynamic._as($event));
    },
    $signature: 244
  };
  R.TimelineService_startTimeline_closure0.prototype = {
    call$1: function($event) {
      return type$.TraceEvent._as($event).name === "thread_name";
    },
    $signature: 245
  };
  L.TraceEvent.prototype = {
    get$id: function(_) {
      return J.$index$asx(this.json, "id");
    },
    get$type: function(_) {
      var t1 = this._type;
      return t1 == null ? this._type = C.TimelineEventType_3 : t1;
    },
    toString$0: function(_) {
      var _this = this;
      return _this.get$type(_this).toString$0(0) + " event [id: " + H.S(J.$index$asx(_this.json, "id")) + "] [ph: " + H.S(_this.phase) + "] " + H.S(_this.name) + " - [ts: " + H.S(_this.timestampMicros) + "] [dur: " + H.S(_this.duration) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  L.TraceEventWrapper.prototype = {
    compareTo$1: function(_, other) {
      var compare;
      type$.TraceEventWrapper._as(other);
      compare = J.compareTo$1$ns(this.event.timestampMicros, other.event.timestampMicros);
      return compare !== 0 ? compare : C.JSInt_methods.compareTo$1(this.id, other.id);
    },
    $isComparable: 1,
    get$id: function(receiver) {
      return this.id;
    }
  };
  L.TimelineEventType.prototype = {
    toString$0: function(_) {
      return this._trace_event$_name;
    }
  };
  X.TreeNode0.prototype = {
    get$depth: function() {
      var t2, _i, child, _this = this,
        t1 = _this._depth;
      if (t1 !== 0)
        return t1;
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        _this.set$_depth(Math.max(_this._depth, child.get$depth()));
      }
      return ++_this._depth;
    },
    get$root: function(_) {
      var visited, root, t2, _this = this,
        t1 = _this._trees$_root;
      if (t1 != null)
        return t1;
      t1 = H._instanceType(_this);
      visited = P.LinkedHashSet_LinkedHashSet$_literal([_this], t1._eval$1("TreeNode0<TreeNode0.T>"));
      t1 = t1._eval$1("TreeNode0.T");
      t1._as(_this);
      for (root = _this; root.parent != null;) {
        visited.add$1(0, root);
        root = root.parent;
      }
      for (t2 = P._LinkedHashSetIterator$(visited, visited._collection$_modifications, visited.$ti._precomputed1); t2.moveNext$0();)
        t1._as(t2._collection$_current).set$_trees$_root(root);
      return root;
    },
    get$level: function(_) {
      var current, level, _this = this,
        t1 = _this._trees$_level;
      if (t1 != null)
        return t1;
      H._instanceType(_this)._eval$1("TreeNode0.T")._as(_this);
      for (current = _this, level = 0; current = current.parent, current != null;)
        ++level;
      return _this._trees$_level = level;
    },
    addChild$1: function(child) {
      var t2,
        t1 = H._instanceType(this)._eval$1("TreeNode0.T");
      t1._as(child);
      t2 = this.children;
      C.JSArray_methods.add$1(t2, child);
      child.set$parent(0, t1._as(this));
      child.index = t2.length - 1;
    },
    expandCascading$0: function() {
      var t1 = H._instanceType(this)._eval$1("TreeNode0.T");
      X.breadthFirstTraversal(t1._as(this), new X.TreeNode_expandCascading_closure(this), null, t1);
    },
    collapseCascading$0: function() {
      var t1 = H._instanceType(this)._eval$1("TreeNode0.T");
      X.breadthFirstTraversal(t1._as(this), new X.TreeNode_collapseCascading_closure(this), null, t1);
    },
    subtreeHasNodeWithCondition$1: function(condition) {
      var t1 = H._instanceType(this);
      t1._eval$1("bool(TreeNode0.T)")._as(condition);
      t1 = t1._eval$1("TreeNode0.T");
      return X.breadthFirstTraversal(t1._as(this), null, condition, t1) != null;
    },
    set$parent: function(_, $parent) {
      this.parent = H._instanceType(this)._eval$1("TreeNode0.T")._as($parent);
    },
    set$_depth: function(_depth) {
      this._depth = H._asIntS(_depth);
    },
    set$_trees$_root: function(_root) {
      this._trees$_root = H._instanceType(this)._eval$1("TreeNode0.T")._as(_root);
    }
  };
  X.TreeNode_expandCascading_closure.prototype = {
    call$1: function(node) {
      H._instanceType(this.$this)._eval$1("TreeNode0.T")._as(node)._trees$_isExpanded = true;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(TreeNode0.T)");
    }
  };
  X.TreeNode_collapseCascading_closure.prototype = {
    call$1: function(node) {
      H._instanceType(this.$this)._eval$1("TreeNode0.T")._as(node)._trees$_isExpanded = false;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("Null(TreeNode0.T)");
    }
  };
  F.GtagEventDevTools.prototype = {};
  F.GtagExceptionDevTools.prototype = {};
  E.waitForDimensionsComputed_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($._analyticsComputed)
                F.screen($async$self.screenName);
              else {
                t1 = $._stillWaiting;
                $._stillWaiting = t1 + 1;
                if (t1 < 50)
                  E.waitForDimensionsComputed($async$self.screenName);
                else
                  B.log("Cancel waiting for dimensions.", C.LogLevel_1);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 15
  };
  U.Listenable.prototype = {};
  U.ValueListenable.prototype = {};
  U.ChangeNotifier.prototype = {
    addListener$1: function(_, listener) {
      C.JSArray_methods.add$1(this._listeners, type$.void_Function._as(listener));
    },
    removeListener$1: function(_, listener) {
      C.JSArray_methods.remove$1(this._listeners, type$.void_Function._as(listener));
    },
    notifyListeners$0: function() {
      var listener, exception, t2, _i, exception0,
        t1 = this._listeners,
        localListeners = P.List_List$from(t1, true, type$.void_Function);
      for (t2 = localListeners.length, _i = 0; _i < localListeners.length; localListeners.length === t2 || (0, H.throwConcurrentModificationError)(localListeners), ++_i) {
        listener = localListeners[_i];
        try {
          if (C.JSArray_methods.contains$1(t1, listener))
            listener.call$0();
        } catch (exception0) {
          exception = H.unwrapException(exception0);
          U._fake_flutter__debugPrintThrottled$closure().call$1("Error while dispatching notifications for " + H.getRuntimeType(this).toString$0(0) + ". " + H.S(exception));
        }
      }
    },
    $isListenable: 1
  };
  U.ValueNotifier.prototype = {
    get$value: function(_) {
      return this._value;
    },
    set$value: function(_, newValue) {
      var _this = this;
      H._instanceType(_this)._precomputed1._as(newValue);
      if (J.$eq$(_this._value, newValue))
        return;
      _this.set$_value(newValue);
      _this.notifyListeners$0();
    },
    toString$0: function(_) {
      return H.getRuntimeType(this).toString$0(0) + "#" + U.shortHash(this) + "(" + H.S(this._value) + ")";
    },
    set$_value: function(_value) {
      this._value = H._instanceType(this)._precomputed1._as(_value);
    },
    $isValueListenable: 1
  };
  U.DiagnosticLevel.prototype = {
    toString$0: function(_) {
      return this.__fake_flutter$_name;
    }
  };
  U.DiagnosticsTreeStyle.prototype = {
    toString$0: function(_) {
      return this.__fake_flutter$_name;
    }
  };
  U.TextTreeConfiguration.prototype = {};
  U._WordWrapParseMode.prototype = {
    toString$0: function(_) {
      return this.__fake_flutter$_name;
    }
  };
  U._PrefixedStringBuilder.prototype = {
    get$prefixOtherLines: function() {
      var t1 = this._nextPrefixOtherLines;
      return t1 == null ? this._prefixOtherLines : t1;
    },
    incrementPrefixOtherLines$2$updateCurrentLine: function(suffix, updateCurrentLine) {
      var _this = this;
      if (_this._currentLine._contents.length === 0 || updateCurrentLine) {
        _this._prefixOtherLines = J.$add$ansx(_this.get$prefixOtherLines(), suffix);
        _this._nextPrefixOtherLines = null;
      } else
        _this._nextPrefixOtherLines = J.$add$ansx(_this.get$prefixOtherLines(), suffix);
    },
    get$requiresMultipleLines: function() {
      var t2, _this = this,
        t1 = _this._numLines;
      if (t1 <= 1)
        if (!(t1 === 1 && _this._currentLine._contents.length !== 0)) {
          t1 = _this._currentLine._contents;
          if (_this.__fake_flutter$_buffer._contents.length === 0)
            t2 = _this.prefixLineOne;
          else
            t2 = _this._prefixOtherLines;
          t2 = t1.length + t2.length > _this.wrapWidth;
          t1 = t2;
        } else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _finalizeLine$1: function(addTrailingLineBreak) {
      var t3, lines, $length, i, t4, _this = this,
        firstLine = _this.__fake_flutter$_buffer._contents.length === 0,
        t1 = _this._currentLine,
        t2 = t1._contents,
        text = t2.charCodeAt(0) == 0 ? t2 : t2;
      t1._contents = "";
      t1 = _this._wrappableRanges;
      if (t1.length === 0) {
        _this._writeLine$3$firstLine$includeLineBreak(text, firstLine, addTrailingLineBreak);
        return;
      }
      t2 = firstLine ? _this.prefixLineOne.length : _this._prefixOtherLines.length;
      t3 = _this._prefixOtherLines;
      t3 = firstLine ? t3.length : t3.length;
      lines = U._PrefixedStringBuilder__wordWrapLine(text, t1, _this.wrapWidth, t3, t2);
      $length = lines.get$length(lines);
      for (t2 = new P._SyncStarIterator(lines._outerHelper(), lines.$ti._eval$1("_SyncStarIterator<1>")), t3 = !addTrailingLineBreak, i = 0; t2.moveNext$0();) {
        t4 = t2.get$current(t2);
        ++i;
        _this._writeLine$3$firstLine$includeLineBreak(t4, firstLine, !t3 || i < $length);
      }
      C.JSArray_methods.set$length(t1, 0);
    },
    write$2$allowWrap: function(_, s, allowWrap) {
      var lines, t1, t2, i, t3, line, wrapStart, wrapEnd, _this = this;
      if (s.length === 0)
        return;
      lines = s.split("\n");
      for (t1 = _this._currentLine, t2 = _this._wrappableRanges, i = 0; i < lines.length; ++i) {
        if (i > 0) {
          _this._finalizeLine$1(true);
          t3 = _this._nextPrefixOtherLines;
          if (t3 != null) {
            _this._prefixOtherLines = t3;
            _this._nextPrefixOtherLines = null;
          }
        }
        line = lines[i];
        t3 = line.length;
        if (t3 !== 0) {
          if (allowWrap && true) {
            wrapStart = t1._contents.length;
            wrapEnd = wrapStart + t3;
            if (t2.length !== 0 && C.JSArray_methods.get$last(t2) === wrapStart)
              C.JSArray_methods.set$last(t2, wrapEnd);
            else {
              C.JSArray_methods.add$1(t2, wrapStart);
              C.JSArray_methods.add$1(t2, wrapEnd);
            }
          }
          t1._contents += line;
        }
      }
    },
    write$1: function($receiver, s) {
      return this.write$2$allowWrap($receiver, s, false);
    },
    _updatePrefix$0: function() {
      var t1 = this._nextPrefixOtherLines;
      if (t1 != null) {
        this._prefixOtherLines = t1;
        this._nextPrefixOtherLines = null;
      }
    },
    _writeLine$3$firstLine$includeLineBreak: function(line, firstLine, includeLineBreak) {
      var t2, _this = this,
        t1 = _this.__fake_flutter$_buffer;
      if (t1._contents.length === 0)
        t2 = _this.prefixLineOne;
      else
        t2 = _this._prefixOtherLines;
      t2 = t1._contents += C.JSString_methods.trimRight$0(H.S(t2) + H.S(line));
      if (includeLineBreak)
        t1._contents = t2 + "\n";
      ++_this._numLines;
    },
    writeRawLines$1: function(lines) {
      var t1, t2, _this = this;
      if (lines.length === 0)
        return;
      if (_this._currentLine._contents.length !== 0)
        _this._finalizeLine$1(true);
      t1 = _this.__fake_flutter$_buffer;
      t2 = t1._contents += lines;
      if (!C.JSString_methods.endsWith$1(lines, "\n"))
        t1._contents = t2 + "\n";
      ++_this._numLines;
      _this._updatePrefix$0();
    },
    writeStretched$2: function(text, targetLineLength) {
      var t1, t2, t3, targetLength, _this = this;
      _this.write$1(0, text);
      t1 = _this._currentLine;
      t2 = t1._contents;
      if (_this.__fake_flutter$_buffer._contents.length === 0)
        t3 = _this.prefixLineOne;
      else
        t3 = _this._prefixOtherLines;
      targetLength = targetLineLength - (t2.length + t3.length);
      if (targetLength > 0) {
        t2 = text.length;
        t3 = t2 - 1;
        if (t3 < 0)
          return H.ioore(text, t3);
        t1._contents += C.JSString_methods.$mul(text[t3], targetLength);
      }
      C.JSArray_methods.set$length(_this._wrappableRanges, 0);
    }
  };
  U._PrefixedStringBuilder__wordWrapLine_noWrap.prototype = {
    call$1: function(index) {
      var t1, t2, t3, t4, t5;
      for (t1 = this._box_0, t2 = this.wrapRanges; true;) {
        t3 = t1.currentChunk;
        t4 = t2.length;
        if (t3 >= t4)
          return true;
        t5 = t3 + 1;
        if (t5 >= t4)
          return H.ioore(t2, t5);
        if (index < t2[t5])
          break;
        t1.currentChunk = t3 + 2;
      }
      t1 = t1.currentChunk;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return index < t2[t1];
    },
    $signature: 246
  };
  U._NoDefaultValue.prototype = {};
  U.TextTreeRenderer.prototype = {
    render$4$parentConfiguration$prefixLineOne$prefixOtherLines: function(node, parentConfiguration, prefixLineOne, prefixOtherLines) {
      var isSingleLine, t1, config, descendants, t2, t3, builder, children, description, wrapName, wrapDescription, uppercaseTitle, $name, includeName, properties, i, t4, property, propertyStyle, propertyRender, propertyLines, t5, prefixChildrenRaw, child, childStyle, childConfig, lastChildPrefixLineOne, childPrefixOtherLines, nextChildStyle, childPrefixLineOne, _this = this, _null = null, _s1_ = "\n", _box_0 = {};
      _box_0.prefixOtherLines = prefixOtherLines;
      if (node.get$style(node) === C.DiagnosticsTreeStyle_8)
        isSingleLine = (parentConfiguration == null ? _null : parentConfiguration.lineBreakProperties) !== true;
      else
        isSingleLine = false;
      if (prefixOtherLines == null) {
        _box_0.prefixOtherLines = prefixLineOne;
        t1 = prefixLineOne;
      } else
        t1 = prefixOtherLines;
      config = node.get$textTreeConfiguration();
      if (t1.length === 0)
        t1 = _box_0.prefixOtherLines = t1 + config.prefixOtherLinesRootNode;
      if (node.get$style(node) === C.DiagnosticsTreeStyle_11) {
        descendants = H.setRuntimeTypeInfo([], type$.JSArray_String);
        _box_0.lines = _box_0.depth = 0;
        new U.TextTreeRenderer_render_visitor(_box_0, descendants).call$1(node);
        if (_box_0.lines > 1)
          t1 = prefixLineOne + ("This " + H.S(node.name) + " had the following descendants (showing up to depth 5):\n");
        else {
          t1 = descendants.length;
          t2 = node.name;
          t1 = t1 === 1 ? prefixLineOne + ("This " + H.S(t2) + " had the following child:\n") : prefixLineOne + ("This " + H.S(t2) + " has no descendants.\n");
        }
        t1 = P.StringBuffer__writeAll(t1, descendants, _s1_);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      t2 = Math.max(_this._wrapWidth, t1.length + 65);
      t3 = new P.StringBuffer("");
      builder = new U._PrefixedStringBuilder(prefixLineOne, t1, t2, new P.StringBuffer(""), t3, H.setRuntimeTypeInfo([], type$.JSArray_int));
      children = node.getChildren$0();
      description = node.toDescription$1$parentConfiguration(parentConfiguration);
      t1 = config.beforeName;
      if (t1.length !== 0)
        builder.write$1(0, t1);
      t1 = !isSingleLine;
      wrapName = t1 && node.get$allowNameWrap();
      wrapDescription = t1 && node.get$allowWrap();
      uppercaseTitle = node.get$style(node) === C.DiagnosticsTreeStyle_5;
      $name = node.name;
      if (uppercaseTitle)
        $name = $name == null ? _null : $name.toUpperCase();
      if (description == null || description.length === 0) {
        if (node.showName && $name != null)
          builder.write$2$allowWrap(0, $name, wrapName);
      } else {
        if ($name != null && $name.length !== 0 && node.showName) {
          builder.write$2$allowWrap(0, $name, wrapName);
          builder.write$2$allowWrap(0, config.afterName, wrapName);
          builder.write$2$allowWrap(0, config.isNameOnOwnLine || J.contains$1$asx(description, _s1_) ? _s1_ : " ", wrapName);
          includeName = true;
        } else
          includeName = false;
        if (t1 && builder.get$requiresMultipleLines() && t3._contents.length !== 0)
          builder.write$1(0, _s1_);
        if (includeName)
          builder.incrementPrefixOtherLines$2$updateCurrentLine(children.length === 0 ? config.propertyPrefixNoChildren : config.propertyPrefixIfChildren, true);
        builder.write$2$allowWrap(0, J.trimRight$0$s(uppercaseTitle ? description.toUpperCase() : description), wrapDescription);
        if (!includeName)
          builder.incrementPrefixOtherLines$2$updateCurrentLine(children.length === 0 ? config.propertyPrefixNoChildren : config.propertyPrefixIfChildren, false);
      }
      t1 = config.suffixLineOne;
      if (t1.length !== 0)
        builder.writeStretched$2(t1, t2);
      t1 = node.getProperties$0(0);
      t2 = H._arrayInstanceType(t1);
      t3 = t2._eval$1("bool(1)")._as(new U.TextTreeRenderer_render_closure(_this));
      t2 = t2._eval$1("WhereIterable<1>");
      properties = P.List_List$from(new H.WhereIterable(t1, t3, t2), true, t2._eval$1("Iterable.E"));
      if (properties.length !== 0 || children.length !== 0 || node.get$emptyBodyDescription() != null)
        t1 = true;
      else
        t1 = false;
      if (t1)
        builder.write$1(0, config.afterDescriptionIfBody);
      t1 = config.lineBreakProperties;
      if (t1)
        builder.write$1(0, config.lineBreak);
      if (properties.length !== 0)
        builder.write$1(0, config.beforeProperties);
      t2 = config.bodyIndent;
      builder.incrementPrefixOtherLines$2$updateCurrentLine(t2, false);
      if (node.get$emptyBodyDescription() != null && properties.length === 0 && children.length === 0 && prefixLineOne.length !== 0) {
        builder.write$1(0, node.get$emptyBodyDescription());
        if (t1)
          builder.write$1(0, config.lineBreak);
      }
      for (t3 = config.propertySeparator, t1 = !t1, i = 0; t4 = properties.length, i < t4; ++i) {
        property = properties[i];
        if (i > 0)
          builder.write$1(0, t3);
        propertyStyle = property.get$textTreeConfiguration();
        if (property.get$style(property) === C.DiagnosticsTreeStyle_8) {
          propertyRender = _this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(property, config, propertyStyle.prefixLineOne, propertyStyle.childLinkSpace + propertyStyle.prefixOtherLines);
          propertyLines = propertyRender.split(_s1_);
          if (propertyLines.length === 1 && t1)
            builder.write$1(0, C.JSArray_methods.get$first(propertyLines));
          else {
            builder.write$1(0, propertyRender);
            if (!C.JSString_methods.endsWith$1(propertyRender, _s1_))
              builder.write$1(0, _s1_);
          }
        } else {
          t4 = builder._nextPrefixOtherLines;
          t4 = H.S(t4 == null ? builder._prefixOtherLines : t4) + propertyStyle.prefixLineOne;
          t5 = builder._nextPrefixOtherLines;
          builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(property, config, t4, H.S(t5 == null ? builder._prefixOtherLines : t5) + propertyStyle.childLinkSpace + propertyStyle.prefixOtherLines));
        }
      }
      if (t4 !== 0)
        builder.write$1(0, config.afterProperties);
      builder.write$1(0, "");
      if (t1)
        builder.write$1(0, config.lineBreak);
      prefixChildrenRaw = H.S(_box_0.prefixOtherLines) + t2;
      if (children.length === 0 && config.addBlankLineIfNoChildren && builder.get$requiresMultipleLines() && J.trimRight$0$s(builder.get$prefixOtherLines()).length !== 0)
        builder.write$1(0, config.lineBreak);
      if (children.length !== 0 && config.showChildren) {
        if (config.isBlankLineBetweenPropertiesAndChildren && properties.length !== 0 && C.JSArray_methods.get$first(children).get$textTreeConfiguration().isBlankLineBetweenPropertiesAndChildren)
          builder.write$1(0, config.lineBreak);
        builder._prefixOtherLines = _box_0.prefixOtherLines;
        builder._nextPrefixOtherLines = null;
        for (t1 = type$.DiagnosticsNode, t2 = config.lineBreak, t3 = builder.wrapWidth, i = 0; i < children.length; ++i) {
          child = children[i];
          childStyle = child == null ? _null : child.get$style(child);
          childConfig = childStyle === C.DiagnosticsTreeStyle_8 || childStyle === C.DiagnosticsTreeStyle_9 ? config : child.get$textTreeConfiguration();
          t4 = children.length;
          if (i === t4 - 1) {
            lastChildPrefixLineOne = prefixChildrenRaw + childConfig.prefixLastChildLineOne;
            t4 = childConfig.childLinkSpace;
            childPrefixOtherLines = prefixChildrenRaw + t4 + childConfig.prefixOtherLines;
            builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(child, config, lastChildPrefixLineOne, childPrefixOtherLines));
            t5 = childConfig.footer;
            if (t5.length !== 0) {
              builder._prefixOtherLines = prefixChildrenRaw;
              builder._nextPrefixOtherLines = null;
              builder.write$1(0, t4 + t5);
              t4 = childConfig.manditoryFooter;
              if (t4.length !== 0)
                builder.writeStretched$2(t4, Math.max(t3, 65 + childPrefixOtherLines.length));
              builder.write$1(0, t2);
            }
          } else {
            t5 = i + 1;
            if (t5 >= t4)
              return H.ioore(children, t5);
            t5 = t1._as(children[t5]);
            childStyle = t5 == null ? _null : t5.get$style(t5);
            nextChildStyle = childStyle === C.DiagnosticsTreeStyle_8 || childStyle === C.DiagnosticsTreeStyle_9 ? config : t5.get$textTreeConfiguration();
            childPrefixLineOne = prefixChildrenRaw + childConfig.prefixLineOne;
            childPrefixOtherLines = prefixChildrenRaw + nextChildStyle.linkCharacter + childConfig.prefixOtherLines;
            builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(child, config, childPrefixLineOne, childPrefixOtherLines));
            t4 = childConfig.footer;
            if (t4.length !== 0) {
              builder._prefixOtherLines = prefixChildrenRaw;
              builder._nextPrefixOtherLines = null;
              builder.write$1(0, childConfig.linkCharacter + t4);
              t4 = childConfig.manditoryFooter;
              if (t4.length !== 0)
                builder.writeStretched$2(t4, Math.max(t3, 65 + childPrefixOtherLines.length));
              builder.write$1(0, t2);
            }
          }
        }
      }
      if (parentConfiguration == null && config.manditoryFooter.length !== 0) {
        builder.writeStretched$2(config.manditoryFooter, builder.wrapWidth);
        builder.write$1(0, config.lineBreak);
      }
      if (builder._currentLine._contents.length !== 0)
        builder._finalizeLine$1(false);
      t1 = builder.__fake_flutter$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  U.TextTreeRenderer_render_visitor.prototype = {
    call$1: function(node) {
      var t1, t2, t3, t4, _i, child, t5;
      for (t1 = node.getChildren$0(), t2 = t1.length, t3 = this._box_0, t4 = this.descendants, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t5 = t3.lines;
        if (t5 < 25) {
          ++t3.depth;
          C.JSArray_methods.add$1(t4, H.S(t3.prefixOtherLines) + C.JSString_methods.$mul("  ", t3.depth) + child.toString$0(0));
          if (t3.depth < 5)
            this.call$1(child);
          --t3.depth;
        } else if (t5 === 25)
          C.JSArray_methods.add$1(t4, H.S(t3.prefixOtherLines) + "  ...(descendants list truncated after " + t3.lines + " lines)");
        ++t3.lines;
      }
    },
    $signature: 247
  };
  U.TextTreeRenderer_render_closure.prototype = {
    call$1: function(n) {
      var t1;
      type$.DiagnosticsNode._as(n);
      t1 = n.get$level(n);
      return t1.index >= this.$this._minLevel.index;
    },
    $signature: 248
  };
  U.DiagnosticsNode.prototype = {
    get$level: function(_) {
      return C.DiagnosticLevel_3;
    },
    get$emptyBodyDescription: function() {
      return null;
    },
    get$allowWrap: function() {
      return false;
    },
    get$allowNameWrap: function() {
      return false;
    },
    toString$1$minLevel: function(_, minLevel) {
      var description, t1, _this = this;
      if (_this.get$style(_this) === C.DiagnosticsTreeStyle_8)
        return _this.toStringDeep$2$minLevel$parentConfiguration(minLevel, null);
      description = _this.toDescription$1$parentConfiguration(null);
      t1 = _this.name;
      if (t1 == null || t1.length === 0 || !_this.showName)
        return description;
      if (J.contains$1$asx(description, "\n")) {
        t1 = H.S(t1);
        t1 = t1 + ":\n" + description;
      } else {
        t1 = H.S(t1);
        t1 = t1 + ": " + description;
      }
      return t1;
    },
    toString$0: function($receiver) {
      return this.toString$1$minLevel($receiver, C.DiagnosticLevel_3);
    },
    get$textTreeConfiguration: function() {
      switch (this.get$style(this)) {
        case C.DiagnosticsTreeStyle_0:
          return null;
        case C.DiagnosticsTreeStyle_3:
          return $.$get$denseTextConfiguration();
        case C.DiagnosticsTreeStyle_1:
          return $.$get$sparseTextConfiguration();
        case C.DiagnosticsTreeStyle_2:
          return $.$get$dashedTextConfiguration();
        case C.DiagnosticsTreeStyle_6:
          return $.$get$whitespaceTextConfiguration();
        case C.DiagnosticsTreeStyle_4:
          return $.$get$transitionTextConfiguration();
        case C.DiagnosticsTreeStyle_8:
          return $.$get$singleLineTextConfiguration();
        case C.DiagnosticsTreeStyle_9:
          return $.$get$errorPropertyTextConfiguration();
        case C.DiagnosticsTreeStyle_10:
          return $.$get$shallowTextConfiguration();
        case C.DiagnosticsTreeStyle_5:
          return $.$get$errorTextConfiguration();
        case C.DiagnosticsTreeStyle_11:
          return $.$get$whitespaceTextConfiguration();
        case C.DiagnosticsTreeStyle_7:
          return $.$get$flatTextConfiguration();
      }
      return null;
    },
    toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines: function(minLevel, parentConfiguration, prefixLineOne, prefixOtherLines) {
      return new U.TextTreeRenderer(65, minLevel).render$4$parentConfiguration$prefixLineOne$prefixOtherLines(this, parentConfiguration, prefixLineOne, prefixOtherLines);
    },
    toStringDeep$2$minLevel$parentConfiguration: function(minLevel, parentConfiguration) {
      return this.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, parentConfiguration, "", null);
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$style: function(receiver) {
      return this.style;
    }
  };
  U.DiagnosticsProperty.prototype = {
    toDescription$1$parentConfiguration: function(parentConfiguration) {
      var t2, v, result, _this = this,
        t1 = _this._description;
      if (t1 != null)
        return _this._addTooltip$1(t1);
      _this._maybeCacheValue$0();
      if (_this.__fake_flutter$_exception != null) {
        _this._maybeCacheValue$0();
        return "EXCEPTION (" + J.get$runtimeType$(_this.__fake_flutter$_exception).toString$0(0) + ")";
      }
      t1 = _this.ifNull;
      if (t1 != null) {
        _this._maybeCacheValue$0();
        t2 = _this._value == null;
      } else
        t2 = false;
      if (t2)
        return _this._addTooltip$1(t1);
      _this._maybeCacheValue$0();
      v = _this._value;
      result = v instanceof U.DiagnosticableTree ? H._asStringS(J.$index$asx(v.json, "description")) : J.toString$0$(v);
      if (result == null)
        result = "";
      return _this._addTooltip$1(result);
    },
    _addTooltip$1: function(text) {
      return text;
    },
    get$value: function(_) {
      this._maybeCacheValue$0();
      return this._value;
    },
    _maybeCacheValue$0: function() {
      return;
    },
    get$level: function(_) {
      var _this = this,
        t1 = _this._defaultLevel;
      if (t1 === C.DiagnosticLevel_0)
        return t1;
      _this._maybeCacheValue$0();
      if (_this.__fake_flutter$_exception != null)
        return C.DiagnosticLevel_7;
      _this._maybeCacheValue$0();
      return t1;
    },
    getProperties$0: function(_) {
      return C.List_empty3;
    },
    getChildren$0: function() {
      return C.List_empty3;
    },
    get$allowWrap: function() {
      return this.allowWrap;
    },
    get$allowNameWrap: function() {
      return true;
    }
  };
  U.DiagnosticableNode.prototype = {
    get$builder: function() {
      var t1, _this = this;
      if (_this._cachedBuilder == null) {
        t1 = new U.DiagnosticPropertiesBuilder(H.setRuntimeTypeInfo([], type$.JSArray_DiagnosticsNode));
        _this._cachedBuilder = t1;
        _this.value.debugFillProperties$1(t1);
      }
      return _this._cachedBuilder;
    },
    get$style: function(_) {
      var t1 = this.style;
      if (t1 == null) {
        this.get$builder().toString;
        t1 = C.DiagnosticsTreeStyle_1;
      }
      return t1;
    },
    get$emptyBodyDescription: function() {
      var t1 = this.get$builder();
      t1.toString;
      return null;
    },
    getProperties$0: function(_) {
      var t1 = this.get$builder();
      return t1.properties;
    },
    getChildren$0: function() {
      return C.List_empty3;
    },
    toDescription$1$parentConfiguration: function(parentConfiguration) {
      return H._asStringS(J.$index$asx(this.value.json, "description"));
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  U.DiagnosticableTreeNode.prototype = {
    getChildren$0: function() {
      var t1 = this.value.debugDescribeChildren$0();
      return t1;
    }
  };
  U.DiagnosticPropertiesBuilder.prototype = {};
  U.Diagnosticable.prototype = {};
  U.DiagnosticableMixin.prototype = {
    toString$0: function(_) {
      var t1 = H._asStringS(J.$index$asx(this.json, "description"));
      return t1;
    },
    debugFillProperties$1: function(properties) {
    }
  };
  U.DiagnosticableTree.prototype = {
    toDiagnosticsNode$2$name$style: function($name, style) {
      return new U.DiagnosticableTreeNode(this, $name, true, true, null, style);
    }
  };
  U.TextStyle.prototype = {
    merge$1: function(other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return _this;
      t1 = other.color;
      t2 = other.fontFamily;
      t3 = other.fontSize;
      t4 = other.fontWeight;
      t5 = other.decoration;
      if (t1 == null)
        t1 = _this.color;
      if (t2 == null)
        t2 = _this.fontFamily;
      if (t3 == null)
        t3 = _this.fontSize;
      if (t4 == null)
        t4 = _this.fontWeight;
      if (t5 == null)
        t5 = _this.decoration;
      return U.TextStyle$(t1, null, t5, _this.decorationColor, _this.decorationStyle, t2, t3, _this.fontStyle, t4, _this.height, true, _this.letterSpacing, _this.textBaseline, _this.wordSpacing);
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, H.getRuntimeType(_this)))
        return false;
      type$.TextStyle._as(other);
      if (_this.color == other.color)
        if (_this.fontFamily == other.fontFamily)
          if (_this.fontSize == other.fontSize)
            if (_this.fontWeight == other.fontWeight)
              if (J.$eq$(_this.decoration, other.decoration))
                t1 = true;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return S.hashValues(true, _this.color, _this.fontFamily, _this.fontSize, _this.fontWeight, _this.fontStyle, _this.letterSpacing, _this.wordSpacing, _this.textBaseline, _this.height, _this.decoration, _this.decorationColor, _this.decorationStyle);
    }
  };
  U._Diagnosticable_Object_DiagnosticableMixin.prototype = {};
  S.Color.prototype = {
    get$alpha: function(_) {
      return (4278190080 & this.value) >>> 24;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, H.getRuntimeType(this)))
        return false;
      type$.Color._as(other);
      return this.value === other.get$value(other);
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this.value);
    },
    toString$0: function(_) {
      return H.throwExpression("Warning: do not add colors directly to HTML");
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  S.MaterialColor.prototype = {
    get$shade400: function() {
      return this._swatch.$index(0, H._instanceType(this)._eval$1("ColorSwatch.T")._as(400));
    },
    get$shade500: function() {
      return this._swatch.$index(0, H._instanceType(this)._eval$1("ColorSwatch.T")._as(500));
    }
  };
  S.MaterialAccentColor.prototype = {};
  S.ColorSwatch.prototype = {
    $index: function(_, index) {
      return this._swatch.$index(0, H._instanceType(this)._eval$1("ColorSwatch.T")._as(index));
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, H.getRuntimeType(_this)))
        return false;
      H._instanceType(_this)._eval$1("ColorSwatch<ColorSwatch.T>")._as(other);
      return _this.super$Color$$eq(0, other) && _this._swatch === other._swatch;
    },
    get$hashCode: function(_) {
      return S.hashValues(H.getRuntimeType(this), this.value, this._swatch, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return H.getRuntimeType(this).toString$0(0) + "(primary value: " + H.S(this.super$Color$toString(0)) + ")";
    }
  };
  S.OffsetBase.prototype = {
    $lt: function(_, other) {
      var t1, t2;
      type$.OffsetBase._as(other);
      t1 = this._dx;
      t2 = other.get$_dx();
      if (typeof t1 !== "number")
        return t1.$lt();
      return C.JSNumber_methods.$lt(t1, t2) && C.JSNumber_methods.$lt(this._dy, other.get$_dy());
    },
    $gt: function(_, other) {
      var t1, t2;
      type$.OffsetBase._as(other);
      t1 = this._dx;
      t2 = other.get$_dx();
      if (typeof t1 !== "number")
        return t1.$gt();
      return C.JSNumber_methods.$gt(t1, t2) && C.JSNumber_methods.$gt(this._dy, other.get$_dy());
    },
    $ge: function(_, other) {
      var t1, t2;
      type$.OffsetBase._as(other);
      t1 = this._dx;
      t2 = other.get$_dx();
      if (typeof t1 !== "number")
        return t1.$gt();
      return C.JSNumber_methods.$gt(t1, t2) && C.JSNumber_methods.$ge(this._dy, other.get$_dy());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof S.OffsetBase))
        return false;
      return this._dx == other._dx && this._dy === other._dy;
    },
    get$hashCode: function(_) {
      return S.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = H.getRuntimeType(this).toString$0(0) + "(",
        t2 = this._dx;
      t1 = t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)) + ", ";
      t2 = C.JSNumber_methods.toStringAsFixed$1(this._dy, 1);
      return t1 + t2 + ")";
    }
  };
  S.Offset.prototype = {
    $sub: function(_, other) {
      var t1, t2;
      type$.Offset._as(other);
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new S.Offset(t1 - t2, this._dy - other._dy);
    },
    $add: function(_, other) {
      var t1, t2;
      type$.Offset._as(other);
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new S.Offset(t1 + t2, this._dy + other._dy);
    },
    $div: function(_, operand) {
      var t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$div();
      return new S.Offset(t1 / operand, this._dy / operand);
    },
    $and: function(_, other) {
      var t1, t2, t3;
      type$.Size._as(other);
      t1 = this._dx;
      t2 = this._dy;
      t3 = other._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return new S.Rect(t1, t2, t1 + t3, t2 + other._dy);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof S.Offset))
        return false;
      return this._dx == other._dx && this._dy === other._dy;
    },
    get$hashCode: function(_) {
      return S.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._dx;
      t1 = "Offset(" + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)) + ", ";
      t2 = C.JSNumber_methods.toStringAsFixed$1(this._dy, 1);
      return t1 + t2 + ")";
    }
  };
  S.Size.prototype = {
    $sub: function(_, other) {
      var t1, t2;
      type$.OffsetBase._as(other);
      t1 = this._dx;
      t2 = other.get$width(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      return new S.Offset(C.JSNumber_methods.$sub(t1, t2), C.JSNumber_methods.$sub(this._dy, other.get$height(other)));
    },
    $add: function(_, other) {
      var t1, t2;
      type$.Offset._as(other);
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new S.Size(t1 + t2, this._dy + other._dy);
    },
    $div: function(_, operand) {
      var t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$div();
      return new S.Size(t1 / operand, this._dy / operand);
    },
    contains$1: function(_, offset) {
      type$.Offset._as(offset);
      return offset.get$dx(offset).$ge(0, 0) && offset.get$dx(offset).$lt(0, this._dx) && offset.get$dy(offset).$ge(0, 0) && offset.get$dy(offset).$lt(0, this._dy);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof S.Size))
        return false;
      return this._dx == other._dx && this._dy === other._dy;
    },
    get$hashCode: function(_) {
      return S.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._dx;
      t1 = "Size(" + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)) + ", ";
      t2 = C.JSNumber_methods.toStringAsFixed$1(this._dy, 1);
      return t1 + t2 + ")";
    }
  };
  S.Rect.prototype = {
    inflate$1: function(delta) {
      var _this = this,
        t1 = _this.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      return new S.Rect(t1 - delta, _this.top - delta, _this.right + delta, _this.bottom + delta);
    },
    intersect$1: function(other) {
      var _this = this;
      return new S.Rect(Math.max(H.checkNum(_this.left), H.checkNum(other.left)), Math.max(_this.top, other.top), Math.min(_this.right, other.right), Math.min(_this.bottom, other.bottom));
    },
    overlaps$1: function(other) {
      var t2, _this = this,
        t1 = other.left;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (!(_this.right <= t1)) {
        t1 = other.right;
        t2 = _this.left;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 <= t2;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        return false;
      if (_this.bottom <= other.top || other.bottom <= _this.top)
        return false;
      return true;
    },
    get$centerLeft: function() {
      var t1 = this.top;
      return new S.Offset(this.left, t1 + (this.bottom - t1) / 2);
    },
    contains$1: function(_, offset) {
      var t1, t2, _this = this;
      type$.Offset._as(offset);
      t1 = offset._dx;
      t2 = _this.left;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2)
        if (t1 < _this.right) {
          t1 = offset._dy;
          t1 = t1 >= _this.top && t1 < _this.bottom;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!H.getRuntimeType(_this).$eq(0, J.get$runtimeType$(other)))
        return false;
      type$.Rect._as(other);
      return _this.left == other.left && _this.top === other.top && _this.right === other.right && _this.bottom === other.bottom;
    },
    get$hashCode: function(_) {
      var _this = this;
      return S.hashValues(_this.left, _this.top, _this.right, _this.bottom, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var _this = this;
      return "Rect.fromLTRB(" + J.toStringAsFixed$1$n(_this.left, 1) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.top, 1) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.right, 1) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.bottom, 1) + ")";
    }
  };
  S._HashEnd.prototype = {};
  S.FontWeight.prototype = {
    toString$0: function(_) {
      return C.Map_yXAeS.$index(0, 6);
    }
  };
  F.GtagEvent.prototype = {};
  F.GtagException.prototype = {};
  G.HtmlProgressElement.prototype = {
    get$value: function(_) {
      return 0;
    }
  };
  G.HtmlSpinner.prototype = {
    remove$0: function(_) {
      return J.remove$0$ax(this.element);
    }
  };
  G.HtmlSelectableList.prototype = {
    selectedItem$0: function() {
      var childrenElements, i, t1;
      if (this._selectedElement != null) {
        childrenElements = J.get$children$x(this.element);
        i = 0;
        while (true) {
          t1 = childrenElements.get$length(childrenElements);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.get$classes$x(childrenElements.$index(0, i)).contains$1(0, "selected"))
            return J.$index$asx(this.items, i);
          ++i;
        }
      }
      return null;
    },
    setItems$3$scrollSelectionIntoView$selection: function(items, scrollSelectionIntoView, selection) {
      var t2, renderer, _this = this,
        t1 = _this.$ti;
      t1._eval$1("List<1>")._as(items);
      t1 = t1._precomputed1;
      t1._as(selection);
      _this.set$items(0, items);
      t2 = _this._selectedElement;
      _this._selectedElement = null;
      if (selection == null)
        _this._hadClicked = false;
      renderer = _this.renderer;
      if (renderer == null)
        renderer = H.instantiate1(G.html_custom___defaultRenderer$closure(), t1);
      J.get$children$x(_this.element).clear$0(0);
      _this.add$1(0, J.map$1$1$ax(items, new G.HtmlSelectableList_setItems_closure(_this, renderer, selection, scrollSelectionIntoView), type$.CoreElement).toList$0(0));
      if (t2 != null) {
        t1 = _this._selectedElement;
        if (t1 == null)
          _this._selectionController.add$1(0, null);
        else
          _this._html_custom$_select$2(t1, selection);
      }
      _this._itemsChangedController.add$1(0, null);
    },
    setItems$1: function(items) {
      return this.setItems$3$scrollSelectionIntoView$selection(items, false, null);
    },
    setItems$2$selection: function(items, selection) {
      return this.setItems$3$scrollSelectionIntoView$selection(items, false, selection);
    },
    setReplace$2: function(index, item) {
      var t2, renderer, element, _this = this,
        t1 = _this.$ti._precomputed1;
      t1._as(item);
      t2 = _this._selectedElement;
      if (t2 != null)
        J.get$classes$x(t2.get$element()).toggle$2(0, "selected", false);
      _this._selectedElement = null;
      renderer = _this.renderer;
      element = _this._hookup$3(renderer == null ? H.instantiate1(G.html_custom___defaultRenderer$closure(), t1) : renderer, item, item);
      _this.replace$2(0, index, element);
      _this._html_custom$_select$2(element, item);
      return element;
    },
    _hookup$3: function(renderer, item, selection) {
      var element, _this = this,
        t1 = _this.$ti;
      t1._eval$1("CoreElement(1)")._as(renderer);
      t1 = t1._precomputed1;
      t1._as(item);
      t1._as(selection);
      element = renderer.call$1(item);
      element.click$1(0, new G.HtmlSelectableList__hookup_closure(_this, element, item));
      element.dblclick$1(new G.HtmlSelectableList__hookup_closure0(_this, item));
      if (J.$eq$(selection, item))
        _this._html_custom$_select$2(element, item);
      return element;
    },
    _html_custom$_select$4$clear$clicked: function(element, item, clear, clicked) {
      var t1, _this = this,
        _s8_ = "selected";
      _this.$ti._precomputed1._as(item);
      t1 = _this._selectedElement;
      if (t1 != null)
        J.get$classes$x(t1.get$element()).toggle$2(0, _s8_, false);
      if (clear) {
        element = null;
        item = null;
      }
      _this._selectedElement = element;
      t1 = element == null;
      if (!t1)
        J.get$classes$x(element.get$element()).toggle$2(0, _s8_, true);
      if (!t1)
        element.scrollIntoView$0(0);
      _this._selectionController.add$1(0, item);
      _this._hadClicked = clicked;
    },
    _html_custom$_select$2: function(element, item) {
      return this._html_custom$_select$4$clear$clicked(element, item, false, false);
    },
    set$items: function(_, items) {
      this.items = this.$ti._eval$1("List<1>")._as(items);
    },
    set$renderer: function(renderer) {
      this.renderer = this.$ti._eval$1("CoreElement(1)")._as(renderer);
    }
  };
  G.HtmlSelectableList_setItems_closure.prototype = {
    call$1: function(item) {
      var t2, element, _this = this,
        t1 = _this.$this;
      t1.$ti._precomputed1._as(item);
      t2 = _this.selection;
      element = t1._hookup$3(_this.renderer, item, t2);
      if (_this.scrollSelectionIntoView && J.$eq$(t2, item))
        t1._selectedElement = element;
      return element;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("CoreElement(1)");
    }
  };
  G.HtmlSelectableList__hookup_closure.prototype = {
    call$0: function() {
      this.$this._html_custom$_select$4$clear$clicked(this.element, this.item, false, true);
    },
    $signature: 0
  };
  G.HtmlSelectableList__hookup_closure0.prototype = {
    call$0: function() {
      this.$this._doubleClickController.add$1(0, this.item);
    },
    $signature: 0
  };
  G.ChildProvider.prototype = {};
  G.HtmlSelectableTreeNodeItem.prototype = {};
  G.HtmlSelectableTree.prototype = {
    setItems$1: function(items) {
      var t1, _this = this;
      _this.$ti._eval$1("List<1>")._as(items);
      _this.set$items(0, items);
      t1 = _this._selectedItem;
      _this.set$_selectedItem(null);
      J.get$children$x(_this.element).clear$0(0);
      _this.set$treeNodes(_this._buildTree$3(items, _this, null));
      if (t1 != null && _this._selectedItem == null)
        _this._selectionController.add$1(0, null);
    },
    _addItemToTree$2: function(container, item) {
      var renderer, obj, element, toggle, childContainer, _this = this, _null = null, t1 = {},
        t2 = _this.$ti,
        t3 = t2._precomputed1;
      t3._as(item);
      renderer = _this.renderer;
      t3 = (renderer == null ? H.instantiate1(G.html_custom___defaultRenderer$closure(), t3) : renderer).call$1(item);
      obj = new X.TreeNode(new G.HtmlSelectableTreeNodeItem(t3, item, t2._eval$1("HtmlSelectableTreeNodeItem<1>")), H.setRuntimeTypeInfo([], t2._eval$1("JSArray<TreeNode<HtmlSelectableTreeNodeItem<1>>>")), t2._eval$1("TreeNode<HtmlSelectableTreeNodeItem<1>>"));
      t3.click$1(0, new G.HtmlSelectableTree__addItemToTree_closure(_this, obj));
      element = A.CoreElement$("div", _null, _null, _null, _null);
      element.add$1(0, t3);
      if (_this.childProvider.hasChildren$1(item)) {
        toggle = G.HtmlTreeToggle$(false, false);
        J.get$children$x(t3.get$element()).insert$2(0, 0, toggle.element);
        t1.hasPopulated = false;
        childContainer = A.CoreElement$("ul", _null, "tree-list", _null, _null);
        element.add$1(0, childContainer);
        childContainer.attribute$2("hidden", true);
        obj.set$expand(0, new G.HtmlSelectableTree__addItemToTree_closure0(toggle));
        obj.set$collapse(0, new G.HtmlSelectableTree__addItemToTree_closure1(toggle));
        t2 = toggle._openController;
        new P._BroadcastStream(t2, H._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new G.HtmlSelectableTree__addItemToTree_closure2(t1, _this, obj, childContainer, item));
      } else
        J.get$children$x(t3.get$element()).insert$2(0, 0, G.HtmlTreeToggle$(true, false).element);
      container.add$1(0, element);
      return obj;
    },
    _buildTree$3: function(results, container, $parent) {
      var children, _this = this,
        t1 = _this.$ti;
      t1._eval$1("List<1>")._as(results);
      t1 = t1._eval$1("TreeNode<HtmlSelectableTreeNodeItem<1>>");
      t1._as($parent);
      children = J.map$1$1$ax(results, new G.HtmlSelectableTree__buildTree_closure(_this, container), t1).toList$0(0);
      _this.connectNodes$3($parent, children, new G.HtmlSelectableTree__buildTree_closure0(_this));
      return children;
    },
    select$2$clear: function(_, node, clear) {
      var t1, _this = this, _null = null,
        _s8_ = "selected";
      _this.$ti._eval$1("TreeNode<HtmlSelectableTreeNodeItem<1>>")._as(node);
      t1 = _this._selectedItem;
      t1 = t1 == null ? _null : t1.data;
      t1 = t1 == null ? _null : t1.element;
      if (t1 != null)
        J.get$classes$x(t1.get$element()).toggle$2(0, _s8_, false);
      if (clear)
        node = _null;
      _this.set$_selectedItem(node);
      t1 = _this._selectedItem;
      t1 = t1 == null ? _null : t1.data;
      t1 = t1 == null ? _null : t1.element;
      if (t1 != null)
        J.get$classes$x(t1.get$element()).toggle$2(0, _s8_, true);
      t1 = _this._selectedItem;
      t1 = t1 == null ? _null : t1.data;
      t1 = t1 == null ? _null : t1.element;
      if (t1 != null)
        t1.scrollIntoView$0(0);
      t1 = node == null ? _null : node.data;
      t1 = t1 == null ? _null : t1.item;
      _this._selectionController.add$1(0, t1);
    },
    select$1: function($receiver, node) {
      return this.select$2$clear($receiver, node, false);
    },
    set$items: function(_, items) {
      this.items = this.$ti._eval$1("List<1>")._as(items);
    },
    set$treeNodes: function(treeNodes) {
      this.treeNodes = this.$ti._eval$1("List<TreeNode<HtmlSelectableTreeNodeItem<1>>>")._as(treeNodes);
    },
    set$renderer: function(renderer) {
      this.renderer = this.$ti._eval$1("CoreElement(1)")._as(renderer);
    },
    set$childProvider: function(childProvider) {
      this.childProvider = this.$ti._eval$1("ChildProvider<1>")._as(childProvider);
    },
    set$_selectedItem: function(_selectedItem) {
      this._selectedItem = this.$ti._eval$1("TreeNode<HtmlSelectableTreeNodeItem<1>>")._as(_selectedItem);
    }
  };
  G.HtmlSelectableTree__addItemToTree_closure.prototype = {
    call$0: function() {
      var t1 = this.obj;
      this.$this.select$2$clear(0, t1, J.get$classes$x(t1.data.element.get$element()).contains$1(0, "selected"));
    },
    $signature: 0
  };
  G.HtmlSelectableTree__addItemToTree_closure0.prototype = {
    call$0: function() {
      return this.toggle.toggle$1$onlyExpand(0, true);
    },
    $signature: 1
  };
  G.HtmlSelectableTree__addItemToTree_closure1.prototype = {
    call$0: function() {
      return this.toggle.toggle$1$onlyCollapse(0, true);
    },
    $signature: 1
  };
  G.HtmlSelectableTree__addItemToTree_closure2.prototype = {
    call$1: function($open) {
      var t1, t2, t3, _this = this;
      H._asBoolS($open);
      t1 = _this.obj;
      t1.isExpanded = $open;
      t2 = _this.childContainer;
      t2.attribute$2("hidden", !H.boolConversionCheck($open));
      t3 = _this._box_0;
      if (!t3.hasPopulated) {
        t3.hasPopulated = true;
        t3 = _this.$this;
        t3.childProvider.getChildren$1(_this.item).then$1$1(new G.HtmlSelectableTree__addItemToTree__closure(t3, t2, t1), type$.Null).catchError$1(new G.HtmlSelectableTree__addItemToTree__closure0());
      }
    },
    $signature: 11
  };
  G.HtmlSelectableTree__addItemToTree__closure.prototype = {
    call$1: function(results) {
      var t1 = this.$this;
      t1._buildTree$3(t1.$ti._eval$1("List<1>")._as(results), this.childContainer, this.obj);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(List<1>)");
    }
  };
  G.HtmlSelectableTree__addItemToTree__closure0.prototype = {
    call$1: function(e) {
    },
    $signature: 2
  };
  G.HtmlSelectableTree__buildTree_closure.prototype = {
    call$1: function(result) {
      var t1 = this.$this;
      return t1._addItemToTree$2(this.container, t1.$ti._precomputed1._as(result));
    },
    $signature: function() {
      return this.$this.$ti._eval$1("TreeNode<HtmlSelectableTreeNodeItem<1>>(1)");
    }
  };
  G.HtmlSelectableTree__buildTree_closure0.prototype = {
    call$1: function(node) {
      var t1 = this.$this;
      t1.$ti._eval$1("HtmlSelectableTreeNodeItem<1>")._as(node);
      return t1.childProvider.hasChildren$1(node.item);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("bool(HtmlSelectableTreeNodeItem<1>)");
    }
  };
  G.HtmlTreeToggle.prototype = {
    toggle$2$onlyCollapse$onlyExpand: function(_, onlyCollapse, onlyExpand) {
      var t1, t2, t3, _this = this;
      if (!(onlyExpand && _this._isOpen))
        t1 = onlyCollapse && !_this._isOpen;
      else
        t1 = true;
      if (t1)
        return;
      t1 = !_this._isOpen;
      _this._isOpen = t1;
      _this._openController.add$1(0, t1);
      t1 = _this._isOpen;
      t2 = _this.element;
      t3 = J.getInterceptor$x(t2);
      t3.get$classes(t2).toggle$2(0, "octicon-triangle-right", !t1);
      t1 = _this._isOpen;
      t3.get$classes(t2).toggle$2(0, "octicon-triangle-down", t1);
    },
    toggle$0: function($receiver) {
      return this.toggle$2$onlyCollapse$onlyExpand($receiver, false, false);
    },
    toggle$1$onlyCollapse: function($receiver, onlyCollapse) {
      return this.toggle$2$onlyCollapse$onlyExpand($receiver, onlyCollapse, false);
    },
    toggle$1$onlyExpand: function($receiver, onlyExpand) {
      return this.toggle$2$onlyCollapse$onlyExpand($receiver, false, onlyExpand);
    }
  };
  G.HtmlActionButton.prototype = {
    get$element: function() {
      return this._html_custom$_element;
    },
    $isCoreElementView: 1,
    get$id: function(receiver) {
      return this.id;
    }
  };
  G._HtmlSelectableTree_CoreElement_Tree.prototype = {};
  G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator.prototype = {};
  G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator.prototype = {};
  U.HtmlDragScroll.prototype = {
    _handleMouseDrags$1: function(dragged) {
      var t2, t3, t1 = {};
      t1.lastY = t1.lastX = null;
      t2 = J.get$onMouseDown$x(dragged);
      t3 = t2.$ti;
      t1 = t3._eval$1("~(1)")._as(new U.HtmlDragScroll__handleMouseDrags_closure(t1, this, dragged));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t2._target, t2._eventType, t1, false, t3._precomputed1);
    },
    _handleTouchDrags$1: function(dragged) {
      var t2, t3, t1 = {};
      t1.lastY = t1.lastX = null;
      t2 = J.get$onTouchStart$x(dragged);
      t3 = t2.$ti;
      t1 = t3._eval$1("~(1)")._as(new U.HtmlDragScroll__handleTouchDrags_closure(t1, this, dragged));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t2._target, t2._eventType, t1, false, t3._precomputed1);
    },
    set$_onVerticalScroll: function(_onVerticalScroll) {
      this._onVerticalScroll = type$.void_Function._as(_onVerticalScroll);
    },
    set$_mouseMoveListener: function(_mouseMoveListener) {
      this._mouseMoveListener = type$.StreamSubscription_MouseEvent._as(_mouseMoveListener);
    },
    set$_mouseUpListener: function(_mouseUpListener) {
      this._mouseUpListener = type$.StreamSubscription_MouseEvent._as(_mouseUpListener);
    },
    set$_touchMoveListener: function(_touchMoveListener) {
      this._touchMoveListener = type$.StreamSubscription_TouchEvent._as(_touchMoveListener);
    },
    set$_touchEndListener: function(_touchEndListener) {
      this._touchEndListener = type$.StreamSubscription_TouchEvent._as(_touchEndListener);
    }
  };
  U.HtmlDragScroll__handleMouseDrags_closure.prototype = {
    call$1: function($event) {
      var t2, t3, t4, t5,
        t1 = type$.MouseEvent;
      t1._as($event);
      t2 = this.$this;
      t2.wasDragged = false;
      t3 = $event.clientX;
      $event.clientY;
      t4 = this._box_0;
      t4.lastX = t3;
      $event.clientX;
      t4.lastY = $event.clientY;
      $event.preventDefault();
      t3 = window;
      t5 = type$.void_Function_MouseEvent;
      t4 = t5._as(new U.HtmlDragScroll__handleMouseDrags__closure(t4, t2, this.dragged));
      type$.void_Function._as(null);
      t2.set$_mouseMoveListener(W._EventStreamSubscription$(t3, "mousemove", t4, false, t1));
      t2.set$_mouseUpListener(W._EventStreamSubscription$(window, "mouseup", t5._as(new U.HtmlDragScroll__handleMouseDrags__closure0(t2)), false, t1));
    },
    $signature: 6
  };
  U.HtmlDragScroll__handleMouseDrags__closure.prototype = {
    call$1: function($event) {
      var t1, t2, t3, t4, t5, t6;
      type$.MouseEvent._as($event);
      t1 = $event.clientX;
      t2 = $event.clientY;
      t3 = this._box_0;
      t4 = t3.lastX;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t5 = t3.lastY;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t6 = this.dragged;
      t6.scrollLeft = C.JSInt_methods.round$0(C.JSNumber_methods.round$0(t6.scrollLeft) + C.JSNumber_methods.round$0(t4 - t1));
      t4 = C.JSNumber_methods.round$0(t6.scrollTop);
      t5 = C.JSNumber_methods.round$0(t5 - t2);
      t6.scrollTop = C.JSInt_methods.round$0(t4 + t5);
      t4 = this.$this;
      t6 = t4._onVerticalScroll;
      if (t6 != null && t5 !== 0)
        t6.call$0();
      t3.lastX = t1;
      t3.lastY = t2;
      t4.wasDragged = true;
    },
    $signature: 6
  };
  U.HtmlDragScroll__handleMouseDrags__closure0.prototype = {
    call$1: function($event) {
      var t1;
      type$.MouseEvent._as($event);
      t1 = this.$this;
      t1._mouseUpListener.cancel$0(0);
      t1._mouseMoveListener.cancel$0(0);
    },
    $signature: 6
  };
  U.HtmlDragScroll__handleTouchDrags_closure.prototype = {
    call$1: function($event) {
      var t2, touch, t3, t4, t5,
        t1 = type$.TouchEvent;
      t1._as($event);
      t2 = $event.touches;
      touch = (t2 && C.TouchList_methods).get$first(t2);
      t2 = this.$this;
      t2.wasDragged = false;
      t3 = C.JSNumber_methods.round$0(touch.clientX);
      C.JSNumber_methods.round$0(touch.clientY);
      t4 = this._box_0;
      t4.lastX = t3;
      C.JSNumber_methods.round$0(touch.clientX);
      t4.lastY = C.JSNumber_methods.round$0(touch.clientY);
      $event.preventDefault();
      t3 = window;
      t5 = type$.void_Function_TouchEvent;
      t4 = t5._as(new U.HtmlDragScroll__handleTouchDrags__closure(t4, t2, this.dragged));
      type$.void_Function._as(null);
      t2.set$_touchMoveListener(W._EventStreamSubscription$(t3, "touchmove", t4, false, t1));
      t2.set$_touchEndListener(W._EventStreamSubscription$(window, "touchend", t5._as(new U.HtmlDragScroll__handleTouchDrags__closure0(t2)), false, t1));
    },
    $signature: 24
  };
  U.HtmlDragScroll__handleTouchDrags__closure.prototype = {
    call$1: function($event) {
      var newY, t2, t3, t4,
        t1 = type$.TouchEvent._as($event).touches,
        touch = (t1 && C.TouchList_methods).get$first(t1),
        newX = C.JSNumber_methods.round$0(touch.clientX);
      C.JSNumber_methods.round$0(touch.clientY);
      C.JSNumber_methods.round$0(touch.clientX);
      newY = C.JSNumber_methods.round$0(touch.clientY);
      t1 = this._box_0;
      t2 = t1.lastX;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = t1.lastY;
      if (typeof t3 !== "number")
        return t3.$sub();
      t4 = this.dragged;
      t4.scrollLeft = C.JSInt_methods.round$0(C.JSNumber_methods.round$0(t4.scrollLeft) + C.JSNumber_methods.round$0(t2 - newX));
      t2 = C.JSNumber_methods.round$0(t4.scrollTop);
      t3 = C.JSNumber_methods.round$0(t3 - newY);
      t4.scrollTop = C.JSInt_methods.round$0(t2 + t3);
      t2 = this.$this;
      t4 = t2._onVerticalScroll;
      if (t4 != null && t3 !== 0)
        t4.call$0();
      t1.lastX = newX;
      t1.lastY = newY;
      t2.wasDragged = true;
    },
    $signature: 24
  };
  U.HtmlDragScroll__handleTouchDrags__closure0.prototype = {
    call$1: function($event) {
      var t1;
      if (type$.TouchEvent._as($event).touches.length === 0) {
        t1 = this.$this;
        t1._touchEndListener.cancel$0(0);
        t1._touchMoveListener.cancel$0(0);
      }
    },
    $signature: 24
  };
  A.CoreElement.prototype = {
    CoreElement$5$attributes$classes$html$text: function(tag, attributes, classes, html, text) {
      var _this = this;
      if (text != null)
        _this.get$element().textContent = text;
      if (html != null)
        J.set$innerHtml$x(_this.get$element(), html);
      if (classes != null)
        J.get$classes$x(_this.get$element()).addAll$1(0, H.setRuntimeTypeInfo(classes.split(" "), type$.JSArray_String));
      if (attributes != null)
        C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo(attributes.split(" "), type$.JSArray_String), _this.get$attribute());
    },
    get$id: function(_) {
      return this.get$element().getAttribute("id");
    },
    attribute$2: function($name, value) {
      var t1;
      H._asStringS($name);
      if (value == null ? !H.boolConversionCheck(this.get$element().hasAttribute($name)) : value)
        this.get$element().setAttribute($name, "");
      else {
        t1 = this.get$element();
        t1.toString;
        if (typeof $name == "string")
          t1.removeAttribute($name);
      }
    },
    attribute$1: function($name) {
      return this.attribute$2($name, null);
    },
    clazz$2$removeOthers: function(_class, removeOthers) {
      H._asStringS(_class);
      if (J.contains$1$asx(_class, " "))
        throw H.wrapException(P.ArgumentError$("spaces not allowed in class names"));
      J.get$classes$x(this.get$element()).add$1(0, _class);
    },
    clazz$1: function(_class) {
      return this.clazz$2$removeOthers(_class, false);
    },
    add$1: function(_, child) {
      var _this = this;
      if (type$.Iterable_dynamic._is(child))
        return J.map$1$1$ax(child, new A.CoreElement_add_closure(_this), type$.dynamic).toList$0(0);
      else if (child instanceof A.CoreElement)
        J.get$children$x(_this.get$element()).add$1(0, child.get$element());
      else if (type$.CoreElementView._is(child))
        J.get$children$x(_this.get$element()).add$1(0, child.get$element().get$element());
      else if (type$.Element._is(child))
        J.get$children$x(_this.get$element()).add$1(0, child);
      else
        throw H.wrapException(P.ArgumentError$("argument type " + J.get$runtimeType$(child).toString$0(0) + " not supported"));
      return child;
    },
    replace$2: function(_, childIndex, child) {
      var _this = this, t1 = {};
      if (type$.Iterable_dynamic._is(child)) {
        t1.nextIndex = childIndex;
        J.map$1$1$ax(child, new A.CoreElement_replace_closure(t1, _this), type$.dynamic);
      } else if (child instanceof A.CoreElement)
        J.get$children$x(_this.get$element()).$indexSet(0, childIndex, child.get$element());
      else if (type$.CoreElementView._is(child))
        J.get$children$x(_this.get$element()).$indexSet(0, childIndex, child.get$element().get$element());
      else if (type$.Element._is(child))
        J.get$children$x(_this.get$element()).$indexSet(0, childIndex, child);
      else
        throw H.wrapException(P.ArgumentError$("argument type " + J.get$runtimeType$(child).toString$0(0) + " not supported"));
    },
    flex$0: function(_) {
      this.attribute$2("flex", true);
    },
    get$onClick: function(_) {
      var t1 = J.get$onClick$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onClick_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onTouchStart: function(_) {
      var t1 = J.get$onTouchStart$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onTouchStart_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onTouchMove: function(_) {
      var t1 = J.get$onTouchMove$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onTouchMove_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onTouchEnd: function(_) {
      var t1 = J.get$onTouchEnd$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onTouchEnd_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onFocus: function(_) {
      var t1 = J.get$onFocus$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onFocus_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onBlur: function(_) {
      var t1 = J.get$onBlur$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onBlur_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onMouseOver: function(_) {
      var t1 = J.get$onMouseOver$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onMouseOver_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    get$onMouseLeave: function(_) {
      var t1 = J.get$onMouseLeave$x(this.get$element()),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new A.CoreElement_onMouseLeave_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    click$2: function(_, handle, shiftHandle) {
      var t1 = type$.void_Function;
      t1._as(handle);
      t1._as(shiftHandle);
      return this.get$onClick(this).listen$1(new A.CoreElement_click_closure(shiftHandle, handle));
    },
    click$1: function($receiver, handle) {
      return this.click$2($receiver, handle, null);
    },
    dblclick$1: function(handle) {
      var t2, t3, t4,
        t1 = type$.void_Function;
      t1._as(handle);
      t2 = J.get$onDoubleClick$x(this.get$element());
      t3 = t2.$ti;
      t4 = t3._eval$1("~(1)")._as(new A.CoreElement_dblclick_closure(handle));
      t1._as(null);
      return W._EventStreamSubscription$(t2._target, t2._eventType, t4, false, t3._precomputed1);
    },
    focus$1: function(_, handle) {
      type$.void_Function._as(handle);
      return this.get$onFocus(this).listen$1(new A.CoreElement_focus_closure(handle));
    },
    blur$1: function(_, handle) {
      type$.void_Function._as(handle);
      return this.get$onBlur(this).listen$1(new A.CoreElement_blur_closure(handle));
    },
    scrollIntoView$2$bottom$top: function(_, bottom, $top) {
      if ($top)
        J.scrollIntoView$1$x(this.get$element(), C.ScrollAlignment_TOP);
      else
        J.scrollIntoView$0$x(this.get$element());
    },
    scrollIntoView$0: function($receiver) {
      return this.scrollIntoView$2$bottom$top($receiver, false, false);
    },
    dispose$0: function() {
      var exception, _this = this;
      if (_this.get$element().parentElement == null)
        return;
      if (J.get$children$x(_this.get$element().parentElement).contains$1(0, _this.get$element()))
        try {
          J.get$children$x(_this.get$element().parentElement).remove$1(0, _this.get$element());
        } catch (exception) {
          H.unwrapException(exception);
        }
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$element());
    },
    get$element: function() {
      return this.element;
    }
  };
  A.CoreElement_add_closure.prototype = {
    call$1: function(c) {
      return this.$this.add$1(0, c);
    },
    $signature: 4
  };
  A.CoreElement_replace_closure.prototype = {
    call$1: function(c) {
      var t1 = this._box_0,
        t2 = t1.nextIndex;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.nextIndex = t2 + 1;
      this.$this.replace$2(0, t2, c);
    },
    $signature: 2
  };
  A.CoreElement_onClick_closure.prototype = {
    call$1: function(_) {
      type$.MouseEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 62
  };
  A.CoreElement_onTouchStart_closure.prototype = {
    call$1: function(_) {
      type$.TouchEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 63
  };
  A.CoreElement_onTouchMove_closure.prototype = {
    call$1: function(_) {
      type$.TouchEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 63
  };
  A.CoreElement_onTouchEnd_closure.prototype = {
    call$1: function(_) {
      type$.TouchEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 63
  };
  A.CoreElement_onFocus_closure.prototype = {
    call$1: function(_) {
      type$.Event._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 64
  };
  A.CoreElement_onBlur_closure.prototype = {
    call$1: function(_) {
      type$.Event._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 64
  };
  A.CoreElement_onMouseOver_closure.prototype = {
    call$1: function(_) {
      type$.MouseEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 62
  };
  A.CoreElement_onMouseLeave_closure.prototype = {
    call$1: function(_) {
      type$.MouseEvent._as(_);
      return !H.boolConversionCheck(this.$this.get$element().hasAttribute("disabled"));
    },
    $signature: 62
  };
  A.CoreElement_click_closure.prototype = {
    call$1: function(e) {
      var t1;
      type$.MouseEvent._as(e);
      e.stopImmediatePropagation();
      t1 = this.shiftHandle;
      if (t1 != null && H.boolConversionCheck(e.shiftKey))
        t1.call$0();
      else
        this.handle.call$0();
    },
    $signature: 6
  };
  A.CoreElement_dblclick_closure.prototype = {
    call$1: function($event) {
      $event.stopImmediatePropagation();
      this.handle.call$0();
    },
    $signature: 3
  };
  A.CoreElement_focus_closure.prototype = {
    call$1: function(e) {
      type$.Event._as(e).stopImmediatePropagation();
      this.handle.call$0();
    },
    $signature: 3
  };
  A.CoreElement_blur_closure.prototype = {
    call$1: function(e) {
      type$.Event._as(e).stopImmediatePropagation();
      this.handle.call$0();
    },
    $signature: 3
  };
  A.TextField.prototype = {
    get$element: function() {
      return type$.InputElement._as(this.element);
    },
    get$value: function(_) {
      return type$.InputElement._as(this.element).value;
    },
    changed$1: function(handle) {
      var t1, t2, t3;
      type$.void_Function_String._as(handle);
      t1 = this.get$element();
      t1 = (t1 && C.InputElement_methods).get$onKeyUp(t1);
      t2 = t1.$ti;
      t3 = t2._eval$1("~(1)")._as(new A.TextField_changed_closure(this, handle));
      type$.void_Function._as(null);
      return W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
    }
  };
  A.TextField_changed_closure.prototype = {
    call$1: function(e) {
      var t1;
      type$.KeyboardEvent._as(e).stopImmediatePropagation();
      t1 = this.$this;
      this.handle.call$1(type$.InputElement._as(t1.element).value);
    },
    $signature: 13
  };
  A.TrustedHtmlTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
    },
    $isNodeTreeSanitizer: 1
  };
  Y.HtmlIconRenderer.prototype = {
    createElement$0: function(_) {
      var canvasSource = this.createCanvasSource$0(),
        t1 = canvasSource.style,
        t2 = this.icon,
        t3 = "" + t2.get$iconWidth() + "px";
      t1.width = t3;
      t2 = "" + t2.get$iconHeight() + "px";
      t1.height = t2;
      canvasSource.classList.add("flutter-icon");
      return canvasSource;
    },
    get$iconWidth: function() {
      return this.icon.get$iconWidth();
    },
    get$iconHeight: function() {
      return this.icon.get$iconHeight();
    }
  };
  Y._UrlIconRenderer.prototype = {
    get$image: function(_) {
      return this._image;
    },
    createCanvasSource$0: function() {
      var e = document.createElement("img");
      e.src = this.src;
      return e;
    },
    createElement$0: function(_) {
      var t1, t2,
        element = document.createElement("div");
      element.classList.add("flutter-icon");
      t1 = element.style;
      t1.width = "18px";
      t1.height = "18px";
      t2 = "url(" + this.src + ")";
      t1.backgroundImage = t2;
      if (this.icon.invertDark && true) {
        t1 = element.style;
        t1.toString;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, C.CssStyleDeclaration_methods._browserPropertyName$1(t1, "filter"), "invert(1)", "");
      }
      return element;
    },
    loadImage$0: function() {
      var imageElement, t2, t3, _this = this,
        t1 = _this._imageFuture;
      if (t1 != null)
        return t1;
      t1 = new P._Future($.Zone__current, type$._Future_CanvasImageSource);
      imageElement = W.ImageElement_ImageElement(_this.src);
      t2 = type$._ElementEventStreamImpl_Event;
      t3 = t2._eval$1("~(1)")._as(new Y._UrlIconRenderer_loadImage_closure(_this, imageElement, new P._AsyncCompleter(t1, type$._AsyncCompleter_CanvasImageSource)));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(imageElement, "load", t3, false, t2._precomputed1);
      document.head.appendChild(imageElement);
      _this.set$_imageFuture(t1);
      return _this._imageFuture;
    },
    set$_imageFuture: function(_imageFuture) {
      this._imageFuture = type$.Future_CanvasImageSource._as(_imageFuture);
    }
  };
  Y._UrlIconRenderer_loadImage_closure.prototype = {
    call$1: function(e) {
      var t1 = this.imageElement;
      this.$this._image = t1;
      this.completer.complete$1(0, t1);
    },
    $signature: 3
  };
  Y._ColorIconRenderer.prototype = {
    createCanvasSource$0: function() {
      var canvas = Y.createHighDpiCanvas(C.JSInt_methods.toInt$0(18), C.JSInt_methods.toInt$0(18)),
        context = canvas.getContext("2d");
      context.clearRect(0, 0, 18, 18);
      context.fillStyle = Y.colorToCss(C.ThemedColor_Color_4294967295_Color_4278190080);
      context.fillRect(1, 1, 16, 16);
      context.fillStyle = Y.colorToCss(C.ThemedColor_Color_4286611584_Color_4286611584);
      context.fillRect(1, 1, 8, 8);
      context.fillRect(9, 9, 8, 8);
      context.fillStyle = Y.colorToCss(this.icon.color);
      context.fillRect(1, 1, 16, 16);
      context.strokeStyle = Y.colorToCss(C.ThemedColor_Color_4278190080_Color_4290493371);
      context.rect(1, 1, 16, 16);
      context.stroke();
      return canvas;
    },
    get$image: function(_) {
      var t1 = this._image;
      if (t1 != null)
        return t1;
      return this._image = this.createCanvasSource$0();
    },
    loadImage$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CanvasImageSource),
        $async$returnValue, $async$self = this;
      var $async$loadImage$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.get$image($async$self);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadImage$0, $async$completer);
    },
    get$iconWidth: function() {
      return 18;
    },
    get$iconHeight: function() {
      return 18;
    }
  };
  Y._CustomIconRenderer.prototype = {
    createCanvasSource$0: function() {
      var canvas, _this = this,
        t1 = _this.baseIconRenderer,
        baseImage = t1.get$image(t1);
      if (baseImage == null)
        return _this._buildImageAsync$0();
      canvas = _this._createCanvas$0();
      _this._drawIcon$2(canvas, baseImage);
      return canvas;
    },
    get$image: function(_) {
      var _this = this,
        t1 = _this._image;
      if (t1 != null)
        return t1;
      t1 = _this.baseIconRenderer;
      if (t1.get$image(t1) == null)
        return null;
      return _this._image = _this.createCanvasSource$0();
    },
    loadImage$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CanvasImageSource),
        $async$returnValue, $async$self = this, source, canvas;
      var $async$loadImage$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.baseIconRenderer.loadImage$0(), $async$loadImage$0);
            case 3:
              // returning from await.
              source = $async$result;
              canvas = $async$self._createCanvas$0();
              $async$self._drawIcon$2(canvas, source);
              $async$returnValue = canvas;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadImage$0, $async$completer);
    },
    _buildImageAsync$0: function() {
      var canvas = this._createCanvas$0();
      this.baseIconRenderer.loadImage$0().then$1$1(new Y._CustomIconRenderer__buildImageAsync_closure(this, canvas), type$.Null);
      return canvas;
    },
    _createCanvas$0: function() {
      var t1 = this.icon;
      return Y.createHighDpiCanvas(C.JSInt_methods.toInt$0(t1.get$iconWidth()), C.JSInt_methods.toInt$0(t1.get$iconHeight()));
    },
    _drawIcon$2: function(canvas, source) {
      var t1 = canvas.getContext("2d"),
        t2 = this.icon;
      t1.drawImage(source, 0, 0, t2.get$iconWidth(), t2.get$iconHeight());
      t1.strokeStyle = "#231F20";
      t1.font = "arial 8px";
      t1.textBaseline = "middle";
      t1.textAlign = "center";
      C.CanvasRenderingContext2D_methods.fillText$4(t1, t2.text, t2.get$iconWidth() / 2, t2.get$iconHeight() / 2, t2.get$iconWidth());
    }
  };
  Y._CustomIconRenderer__buildImageAsync_closure.prototype = {
    call$1: function(source) {
      this.$this._drawIcon$2(this.canvas, type$.CanvasImageSource._as(source));
    },
    $signature: 44
  };
  Y._MaterialIconRenderer.prototype = {
    get$image: function(_) {
      var t1 = this._image;
      if (t1 != null)
        return t1;
      if (!$._MaterialIconRenderer__fontLoaded)
        return null;
      return this._image = this.createCanvasSource$0();
    },
    loadImage$0: function() {
      var t1, t2;
      if ($._MaterialIconRenderer__fontLoaded) {
        t1 = this.get$image(this);
        t2 = new P._Future($.Zone__current, type$._Future_CanvasImageSource);
        t2._asyncComplete$1(t1);
        return t2;
      }
      t1 = new P._Future($.Zone__current, type$._Future_CanvasElement);
      if ($._MaterialIconRenderer__iconsFont == null) {
        t2 = W.FontFace_FontFace("Material Icons", "url(packages/devtools_app/src/ui/MaterialIcons-Regular.woff2)");
        $._MaterialIconRenderer__iconsFont = t2;
        document.fonts.add(t2);
        t2 = P.promiseToFuture($._MaterialIconRenderer__iconsFont.load(), type$.FontFace);
        $._MaterialIconRenderer__iconsFontFuture = t2;
        t2.then$1$1(new Y._MaterialIconRenderer_loadImage_closure(), type$.Null);
      }
      $._MaterialIconRenderer__iconsFontFuture.then$1$1(new Y._MaterialIconRenderer_loadImage_closure0(this, new P._AsyncCompleter(t1, type$._AsyncCompleter_CanvasElement)), type$.Null);
      return t1;
    },
    createCanvasSource$0: function() {
      var t1 = this.icon,
        canvas = Y.createHighDpiCanvas(C.JSInt_methods.toInt$0(t1.get$iconWidth()), C.JSInt_methods.toInt$0(t1.get$iconHeight())),
        context2D = canvas.getContext("2d");
      context2D.translate(t1.get$iconWidth() / 2, t1.get$iconHeight() / 2);
      t1 = t1.angle;
      if (t1 !== 0)
        context2D.rotate(t1);
      t1 = new Y._MaterialIconRenderer_createCanvasSource__drawIcon(this, context2D);
      if ($._MaterialIconRenderer__fontLoaded)
        t1.call$0();
      else
        this.loadImage$0().then$1$1(new Y._MaterialIconRenderer_createCanvasSource_closure(t1), type$.Null);
      return canvas;
    }
  };
  Y._MaterialIconRenderer_loadImage_closure.prototype = {
    call$1: function(_) {
      type$.FontFace._as(_);
      $._MaterialIconRenderer__fontLoaded = true;
    },
    $signature: 105
  };
  Y._MaterialIconRenderer_loadImage_closure0.prototype = {
    call$1: function(_) {
      var t1, t2;
      type$.FontFace._as(_);
      t1 = this.$this;
      t2 = t1.createCanvasSource$0();
      t1._image = t2;
      this.imageCompleter.complete$1(0, t2);
    },
    $signature: 105
  };
  Y._MaterialIconRenderer_createCanvasSource__drawIcon.prototype = {
    call$0: function() {
      var t1 = this.context2D,
        t2 = this.$this.icon;
      t1.font = "" + t2.fontSize + "px Material Icons";
      t1.fillStyle = Y.colorToCss(t2.color);
      t1.textBaseline = "middle";
      t1.textAlign = "center";
      C.CanvasRenderingContext2D_methods.fillText$4(t1, t2.text, 0, 0, t2.get$iconWidth() + 10);
    },
    $signature: 1
  };
  Y._MaterialIconRenderer_createCanvasSource_closure.prototype = {
    call$1: function(_) {
      type$.CanvasImageSource._as(_);
      this._drawIcon.call$0();
    },
    $signature: 44
  };
  S.DevToolsIcon.prototype = {
    get$iconWidth: function() {
      return 18;
    },
    get$iconHeight: function() {
      return 18;
    }
  };
  S.UrlIcon.prototype = {};
  S.CustomIcon.prototype = {
    get$iconWidth: function() {
      this.kind.toString;
      return 18;
    },
    get$iconHeight: function() {
      this.kind.toString;
      return 18;
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  S.CustomIconMaker.prototype = {
    getCustomIcon$2$kind: function(fromText, kind) {
      var t2, text, t1 = {};
      t1.kind = kind;
      t2 = fromText.length;
      if (t2 === 0)
        return null;
      if (0 >= t2)
        return H.ioore(fromText, 0);
      text = fromText[0].toUpperCase();
      return this.iconCache.putIfAbsent$2(0, text + "_" + kind.name + "_false", new S.CustomIconMaker_getCustomIcon_closure(t1, text, false));
    },
    fromWidgetName$1: function($name) {
      var isPrivate, t1, t2;
      if ($name == null)
        return null;
      isPrivate = C.JSString_methods.startsWith$1($name, "_");
      while (true) {
        t1 = $name.length === 0;
        if (!t1) {
          t2 = C.JSString_methods._codeUnitAt$1($name, 0);
          t2 = !((t2 < 48 || t2 > 57) && t2 !== 95 && t2 !== 36);
        } else
          t2 = false;
        if (!t2)
          break;
        $name = C.JSString_methods.substring$1($name, 1);
      }
      if (t1)
        return null;
      return this.getCustomIcon$2$kind($name, isPrivate ? C.IconKind_jzj : C.IconKind_Q7f);
    },
    fromInfo$1: function($name) {
      if ($name.length === 0)
        return null;
      return this.getCustomIcon$2$kind($name, C.IconKind_0KV);
    }
  };
  S.CustomIconMaker_getCustomIcon_closure.prototype = {
    call$0: function() {
      return new S.CustomIcon(this._box_0.kind, this.text, this.isAbstract);
    },
    $signature: 257
  };
  S.IconKind.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  S.ColorIcon.prototype = {};
  S.ColorIconMaker.prototype = {
    getCustomIcon$1: function(color) {
      return this.iconCache.putIfAbsent$2(0, color, new S.ColorIconMaker_getCustomIcon_closure(color));
    }
  };
  S.ColorIconMaker_getCustomIcon_closure.prototype = {
    call$0: function() {
      return new S.ColorIcon(this.color);
    },
    $signature: 258
  };
  K.MaterialIcon.prototype = {
    get$iconWidth: function() {
      return this.iconWidth;
    }
  };
  K.FlutterMaterialIcons_getIconForCodePoint_closure.prototype = {
    call$0: function() {
      return new K.MaterialIcon(this.code, C.ThemedColor_Color_4278190080_Color_4290493371, 18, 0, 18);
    },
    $signature: 259
  };
  N.PSelect.prototype = {
    option$2$value: function($name, value) {
      var e = A.CoreElement$("option", null, null, null, H._asStringS($name));
      if (value != null)
        type$.OptionElement._as(e.element).value = value;
      this.add$1(0, e);
    },
    option$1: function($name) {
      return this.option$2$value($name, null);
    },
    get$value: function(_) {
      return type$.SelectElement._as(this.element).value;
    },
    get$onChange: function(_) {
      var t1 = J.get$onChange$x(this.element),
        t2 = t1.$ti;
      return new P._WhereStream(t2._eval$1("bool(Stream.T)")._as(new N.PSelect_onChange_closure(this)), t1, t2._eval$1("_WhereStream<Stream.T>"));
    },
    change$1: function(handle) {
      type$.void_Function._as(handle);
      return this.get$onChange(this).listen$1(new N.PSelect_change_closure(handle));
    }
  };
  N.PSelect_onChange_closure.prototype = {
    call$1: function(_) {
      type$.Event._as(_);
      return !H.boolConversionCheck(this.$this.element.hasAttribute("disabled"));
    },
    $signature: 64
  };
  N.PSelect_change_closure.prototype = {
    call$1: function(e) {
      type$.Event._as(e).stopImmediatePropagation();
      this.handle.call$0();
    },
    $signature: 3
  };
  N.PButton.prototype = {};
  N.PFlash.prototype = {};
  N.PTabNav.prototype = {
    PTabNav$1: function(tabs) {
      var t1, _i, tab;
      type$.CoreElement._as(this.add$1(0, A.CoreElement$("nav", null, "tabnav-tabs", null, null))).add$1(0, tabs);
      if (tabs.length !== 0)
        this.selectTab$1(C.JSArray_methods.get$first(tabs));
      for (t1 = tabs.length, _i = 0; _i < tabs.length; tabs.length === t1 || (0, H.throwConcurrentModificationError)(tabs), ++_i) {
        tab = tabs[_i];
        J.click$1$x(tab, new N.PTabNav_closure(this, tab));
      }
    },
    selectTab$1: function(tab) {
      var _this = this,
        _s8_ = "selected",
        t1 = _this.selectedTab;
      if (t1 != null)
        J.get$classes$x(t1.element).toggle$2(0, _s8_, false);
      _this.selectedTab = tab;
      if (tab != null)
        J.get$classes$x(tab.element).toggle$2(0, _s8_, true);
      _this._selectedTabController.add$1(0, _this.selectedTab);
    }
  };
  N.PTabNav_closure.prototype = {
    call$0: function() {
      this.$this.selectTab$1(this.tab);
    },
    $signature: 0
  };
  N.PTabNavTab.prototype = {};
  N.PNavMenu.prototype = {
    PNavMenu$2$supportsSelection: function(items, supportsSelection) {
      this.add$1(0, items);
    }
  };
  N.PNavMenuItem.prototype = {};
  N.ServiceExtensionCheckbox.prototype = {
    ServiceExtensionCheckbox$1: function(extensionDescription) {
      var extensionName, t2, t3, _this = this, _null = null,
        checkbox = A.CoreElement$("input", _null, _null, _null, _null),
        t1 = checkbox.element;
      t1.setAttribute("type", "checkbox");
      _this._checkboxElement = type$.InputElement._as(t1);
      t1 = _this.extensionDescription;
      _this.element.add$1(0, H.setRuntimeTypeInfo([checkbox, A.CoreElement$("span", _null, _null, _null, " " + t1.description)], type$.JSArray_CoreElement));
      extensionName = t1.extension;
      t1 = type$.ServiceConnectionManager;
      checkbox.attribute$2("disabled", !t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.isServiceExtensionAvailable$1(extensionName));
      t1._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.hasServiceExtension$2(extensionName, new N.ServiceExtensionCheckbox_closure(checkbox));
      t1 = _this._checkboxElement;
      t1.toString;
      t2 = type$._ElementEventStreamImpl_Event;
      t3 = t2._eval$1("~(1)")._as(new N.ServiceExtensionCheckbox_closure0(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1, "change", t3, false, t2._precomputed1);
      _this._updateState$0();
    },
    _updateState$0: function() {
      type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.getServiceExtensionState$2(this.extensionDescription.extension, new N.ServiceExtensionCheckbox__updateState_closure(this));
    }
  };
  N.ServiceExtensionCheckbox_closure.prototype = {
    call$1: function(available) {
      var t1 = !H.boolConversionCheck(H._asBoolS(available));
      this.checkbox.attribute$2("disabled", t1);
      return t1;
    },
    $signature: 65
  };
  N.ServiceExtensionCheckbox_closure0.prototype = {
    call$1: function(_) {
      var selected, t3, t4, t5,
        t1 = this.$this,
        t2 = t1.extensionDescription;
      F.select(t2.gaScreenName, t2.gaItem, 0);
      selected = t1._checkboxElement.checked;
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager;
      t3 = t2.extension;
      H.boolConversionCheck(selected);
      t4 = t2.values;
      t2 = H._instanceType(t2)._precomputed1;
      t5 = t4.length;
      if (selected) {
        if (0 >= t5)
          return H.ioore(t4, 0);
        t2 = t2._as(t4[0]);
      } else {
        if (1 >= t5)
          return H.ioore(t4, 1);
        t2 = t2._as(t4[1]);
      }
      t1.setServiceExtensionState$3(t3, selected, t2);
    },
    $signature: 3
  };
  N.ServiceExtensionCheckbox__updateState_closure.prototype = {
    call$1: function(state) {
      var extensionEnabled,
        t1 = type$.ServiceExtensionState._as(state).value,
        t2 = this.$this,
        t3 = t2.extensionDescription,
        t4 = t3.values;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = H._instanceType(t3)._precomputed1._as(t4[0]);
      extensionEnabled = t1 == null ? t4 == null : t1 === t4;
      t2._checkboxElement.checked = extensionEnabled;
      t1 = t3.tooltips;
      t3 = t1.length;
      if (extensionEnabled) {
        if (1 >= t3)
          return H.ioore(t1, 1);
        t1 = t1[1];
      } else {
        if (0 >= t3)
          return H.ioore(t1, 0);
        t1 = t1[0];
      }
      t2.element.element.title = t1;
    },
    $signature: 66
  };
  N.ServiceExtensionButton.prototype = {
    ServiceExtensionButton$1: function(extensionDescription) {
      var _this = this,
        extensionName = _this.extensionDescription.extension,
        t1 = _this.button,
        t2 = type$.ServiceConnectionManager;
      t1.attribute$2("disabled", !t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.isServiceExtensionAvailable$1(extensionName));
      t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.hasServiceExtension$2(extensionName, new N.ServiceExtensionButton_closure(_this));
      t1.click$1(0, new N.ServiceExtensionButton_closure0(_this));
      _this._updateState$0();
    },
    _updateState$0: function() {
      type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.getServiceExtensionState$2(this.extensionDescription.extension, new N.ServiceExtensionButton__updateState_closure(this));
    }
  };
  N.ServiceExtensionButton_closure.prototype = {
    call$1: function(available) {
      var t1 = !H.boolConversionCheck(H._asBoolS(available));
      this.$this.button.attribute$2("disabled", t1);
      return t1;
    },
    $signature: 65
  };
  N.ServiceExtensionButton_closure0.prototype = {
    call$0: function() {
      var wasSelected, t3, t4, t5,
        t1 = this.$this,
        t2 = t1.extensionDescription;
      F.select(t2.gaScreenName, t2.gaItem, 0);
      wasSelected = J.get$classes$x(t1.button.element).contains$1(0, "selected");
      t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager;
      t3 = t2.extension;
      t4 = t2.values;
      t2 = H._instanceType(t2)._precomputed1;
      t5 = t4.length;
      if (wasSelected) {
        if (1 >= t5)
          return H.ioore(t4, 1);
        t2 = t2._as(t4[1]);
      } else {
        if (0 >= t5)
          return H.ioore(t4, 0);
        t2 = t2._as(t4[0]);
      }
      t1.setServiceExtensionState$3(t3, !wasSelected, t2);
      return null;
    },
    $signature: 1
  };
  N.ServiceExtensionButton__updateState_closure.prototype = {
    call$1: function(state) {
      var extensionEnabled,
        t1 = type$.ServiceExtensionState._as(state).value,
        t2 = this.$this,
        t3 = t2.extensionDescription,
        t4 = t3.values;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = H._instanceType(t3)._precomputed1._as(t4[0]);
      extensionEnabled = t1 == null ? t4 == null : t1 === t4;
      t2 = t2.button.element;
      J.get$classes$x(t2).toggle$2(0, "selected", extensionEnabled);
      t1 = t3.tooltips;
      t3 = t1.length;
      if (extensionEnabled) {
        if (0 >= t3)
          return H.ioore(t1, 0);
        t1 = t1[0];
      } else {
        if (1 >= t3)
          return H.ioore(t1, 1);
        t1 = t1[1];
      }
      t2.title = t1;
    },
    $signature: 66
  };
  N.ServiceExtensionSelector.prototype = {
    ServiceExtensionSelector$1: function(extensionDescription) {
      var t2, t3, extensionName, _this = this,
        t1 = _this.selector;
      t1.clazz$1("select-sm");
      t1.clazz$1("button-bar-dropdown");
      t1.change$1(_this.get$_service_extension_elements$_handleSelect());
      t2 = _this.extensionDescription;
      t3 = C.JSArray_methods.get$first(t2.tooltips);
      t1.element.title = t3;
      extensionName = t2.extension;
      t2 = type$.ServiceConnectionManager;
      t1.attribute$2("disabled", !t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.isServiceExtensionAvailable$1(extensionName));
      t2._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.hasServiceExtension$2(extensionName, new N.ServiceExtensionSelector_closure(_this));
      _this.addOptions$0();
      _this.updateState$0();
    },
    _service_extension_elements$_handleSelect$0: function() {
      var t1, t2, t3, extensionValue, _this = this,
        selectElement = type$.SelectElement._as(_this.selector.element);
      if (selectElement.value == _this._service_extension_elements$_selectedValue)
        return;
      t1 = _this.extensionDescription;
      F.select(t1.gaScreenName, t1.gaItem, 0);
      t2 = t1.values;
      t3 = C.JSArray_methods.indexOf$1(t1.displayValues, selectElement.value);
      if (t3 < 0 || t3 >= t2.length)
        return H.ioore(t2, t3);
      extensionValue = t2[t3];
      type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.setServiceExtensionState$3(t1.extension, true, extensionValue);
      _this._service_extension_elements$_selectedValue = selectElement.value;
    },
    addOptions$0: function() {
      C.JSArray_methods.forEach$1(this.extensionDescription.displayValues, this.selector.get$option());
    },
    updateState$0: function() {
      type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG))._serviceExtensionManager.getServiceExtensionState$2(this.extensionDescription.extension, new N.ServiceExtensionSelector_updateState_closure(this));
    },
    set$_service_extension_elements$_selectedValue: function(_selectedValue) {
      this._service_extension_elements$_selectedValue = H._asStringS(_selectedValue);
    }
  };
  N.ServiceExtensionSelector_closure.prototype = {
    call$1: function(available) {
      var t1 = !H.boolConversionCheck(H._asBoolS(available));
      this.$this.selector.attribute$2("disabled", t1);
      return t1;
    },
    $signature: 65
  };
  N.ServiceExtensionSelector_updateState_closure.prototype = {
    call$1: function(state) {
      var t3, t4, selectedIndex, t5, selectedElement,
        t1 = this.$this,
        t2 = type$.ServiceExtensionState._as(state).value;
      if (t2 != null) {
        t3 = t1.extensionDescription;
        t4 = t3.values;
        selectedIndex = C.JSArray_methods.indexOf$1(t4, t2);
        if (selectedIndex === -1) {
          C.JSArray_methods.add$1(t4, t2);
          t5 = t3.displayValues;
          C.JSArray_methods.add$1(t5, H._asStringS(t2));
          selectedIndex = t4.length - 1;
          if (selectedIndex < 0 || selectedIndex >= t5.length)
            return H.ioore(t5, selectedIndex);
          t1.selector.option$1(t5[selectedIndex]);
        }
        selectedElement = type$.SelectElement._as(t1.selector.element);
        selectedElement.selectedIndex = selectedIndex;
        t2 = C.SelectElement_methods.get$children(selectedElement).$index(0, selectedIndex).style;
        t2.display = "";
        t2 = t3.displayValues;
        if (selectedIndex < 0 || selectedIndex >= t2.length)
          return H.ioore(t2, selectedIndex);
        t1.set$_service_extension_elements$_selectedValue(t2[selectedIndex]);
      }
    },
    $signature: 66
  };
  N.TogglePlatformSelector.prototype = {
    addOptions$0: function() {
      var t1, t2, t3, t4, i, t5, t6, t7;
      this.super$ServiceExtensionSelector$addOptions();
      for (t1 = this.extensionDescription, t2 = t1.values, t3 = this.selector.element, t4 = J.getInterceptor$x(t3), i = 0; i < t2.length; ++i) {
        t5 = t1.displayValues;
        if (i >= t5.length)
          return H.ioore(t5, i);
        t5 = t5[i];
        t5.toString;
        t6 = J.getInterceptor$asx(t5);
        t7 = t6.get$length(t5);
        if (0 > t7)
          H.throwExpression(P.RangeError$range(0, 0, t6.get$length(t5), null, null));
        if (H.stringContainsUnchecked(t5, "Fuchsia", 0)) {
          t5 = t4.get$children(t3).$index(0, i).style;
          t5.display = "none";
        }
      }
    }
  };
  K.ThemedColor.prototype = {
    get$alpha: function(_) {
      return (4278190080 & this._dark.value) >>> 24;
    },
    get$value: function(_) {
      return this._dark.value;
    },
    $isColor: 1
  };
  X.TreeNavigator.prototype = {
    moveRight$0: function() {
      var t1 = this._selectedItem;
      if (!H.boolConversionCheck(t1.hasChildren))
        return;
      if (!H.boolConversionCheck(t1.isExpanded))
        t1.expand.call$0();
      else {
        t1 = t1.children;
        this.select$1(0, C.JSArray_methods.get$first(t1));
      }
    },
    _getNextVisibleElementBelow$2$includeChildren: function(node, includeChildren) {
      var t1;
      this.$ti._eval$1("TreeNode<TreeNavigator.T>")._as(node);
      if (includeChildren)
        if (H.boolConversionCheck(node.isExpanded)) {
          t1 = node.children;
          t1 = t1.length !== 0;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return C.JSArray_methods.get$first(H.boolConversionCheck(node.isExpanded) ? node.children : H.setRuntimeTypeInfo([], H._instanceType(node)._eval$1("JSArray<TreeNode<1>>")));
      t1 = node.nextSibling;
      if (t1 == null) {
        t1 = node.parent;
        t1 = t1 != null ? this._getNextVisibleElementBelow$2$includeChildren(t1, false) : null;
      }
      return t1;
    },
    _getNextVisibleElementBelow$1: function(node) {
      return this._getNextVisibleElementBelow$2$includeChildren(node, true);
    },
    _getLastVisibleDescendant$1: function(node) {
      var t1, t2;
      this.$ti._eval$1("TreeNode<TreeNavigator.T>")._as(node);
      while (true) {
        t1 = H.boolConversionCheck(node.isExpanded);
        if (t1) {
          t2 = node.children;
          t2 = t2.length !== 0;
        } else
          t2 = false;
        if (!t2)
          break;
        node = C.JSArray_methods.get$last(t1 ? node.children : H.setRuntimeTypeInfo([], H._instanceType(node)._eval$1("JSArray<TreeNode<1>>")));
      }
      return node;
    }
  };
  X.Tree.prototype = {
    connectNodes$3: function($parent, children, hasChildren) {
      var previousNode, _i, node, t2,
        t1 = this.$ti;
      t1._eval$1("TreeNode<Tree.T>")._as($parent);
      t1._eval$1("List<TreeNode<Tree.T>>")._as(children);
      t1._eval$1("bool(Tree.T)")._as(hasChildren);
      for (t1 = children.length, previousNode = null, _i = 0; _i < children.length; children.length === t1 || (0, H.throwConcurrentModificationError)(children), ++_i, previousNode = node) {
        node = children[_i];
        t2 = J.getInterceptor$x(node);
        t2.set$parent(node, $parent);
        node.set$hasChildren(hasChildren.call$1(node.data));
        if (previousNode != null) {
          t2.set$previousSibling(node, previousNode);
          if (previousNode.nextSibling == null)
            previousNode.set$nextSibling(0, node);
        }
      }
      t1 = $parent == null ? null : $parent.children;
      if (t1 != null)
        C.JSArray_methods.addAll$1(t1, children);
    }
  };
  X.TreeNode.prototype = {
    set$hasChildren: function(hasChildren) {
      this.hasChildren = H._asBoolS(hasChildren);
    },
    set$expand: function(_, expand) {
      this.expand = type$.dynamic_Function._as(expand);
    },
    set$collapse: function(_, collapse) {
      this.collapse = type$.dynamic_Function._as(collapse);
    },
    set$parent: function(_, $parent) {
      this.parent = this.$ti._as($parent);
    },
    set$previousSibling: function(_, previousSibling) {
      this.previousSibling = this.$ti._as(previousSibling);
    },
    set$nextSibling: function(_, nextSibling) {
      this.nextSibling = this.$ti._as(nextSibling);
    }
  };
  R.HtmlTreeNavigator.prototype = {
    handleKeyPress$1: function(e) {
      var t1, nextElm, t2, prevElm, _this = this;
      type$.KeyboardEvent._as(e);
      t1 = e.keyCode;
      if (t1 === 40) {
        t1 = _this._selectedItem;
        if (t1 != null) {
          nextElm = _this._getNextVisibleElementBelow$1(t1);
          if (nextElm != null)
            _this.select$1(0, nextElm);
        } else {
          t1 = _this.treeNodes;
          if (t1.length !== 0)
            _this.select$1(0, C.JSArray_methods.get$first(t1));
        }
      } else if (t1 === 38) {
        t1 = _this._selectedItem;
        if (t1 != null) {
          _this.$ti._eval$1("TreeNode<TreeNavigator.T>")._as(t1);
          t2 = t1.previousSibling;
          if (t2 != null) {
            t2 = _this._getLastVisibleDescendant$1(t2);
            if (t2 == null)
              t2 = t1.previousSibling;
            prevElm = t2 == null ? t1.parent : t2;
          } else
            prevElm = t1.parent;
          if (prevElm != null)
            _this.select$1(0, prevElm);
        } else {
          t1 = _this.treeNodes;
          if (t1.length !== 0) {
            t1 = _this._getLastVisibleDescendant$1(C.JSArray_methods.get$last(t1));
            _this.select$1(0, t1 == null ? C.JSArray_methods.get$last(_this.treeNodes) : t1);
          }
        }
      } else if (t1 === 39)
        _this.moveRight$0();
      else if (t1 === 37) {
        t1 = _this._selectedItem;
        if (H.boolConversionCheck(t1.isExpanded))
          t1.collapse.call$0();
        else {
          t1 = t1.parent;
          if (t1 != null)
            _this.select$1(0, t1);
        }
      } else
        return;
      e.preventDefault();
    }
  };
  T._CanvasChunk.prototype = {
    set$position: function(_, p) {
      var t1, t2, t3, _this = this;
      if (J.$eq$(_this._viewport_canvas$_position, p))
        return;
      _this._viewport_canvas$_position = p;
      t1 = p.x * 512;
      t2 = p.y * 512;
      _this.rect = new S.Rect(t1, t2, t1 + 512, t2 + 512);
      t2 = _this.canvas.style;
      t1 = "translate(" + t1 + "px, " + H.S(_this.rect.top) + "px)";
      t2.toString;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, C.CssStyleDeclaration_methods._browserPropertyName$1(t2, "transform"), t1, "");
      t1 = _this._context;
      t1.restore();
      t1.save();
      t2 = _this.rect;
      t3 = t2.left;
      if (typeof t3 !== "number")
        return t3.$negate();
      t1.translate(-t3, -t2.top);
      _this._debugPaint$0();
      _this._dirty = true;
    },
    clear$0: function(_) {
      var t1, t2, _this = this;
      if (_this._empty)
        return;
      t1 = _this._context;
      t2 = _this.rect;
      t1.clearRect(t2.left, t2.top, 512, 512);
      _this._debugPaint$0();
      _this._empty = true;
    },
    _debugPaint$0: function() {
    }
  };
  T._ChunkPosition.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof T._ChunkPosition))
        return false;
      return this.y === other.y && this.x === other.x;
    },
    get$hashCode: function(_) {
      return this.y * 37 + this.x;
    }
  };
  T.ViewportCanvas.prototype = {
    ViewportCanvas$7$addBuffer$classes$onMouseLeave$onMouseMove$onSizeChange$onTap$paintCallback: function(addBuffer, classes, onMouseLeave, onMouseMove, onSizeChange, onTap, paintCallback) {
      var t4, t5, _this = this,
        t1 = _this._viewport_canvas$_element,
        t2 = t1.element,
        t3 = t2.style;
      t3.overflow = "scroll";
      t3 = _this._content;
      t4 = t3.element;
      t5 = t4.style;
      t5.position = "relative";
      t5.width = "0";
      t5.height = "0";
      t5.overflow = "hidden";
      t1.add$1(0, t3);
      t1 = new ResizeObserver(H.convertDartClosureToJS(new T.ViewportCanvas_closure(_this), 2));
      _this._viewport_canvas$_resizeObserver = t1;
      t1.observe(t2);
      t2 = J.get$onScroll$x(t2);
      t1 = t2.$ti;
      t5 = t1._eval$1("~(1)")._as(new T.ViewportCanvas_closure0(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t2._target, t2._eventType, t5, false, t1._precomputed1);
      t3.get$onClick(t3).listen$1(new T.ViewportCanvas_closure1(_this));
      t3.get$onTouchStart(t3).listen$1(new T.ViewportCanvas_closure2(_this));
      t3.get$onTouchMove(t3).listen$1(new T.ViewportCanvas_closure3(_this));
      t3.get$onTouchEnd(t3).listen$1(new T.ViewportCanvas_closure4(_this));
      t1 = J.getInterceptor$x(t4);
      t2 = t1.get$onMouseLeave(t4);
      t3 = t2.$ti;
      W._EventStreamSubscription$(t2._target, t2._eventType, t3._eval$1("~(1)")._as(new T.ViewportCanvas_closure5(_this)), false, t3._precomputed1);
      t4 = t1.get$onMouseMove(t4);
      t1 = t4.$ti;
      W._EventStreamSubscription$(t4._target, t4._eventType, t1._eval$1("~(1)")._as(new T.ViewportCanvas_closure6(_this)), false, t1._precomputed1);
    },
    _dispatchMouseMoveEvent$0: function() {
      var t1 = this._onMouseMove;
      if (t1 != null)
        t1.call$1(this._clientToGlobal$1(this._currentMouseHover));
    },
    _clientToGlobal$1: function(client) {
      var elementRect, t1, t2, t3, t4;
      type$.Point_num._as(client);
      elementRect = this._content.element.getBoundingClientRect();
      t1 = client.x;
      t2 = elementRect.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = client.y;
      t4 = elementRect.top;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new S.Offset(t1 - t2, t3 - t4);
    },
    _scheduleRebuild$0: function() {
      var _this = this;
      if (!_this._viewport_canvas$_hasPendingRebuild) {
        _this._viewport_canvas$_hasPendingRebuild = true;
        _this.setState$1(new T.ViewportCanvas__scheduleRebuild_closure(_this));
      }
    },
    rebuild$1$force: function(force) {
      var t5, _this = this,
        lastViewport = _this._viewport,
        rawElement = _this._viewport_canvas$_element.element,
        t1 = C.JSNumber_methods.round$0(rawElement.scrollLeft),
        t2 = C.JSNumber_methods.round$0(rawElement.scrollTop),
        t3 = t1 + C.JSNumber_methods.round$0(rawElement.offsetWidth),
        t4 = t2 + C.JSNumber_methods.round$0(rawElement.offsetHeight);
      _this._viewport = new S.Rect(t1, t2, t3, t4);
      t5 = lastViewport.left;
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (!new S.Size(t3 - t1, t4 - t2).$eq(0, new S.Size(lastViewport.right - t5, lastViewport.bottom - lastViewport.top)) && _this._onSizeChange != null) {
        t1 = _this._viewport;
        t2 = t1.left;
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this._onSizeChange.call$1(new S.Size(t1.right - t2, t1.bottom - t1.top));
      }
      t1 = _this._viewport.inflate$1(512);
      t2 = _this._contentWidth;
      t3 = _this._contentHeight;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this._renderedViewport = t1.intersect$1(new S.Rect(0, 0, 0 + t2, 0 + t3));
      _this._contentSizeChanged = false;
      _this._render$1(force);
    },
    setContentSize$2: function(width, height) {
      var t1, t2, _this = this;
      if (width == _this._contentWidth && height === _this._contentHeight)
        return;
      _this._contentWidth = width;
      _this._contentHeight = height;
      t1 = _this._content.element.style;
      t2 = H.S(width) + "px";
      t1.width = t2;
      t2 = H.S(height) + "px";
      t1.height = t2;
      if (!_this._contentSizeChanged) {
        _this._contentSizeChanged = true;
        _this._scheduleRebuild$0();
      }
    },
    _getChunkPosition$1: function(offset) {
      var t1 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return new T._ChunkPosition(C.JSNumber_methods._tdivFast$1(t1, 512), C.JSNumber_methods._tdivFast$1(offset._dy, 512));
    },
    _getChunk$1: function(position) {
      var t2, t3, chunk,
        t1 = this._chunks,
        existing = t1.$index(0, position);
      if (existing != null) {
        if (H.boolConversionCheck(existing._dirty))
          existing.clear$0(0);
        return existing;
      }
      for (t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (!t3.rect.overlaps$1(this._renderedViewport)) {
          t1.remove$1(0, t3._viewport_canvas$_position);
          t3.set$position(0, position);
          t1.$indexSet(0, position, t3);
          if (H.boolConversionCheck(t3._dirty))
            t3.clear$0(0);
          return t3;
        }
      }
      t2 = Y.createHighDpiCanvas(512, 512);
      chunk = new T._CanvasChunk(t2);
      t3 = t2.style;
      t3.position = "absolute";
      t2 = t2.getContext("2d");
      t2.save();
      chunk._context = t2;
      chunk.set$position(0, position);
      chunk._dirty = true;
      t1.$indexSet(0, position, chunk);
      return chunk;
    },
    _render$1: function(force) {
      var chunk, e, st, t1, t2, start, end, y, x, t3, x0, exception, t4, attach, t5, _this = this;
      if (force)
        for (t1 = _this._chunks, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current(t1);
          t2._dirty = true;
          t2.clear$0(0);
        }
      ++_this._frameId;
      t1 = _this._renderedViewport;
      start = _this._getChunkPosition$1(new S.Offset(t1.left, t1.top));
      t1 = _this._renderedViewport;
      end = _this._getChunkPosition$1(new S.Offset(t1.right, t1.bottom));
      for (y = start.y, t1 = end.y, x = start.x, t2 = end.x, t3 = _this._paintCallback; y <= t1; ++y)
        for (x0 = x; x0 <= t2; ++x0) {
          chunk = _this._getChunk$1(new T._ChunkPosition(x0, y));
          if (H.boolConversionCheck(chunk._dirty)) {
            try {
              t3.call$2(chunk.canvas.getContext("2d"), chunk.rect);
            } catch (exception) {
              e = H.unwrapException(exception);
              st = H.getTraceFromException(exception);
              window;
              if (typeof console != "undefined")
                window.console.error(e);
              if (typeof console != "undefined")
                window.console.error(st);
            }
            t4 = chunk;
            t4._empty = t4._dirty = false;
          }
          chunk._lastFrameRendered = _this._frameId;
        }
      for (t1 = _this._chunks, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t2 = _this._content.element; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        attach = t3._lastFrameRendered === _this._frameId;
        if (attach !== t3.attached) {
          t4 = t3.canvas;
          if (attach)
            t2.appendChild(t4);
          else {
            t5 = t4.parentNode;
            if (t5 != null)
              t5.removeChild(t4);
          }
          t3.attached = attach;
        }
      }
    },
    scrollToRect$1: function(target) {
      this.setState$1(new T.ViewportCanvas_scrollToRect_closure(this, target));
    },
    set$_currentMouseHover: function(_currentMouseHover) {
      this._currentMouseHover = type$.Point_num._as(_currentMouseHover);
    }
  };
  T.ViewportCanvas_closure.prototype = {
    call$2: function(entries, _) {
      type$.List_dynamic._as(entries);
      type$.ResizeObserver._as(_);
      this.$this._scheduleRebuild$0();
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 58
  };
  T.ViewportCanvas_closure0.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      if (t1._currentMouseHover != null)
        t1._dispatchMouseMoveEvent$0();
      t1.rebuild$1$force(false);
    },
    $signature: 3
  };
  T.ViewportCanvas_closure1.prototype = {
    call$1: function(e) {
      var t1;
      type$.MouseEvent._as(e);
      t1 = this.$this;
      t1._viewport_canvas$_onTap.call$1(t1._clientToGlobal$1(new P.Point(e.clientX, e.clientY, type$.Point_num)));
    },
    $signature: 6
  };
  T.ViewportCanvas_closure2.prototype = {
    call$1: function(e) {
      var t1 = type$.TouchEvent._as(e).touches;
      this.$this._activeTouch = (t1 && C.TouchList_methods).get$first(t1);
    },
    $signature: 24
  };
  T.ViewportCanvas_closure3.prototype = {
    call$1: function(_) {
      type$.TouchEvent._as(_);
      this.$this._wasDraggedByTouch = true;
    },
    $signature: 24
  };
  T.ViewportCanvas_closure4.prototype = {
    call$1: function(_) {
      var t1, t2;
      type$.TouchEvent._as(_);
      t1 = this.$this;
      if (!t1._wasDraggedByTouch && t1._activeTouch != null) {
        t2 = t1._activeTouch;
        t1._viewport_canvas$_onTap.call$1(t1._clientToGlobal$1(new P.Point(C.JSNumber_methods.round$0(t2.clientX), C.JSNumber_methods.round$0(t2.clientY), type$.Point_num)));
      }
      t1._wasDraggedByTouch = false;
      t1._activeTouch = null;
    },
    $signature: 24
  };
  T.ViewportCanvas_closure5.prototype = {
    call$1: function(_) {
      var t1;
      type$.MouseEvent._as(_);
      t1 = this.$this;
      t1.set$_currentMouseHover(null);
      t1 = t1._onMouseLeave;
      if (t1 != null)
        t1.call$0();
    },
    $signature: 6
  };
  T.ViewportCanvas_closure6.prototype = {
    call$1: function(e) {
      var t1;
      type$.MouseEvent._as(e);
      t1 = this.$this;
      t1.set$_currentMouseHover(new P.Point(e.clientX, e.clientY, type$.Point_num));
      t1._dispatchMouseMoveEvent$0();
    },
    $signature: 6
  };
  T.ViewportCanvas__scheduleRebuild_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._viewport_canvas$_hasPendingRebuild = false;
      t1.rebuild$1$force(false);
    },
    $signature: 0
  };
  T.ViewportCanvas_scrollToRect_closure.prototype = {
    call$0: function() {
      var t2, t3, y, overlaps, t4, x, y0, t5,
        t1 = this.$this;
      t1.rebuild$1$force(false);
      t2 = this.target;
      t3 = t2.left;
      y = t2.top;
      if (t1._viewport.contains$1(0, new S.Offset(t3, y)) && t1._viewport.contains$1(0, new S.Offset(t3, t2.bottom)))
        return;
      overlaps = t1._viewport.overlaps$1(t2);
      t4 = t1._viewport;
      x = t4.left;
      y0 = t4.top;
      if (y0 > y)
        y = C.JSNumber_methods.toInt$0(y);
      else {
        t4 = t4.bottom;
        t5 = t2.bottom;
        if (t4 < t5) {
          if (overlaps)
            y = t5 - (t4 - y0);
        } else
          y = y0;
      }
      t4 = t1._viewport;
      t5 = t4.left;
      if (typeof t5 !== "number")
        return t5.$gt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t5 > t3)
        x = C.JSNumber_methods.toInt$0(t3);
      else {
        t3 = t4.right;
        t2 = t2.right;
        if (t3 < t2)
          x = C.JSNumber_methods.toInt$0(t2 - (t3 - t5));
      }
      J.scrollTo$2$x(t1._viewport_canvas$_element.element, x, y);
    },
    $signature: 0
  };
  T._ViewportCanvas_Object_HtmlSetStateMixin.prototype = {};
  T.ProfileGranularitySelector.prototype = {
    setGranularity$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t4, t5, t1, t2, t3;
      var $async$setGranularity$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.ServiceConnectionManager._as($.globals.$index(0, C.Type_ServiceConnectionManager_qdG)).service;
              t2 = type$.SelectElement._as($async$self.selector.element).value;
              t3 = t1._vmService;
              t3.toString;
              t4 = type$.dynamic;
              t5 = type$.Response_2;
              $async$returnValue = T.allowedError(t1._trackFuture$1$2("setFlag", t3._call$1$2(0, "setFlag", P.LinkedHashMap_LinkedHashMap$_literal(["name", "profile_period", "value", t2], t4, t4), t5), t5), true, type$.void);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$setGranularity$0, $async$completer);
    },
    _handleSelect$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, selectElement, t1;
      var $async$_handleSelect$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.SelectElement;
              if (t1._as($async$self.selector.element).value == $async$self._selectedValue) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($async$self.setGranularity$0(), $async$_handleSelect$0);
            case 3:
              // returning from await.
              selectElement = t1._as($async$self.selector.element);
              $async$self._selectedValue = selectElement.value;
              if (selectElement.value === "50") {
                t1 = $.$get$profileGranularityWarning();
                $async$self.framework.messageManager.addMessage$2(t1, "general");
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleSelect$0, $async$completer);
    }
  };
  B.executeWithDelay_closure.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  B.Property.prototype = {
    get$value: function(_) {
      return this._utils$_value;
    },
    set$value: function(_, newValue) {
      var _this = this;
      _this.$ti._precomputed1._as(newValue);
      if (newValue !== _this._utils$_value) {
        _this.set$_utils$_value(newValue);
        _this._changeController.add$1(0, newValue);
      }
    },
    set$_utils$_value: function(_value) {
      this._utils$_value = this.$ti._precomputed1._as(_value);
    }
  };
  B.DelayedTimer.prototype = {
    _fire$0: function() {
      var _this = this,
        t1 = _this._minTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._minTimer = null;
      t1 = _this._maxTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._maxTimer = null;
      _this._closure.call$0();
      _this.set$_closure(null);
    },
    set$_closure: function(_closure) {
      this._closure = type$.void_Function._as(_closure);
    }
  };
  B.RateLimiter.prototype = {
    scheduleRequest$0: function() {
      var t1, t2, _this = this;
      if (_this.requestScheduledButNotStarted)
        return;
      t1 = _this._pendingRequest;
      if (t1 != null && t1.future._state === 0) {
        _this.requestScheduledButNotStarted = true;
        t1.future.whenComplete$1(new B.RateLimiter_scheduleRequest_closure(_this));
        return;
      }
      t1 = Date.now();
      t2 = _this._lastRequestTime;
      if (t2 == null || t2 + _this.delayBetweenRequests <= t1) {
        _this._performRequest$0();
        return;
      }
      _this.requestScheduledButNotStarted = true;
      if (typeof t2 !== "number")
        return H.iae(t2);
      P.Timer_Timer(P.Duration$(0, t1 - t2 + _this.delayBetweenRequests), new B.RateLimiter_scheduleRequest_closure0(_this));
    },
    _performRequest$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this;
      var $async$_performRequest$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 2;
              $async$self._lastRequestTime = Date.now();
              $async$self._pendingRequest = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
              $async$goto = 5;
              return P._asyncAwait($async$self.callback.call$0(), $async$_performRequest$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$self._pendingRequest.complete$1(0, null);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_performRequest$0, $async$completer);
    }
  };
  B.RateLimiter_scheduleRequest_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._pendingRequest = null;
      t1.requestScheduledButNotStarted = false;
      t1.scheduleRequest$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  B.RateLimiter_scheduleRequest_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.requestScheduledButNotStarted = false;
      t1._performRequest$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  B.TimeUnit.prototype = {
    toString$0: function(_) {
      return this._utils$_name;
    }
  };
  B.TimeRange.prototype = {
    get$start: function(_) {
      return this._utils$_start;
    },
    get$end: function(_) {
      return this._utils$_end;
    },
    contains$1: function(_, target) {
      type$.Duration._as(target);
      return target.$ge(0, this._utils$_start) && target.$le(0, this._utils$_end);
    },
    toString$0: function(_) {
      var t1, t2, _this = this, _null = null;
      switch (C.TimeUnit_0) {
        case C.TimeUnit_0:
          t1 = _this._utils$_start;
          t1 = "[" + H.S(t1 == null ? _null : t1._duration) + " \u03bcs - ";
          t2 = _this._utils$_end;
          return t1 + H.S(t2 == null ? _null : t2._duration) + " \u03bcs]";
        case C.TimeUnit_1:
        default:
          t1 = _this._utils$_start;
          t1 = "[" + H.S(t1 == null ? _null : C.JSInt_methods._tdivFast$1(t1._duration, 1000)) + " ms - ";
          t2 = _this._utils$_end;
          return t1 + H.S(t2 == null ? _null : C.JSInt_methods._tdivFast$1(t2._duration, 1000)) + " ms]";
      }
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$x(other);
      return J.$eq$(this._utils$_start, t1.get$start(other)) && J.$eq$(this._utils$_end, t1.get$end(other));
    },
    get$hashCode: function(_) {
      return S.hashValues(this._utils$_start, this._utils$_end, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  B.Reporter.prototype = {
    notify$0: function() {
      var t1, t2, _i;
      for (t1 = this._utils$_listeners.toList$0(0), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].call$0();
    },
    toString$0: function(_) {
      return H.getRuntimeType(this).toString$0(0) + "#" + U.shortHash(this);
    },
    $isListenable: 1
  };
  B.ImmediateValueNotifier.prototype = {
    addListener$1: function(_, listener) {
      type$.void_Function._as(listener);
      this.super$ChangeNotifier$addListener(0, listener);
      listener.call$0();
    }
  };
  B.SortDirection.prototype = {
    toString$0: function(_) {
      return this._utils$_name;
    }
  };
  T.FlutterVersion.prototype = {
    FlutterVersion$_$7$channel$dartSdkVersion$engineRevision$frameworkCommitDate$frameworkRevision$repositoryUrl$version: function(channel, dartSdkVersion, engineRevision, frameworkCommitDate, frameworkRevision, repositoryUrl, version) {
      var t1, _this = this,
        _versionParts = new H.MappedListIterable(H.setRuntimeTypeInfo(_this.version.split("."), type$.JSArray_String), type$.String_Function_String._as(new T.FlutterVersion$__closure()), type$.MappedListIterable_String_String).toList$0(0);
      if (_versionParts.length !== 0) {
        t1 = H.Primitives_parseInt(C.JSArray_methods.get$first(_versionParts), null);
        if (t1 == null)
          t1 = 0;
      } else
        t1 = 0;
      _this.major = t1;
      if (_versionParts.length > 1) {
        t1 = H.Primitives_parseInt(_versionParts[1], null);
        if (t1 == null)
          t1 = 0;
      } else
        t1 = 0;
      _this.minor = t1;
      if (_versionParts.length > 2) {
        t1 = H.Primitives_parseInt(_versionParts[2], null);
        if (t1 == null)
          t1 = 0;
      } else
        t1 = 0;
      _this.patch = t1;
    },
    $eq: function(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      t1 = _this.version;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$version(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = _this.channel;
        t2 = t2.get$channel(other);
        t1 = (t1 == null ? t2 == null : t1 === t2) && _this.repositoryUrl == other.get$repositoryUrl() && _this.frameworkRevision == other.get$frameworkRevision() && _this.frameworkCommitDate == other.get$frameworkCommitDate() && _this.engineRevision == other.get$engineRevision() && _this.dartSdkVersion == other.get$dartSdkVersion();
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return S.hashValues(_this.version, _this.channel, _this.repositoryUrl, _this.frameworkRevision, _this.frameworkCommitDate, _this.engineRevision, _this.dartSdkVersion, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    get$version: function(receiver) {
      return this.version;
    },
    get$channel: function(receiver) {
      return this.channel;
    },
    get$repositoryUrl: function() {
      return this.repositoryUrl;
    },
    get$frameworkRevision: function() {
      return this.frameworkRevision;
    },
    get$frameworkCommitDate: function() {
      return this.frameworkCommitDate;
    },
    get$engineRevision: function() {
      return this.engineRevision;
    },
    get$dartSdkVersion: function() {
      return this.dartSdkVersion;
    }
  };
  T.FlutterVersion$__closure.prototype = {
    call$1: function(part) {
      var t1;
      H._asStringS(part);
      t1 = P.RegExp_RegExp("\\d+", false).stringMatch$1(part);
      return t1 == null ? "0" : t1;
    },
    $signature: 5
  };
  T.SemanticVersion.prototype = {
    compareTo$1: function(_, other) {
      var t1, t2, _this = this;
      if (_this.major == other.get$major() && _this.minor == other.get$minor() && _this.patch === other.get$patch())
        return 0;
      t1 = _this.major;
      t2 = other.get$major();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 <= t2) {
        if (_this.major == other.get$major()) {
          t1 = _this.minor;
          t2 = other.get$minor();
          if (typeof t1 !== "number")
            return t1.$gt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = t1 > t2;
          t1 = t2;
        } else
          t1 = false;
        if (!t1)
          if (_this.major == other.get$major())
            if (_this.minor == other.get$minor()) {
              t1 = _this.patch;
              t2 = H._asNumS(other.get$patch());
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = t1 > t2;
              t1 = t2;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        return 1;
      return -1;
    },
    $isComparable: 1,
    get$major: function() {
      return this.major;
    },
    get$minor: function() {
      return this.minor;
    },
    get$patch: function() {
      return this.patch;
    }
  };
  U.VmServiceWrapper.prototype = {
    addBreakpoint$4$column: function(isolateId, scriptId, line, column) {
      var t2, t3,
        _s13_ = "addBreakpoint",
        t1 = this._vmService;
      t1.toString;
      t2 = type$.dynamic;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      t2.$indexSet(0, "isolateId", isolateId);
      t2.$indexSet(0, "scriptId", scriptId);
      t2.$indexSet(0, "line", line);
      t3 = type$.Breakpoint;
      return this._trackFuture$1$2(_s13_, t1._call$1$2(0, _s13_, t2, t3), t3);
    },
    addBreakpoint$3: function(isolateId, scriptId, line) {
      return this.addBreakpoint$4$column(isolateId, scriptId, line, null);
    },
    callMethod$3$args$isolateId: function(method, args, isolateId) {
      type$.Map_dynamic_dynamic._as(args);
      return this._trackFuture$1$2("callMethod " + H.S(method), this._vmService.callServiceExtension$3$args$isolateId(method, args, isolateId), type$.Response_2);
    },
    callMethod$1: function(method) {
      return this.callMethod$3$args$isolateId(method, null, null);
    },
    callMethod$2$isolateId: function(method, isolateId) {
      return this.callMethod$3$args$isolateId(method, null, isolateId);
    },
    callMethod$2$args: function(method, args) {
      return this.callMethod$3$args$isolateId(method, args, null);
    },
    callServiceExtension$3$args$isolateId: function(method, args, isolateId) {
      return this._trackFuture$1$2("callServiceExtension " + H.S(method), this._vmService.callServiceExtension$3$args$isolateId(method, args, isolateId), type$.Response_2);
    },
    callServiceExtension$2$isolateId: function(method, isolateId) {
      return this.callServiceExtension$3$args$isolateId(method, null, isolateId);
    },
    clearCpuSamples$1: function(isolateId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Success),
        $async$returnValue, $async$self = this, t2, t3, t1, $async$temp1;
      var $async$clearCpuSamples$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Success;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 27, 0)), $async$clearCpuSamples$1);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              t2 = $async$self._vmService;
              t2.toString;
              t3 = type$.dynamic;
              $async$returnValue = $async$self._trackFuture$1$2("clearCpuSamples", t2._call$1$2(0, "clearCpuSamples", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId], t3, t3), t1), t1);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$temp1 = t1;
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("clearCpuSamples", $async$self.callMethod$2$isolateId("_clearCpuProfile", isolateId), type$.Response_2), $async$clearCpuSamples$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$clearCpuSamples$1, $async$completer);
    },
    clearVMTimeline$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Success),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$clearVMTimeline$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Success;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 19, 0)), $async$clearVMTimeline$0);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              $async$returnValue = $async$self._trackFuture$1$2("clearVMTimeline", $async$self._vmService._call$1$1(0, "clearVMTimeline", t1), t1);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$temp1 = t1;
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("clearVMTimeline", $async$self.callMethod$1("_clearVMTimeline"), type$.Response_2), $async$clearVMTimeline$0);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$clearVMTimeline$0, $async$completer);
    },
    evaluate$5$disableBreakpoints$scope: function(_, isolateId, targetId, expression, disableBreakpoints, scope) {
      var t1, t2, t3, t4;
      type$.Map_String_String._as(scope);
      t1 = "evaluate " + expression;
      t2 = this._vmService;
      t2.toString;
      t3 = type$.dynamic;
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      t3.$indexSet(0, "isolateId", isolateId);
      t3.$indexSet(0, "targetId", targetId);
      t3.$indexSet(0, "expression", expression);
      if (scope != null)
        t3.$indexSet(0, "scope", scope);
      t4 = type$.Response_2;
      return this._trackFuture$1$2(t1, t2._call$1$2(0, "evaluate", t3, t4), t4);
    },
    evaluate$4$scope: function($receiver, isolateId, targetId, expression, scope) {
      return this.evaluate$5$disableBreakpoints$scope($receiver, isolateId, targetId, expression, null, scope);
    },
    evaluate$3: function($receiver, isolateId, targetId, expression) {
      return this.evaluate$5$disableBreakpoints$scope($receiver, isolateId, targetId, expression, null, null);
    },
    getAllocationProfile$3$gc$reset: function(isolateId, gc, reset) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.AllocationProfile),
        $async$returnValue, $async$self = this, t2, t3, args, t1, $async$temp1;
      var $async$getAllocationProfile$3$gc$reset = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 18, 0)), $async$getAllocationProfile$3$gc$reset);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              t2 = $async$self._vmService;
              t2.toString;
              t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1.$indexSet(0, "isolateId", isolateId);
              if (reset === true)
                t1.$indexSet(0, "reset", reset);
              if (gc === true)
                t1.$indexSet(0, "gc", gc);
              t3 = type$.AllocationProfile;
              $async$returnValue = $async$self._trackFuture$1$2("getAllocationProfile", t2._call$1$2(0, "getAllocationProfile", t1, t3), t3);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              args = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1);
              if (gc === true)
                args.$indexSet(0, "gc", "full");
              if (reset === true)
                args.$indexSet(0, "reset", reset);
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("getAllocationProfile", $async$self.callMethod$3$args$isolateId("_getAllocationProfile", args, isolateId), type$.Response_2), $async$getAllocationProfile$3$gc$reset);
            case 7:
              // returning from await.
              t1 = $async$result.json;
              $async$returnValue = t1 == null ? null : Q.AllocationProfile$_fromJson(t1);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getAllocationProfile$3$gc$reset, $async$completer);
    },
    getAllocationProfile$2$gc: function(isolateId, gc) {
      return this.getAllocationProfile$3$gc$reset(isolateId, gc, null);
    },
    getAllocationProfile$2$reset: function(isolateId, reset) {
      return this.getAllocationProfile$3$gc$reset(isolateId, null, reset);
    },
    getCpuSamples$3: function(isolateId, timeOriginMicros, timeExtentMicros) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CpuSamples),
        $async$returnValue, $async$self = this, t2, t3, t1;
      var $async$getCpuSamples$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._vmService;
              t1.toString;
              t2 = type$.dynamic;
              t3 = type$.CpuSamples;
              $async$returnValue = $async$self._trackFuture$1$2("getCpuSamples", t1._call$1$2(0, "getCpuSamples", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId, "timeOriginMicros", timeOriginMicros, "timeExtentMicros", timeExtentMicros], t2, t2), t3), t3);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getCpuSamples$3, $async$completer);
    },
    getCpuProfileTimeline$3: function(isolateId, origin, extent) {
      return this.getCpuProfileTimeline$body$VmServiceWrapper(isolateId, origin, extent);
    },
    getCpuProfileTimeline$body$VmServiceWrapper: function(isolateId, origin, extent) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CpuProfileData),
        $async$returnValue, $async$self = this, cpuSamples, t2, traceObject, t3, t4, _i, sample, t5, _box_0, t1, $async$temp1;
      var $async$getCpuProfileTimeline$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              t1 = type$.dynamic;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 27, 0)), $async$getCpuProfileTimeline$3);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 7;
              return P._asyncAwait($async$self.getCpuSamples$3(isolateId, origin, extent), $async$getCpuProfileTimeline$3);
            case 7:
              // returning from await.
              cpuSamples = $async$result;
              _box_0.nextId = 0;
              t2 = type$.String;
              traceObject = P.LinkedHashMap_LinkedHashMap$_literal(["sampleCount", cpuSamples.sampleCount, "samplePeriod", cpuSamples.samplePeriod, "stackDepth", cpuSamples.maxStackDepth, "timeOriginMicros", cpuSamples.timeOriginMicros, "timeExtentMicros", cpuSamples.timeExtentMicros, "stackFrames", P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), "traceEvents", []], t2, t1);
              new U.VmServiceWrapper_getCpuProfileTimeline_processStackFrame(_box_0, isolateId, traceObject).call$2$current$parent(U._CpuProfileTimelineTree__CpuProfileTimelineTree$fromCpuSamples(cpuSamples), null);
              for (t1 = cpuSamples.samples, t3 = t1.length, t4 = type$.Object, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                sample = t1[_i];
                t5 = $.$get$_CpuProfileTimelineTree__timelineTreeExpando().$index(0, sample);
                if (t5.frameId === 0)
                  continue;
                J.add$1$ax(traceObject.$index(0, "traceEvents"), P.LinkedHashMap_LinkedHashMap$_literal(["ph", "P", "name", "", "pid", cpuSamples.pid, "tid", sample.tid, "ts", sample.timestamp, "cat", "Dart", "sf", H.S(isolateId) + "-" + t5.frameId], t2, t4));
              }
              $async$returnValue = E.CpuProfileData_parse(traceObject);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$returnValue = $async$self._trackFuture$1$2("getCpuProfileTimeline", $async$self.callMethod$3$args$isolateId("_getCpuProfileTimeline", P.LinkedHashMap_LinkedHashMap$_literal(["tags", "None", "timeOriginMicros", origin, "timeExtentMicros", extent], t1, t1), isolateId), type$.Response_2).then$1$1(new U.VmServiceWrapper_getCpuProfileTimeline_closure(), type$.CpuProfileData);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getCpuProfileTimeline$3, $async$completer);
    },
    getInstances$4$classId: function(isolateId, objectId, limit, classId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InstanceSet),
        $async$returnValue, $async$self = this, t2, t3, t1, $async$temp1;
      var $async$getInstances$4$classId = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 20, 0)), $async$getInstances$4$classId);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              t2 = $async$self._vmService;
              t2.toString;
              t3 = type$.InstanceSet;
              $async$returnValue = $async$self._trackFuture$1$2("getInstances", t2._call$1$2(0, "getInstances", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId, "objectId", objectId, "limit", limit], t1, t1), t3), t3);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("getInstances", $async$self.callMethod$2$args("_getInstances", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId, "classId", classId, "limit", limit], t1, t1)), type$.Response_2), $async$getInstances$4$classId);
            case 7:
              // returning from await.
              t1 = $async$result.json;
              $async$returnValue = t1 == null ? null : Q.InstanceSet$_fromJson(t1);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInstances$4$classId, $async$completer);
    },
    getVMTimeline$2$timeExtentMicros$timeOriginMicros: function(timeExtentMicros, timeOriginMicros) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Timeline),
        $async$returnValue, $async$self = this, t1, t2, t3, $async$temp1;
      var $async$getVMTimeline$2$timeExtentMicros$timeOriginMicros = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 19, 0)), $async$getVMTimeline$2$timeExtentMicros$timeOriginMicros);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $async$self._vmService;
              t2 = type$.dynamic;
              t3 = type$.Timeline;
              $async$returnValue = $async$self._trackFuture$1$2("getVMTimeline", t1._call$1$2(0, "getVMTimeline", P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), t3), t3);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("getVMTimeline", $async$self.callMethod$1("_getVMTimeline"), type$.Response_2), $async$getVMTimeline$2$timeExtentMicros$timeOriginMicros);
            case 7:
              // returning from await.
              t1 = $async$result.json;
              $async$returnValue = t1 == null ? null : Q.Timeline$_fromJson(t1);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getVMTimeline$2$timeExtentMicros$timeOriginMicros, $async$completer);
    },
    getVMTimeline$0: function() {
      return this.getVMTimeline$2$timeExtentMicros$timeOriginMicros(null, null);
    },
    invoke$5$disableBreakpoints: function(isolateId, targetId, selector, argumentIds, disableBreakpoints) {
      var t1, t2, t3, t4;
      type$.List_String._as(argumentIds);
      t1 = "invoke " + selector;
      t2 = this._vmService;
      t2.toString;
      t3 = type$.dynamic;
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      t3.$indexSet(0, "isolateId", isolateId);
      t3.$indexSet(0, "targetId", targetId);
      t3.$indexSet(0, "selector", selector);
      t3.$indexSet(0, "argumentIds", argumentIds);
      t3.$indexSet(0, "disableBreakpoints", true);
      t4 = type$.Response_2;
      return this._trackFuture$1$2(t1, t2._call$1$2(0, "invoke", t3, t4), t4);
    },
    get$onDebugEvent: function() {
      var t1 = this._vmService._getEventController$1("Debug");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onExtensionEvent: function() {
      var t1 = this._vmService._getEventController$1("Extension");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onStderrEvent: function() {
      var t1 = this._vmService._getEventController$1("Stderr");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onStdoutEvent: function() {
      var t1 = this._vmService._getEventController$1("Stdout");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    resume$3$frameIndex$step: function(_, isolateId, frameIndex, step) {
      var t2, t3,
        t1 = this._vmService;
      t1.toString;
      t2 = type$.dynamic;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      t2.$indexSet(0, "isolateId", isolateId);
      if (step != null)
        t2.$indexSet(0, "step", step);
      t3 = type$.Success;
      return this._trackFuture$1$2("resume", t1._call$1$2(0, "resume", t2, t3), t3);
    },
    resume$2$step: function($receiver, isolateId, step) {
      return this.resume$3$frameIndex$step($receiver, isolateId, null, step);
    },
    resume$1: function($receiver, isolateId) {
      return this.resume$3$frameIndex$step($receiver, isolateId, null, null);
    },
    setVMTimelineFlags$1: function(recordedStreams) {
      return this.setVMTimelineFlags$body$VmServiceWrapper(type$.List_String._as(recordedStreams));
    },
    setVMTimelineFlags$body$VmServiceWrapper: function(recordedStreams) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Success),
        $async$returnValue, $async$self = this, t3, t1, t2, $async$temp1;
      var $async$setVMTimelineFlags$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              t2 = type$.Success;
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 19, 0)), $async$setVMTimelineFlags$1);
            case 6:
              // returning from await.
              $async$goto = $async$temp1.boolConversionCheck($async$result) ? 3 : 5;
              break;
            case 3:
              // then
              t3 = $async$self._vmService;
              t3.toString;
              $async$returnValue = $async$self._trackFuture$1$2("setVMTimelineFlags", t3._call$1$2(0, "setVMTimelineFlags", P.LinkedHashMap_LinkedHashMap$_literal(["recordedStreams", type$.List_String._as(recordedStreams)], t1, t1), t2), t2);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$temp1 = t2;
              $async$goto = 7;
              return P._asyncAwait($async$self._trackFuture$1$2("setVMTimelineFlags", $async$self.callMethod$2$args("_setVMTimelineFlags", P.LinkedHashMap_LinkedHashMap$_literal(["recordedStreams", recordedStreams], t1, t1)), type$.Response_2), $async$setVMTimelineFlags$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$setVMTimelineFlags$1, $async$completer);
    },
    streamListen$1: function(streamId) {
      var t2, t3, t4, future,
        _s12_ = "streamListen",
        t1 = this._activeStreams;
      if (!t1.containsKey$1(0, streamId)) {
        t2 = this._vmService;
        t2.toString;
        t3 = type$.dynamic;
        t4 = type$.Success;
        future = this._trackFuture$1$2(_s12_, t2._call$1$2(0, _s12_, P.LinkedHashMap_LinkedHashMap$_literal(["streamId", streamId], t3, t3), t4), t4);
        t1.$indexSet(0, streamId, future);
        return future;
      } else
        return t1.$index(0, streamId);
    },
    getInboundReferences$3: function(isolateId, targetId, limit) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.InboundReferences_2),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, $async$temp1;
      var $async$getInboundReferences$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 3;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 25, 0)), $async$getInboundReferences$3);
            case 3:
              // returning from await.
              t1 = $async$temp1.boolConversionCheck($async$result);
              t2 = type$.dynamic;
              t3 = type$.InboundReferences_2;
              t4 = $async$self._vmService;
              if (t1) {
                t4.toString;
                $async$returnValue = $async$self._trackFuture$1$2("getInboundReferences", t4._call$1$2(0, "getInboundReferences", P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId, "targetId", targetId, "limit", limit], t2, t2), t3), t3);
                // goto return
                $async$goto = 1;
                break;
              } else {
                $async$returnValue = $async$self._trackFuture$1$2("getInboundReferences", type$.Future_InboundReferences._as(t4.callServiceExtension$3$args$isolateId("_getInboundReferences", P.LinkedHashMap_LinkedHashMap$_literal(["targetId", targetId, "limit", limit], t2, t2), isolateId)), t3);
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getInboundReferences$3, $async$completer);
    },
    isProtocolVersionSupported$1$supportedVersion: function(supportedVersion) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1;
      var $async$isProtocolVersionSupported$1$supportedVersion = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self._protocolVersion == null ? 3 : 4;
              break;
            case 3:
              // then
              t1 = type$.Version;
              $async$goto = 5;
              return P._asyncAwait($async$self._trackFuture$1$2("getVersion", $async$self._vmService._call$1$1(0, "getVersion", t1), t1), $async$isProtocolVersionSupported$1$supportedVersion);
            case 5:
              // returning from await.
              $async$self.set$_protocolVersion($async$result);
            case 4:
              // join
              $async$returnValue = $async$self.protocolVersionSupported$1$supportedVersion(supportedVersion);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$isProtocolVersionSupported$1$supportedVersion, $async$completer);
    },
    protocolVersionSupported$1$supportedVersion: function(supportedVersion) {
      var t1 = this._protocolVersion;
      return new T.SemanticVersion(t1.major, t1.minor, 0).compareTo$1(0, supportedVersion) >= 0;
    },
    retrieveFullStringValue$3$onUnavailable: function(isolateId, stringRef, onUnavailable) {
      return this.retrieveFullStringValue$body$VmServiceWrapper(isolateId, stringRef, type$.String_Function_String._as(onUnavailable));
    },
    retrieveFullStringValue$body$VmServiceWrapper: function(isolateId, stringRef, onUnavailable) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, result;
      var $async$retrieveFullStringValue$3$onUnavailable = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (stringRef.get$valueAsStringIsTruncated() !== true) {
                $async$returnValue = stringRef.get$valueAsString(stringRef);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = stringRef.get$id(stringRef);
              stringRef.get$length(stringRef);
              $async$goto = 3;
              return P._asyncAwait($async$self._trackFuture$1$2("getObject", $async$self._vmService.getObject$2(0, isolateId, t1), type$.Obj), $async$retrieveFullStringValue$3$onUnavailable);
            case 3:
              // returning from await.
              result = $async$result;
              if (result instanceof Q.Instance) {
                $async$returnValue = result.get$valueAsString(result);
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = onUnavailable.call$1(stringRef.get$valueAsString(stringRef));
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$retrieveFullStringValue$3$onUnavailable, $async$completer);
    },
    get$serviceStreamName: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$get$serviceStreamName = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$goto = 3;
              return P._asyncAwait($async$self.isProtocolVersionSupported$1$supportedVersion(new T.SemanticVersion(3, 22, 0)), $async$get$serviceStreamName);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.boolConversionCheck($async$result) ? "Service" : "_Service";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$get$serviceStreamName, $async$completer);
    },
    _trackFuture$1$2: function($name, future, $T) {
      $T._eval$1("Future<0>")._as(future);
      return future;
    },
    set$_protocolVersion: function(_protocolVersion) {
      this._protocolVersion = type$.Version._as(_protocolVersion);
    },
    $isVmService: 1
  };
  U.VmServiceWrapper_getCpuProfileTimeline_processStackFrame.prototype = {
    call$2$current$parent: function(current, $parent) {
      var t2, key, t3, t4, _i, _this = this,
        t1 = current.frameId = _this._box_0.nextId++;
      if (t1 !== 0) {
        t2 = _this.isolateId;
        key = H.S(t2) + "-" + t1;
        t1 = _this.traceObject.$index(0, "stackFrames");
        t3 = type$.String;
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
        t3.$indexSet(0, "category", "Dart");
        t3.$indexSet(0, "name", current.get$name(current));
        t4 = current.samples.functions;
        t3.$indexSet(0, "resolvedUrl", (t4 && C.JSArray_methods).$index(t4, current.index).resolvedUrl);
        if ($parent != null && $parent.frameId !== 0)
          t3.$indexSet(0, "parent", H.S(t2) + "-" + $parent.frameId);
        J.$indexSet$ax(t1, key, t3);
      }
      for (t1 = current.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        _this.call$2$current$parent(t1[_i], current);
    },
    call$0: function() {
      return this.call$2$current$parent(null, null);
    },
    call$1$parent: function($parent) {
      return this.call$2$current$parent(null, $parent);
    },
    $signature: 264
  };
  U.VmServiceWrapper_getCpuProfileTimeline_closure.prototype = {
    call$1: function(response) {
      return E.CpuProfileData_parse(type$.Response_2._as(response).json);
    },
    $signature: 265
  };
  U.TrackedFuture.prototype = {};
  U._CpuProfileTimelineTree.prototype = {
    get$name: function(_) {
      var t1 = this.samples.functions;
      return H._asStringS(J.get$name$x((t1 && C.JSArray_methods).$index(t1, this.index).$function));
    },
    _getChild$1: function(index) {
      var i, t2, child, childIndex,
        t1 = this.children,
        $length = t1.length;
      for (i = 0; t2 = i < $length, t2; ++i) {
        child = t1[i];
        childIndex = child.index;
        if (childIndex == index)
          return child;
        if (typeof childIndex !== "number")
          return childIndex.$gt();
        if (typeof index !== "number")
          return H.iae(index);
        if (childIndex > index)
          break;
      }
      child = new U._CpuProfileTimelineTree(this.samples, index, H.setRuntimeTypeInfo([], type$.JSArray__CpuProfileTimelineTree));
      if (t2)
        C.JSArray_methods.insert$2(t1, i, child);
      else
        C.JSArray_methods.add$1(t1, child);
      return child;
    }
  };
  M.AdbMemoryInfo.prototype = {
    toJson$0: function() {
      var _this = this;
      return P.LinkedHashMap_LinkedHashMap$_literal(["Realtime", _this.realtime, "Java Heap", _this.javaHeap, "Native Heap", _this.nativeHeap, "Code", _this.code, "Stack", _this.stack, "Graphics", _this.graphics, "Private Other", _this.other, "System", _this.system, "Total", _this.total], type$.String, type$.dynamic);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.realtime,
        t2 = "[AdbMemoryInfo Realtime: " + t1 + ", realtimeDT: ",
        t3 = new P.DateTime(t1, false);
      t3.DateTime$_withValue$2$isUtc(t1, false);
      return t2 + t3.toString$0(0) + ", durationBoot: " + P.Duration$(0, t1).toString$0(0) + ", Java Heap: " + _this.javaHeap + ", Native Heap: " + _this.nativeHeap + ", Code: " + _this.code + ", Stack: " + _this.stack + ", Graphics: " + _this.graphics + ", Private Other: " + _this.other + ", System: " + _this.system + ", Total: " + _this.total + "]";
    }
  };
  E.HeapSample.prototype = {
    toJson$0: function() {
      var _this = this;
      return P.LinkedHashMap_LinkedHashMap$_literal(["timestamp", _this.timestamp, "rss", _this.rss, "capacity", _this.capacity, "used", _this.used, "external", _this.external, "gc", _this.isGC, "adb_memoryInfo", _this.get$adbMemoryInfo().toJson$0()], type$.String, type$.dynamic);
    },
    get$adbMemoryInfo: function() {
      var t1 = this._adbMemoryInfo;
      return t1 == null ? this._adbMemoryInfo = new M.AdbMemoryInfo(0, 0, 0, 0, 0, 0, 0, 0, 0) : t1;
    },
    toString$0: function(_) {
      var _this = this;
      return "[HeapSample timestamp: " + _this.timestamp + ", rss: " + H.S(_this.rss) + ", capacity: " + _this.capacity + ", used: " + _this.used + ", external: " + _this.external + ", isGC: " + _this.isGC + ", AdbMemoryInfo: " + H.S(_this.get$adbMemoryInfo()) + "]";
    }
  };
  L.HeapSpace.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "HeapSpace");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["avgCollectionPeriodMillis", _this.avgCollectionPeriodMillis, "capacity", _this.capacity, "collections", _this.collections, "external", _this.external, "name", _this.name, "time", _this.time, "used", _this.used], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[HeapSpace]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  G.get_closure.prototype = {
    call$1: function(client) {
      return client._sendUnstreamed$3("GET", this.url, type$.Map_String_String._as(this.headers));
    },
    $signature: 266
  };
  E.BaseClient.prototype = {
    patch$4$body$encoding$headers: function(url, body, encoding, headers) {
      return this._sendUnstreamed$5("PATCH", url, type$.Map_String_String._as(headers), body, type$.Encoding._as(encoding));
    },
    patch$1: function(url) {
      return this.patch$4$body$encoding$headers(url, null, null, null);
    },
    _sendUnstreamed$5: function(method, url, headers, body, encoding) {
      return this._sendUnstreamed$body$BaseClient(method, url, type$.Map_String_String._as(headers), body, encoding);
    },
    _sendUnstreamed$3: function(method, url, headers) {
      return this._sendUnstreamed$5(method, url, headers, null, null);
    },
    _sendUnstreamed$body$BaseClient: function(method, url, headers, body, encoding) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, contentType, t1, t2, t3, t4, request, $async$temp1;
      var $async$_sendUnstreamed$5 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = typeof url == "string" ? P.Uri_parse(url, 0, null) : type$.Uri._as(url);
              t2 = new Uint8Array(0);
              t3 = type$.String;
              t4 = P.LinkedHashMap_LinkedHashMap(new G.BaseRequest_closure(), new G.BaseRequest_closure0(), t3, t3);
              request = new O.Request(C.C_Utf8Codec, t2, method, t1, t4);
              if (headers != null)
                t4.addAll$1(0, headers);
              if (encoding != null)
                request.set$encoding(0, encoding);
              if (body != null)
                if (typeof body == "string")
                  request.set$body(0, body);
                else if (type$.List_dynamic._is(body)) {
                  t1 = type$.List_int._as(J.cast$1$0$ax(body, type$.int));
                  request._checkFinalized$0();
                  request._bodyBytes = B.toUint8List(t1);
                } else if (type$.Map_dynamic_dynamic._is(body)) {
                  t1 = type$.Map_String_String._as(J.cast$2$0$ax(body, t3, t3));
                  contentType = request.get$_contentType();
                  if (contentType == null)
                    t4.$indexSet(0, "content-type", R.MediaType$("application", "x-www-form-urlencoded", null).toString$0(0));
                  else if (contentType.type + "/" + contentType.subtype !== "application/x-www-form-urlencoded")
                    H.throwExpression(P.StateError$('Cannot set the body fields of a Request with content-type "' + contentType.get$mimeType(contentType) + '".'));
                  request.set$body(0, B.mapToQuery(t1, request.get$encoding(request)));
                } else
                  throw H.wrapException(P.ArgumentError$('Invalid request body "' + H.S(body) + '".'));
              $async$temp1 = U;
              $async$goto = 3;
              return P._asyncAwait($async$self.send$1(0, request), $async$_sendUnstreamed$5);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_sendUnstreamed$5, $async$completer);
    },
    $isClient0: 1
  };
  G.BaseRequest.prototype = {
    finalize$0: function() {
      if (this._finalized)
        throw H.wrapException(P.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return null;
    },
    toString$0: function(_) {
      return this.method + " " + H.S(this.url);
    }
  };
  G.BaseRequest_closure.prototype = {
    call$2: function(key1, key2) {
      H._asStringS(key1);
      H._asStringS(key2);
      return key1.toLowerCase() === key2.toLowerCase();
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 268
  };
  G.BaseRequest_closure0.prototype = {
    call$1: function(key) {
      return C.JSString_methods.get$hashCode(H._asStringS(key).toLowerCase());
    },
    $signature: 269
  };
  T.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request: function(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 100)
        throw H.wrapException(P.ArgumentError$("Invalid status code " + t1 + "."));
    }
  };
  O.BrowserClient.prototype = {
    send$1: function(_, request) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, xhr, completer, bytes, t1, t2, t3, t4, t5;
      var $async$send$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request.super$BaseRequest$finalize();
              $async$goto = 3;
              return P._asyncAwait(new Z.ByteStream(P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([request._bodyBytes], type$.JSArray_List_int), type$.List_int)).toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = new XMLHttpRequest();
              t1 = $async$self._xhrs;
              t1.add$1(0, xhr);
              t2 = xhr;
              J.open$3$async$x(t2, request.method, H.S(request.url), true);
              t2.responseType = "blob";
              t2.withCredentials = false;
              request.headers.forEach$1(0, J.get$setRequestHeader$x(xhr));
              completer = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_StreamedResponse), type$._AsyncCompleter_StreamedResponse);
              t2 = type$.EventTarget;
              t3 = type$._EventStream_ProgressEvent;
              t4 = new W._EventStream(t2._as(xhr), "load", false, t3);
              t5 = type$.void;
              t4.get$first(t4).then$1$1(new O.BrowserClient_send_closure(xhr, completer, request), t5);
              t3 = new W._EventStream(t2._as(xhr), "error", false, t3);
              t3.get$first(t3).then$1$1(new O.BrowserClient_send_closure0(completer, request), t5);
              J.send$1$x(xhr, bytes);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(completer.future, $async$send$1);
            case 7:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1.remove$1(0, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$send$1, $async$completer);
    },
    close$0: function(_) {
      var t1;
      for (t1 = this._xhrs, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();)
        t1._collection$_current.abort();
    }
  };
  O.BrowserClient_send_closure.prototype = {
    call$1: function(_) {
      var t1, blob, reader, t2, t3, t4, t5, t6;
      type$.ProgressEvent._as(_);
      t1 = this.xhr;
      blob = type$.Blob._as(W._convertNativeToDart_XHR_Response(t1.response));
      if (blob == null)
        blob = W.Blob_Blob([]);
      reader = new FileReader();
      t2 = type$._EventStream_ProgressEvent;
      t3 = new W._EventStream(reader, "load", false, t2);
      t4 = this.completer;
      t5 = this.request;
      t6 = type$.Null;
      t3.get$first(t3).then$1$1(new O.BrowserClient_send__closure(reader, t4, t1, t5), t6);
      t2 = new W._EventStream(reader, "error", false, t2);
      t2.get$first(t2).then$1$1(new O.BrowserClient_send__closure0(t4, t5), t6);
      reader.readAsArrayBuffer(blob);
    },
    $signature: 25
  };
  O.BrowserClient_send__closure.prototype = {
    call$1: function(_) {
      var body, t1, t2, t3, t4, t5, t6, _this = this;
      type$.ProgressEvent._as(_);
      body = type$.Uint8List._as(C.FileReader_methods.get$result(_this.reader));
      t1 = P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([body], type$.JSArray_List_int), type$.List_int);
      t2 = _this.xhr;
      t3 = t2.status;
      t4 = body.length;
      t5 = _this.request;
      t6 = C.HttpRequest_methods.get$responseHeaders(t2);
      t2 = t2.statusText;
      t1 = new X.StreamedResponse(B.toByteStream(new Z.ByteStream(t1)), t5, t3, t2, t4, t6, false, true);
      t1.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, t6, false, true, t2, t5);
      _this.completer.complete$1(0, t1);
    },
    $signature: 25
  };
  O.BrowserClient_send__closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$2(new E.ClientException(J.toString$0$(type$.ProgressEvent._as(error))), P.StackTrace_current());
    },
    $signature: 25
  };
  O.BrowserClient_send_closure0.prototype = {
    call$1: function(_) {
      type$.ProgressEvent._as(_);
      this.completer.completeError$2(new E.ClientException("XMLHttpRequest error."), P.StackTrace_current());
    },
    $signature: 25
  };
  Z.ByteStream.prototype = {
    toBytes$0: function() {
      var t1 = new P._Future($.Zone__current, type$._Future_Uint8List),
        completer = new P._AsyncCompleter(t1, type$._AsyncCompleter_Uint8List),
        sink = new P._ByteCallbackSink(new Z.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(sink.get$add(sink), true, sink.get$close(sink), completer.get$completeError());
      return t1;
    }
  };
  Z.ByteStream_toBytes_closure.prototype = {
    call$1: function(bytes) {
      return this.completer.complete$1(0, new Uint8Array(H._ensureNativeList(type$.List_int._as(bytes))));
    },
    $signature: 270
  };
  U.Client0.prototype = {};
  E.ClientException.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  O.Request.prototype = {
    get$encoding: function(_) {
      var t1, t2, _this = this;
      if (_this.get$_contentType() == null || !H.boolConversionCheck(J.containsKey$1$x(_this.get$_contentType().parameters._collection$_map, "charset")))
        return _this._defaultEncoding;
      t1 = J.$index$asx(_this.get$_contentType().parameters._collection$_map, "charset");
      t2 = P.Encoding_getByName(t1);
      return t2 == null ? H.throwExpression(P.FormatException$('Unsupported encoding "' + H.S(t1) + '".', null, null)) : t2;
    },
    set$encoding: function(_, value) {
      var contentType, t1, _this = this;
      _this._checkFinalized$0();
      _this._defaultEncoding = value;
      contentType = _this.get$_contentType();
      if (contentType == null)
        return;
      t1 = type$.String;
      _this.headers.$indexSet(0, "content-type", contentType.change$1$parameters(P.LinkedHashMap_LinkedHashMap$_literal(["charset", value.get$name(value)], t1, t1)).toString$0(0));
    },
    set$body: function(_, value) {
      var contentType, t2, _this = this,
        _s12_ = "content-type",
        t1 = type$.List_int._as(_this.get$encoding(_this).encode$1(value));
      _this._checkFinalized$0();
      _this._bodyBytes = B.toUint8List(t1);
      contentType = _this.get$_contentType();
      if (contentType == null) {
        t1 = _this.get$encoding(_this);
        t2 = type$.String;
        _this.headers.$indexSet(0, _s12_, R.MediaType$("text", "plain", P.LinkedHashMap_LinkedHashMap$_literal(["charset", t1.get$name(t1)], t2, t2)).toString$0(0));
      } else if (!H.boolConversionCheck(J.containsKey$1$x(contentType.parameters._collection$_map, "charset"))) {
        t1 = _this.get$encoding(_this);
        t2 = type$.String;
        _this.headers.$indexSet(0, _s12_, contentType.change$1$parameters(P.LinkedHashMap_LinkedHashMap$_literal(["charset", t1.get$name(t1)], t2, t2)).toString$0(0));
      }
    },
    get$_contentType: function() {
      var contentType = this.headers.$index(0, "content-type");
      if (contentType == null)
        return null;
      return R.MediaType_MediaType$parse(contentType);
    },
    _checkFinalized$0: function() {
      if (!this._finalized)
        return;
      throw H.wrapException(P.StateError$("Can't modify a finalized Request."));
    }
  };
  U.Response0.prototype = {};
  X.StreamedResponse.prototype = {};
  B.mapToQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1;
      H._asStringS(key);
      H._asStringS(value);
      t1 = this.encoding;
      return C.JSArray_methods.add$1(this.pairs, H.setRuntimeTypeInfo([P._Uri__uriEncode(C.List_nxB, key, t1, true), P._Uri__uriEncode(C.List_nxB, value, t1, true)], type$.JSArray_String));
    },
    $signature: 32
  };
  B.mapToQuery_closure0.prototype = {
    call$1: function(pair) {
      var t1;
      type$.List_String._as(pair);
      t1 = J.getInterceptor$asx(pair);
      return H.S(t1.$index(pair, 0)) + "=" + H.S(t1.$index(pair, 1));
    },
    $signature: 271
  };
  Z.CaseInsensitiveMap.prototype = {};
  Z.CaseInsensitiveMap$from_closure.prototype = {
    call$1: function(key) {
      return H._asStringS(key).toLowerCase();
    },
    $signature: 5
  };
  Z.CaseInsensitiveMap$from_closure0.prototype = {
    call$1: function(key) {
      return key != null;
    },
    $signature: 33
  };
  R.MediaType.prototype = {
    get$mimeType: function(_) {
      return this.type + "/" + this.subtype;
    },
    change$1$parameters: function(parameters) {
      var t1, parameters0;
      type$.Map_String_String._as(parameters);
      t1 = type$.String;
      parameters0 = P.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      return R.MediaType$(this.type, this.subtype, parameters0);
    },
    toString$0: function(_) {
      var buffer = new P.StringBuffer(""),
        t1 = this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      J.forEach$1$ax(t1._collection$_map, t1.$ti._eval$1("~(1,2)")._as(new R.MediaType_toString_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  R.MediaType_MediaType$parse_closure.prototype = {
    call$0: function() {
      var t3, type, subtype, t4, parameters, t5, success, attribute, value,
        t1 = this.mediaType,
        scanner = new X.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      type = scanner.get$lastMatch().$index(0, 0);
      scanner.expect$1("/");
      scanner.expect$1(t3);
      subtype = scanner.get$lastMatch().$index(0, 0);
      scanner.scan$1(t2);
      t4 = type$.String;
      parameters = P.LinkedHashMap_LinkedHashMap$_empty(t4, t4);
      while (true) {
        t4 = scanner._lastMatch = C.JSString_methods.matchAsPrefix$2(";", t1, scanner._string_scanner$_position);
        t5 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t4 != null;
        t4 = success ? scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4) : t5;
        if (!success)
          break;
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t4);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
        scanner.expect$1(t3);
        if (scanner._string_scanner$_position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        attribute = scanner._lastMatch.$index(0, 0);
        scanner.expect$1("=");
        t4 = scanner._lastMatch = t3.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        t5 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t4 != null;
        if (success) {
          t4 = scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
          t5 = t4;
        } else
          t4 = t5;
        if (success) {
          if (t4 !== t5)
            scanner._lastMatch = null;
          value = scanner._lastMatch.$index(0, 0);
        } else
          value = N.expectQuotedString(scanner);
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
        parameters.$indexSet(0, attribute, value);
      }
      scanner.expectDone$0();
      return R.MediaType$(type, subtype, parameters);
    },
    $signature: 272
  };
  R.MediaType_toString_closure.prototype = {
    call$2: function(attribute, value) {
      var t1, t2;
      H._asStringS(attribute);
      H._asStringS(value);
      t1 = this.buffer;
      t1._contents += "; " + H.S(attribute) + "=";
      t2 = $.$get$nonToken()._nativeRegExp;
      if (typeof value != "string")
        H.throwExpression(H.argumentErrorValue(value));
      if (t2.test(value)) {
        t1._contents += '"';
        t2 = $.$get$_escapedChar();
        value.toString;
        t2 = t1._contents += C.JSString_methods.splitMapJoin$2$onMatch(value, t2, type$.String_Function_Match._as(new R.MediaType_toString__closure()));
        t1._contents = t2 + '"';
      } else
        t1._contents += H.S(value);
    },
    $signature: 49
  };
  R.MediaType_toString__closure.prototype = {
    call$1: function(match) {
      return C.JSString_methods.$add("\\", match.$index(0, 0));
    },
    $signature: 108
  };
  N.expectQuotedString_closure.prototype = {
    call$1: function(match) {
      return match.$index(0, 1);
    },
    $signature: 108
  };
  B.DateSymbols.prototype = {
    toString$0: function(_) {
      return this.NAME;
    }
  };
  T.DateFormat.prototype = {
    format$1: function(date) {
      var t1, t2, _i, t3, _this = this;
      if (_this._formatFieldsPrivate == null) {
        if (_this._intl$_pattern == null) {
          _this.addPattern$1("yMMMMd");
          _this.addPattern$1("jms");
        }
        _this.set$_formatFieldsPrivate(_this.parsePattern$1(_this._intl$_pattern));
      }
      t1 = _this._formatFieldsPrivate;
      t2 = t1.length;
      _i = 0;
      t3 = "";
      for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t3 += H.S(t1[_i].format$1(date));
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    _appendPattern$2: function(inputPattern, separator) {
      var t1 = this._intl$_pattern;
      this._intl$_pattern = t1 == null ? inputPattern : t1 + separator + H.S(inputPattern);
    },
    addPattern$1: function(inputPattern) {
      var t1, t2, t3, _this = this;
      _this.set$_formatFieldsPrivate(null);
      t1 = $.$get$dateTimePatterns();
      t2 = _this._locale;
      t1.toString;
      t1 = T.Intl_canonicalizedLocale(t2) === "en_US" ? t1.fallbackData : t1._throwException$0();
      t2 = type$.Map_dynamic_dynamic;
      if (!H.boolConversionCheck(t2._as(t1).containsKey$1(0, inputPattern)))
        _this._appendPattern$2(inputPattern, " ");
      else {
        t1 = $.$get$dateTimePatterns();
        t3 = _this._locale;
        t1.toString;
        _this._appendPattern$2(H._asStringS(t2._as(T.Intl_canonicalizedLocale(t3) === "en_US" ? t1.fallbackData : t1._throwException$0()).$index(0, inputPattern)), " ");
      }
      return _this;
    },
    get$dateSymbols: function() {
      var t2,
        t1 = this._locale;
      if (t1 != $.lastDateSymbolLocale) {
        $.lastDateSymbolLocale = t1;
        t2 = $.$get$_dateTimeSymbols();
        t2.toString;
        t1 = T.Intl_canonicalizedLocale(t1) === "en_US" ? t2.fallbackData : t2._throwException$0();
        $.cachedDateSymbols = type$.DateSymbols._as(t1);
      }
      return $.cachedDateSymbols;
    },
    get$useNativeDigits: function() {
      var t1 = this._useNativeDigits;
      if (t1 == null) {
        $.DateFormat__useNativeDigitsByDefault.$index(0, this._locale);
        t1 = this._useNativeDigits = true;
      }
      return t1;
    },
    _localizeDigits$1: function(numberString) {
      var t1, t2, newDigits, i, t3, t4, t5, _this = this;
      if (!(H.boolConversionCheck(_this.get$useNativeDigits()) && _this._localeZeroCodeUnit != $.$get$DateFormat__asciiZeroCodeUnit()))
        return numberString;
      t1 = numberString.length;
      t2 = new Array(t1);
      t2.fixed$length = Array;
      newDigits = H.setRuntimeTypeInfo(t2, type$.JSArray_int);
      for (t2 = type$.DateSymbols, i = 0; i < t1; ++i) {
        t3 = C.JSString_methods._codeUnitAt$1(numberString, i);
        t4 = _this._localeZeroCodeUnit;
        if (t4 == null) {
          t4 = _this._localeZero;
          if (t4 == null) {
            t4 = _this._useNativeDigits;
            if (t4 == null) {
              $.DateFormat__useNativeDigitsByDefault.$index(0, _this._locale);
              t4 = _this._useNativeDigits = true;
            }
            if (t4) {
              t4 = _this._locale;
              if (t4 != $.lastDateSymbolLocale) {
                $.lastDateSymbolLocale = t4;
                t5 = $.$get$_dateTimeSymbols();
                t5.toString;
                $.cachedDateSymbols = t2._as(T.Intl_canonicalizedLocale(t4) === "en_US" ? t5.fallbackData : t5._throwException$0());
              }
              $.cachedDateSymbols.toString;
            }
            t4 = _this._localeZero = "0";
          }
          t4 = _this._localeZeroCodeUnit = C.JSString_methods._codeUnitAt$1(t4, 0);
        }
        t5 = $.$get$DateFormat__asciiZeroCodeUnit();
        if (typeof t5 !== "number")
          return H.iae(t5);
        C.JSArray_methods.$indexSet(newDigits, i, t3 + t4 - t5);
      }
      return P.String_String$fromCharCodes(newDigits, 0, null);
    },
    parsePattern$1: function(pattern) {
      var t1;
      if (pattern == null)
        return null;
      t1 = this._parsePatternHelper$1(pattern);
      return new H.ReversedListIterable(t1, H._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>")).toList$0(0);
    },
    _parsePatternHelper$1: function(pattern) {
      var matched, parsed;
      if (pattern.length === 0)
        return H.setRuntimeTypeInfo([], type$.JSArray__DateFormatField);
      matched = this._intl$_match$1(pattern);
      if (matched == null)
        return H.setRuntimeTypeInfo([], type$.JSArray__DateFormatField);
      parsed = this._parsePatternHelper$1(C.JSString_methods.substring$1(pattern, matched.fullPattern$0().length));
      C.JSArray_methods.add$1(parsed, matched);
      return parsed;
    },
    _intl$_match$1: function(pattern) {
      var i, t1, match, t2;
      for (i = 0; t1 = $.$get$DateFormat__matchers(), i < 3; ++i) {
        match = t1[i].firstMatch$1(pattern);
        if (match != null) {
          t1 = T.DateFormat__fieldConstructors()[i];
          t2 = match._match;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          return t1.call$2(t2[0], this);
        }
      }
      return null;
    },
    set$_formatFieldsPrivate: function(_formatFieldsPrivate) {
      this._formatFieldsPrivate = type$.List__DateFormatField._as(_formatFieldsPrivate);
    }
  };
  T.DateFormat_closure.prototype = {
    call$8: function(year, month, day, hour24, minute, second, fractionalSecond, utc) {
      var t1;
      if (utc) {
        t1 = H.Primitives_valueFromDecomposedDate(year, month, day, hour24, minute, second, fractionalSecond.$add(0, 0), true);
        if (!H._isInt(t1))
          H.throwExpression(H.argumentErrorValue(t1));
        return new P.DateTime(t1, true);
      } else {
        t1 = H.Primitives_valueFromDecomposedDate(year, month, day, hour24, minute, second, fractionalSecond.$add(0, 0), false);
        if (!H._isInt(t1))
          H.throwExpression(H.argumentErrorValue(t1));
        return new P.DateTime(t1, false);
      }
    },
    $signature: 274
  };
  T.DateFormat__fieldConstructors_closure.prototype = {
    call$2: function(pattern, $parent) {
      var t1 = T._DateFormatQuotedField__patchQuotes(pattern),
        t2 = new T._DateFormatQuotedField(t1, $parent);
      C.JSString_methods.trim$0(t1);
      t2._fullPattern = pattern;
      return t2;
    },
    $signature: 275
  };
  T.DateFormat__fieldConstructors_closure0.prototype = {
    call$2: function(pattern, $parent) {
      J.trim$0$s(pattern);
      return new T._DateFormatPatternField(pattern, $parent);
    },
    $signature: 276
  };
  T.DateFormat__fieldConstructors_closure1.prototype = {
    call$2: function(pattern, $parent) {
      J.trim$0$s(pattern);
      return new T._DateFormatLiteralField(pattern, $parent);
    },
    $signature: 277
  };
  T._DateFormatField.prototype = {
    fullPattern$0: function() {
      return this.pattern;
    },
    toString$0: function(_) {
      return this.pattern;
    },
    format$1: function(date) {
      return this.pattern;
    }
  };
  T._DateFormatLiteralField.prototype = {};
  T._DateFormatQuotedField.prototype = {
    fullPattern$0: function() {
      return this._fullPattern;
    }
  };
  T._DateFormatPatternField.prototype = {
    format$1: function(date) {
      return this.formatField$1(date);
    },
    formatField$1: function(date) {
      var hours, index, era, hour, year, _this = this, _s1_ = "0",
        t1 = _this.pattern,
        t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      switch (t1[0]) {
        case "a":
          hours = H.Primitives_getHours(date);
          index = hours >= 12 && hours < 24 ? 1 : 0;
          return _this.parent.get$dateSymbols().AMPMS[index];
        case "c":
          return _this.formatStandaloneDay$1(date);
        case "d":
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getDay(date), t2, _s1_));
        case "D":
          t1 = H.Primitives_valueFromDecomposedDate(H.Primitives_getYear(date), 2, 29, 0, 0, 0, 0, false);
          if (!H._isInt(t1))
            H.throwExpression(H.argumentErrorValue(t1));
          t1 = T._dayOfYear(H.Primitives_getMonth(date), H.Primitives_getDay(date), H.Primitives_getMonth(new P.DateTime(t1, false)) === 2);
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + t1, t2, _s1_));
        case "E":
          t1 = _this.parent;
          t1 = t2 >= 4 ? t1.get$dateSymbols().WEEKDAYS : t1.get$dateSymbols().SHORTWEEKDAYS;
          return t1[C.JSInt_methods.$mod(H.Primitives_getWeekday(date), 7)];
        case "G":
          era = H.Primitives_getYear(date) > 0 ? 1 : 0;
          t1 = _this.parent;
          return t2 >= 4 ? t1.get$dateSymbols().ERANAMES[era] : t1.get$dateSymbols().ERAS[era];
        case "h":
          hours = H.Primitives_getHours(date);
          if (H.Primitives_getHours(date) > 12)
            hours -= 12;
          if (hours === 0)
            hours = 12;
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + hours, t2, _s1_));
        case "H":
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getHours(date), t2, _s1_));
        case "K":
          t1 = C.JSInt_methods.$mod(H.Primitives_getHours(date), 12);
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + t1, t2, _s1_));
        case "k":
          hour = H.Primitives_getHours(date) === 0 ? 24 : H.Primitives_getHours(date);
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + hour, t2, _s1_));
        case "L":
          return _this.formatStandaloneMonth$1(date);
        case "M":
          return _this.formatMonth$1(date);
        case "m":
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getMinutes(date), t2, _s1_));
        case "Q":
          return _this.formatQuarter$1(date);
        case "S":
          return _this.formatFractionalSeconds$1(date);
        case "s":
          return _this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getSeconds(date), t2, _s1_));
        case "v":
          return _this.formatTimeZoneId$1(date);
        case "y":
          year = H.Primitives_getYear(date);
          if (year < 0)
            year = -year;
          t1 = _this.parent;
          return t2 === 2 ? t1._localizeDigits$1(C.JSString_methods.padLeft$2("" + C.JSInt_methods.$mod(year, 100), 2, _s1_)) : t1._localizeDigits$1(C.JSString_methods.padLeft$2("" + year, t2, _s1_));
        case "z":
          return _this.formatTimeZone$1(date);
        case "Z":
          return _this.formatTimeZoneRFC$1(date);
        default:
          return "";
      }
    },
    formatMonth$1: function(date) {
      var t1 = this.pattern.length,
        t2 = this.parent;
      switch (t1) {
        case 5:
          t1 = t2.get$dateSymbols().NARROWMONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        case 4:
          t1 = t2.get$dateSymbols().MONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        case 3:
          t1 = t2.get$dateSymbols().SHORTMONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        default:
          return t2._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getMonth(date), t1, "0"));
      }
    },
    formatFractionalSeconds$1: function(date) {
      var basic = this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getMilliseconds(date), 3, "0")),
        t1 = this.pattern.length - 3;
      if (t1 > 0)
        return basic + this.parent._localizeDigits$1(C.JSString_methods.padLeft$2("0", t1, "0"));
      else
        return basic;
    },
    formatStandaloneDay$1: function(date) {
      var t1 = this.pattern.length,
        t2 = this.parent;
      switch (t1) {
        case 5:
          return t2.get$dateSymbols().STANDALONENARROWWEEKDAYS[C.JSInt_methods.$mod(H.Primitives_getWeekday(date), 7)];
        case 4:
          return t2.get$dateSymbols().STANDALONEWEEKDAYS[C.JSInt_methods.$mod(H.Primitives_getWeekday(date), 7)];
        case 3:
          return t2.get$dateSymbols().STANDALONESHORTWEEKDAYS[C.JSInt_methods.$mod(H.Primitives_getWeekday(date), 7)];
        default:
          return t2._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getDay(date), 1, "0"));
      }
    },
    formatStandaloneMonth$1: function(date) {
      var t1 = this.pattern.length,
        t2 = this.parent;
      switch (t1) {
        case 5:
          t1 = t2.get$dateSymbols().STANDALONENARROWMONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        case 4:
          t1 = t2.get$dateSymbols().STANDALONEMONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        case 3:
          t1 = t2.get$dateSymbols().STANDALONESHORTMONTHS;
          t2 = H.Primitives_getMonth(date) - 1;
          if (t2 < 0 || t2 >= 12)
            return H.ioore(t1, t2);
          return t1[t2];
        default:
          return t2._localizeDigits$1(C.JSString_methods.padLeft$2("" + H.Primitives_getMonth(date), t1, "0"));
      }
    },
    formatQuarter$1: function(date) {
      var quarter = C.JSDouble_methods.toInt$0((H.Primitives_getMonth(date) - 1) / 3),
        t1 = this.pattern.length,
        t2 = this.parent;
      switch (t1) {
        case 4:
          t1 = t2.get$dateSymbols().QUARTERS;
          if (quarter < 0 || quarter >= 4)
            return H.ioore(t1, quarter);
          return t1[quarter];
        case 3:
          t1 = t2.get$dateSymbols().SHORTQUARTERS;
          if (quarter < 0 || quarter >= 4)
            return H.ioore(t1, quarter);
          return t1[quarter];
        default:
          return t2._localizeDigits$1(C.JSString_methods.padLeft$2("" + (quarter + 1), t1, "0"));
      }
    },
    formatTimeZoneId$1: function(date) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    formatTimeZone$1: function(date) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    formatTimeZoneRFC$1: function(date) {
      throw H.wrapException(P.UnimplementedError$(null));
    }
  };
  T.NumberFormat.prototype = {
    set$_multiplier: function(x) {
      var t1, t2;
      this._internalMultiplier = x;
      t1 = Math.log(x);
      t2 = $.$get$NumberFormat__ln10();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._multiplierDigits = C.JSDouble_methods.round$0(t1 / t2);
    },
    format$1: function(number) {
      var t2, _this = this,
        t1 = typeof number == "number";
      if (t1 && isNaN(number))
        return _this._symbols.NAN;
      if (t1)
        t1 = number == 1 / 0 || number == -1 / 0;
      else
        t1 = false;
      if (t1) {
        t1 = J.get$isNegative$n(number) ? _this._negativePrefix : _this._positivePrefix;
        return t1 + _this._symbols.INFINITY;
      }
      t1 = J.getInterceptor$n(number).get$isNegative(number) ? _this._negativePrefix : _this._positivePrefix;
      t2 = _this._intl$_buffer;
      t2._contents += t1;
      t1 = Math.abs(number);
      if (_this._useExponentialNotation)
        _this._formatExponential$1(t1);
      else
        _this._formatFixed$1(t1);
      t1 = t2._contents += C.JSInt_methods.get$isNegative(number) ? _this._negativeSuffix : _this._positiveSuffix;
      t2._contents = "";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _formatExponential$1: function(number) {
      var t1, t2, exponent, mantissa, _this = this;
      if (number === 0) {
        _this._formatFixed$1(number);
        _this._formatExponent$1(0);
        return;
      }
      t1 = Math.log(number);
      t2 = $.$get$NumberFormat__ln10();
      if (typeof t2 !== "number")
        return H.iae(t2);
      exponent = C.JSDouble_methods.floor$0(t1 / t2);
      mantissa = number / Math.pow(10, exponent);
      t1 = _this.maximumIntegerDigits;
      if (t1 > 1 && t1 > _this.minimumIntegerDigits)
        for (; C.JSInt_methods.$mod(exponent, t1) !== 0;) {
          mantissa *= 10;
          --exponent;
        }
      else {
        t1 = _this.minimumIntegerDigits;
        if (t1 < 1) {
          ++exponent;
          mantissa /= 10;
        } else {
          --t1;
          exponent -= t1;
          mantissa *= Math.pow(10, t1);
        }
      }
      _this._formatFixed$1(mantissa);
      _this._formatExponent$1(exponent);
    },
    _formatExponent$1: function(exponent) {
      var _this = this,
        t1 = _this._symbols,
        t2 = _this._intl$_buffer,
        t3 = t2._contents += t1.EXP_SYMBOL;
      if (exponent < 0) {
        exponent = -exponent;
        t2._contents = t3 + t1.MINUS_SIGN;
      } else if (_this._useSignForPositiveExponent)
        t2._contents = t3 + t1.PLUS_SIGN;
      t1 = _this.minimumExponentDigits;
      t3 = C.JSInt_methods.toString$0(exponent);
      if (_this._zeroOffset === 0)
        t2._contents += C.JSString_methods.padLeft$2(t3, t1, "0");
      else
        _this._slowPad$2(t1, t3);
    },
    _floor$1: function(number) {
      var t1;
      if (C.JSNumber_methods.get$isNegative(number) && !C.JSNumber_methods.get$isNegative(Math.abs(number)))
        throw H.wrapException(P.ArgumentError$("Internal error: expected positive number, got " + H.S(number)));
      t1 = C.JSNumber_methods.floor$0(number);
      return t1;
    },
    _round$1: function(number) {
      if (number == 1 / 0 || number == -1 / 0)
        return $.$get$NumberFormat__maxInt();
      else
        return C.JSNumber_methods.round$0(number);
    },
    _formatFixed$1: function(number) {
      var integerPart, fractionPart, extraIntegerDigits, power, fraction, digitMultiplier, remainingDigits, t2, howManyDigitsTooBig, divisor, paddingDigits, extra, intDigits, integerDigits, digitLength, fractionPresent, i, _this = this,
        fractionDigits = _this.maximumFractionDigits,
        t1 = number == 1 / 0 || number == -1 / 0;
      if (t1) {
        integerPart = C.JSNumber_methods.toInt$0(number);
        fractionPart = 0;
        extraIntegerDigits = 0;
        power = 0;
      } else {
        integerPart = _this._floor$1(number);
        fraction = number - integerPart;
        if (C.JSNumber_methods.toInt$0(fraction) !== 0) {
          integerPart = number;
          fraction = 0;
        }
        H.checkNum(fractionDigits);
        power = H._asIntS(Math.pow(10, fractionDigits));
        digitMultiplier = power * _this._internalMultiplier;
        remainingDigits = C.JSNumber_methods.toInt$0(_this._round$1(fraction * digitMultiplier));
        if (remainingDigits >= digitMultiplier) {
          ++integerPart;
          remainingDigits -= digitMultiplier;
        }
        extraIntegerDigits = C.JSInt_methods.$tdiv(remainingDigits, power);
        fractionPart = C.JSInt_methods.$mod(remainingDigits, power);
      }
      t1 = $.$get$NumberFormat__maxInt();
      if (integerPart > t1) {
        t1 = Math.log(integerPart);
        t2 = $.$get$NumberFormat__ln10();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.JSDouble_methods.ceil$0(t1 / t2);
        t1 = $.$get$NumberFormat__maxDigits();
        if (typeof t1 !== "number")
          return H.iae(t1);
        howManyDigitsTooBig = t2 - t1;
        divisor = C.JSNumber_methods.round$0(Math.pow(10, howManyDigitsTooBig));
        if (divisor === 0)
          divisor = Math.pow(10, howManyDigitsTooBig);
        paddingDigits = C.JSString_methods.$mul("0", C.JSInt_methods.toInt$0(howManyDigitsTooBig));
        integerPart = C.JSDouble_methods.toInt$0(integerPart / divisor);
      } else
        paddingDigits = "";
      extra = extraIntegerDigits === 0 ? "" : C.JSInt_methods.toString$0(extraIntegerDigits);
      intDigits = _this._mainIntegerDigits$1(integerPart);
      integerDigits = intDigits + (intDigits.length === 0 ? extra : C.JSString_methods.padLeft$2(extra, _this._multiplierDigits, "0")) + paddingDigits;
      digitLength = integerDigits.length;
      if (typeof fractionDigits !== "number")
        return fractionDigits.$gt();
      if (fractionDigits > 0) {
        t1 = _this.minimumFractionDigits;
        if (typeof t1 !== "number")
          return t1.$gt();
        fractionPresent = t1 > 0 || fractionPart > 0;
      } else
        fractionPresent = false;
      if (digitLength !== 0 || _this.minimumIntegerDigits > 0) {
        integerDigits = C.JSString_methods.$mul("0", _this.minimumIntegerDigits - digitLength) + integerDigits;
        digitLength = integerDigits.length;
        for (t1 = _this._intl$_buffer, i = 0; i < digitLength; ++i) {
          t1._contents += H.Primitives_stringFromCharCode(C.JSString_methods._codeUnitAt$1(integerDigits, i) + _this._zeroOffset);
          _this._group$2(digitLength, i);
        }
      } else if (!fractionPresent)
        _this._intl$_buffer._contents += _this._symbols.ZERO_DIGIT;
      if (_this._decimalSeparatorAlwaysShown || fractionPresent)
        _this._intl$_buffer._contents += _this._symbols.DECIMAL_SEP;
      _this._formatFractionPart$1(C.JSInt_methods.toString$0(fractionPart + power));
    },
    _mainIntegerDigits$1: function(integer) {
      var digits;
      if (integer === 0)
        return "";
      digits = C.JSNumber_methods.toString$0(integer);
      return C.JSString_methods.startsWith$1(digits, "-") ? C.JSString_methods.substring$1(digits, 1) : digits;
    },
    _formatFractionPart$1: function(fractionPart) {
      var fractionLength0, t2, i,
        fractionLength = fractionPart.length,
        t1 = this.minimumFractionDigits;
      while (true) {
        fractionLength0 = fractionLength - 1;
        if (C.JSString_methods.codeUnitAt$1(fractionPart, fractionLength0) === 48) {
          if (typeof t1 !== "number")
            return t1.$add();
          t2 = fractionLength > t1 + 1;
        } else
          t2 = false;
        if (!t2)
          break;
        fractionLength = fractionLength0;
      }
      for (t1 = this._intl$_buffer, i = 1; i < fractionLength; ++i)
        t1._contents += H.Primitives_stringFromCharCode(C.JSString_methods._codeUnitAt$1(fractionPart, i) + this._zeroOffset);
    },
    _slowPad$2: function(numberOfDigits, basic) {
      var t1, t2, t3, i;
      for (t1 = basic.length, t2 = numberOfDigits - t1, t3 = this._intl$_buffer, i = 0; i < t2; ++i)
        t3._contents += this._symbols.ZERO_DIGIT;
      for (i = 0; i < t1; ++i)
        t3._contents += H.Primitives_stringFromCharCode(C.JSString_methods._codeUnitAt$1(basic, i) + this._zeroOffset);
    },
    _group$2: function(totalLength, position) {
      var t1, _this = this,
        distanceFromEnd = totalLength - position;
      if (distanceFromEnd <= 1 || _this._groupingSize <= 0)
        return;
      t1 = _this._finalGroupingSize;
      if (distanceFromEnd === t1 + 1)
        _this._intl$_buffer._contents += _this._symbols.GROUP_SEP;
      else if (distanceFromEnd > t1 && C.JSInt_methods.$mod(distanceFromEnd - t1, _this._groupingSize) === 1)
        _this._intl$_buffer._contents += _this._symbols.GROUP_SEP;
    },
    _setPattern$1: function(newPattern) {
      var t1, t2, _this = this;
      if (newPattern == null)
        return;
      _this._intl$_pattern = H.stringReplaceAllUnchecked(newPattern, " ", "\xa0");
      t1 = _this._currencySymbol;
      if (t1 == null)
        t1 = _this.currencyName;
      t2 = new T._StringIterator(newPattern);
      t2.moveNext$0();
      new T._NumberFormatParser(_this, t2, t1).parse$0(0);
      t1 = _this._decimalDigits;
      t2 = t1 == null;
      if (!t2 || false) {
        if (t2) {
          t1 = $.currencyFractionDigits.$index(0, _this.currencyName.toUpperCase());
          t1 = _this._decimalDigits = t1 == null ? $.currencyFractionDigits.$index(0, "DEFAULT") : t1;
        }
        _this.maximumFractionDigits = _this.minimumFractionDigits = t1;
      }
    },
    toString$0: function(_) {
      return "NumberFormat(" + H.S(this._locale) + ", " + H.S(this._intl$_pattern) + ")";
    },
    set$_finalGroupingSize: function(_finalGroupingSize) {
      this._finalGroupingSize = H._asIntS(_finalGroupingSize);
    }
  };
  T.NumberFormat$decimalPattern_closure.prototype = {
    call$1: function(x) {
      return x.DECIMAL_PATTERN;
    },
    $signature: 278
  };
  T._NumberFormatParser.prototype = {
    parse$0: function(_) {
      var trunk, t2, t3, each, t4, _this = this,
        t1 = _this.format;
      t1._positivePrefix = _this._parseAffix$0();
      trunk = _this._parseTrunk$0();
      t2 = _this._parseAffix$0();
      t1._positiveSuffix = t2;
      t3 = _this.pattern;
      if (t3._intl$_current === ";") {
        t3.moveNext$0();
        t1._negativePrefix = _this._parseAffix$0();
        t2 = new T._StringIterator(trunk);
        for (; t2.moveNext$0();) {
          each = t2._intl$_current;
          t4 = t3._intl$_current;
          if (t4 != each && t4 != null)
            throw H.wrapException(P.FormatException$("Positive and negative trunks must be the same", trunk, null));
          t3.moveNext$0();
        }
        t1._negativeSuffix = _this._parseAffix$0();
      } else {
        t1._negativePrefix = t1._negativePrefix + t1._positivePrefix;
        t1._negativeSuffix = t2 + t1._negativeSuffix;
      }
    },
    _parseAffix$0: function() {
      var affix = new P.StringBuffer(""),
        t1 = this.inQuote = false,
        t2 = this.pattern;
      while (true)
        if (!(this.parseCharacterAffix$1(affix) ? t2.moveNext$0() : t1))
          break;
      t1 = affix._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    parseCharacterAffix$1: function(affix) {
      var t2, t3, _this = this,
        _s24_ = "Too many percent/permill",
        t1 = _this.pattern,
        ch = t1._intl$_current;
      if (ch == null)
        return false;
      if (ch === "'") {
        t2 = t1.nextIndex;
        t3 = t1.input;
        if ((t2 >= t3.length ? null : t3[t2]) === "'") {
          t1.moveNext$0();
          affix._contents += "'";
        } else
          _this.inQuote = !_this.inQuote;
        return true;
      }
      if (_this.inQuote)
        affix._contents += ch;
      else
        switch (ch) {
          case "#":
          case "0":
          case ",":
          case ".":
          case ";":
            return false;
          case "\xa4":
            affix._contents += _this.currencySymbol;
            break;
          case "%":
            t1 = _this.format;
            t2 = t1._internalMultiplier;
            if (t2 !== 1 && t2 !== 100)
              throw H.wrapException(P.FormatException$(_s24_, t1, null));
            t1.set$_multiplier(100);
            affix._contents += t1._symbols.PERCENT;
            break;
          case "\u2030":
            t1 = _this.format;
            t2 = t1._internalMultiplier;
            if (t2 !== 1 && t2 !== 1000)
              throw H.wrapException(P.FormatException$(_s24_, t1, null));
            t1.set$_multiplier(1000);
            affix._contents += t1._symbols.PERMILL;
            break;
          default:
            affix._contents += ch;
        }
      return true;
    },
    _parseTrunk$0: function() {
      var t2, n, effectiveDecimalPos, t3, totalDigits, t4, t5, _this = this,
        trunk = new P.StringBuffer(""),
        t1 = _this.pattern,
        loop = true;
      while (true) {
        if (!(t1._intl$_current != null && loop))
          break;
        loop = _this.parseTrunkCharacter$1(trunk);
      }
      t2 = _this.zeroDigitCount;
      if (t2 === 0 && _this.digitLeftCount > 0 && _this.decimalPos >= 0) {
        n = _this.decimalPos;
        if (n === 0)
          n = 1;
        _this.digitRightCount = _this.digitLeftCount - n;
        _this.digitLeftCount = n - 1;
        t2 = _this.zeroDigitCount = 1;
      }
      effectiveDecimalPos = _this.decimalPos;
      if (!(effectiveDecimalPos < 0 && _this.digitRightCount > 0)) {
        if (effectiveDecimalPos >= 0) {
          t3 = _this.digitLeftCount;
          t3 = effectiveDecimalPos < t3 || effectiveDecimalPos > t3 + t2;
        } else
          t3 = false;
        t3 = t3 || _this.groupingCount === 0;
      } else
        t3 = true;
      if (t3)
        throw H.wrapException(P.FormatException$('Malformed pattern "' + t1.input + '"', null, null));
      t1 = _this.digitLeftCount;
      t2 = t1 + t2;
      totalDigits = t2 + _this.digitRightCount;
      t3 = _this.format;
      t4 = effectiveDecimalPos >= 0;
      t5 = t4 ? totalDigits - effectiveDecimalPos : 0;
      t3.maximumFractionDigits = t5;
      if (t4) {
        t2 -= effectiveDecimalPos;
        t3.minimumFractionDigits = t2;
        if (t2 < 0)
          t3.minimumFractionDigits = 0;
      }
      t2 = t3.minimumIntegerDigits = (t4 ? effectiveDecimalPos : totalDigits) - t1;
      if (t3._useExponentialNotation) {
        t3.maximumIntegerDigits = t1 + t2;
        if (t5 === 0 && t2 === 0)
          t3.minimumIntegerDigits = 1;
      }
      t3.set$_finalGroupingSize(Math.max(0, _this.groupingCount));
      if (!t3._groupingSizeSetExplicitly)
        t3._groupingSize = t3._finalGroupingSize;
      t1 = _this.decimalPos;
      t3._decimalSeparatorAlwaysShown = t1 === 0 || t1 === totalDigits;
      t1 = trunk._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    parseTrunkCharacter$1: function(trunk) {
      var t2, t3, nextChar, _this = this, _null = null,
        t1 = _this.pattern,
        ch = t1._intl$_current;
      switch (ch) {
        case "#":
          if (_this.zeroDigitCount > 0)
            ++_this.digitRightCount;
          else
            ++_this.digitLeftCount;
          t2 = _this.groupingCount;
          if (t2 >= 0 && _this.decimalPos < 0)
            _this.groupingCount = t2 + 1;
          break;
        case "0":
          if (_this.digitRightCount > 0)
            throw H.wrapException(P.FormatException$('Unexpected "0" in pattern "' + t1.input, _null, _null));
          ++_this.zeroDigitCount;
          t2 = _this.groupingCount;
          if (t2 >= 0 && _this.decimalPos < 0)
            _this.groupingCount = t2 + 1;
          break;
        case ",":
          t2 = _this.groupingCount;
          if (t2 > 0) {
            t3 = _this.format;
            t3._groupingSizeSetExplicitly = true;
            t3._groupingSize = t2;
          }
          _this.groupingCount = 0;
          break;
        case ".":
          if (_this.decimalPos >= 0)
            throw H.wrapException(P.FormatException$('Multiple decimal separators in pattern "' + t1.toString$0(0) + '"', _null, _null));
          _this.decimalPos = _this.digitLeftCount + _this.zeroDigitCount + _this.digitRightCount;
          break;
        case "E":
          trunk._contents += H.S(ch);
          t2 = _this.format;
          if (t2._useExponentialNotation)
            throw H.wrapException(P.FormatException$('Multiple exponential symbols in pattern "' + t1.toString$0(0) + '"', _null, _null));
          t2._useExponentialNotation = true;
          t2.minimumExponentDigits = 0;
          t1.moveNext$0();
          nextChar = t1._intl$_current;
          if (nextChar === "+") {
            trunk._contents += H.S(nextChar);
            t1.moveNext$0();
            t2._useSignForPositiveExponent = true;
          }
          for (; t3 = t1._intl$_current, t3 === "0";) {
            trunk._contents += H.S(t3);
            t1.moveNext$0();
            ++t2.minimumExponentDigits;
          }
          if (_this.digitLeftCount + _this.zeroDigitCount < 1 || t2.minimumExponentDigits < 1)
            throw H.wrapException(P.FormatException$('Malformed exponential pattern "' + t1.toString$0(0) + '"', _null, _null));
          return false;
        default:
          return false;
      }
      trunk._contents += H.S(ch);
      t1.moveNext$0();
      return true;
    }
  };
  T._StringIterable.prototype = {
    get$iterator: function(receiver) {
      return this.iterator;
    }
  };
  T._StringIterator.prototype = {
    get$current: function(_) {
      return this._intl$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.nextIndex,
        t2 = _this.input;
      if (t1 >= t2.length) {
        _this._intl$_current = null;
        return false;
      }
      _this.nextIndex = t1 + 1;
      _this._intl$_current = t2[t1];
      return true;
    },
    get$iterator: function(_) {
      return this;
    },
    $isIterator: 1
  };
  B.NumberSymbols.prototype = {
    toString$0: function(_) {
      return this.NAME;
    }
  };
  X.UninitializedLocaleData.prototype = {
    $index: function(_, key) {
      return T.Intl_canonicalizedLocale(H._asStringS(key)) === "en_US" ? this.fallbackData : this._throwException$0();
    },
    containsKey$1: function(_, key) {
      return T.Intl_canonicalizedLocale(key) === "en_US" ? true : this._throwException$0();
    },
    _throwException$0: function() {
      throw H.wrapException(new X.LocaleDataException("Locale data has not been initialized, call " + this.message + "."));
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  X.LocaleDataException.prototype = {
    toString$0: function(_) {
      return "LocaleDataException: " + this.message;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  Y.Level.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Y.Level && this.value === other.value;
    },
    $lt: function(_, other) {
      type$.Level._as(other);
      return C.JSInt_methods.$lt(this.value, other.get$value(other));
    },
    $gt: function(_, other) {
      type$.Level._as(other);
      return C.JSInt_methods.$gt(this.value, other.get$value(other));
    },
    $ge: function(_, other) {
      return this.value >= type$.Level._as(other).value;
    },
    compareTo$1: function(_, other) {
      return this.value - type$.Level._as(other).value;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isComparable: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  L.LogRecord0.prototype = {
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  F.Logger.prototype = {
    get$fullName: function() {
      var t1 = this.parent,
        t2 = t1 == null || t1.name === "",
        t3 = this.name;
      return t2 ? t3 : t1.get$fullName() + "." + t3;
    },
    get$level: function(_) {
      var effectiveLevel, t1;
      if (this.parent == null)
        effectiveLevel = this._level;
      else {
        t1 = $.$get$Logger_root();
        effectiveLevel = t1._level;
      }
      return effectiveLevel;
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var t2, record, _this = this,
        t1 = logLevel.value;
      if (t1 >= _this.get$level(_this).value) {
        if (t1 >= 2000) {
          P.StackTrace_current();
          logLevel.toString$0(0);
        }
        t1 = _this.get$fullName();
        t2 = Date.now();
        $.LogRecord__nextNumber = $.LogRecord__nextNumber + 1;
        record = new L.LogRecord0(logLevel, message, t1, new P.DateTime(t2, false));
        if (_this.parent == null)
          _this._publish$1(record);
        else
          $.$get$Logger_root()._publish$1(record);
      }
    },
    _publish$1: function(record) {
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  F.Logger_Logger_closure.prototype = {
    call$0: function() {
      var dot, $parent, t1,
        thisName = this.name;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? F.Logger_Logger("") : null;
      else {
        $parent = F.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger);
      t1 = new F.Logger(thisName, $parent, t1, new P.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_Logger));
      if ($parent == null)
        t1._level = C.Level_INFO_800;
      else
        $parent._children.$indexSet(0, thisName, t1);
      return t1;
    },
    $signature: 279
  };
  M.Context0.prototype = {
    absolute$1: function(_, part1) {
      var t1, _null = null;
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, null, null, null, null, null, null], type$.JSArray_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = D.current();
      return this.join$8(0, t1, part1, _null, _null, _null, _null, _null, _null);
    },
    extension$2: function(path, level) {
      H._asStringS(path);
      H._asIntS(level);
      return X.ParsedPath_ParsedPath$parse(path, this.style)._splitExtension$1(level)[1];
    },
    extension$1: function(path) {
      return this.extension$2(path, 1);
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7, part8], type$.JSArray_String);
      M._validateArgList("join", parts);
      return this.joinAll$1(new H.WhereIterable(parts, type$.bool_Function_String._as(new M.Context_join_closure()), type$.WhereIterable_String));
    },
    joinAll$1: function(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new M.Context_joinAll_closure()), t3 = parts.get$iterator(parts), t1 = new H.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current(t3);
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = X.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = C.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            C.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = H.S(t5);
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return H.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1: function(_, path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(P.List_List$from(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new M.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        C.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(_, path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (C.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new H.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1: function(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(0, path);
      from = D.current();
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(0, path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0(0);
      pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0(0);
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return H.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return H.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      t2 = type$.String;
      C.JSArray_methods.insertAll$2(pathParsed.parts, 0, P.List_List$filled(fromParsed.parts.length, "..", t2));
      C.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      C.JSArray_methods.insertAll$2(pathParsed.separators, 1, P.List_List$filled(fromParsed.parts.length, t1.get$separator(), t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), ".")) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1: function(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style == $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style != $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.style.pathFromUri$1(M._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H._asStringS(part) != null;
    },
    $signature: 21
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H._asStringS(part) !== "";
    },
    $signature: 21
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return H._asStringS(part).length !== 0;
    },
    $signature: 21
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H._asStringS(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 5
  };
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2: function(path1, path2) {
      return path1 == path2;
    }
  };
  X.ParsedPath.prototype = {
    extension$1: function(level) {
      return this._splitExtension$1(H._asIntS(level))[1];
    },
    extension$0: function() {
      return this.extension$1(null);
    },
    removeTrailingSeparators$0: function() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), "")))
          break;
        C.JSArray_methods.removeLast$0(_this.parts);
        C.JSArray_methods.removeLast$0(_this.separators);
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        C.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0: function(_) {
      var t1, t2, leadingDoubles, _i, part, t3, newSeparators, _this = this,
        newParts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return H.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            C.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", type$.String));
      if (newParts.length === 0 && _this.root == null)
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, type$.String);
      t1 = _this.root;
      C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length !== 0 && _this.style.needsSeparator$1(t1) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      t1 = _this.root;
      if (t1 != null && _this.style === $.$get$Style_windows()) {
        t1.toString;
        _this.root = H.stringReplaceAllUnchecked(t1, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, t2, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? t1 : "";
      for (i = 0; i < _this.parts.length; ++i) {
        t2 = _this.separators;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t1 + H.S(t2[i]);
        t1 = _this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t2 + H.S(t1[i]);
      }
      t1 += H.S(C.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _kthLastIndexOf$3: function(path, character, k) {
      var index, count, leftMostIndexedCharacter;
      for (index = path.length - 1, count = 0, leftMostIndexedCharacter = 0; index >= 0; --index)
        if (path[index] === character) {
          ++count;
          if (count === k)
            return index;
          leftMostIndexedCharacter = index;
        }
      return leftMostIndexedCharacter;
    },
    _splitExtension$1: function(level) {
      var file, lastDot;
      if (level == null)
        throw H.wrapException(P.ArgumentError$notNull("level"));
      if (level <= 0)
        throw H.wrapException(P.RangeError$value(level, "level", "level's value must be greater than 0"));
      file = C.JSArray_methods.lastWhere$2$orElse(this.parts, new X.ParsedPath__splitExtension_closure(), new X.ParsedPath__splitExtension_closure0());
      if (file == null)
        return H.setRuntimeTypeInfo(["", ""], type$.JSArray_String);
      if (file === "..")
        return H.setRuntimeTypeInfo(["..", ""], type$.JSArray_String);
      lastDot = this._kthLastIndexOf$3(file, ".", level);
      if (lastDot <= 0)
        return H.setRuntimeTypeInfo([file, ""], type$.JSArray_String);
      return H.setRuntimeTypeInfo([C.JSString_methods.substring$2(file, 0, lastDot), C.JSString_methods.substring$1(file, lastDot)], type$.JSArray_String);
    },
    set$parts: function(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators: function(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      return this.$this.style.get$separator();
    },
    $signature: 40
  };
  X.ParsedPath__splitExtension_closure.prototype = {
    call$1: function(p) {
      return H._asStringS(p) !== "";
    },
    $signature: 21
  };
  X.ParsedPath__splitExtension_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + this.message;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  O.Style.prototype = {
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      return t1 !== 0 && C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      if (path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return false;
    },
    pathFromUri$1: function(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
      }
      throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47;
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(uri);
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = C.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = C.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || C.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!B.isAlphabetic(t2))
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1: function(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        if (path.length >= 3 && C.JSString_methods.startsWith$1(path, "/") && B.isDriveLetter(path, 1))
          path = C.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + path;
      t1 = H.stringReplaceAllUnchecked(path, "/", "\\");
      return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    }
  };
  L.Browser.prototype = {
    get$version: function(_) {
      var _this = this,
        t1 = _this._version;
      if (t1 == null) {
        t1 = _this._parseVersion;
        if (t1 != null) {
          t1 = type$.Version_2._as(t1.call$1($.Browser_navigator));
          _this._version = t1;
        } else {
          t1 = T.Version_Version(0, 0, 0, null);
          _this._version = t1;
        }
      }
      return t1;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  L.Browser_getCurrentBrowser_closure.prototype = {
    call$1: function(browser) {
      var t1;
      type$.Browser._as(browser);
      t1 = $.Browser_navigator;
      return H._asBoolS(browser._matchesNavigator.call$1(t1));
    },
    $signature: 282
  };
  L.Browser_getCurrentBrowser_closure0.prototype = {
    call$0: function() {
      return $.$get$Browser_UnknownBrowser();
    },
    $signature: 283
  };
  L._Chrome.prototype = {};
  L._Firefox.prototype = {};
  L._Safari.prototype = {};
  L._WKWebView.prototype = {};
  L._InternetExplorer.prototype = {};
  G._HtmlNavigator.prototype = {$isNavigatorProvider: 1};
  G.NavigatorProvider.prototype = {};
  O.Plotly.prototype = {};
  O.TraceData.prototype = {};
  O.Data.prototype = {};
  O.Marker.prototype = {};
  O.Line.prototype = {};
  O.Transform0.prototype = {};
  O.Title.prototype = {};
  O.Layout.prototype = {};
  O.Shape.prototype = {};
  O.Legend.prototype = {};
  O.HoverLabel.prototype = {};
  O.Font.prototype = {};
  O.AxisLayout.prototype = {};
  O.RangeSelector.prototype = {};
  O.Button.prototype = {};
  O.Margin.prototype = {};
  O.RangeSlider.prototype = {};
  O.Configuration.prototype = {};
  O.DataEvent.prototype = {};
  O.LegendDataEvent.prototype = {};
  O.Point1.prototype = {};
  O.HoverFX.prototype = {};
  T.Version0.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof T.Version0 && _this.major == other.major && _this.minor == other.minor && _this.patch == other.patch && H.boolConversionCheck(C.IterableEquality_DefaultEquality.equals$2(_this.preRelease, other.preRelease)) && H.boolConversionCheck(C.IterableEquality_DefaultEquality.equals$2(_this.build, other.build));
    },
    get$hashCode: function(_) {
      var t3, _this = this,
        t1 = _this.major,
        t2 = _this.minor;
      if (typeof t1 !== "number")
        return t1.$xor();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.patch;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3 ^ C.IterableEquality_DefaultEquality.hash$1(0, _this.preRelease) ^ C.IterableEquality_DefaultEquality.hash$1(0, _this.build)) >>> 0;
    },
    $lt: function(_, other) {
      return this.compareTo$1(0, type$.Version_2._as(other)) < 0;
    },
    $gt: function(_, other) {
      return this.compareTo$1(0, type$.Version_2._as(other)) > 0;
    },
    $ge: function(_, other) {
      return this.compareTo$1(0, type$.Version_2._as(other)) >= 0;
    },
    compareTo$1: function(_, other) {
      var t1, t2, t3, comparison, _this = this;
      type$.VersionRange._as(other);
      if (other instanceof T.Version0) {
        t1 = _this.major;
        t2 = other.major;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.minor;
        t2 = other.minor;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.patch;
        t2 = other.patch;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.preRelease;
        t2 = t1.length === 0;
        if (t2 && other.preRelease.length !== 0)
          return 1;
        t3 = other.preRelease;
        if (t3.length === 0 && !t2)
          return -1;
        comparison = _this._compareLists$2(t1, t3);
        if (comparison !== 0)
          return comparison;
        t1 = _this.build;
        t2 = t1.length === 0;
        if (t2 && other.build.length !== 0)
          return -1;
        t3 = other.build;
        if (t3.length === 0 && !t2)
          return 1;
        return _this._compareLists$2(t1, t3);
      } else
        return -other.compareTo$1(0, _this);
    },
    toString$0: function(_) {
      return this._version$_text;
    },
    _compareLists$2: function(a, b) {
      var i, t1, t2, aPart, bPart;
      for (i = 0; t1 = a.length, t2 = b.length, i < Math.max(t1, t2); ++i) {
        aPart = i < t1 ? a[i] : null;
        bPart = i < t2 ? b[i] : null;
        if (J.getInterceptor$(aPart).$eq(aPart, bPart))
          continue;
        if (aPart == null)
          return -1;
        if (bPart == null)
          return 1;
        if (typeof aPart == "number")
          if (typeof bPart == "number")
            return C.JSNumber_methods.compareTo$1(aPart, bPart);
          else
            return -1;
        else if (typeof bPart == "number")
          return 1;
        else {
          H._asStringS(aPart);
          H._asStringS(bPart);
          if (aPart === bPart)
            t1 = 0;
          else
            t1 = aPart < bPart ? -1 : 1;
          return t1;
        }
      }
      return 0;
    },
    $isComparable: 1,
    $isVersionRange: 1,
    get$major: function() {
      return this.major;
    },
    get$minor: function() {
      return this.minor;
    },
    get$patch: function() {
      return this.patch;
    }
  };
  T.Version__splitParts_closure.prototype = {
    call$1: function(part) {
      var t1;
      H._asStringS(part);
      t1 = H.Primitives_parseInt(part, null);
      return t1 == null ? part : t1;
    },
    $signature: 284
  };
  X.VersionRange.prototype = {$isComparable: 1};
  Y.SourceFile.prototype = {
    get$length: function(_) {
      return this._decodedChars.length;
    },
    get$lines: function(_) {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url: function(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (j >= t2)
              return H.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          C.JSArray_methods.add$1(t3, i + 1);
      }
    },
    span$2: function(_, start, end) {
      var _this = this;
      if (end < start)
        H.throwExpression(P.ArgumentError$("End " + end + " must come after start " + start + "."));
      else if (end > _this._decodedChars.length)
        H.throwExpression(P.RangeError$("End " + end + " must not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      else if (start < 0)
        H.throwExpression(P.RangeError$("Start may not be negative, was " + start + "."));
      return new Y._FileSpan(_this, start, end);
    },
    span$1: function($receiver, start) {
      return this.span$2($receiver, start, null);
    },
    getLine$1: function(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < C.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= C.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset))
        return _this._cachedLine;
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1: function(offset) {
      var t2, t3, t4, _this = this,
        t1 = _this._cachedLine;
      if (t1 == null)
        return false;
      t2 = _this._lineStarts;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        return H.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      t1 = _this._cachedLine;
      t3 = t2.length;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 < t3 - 1) {
        t4 = t1 + 1;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (t1 < t3 - 2) {
        t4 = t1 + 2;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        _this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1: function(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (half < 0 || half >= t2)
          return H.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1: function(offset) {
      var line, lineStart, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      lineStart = C.JSArray_methods.$index(_this._lineStarts, line);
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1: function(line) {
      var t1, t2, result, t3, _this = this;
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = _this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + _this.get$lines(_this) + "."));
      }
      result = t1[line];
      if (result <= _this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$line: function(_) {
      return this.file.getLine$1(this.offset);
    },
    get$column: function() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  Y.FileSpan.prototype = {$isComparable: 1, $isSourceSpan: 1, $isSourceSpanWithContext: 1};
  Y._FileSpan.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$length: function(_) {
      return this._file$_end - this._file$_start;
    },
    get$start: function(_) {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end: function(_) {
      return Y.FileLocation$_(this.file, this._file$_end);
    },
    get$text: function(_) {
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._file$_end), 0, null);
    },
    get$context: function(_) {
      var t2, _this = this,
        t1 = _this.file,
        endOffset = _this._file$_end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0) {
          if (endLine === t1._lineStarts.length - 1)
            t1 = "";
          else {
            t2 = t1.getOffset$1(endLine);
            if (typeof endLine !== "number")
              return endLine.$add();
            t1 = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t1.getOffset$1(endLine + 1)), 0, null);
          }
          return t1;
        }
      } else if (endLine === t1._lineStarts.length - 1)
        endOffset = t1._decodedChars.length;
      else {
        if (typeof endLine !== "number")
          return endLine.$add();
        endOffset = t1.getOffset$1(endLine + 1);
      }
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1: function(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = C.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? C.JSInt_methods.compareTo$1(this._file$_end, other._file$_end) : result;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._file$_end === other._file$_end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode: function(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {
    highlight$0: function(_) {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, t12, t13, index, primary, _i, _this = this,
        t1 = _this._lines;
      _this._writeFileStart$1(C.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new Array(t2);
      t2.fixed$length = Array;
      highlightsByColumn = H.setRuntimeTypeInfo(t2, type$.JSArray__Highlight);
      for (t2 = _this._highlighter$_buffer, t3 = highlightsByColumn.length !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t2._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t2._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = H._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new H.ReversedListIterable(t5, t6), t6 = new H.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListIterable.E>")), t7 = line.number, t8 = line.text, t9 = J.getInterceptor$s(t8); t6.moveNext$0();) {
          t10 = t6.__internal$_current;
          t11 = t10.span;
          t12 = t11.get$start(t11);
          t12 = t12.get$line(t12);
          t13 = t11.get$end(t11);
          if (t12 != t13.get$line(t13)) {
            t12 = t11.get$start(t11);
            t11 = t12.get$line(t12) === t7 && _this._isOnlyWhitespace$1(t9.substring$2(t8, 0, t11.get$start(t11).get$column()));
          } else
            t11 = false;
          if (t11) {
            index = C.JSArray_methods.indexOf$1(highlightsByColumn, null);
            if (index < 0)
              H.throwExpression(P.ArgumentError$(H.S(highlightsByColumn) + " contains no null elements."));
            C.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t7);
        t2._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t3)
          t2._contents += " ";
        primary = C.JSArray_methods.firstWhere$2$orElse(t5, new U.Highlighter_highlight_closure(), new U.Highlighter_highlight_closure0());
        t6 = primary != null;
        if (t6) {
          t9 = primary.span;
          t10 = t9.get$start(t9);
          t10 = t10.get$line(t10) === t7 ? t9.get$start(t9).get$column() : 0;
          t11 = t9.get$end(t9);
          _this._writeHighlightedText$4$color(t8, t10, t11.get$line(t11) === t7 ? t9.get$end(t9).get$column() : t8.length, t4);
        } else
          _this._writeText$1(t8);
        t2._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t2._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1: function(url) {
      var _this = this;
      if (!_this._multipleFiles || url == null)
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$2$color(new U.Highlighter__writeFileStart_closure(_this), "\x1b[34m");
        _this._highlighter$_buffer._contents += " " + $.$get$context().prettyUri$1(url);
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current: function(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, foundCurrent, _i, highlight, t5, t6, startLine, endLine, _this = this, _null = null, _box_0 = {};
      type$.List__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = _null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = _this._primaryColor, t1 = !t1, t4 = _this._highlighter$_buffer, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t5 = highlight == null;
        t6 = t5 ? _null : highlight.span;
        t6 = t6 == null ? _null : t6.get$start(t6);
        startLine = t6 == null ? _null : t6.get$line(t6);
        t6 = t5 ? _null : highlight.span;
        t6 = t6 == null ? _null : t6.get$end(t6);
        endLine = t6 == null ? _null : t6.get$line(t6);
        if (t1 && highlight === current) {
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor);
        else if (t5)
          if (_box_0.openedOnThisLine)
            _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor);
          else
            t4._contents += " ";
        else
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t3);
      }
    },
    _writeMultilineHighlights$2: function(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color: function(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(J.getInterceptor$s(text).substring$2(text, 0, startColumn));
      _this._colorize$2$color(new U.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color);
      _this._writeText$1(C.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3: function(line, highlight, highlightsByColumn) {
      var color, t1, t2, t3, coversWholeLine, _this = this;
      type$.List__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      t2 = t1.get$start(t1);
      t2 = t2.get$line(t2);
      t3 = t1.get$end(t1);
      if (t2 == t3.get$line(t3)) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._colorize$2$color(new U.Highlighter__writeIndicator_closure(_this, line, highlight), color);
        t1._contents += "\n";
      } else {
        t2 = t1.get$start(t1);
        t3 = line.number;
        if (t2.get$line(t2) === t3) {
          if (C.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          B.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new U.Highlighter__writeIndicator_closure0(_this, line, highlight), color);
          t1._contents += "\n";
        } else {
          t2 = t1.get$end(t1);
          if (t2.get$line(t2) === t3) {
            coversWholeLine = t1.get$end(t1).get$column() === line.text.length;
            if (coversWholeLine && true) {
              B.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
              return;
            }
            _this._writeSidebar$0();
            t1 = _this._highlighter$_buffer;
            t1._contents += " ";
            _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
            _this._colorize$2$color(new U.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color);
            t1._contents += "\n";
            B.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
          }
        }
      }
    },
    _writeArrow$3$beginning: function(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = t2._contents += C.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(J.substring$2$s(line.text, 0, column + t1)) * 3);
      t2._contents = t1 + "^";
    },
    _writeArrow$2: function(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$1: function(label) {
    },
    _writeText$1: function(text) {
      var t1, t2, t3;
      text.toString;
      t1 = new H.CodeUnits(text);
      t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>"));
      t2 = this._highlighter$_buffer;
      for (; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 === 9)
          t2._contents += C.JSString_methods.$mul(" ", 4);
        else
          t2._contents += H.Primitives_stringFromCharCode(t3);
      }
    },
    _writeSidebar$3$end$line$text: function(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = C.JSInt_methods.toString$0(line + 1);
      this._colorize$2$color(new U.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m");
    },
    _writeSidebar$1$end: function(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text: function(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line: function(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0: function() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1: function(text) {
      var t1, count;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1: function(text) {
      var t1, t2;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        if (t2 !== 32 && t2 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color: function(callback, color) {
      var t1;
      type$.void_Function._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
    }
  };
  U.Highlighter_closure.prototype = {
    call$0: function() {
      return this.color;
    },
    $signature: 286
  };
  U.Highlighter$__closure.prototype = {
    call$1: function(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = H._arrayInstanceType(t1);
      t2 = new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new U.Highlighter$___closure()), t2._eval$1("WhereIterable<1>"));
      return t2.get$length(t2);
    },
    $signature: 287
  };
  U.Highlighter$___closure.prototype = {
    call$1: function(highlight) {
      var t1 = type$._Highlight._as(highlight).span,
        t2 = t1.get$start(t1);
      t2 = t2.get$line(t2);
      t1 = t1.get$end(t1);
      return t2 != t1.get$line(t1);
    },
    $signature: 67
  };
  U.Highlighter$__closure0.prototype = {
    call$1: function(line) {
      return type$._Line._as(line).url;
    },
    $signature: 289
  };
  U.Highlighter__collateLines_closure.prototype = {
    call$1: function(highlight) {
      return J.get$span$x(highlight).get$sourceUrl();
    },
    $signature: 4
  };
  U.Highlighter__collateLines_closure0.prototype = {
    call$2: function(highlight1, highlight2) {
      var t1 = type$._Highlight;
      t1._as(highlight1);
      t1._as(highlight2);
      return highlight1.span.compareTo$1(0, highlight2.span);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 290
  };
  U.Highlighter__collateLines_closure1.prototype = {
    call$1: function(highlightsForFile) {
      var lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, url, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength, t6, t7, t8;
      type$.List__Highlight._as(highlightsForFile);
      lines = H.setRuntimeTypeInfo([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current(t2).span;
        context = t4.get$context(t4);
        t5 = C.JSString_methods.allMatches$1("\n", C.JSString_methods.substring$2(context, 0, B.findLineStart(context, t4.get$text(t4), t4.get$start(t4).get$column())));
        linesBeforeSpan = t5.get$length(t5);
        url = t4.get$sourceUrl();
        t4 = t4.get$start(t4);
        t4 = t4.get$line(t4);
        if (typeof t4 !== "number")
          return t4.$sub();
        lineNumber = t4 - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > C.JSArray_methods.get$last(lines).number)
            C.JSArray_methods.add$1(lines, new U._Line(line, lineNumber, url, H.setRuntimeTypeInfo([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = H.setRuntimeTypeInfo([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, H.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new U.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeWhere"));
        C.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t4 = t4.get$iterator(t4); t4.moveNext$0();) {
          t5 = t4.get$current(t4);
          t6 = t5.span;
          t7 = t6.get$start(t6);
          t7 = t7.get$line(t7);
          t8 = line.number;
          if (typeof t7 !== "number")
            return t7.$gt();
          if (t7 > t8)
            break;
          if (!J.$eq$(t6.get$sourceUrl(), line.url))
            break;
          C.JSArray_methods.add$1(activeHighlights, t5);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        C.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 291
  };
  U.Highlighter__collateLines__closure.prototype = {
    call$1: function(highlight) {
      var t1 = type$._Highlight._as(highlight).span,
        t2 = this.line;
      if (J.$eq$(t1.get$sourceUrl(), t2.url)) {
        t1 = t1.get$end(t1);
        t1 = t1.get$line(t1);
        t2 = t2.number;
        if (typeof t1 !== "number")
          return t1.$lt();
        t2 = t1 < t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $signature: 67
  };
  U.Highlighter_highlight_closure.prototype = {
    call$1: function(highlight) {
      type$._Highlight._as(highlight).toString;
      return true;
    },
    $signature: 67
  };
  U.Highlighter_highlight_closure0.prototype = {
    call$0: function() {
      return null;
    },
    $signature: 0
  };
  U.Highlighter__writeFileStart_closure.prototype = {
    call$0: function() {
      this.$this._highlighter$_buffer._contents += C.JSString_methods.$mul("\u2500", 2) + ">";
      return null;
    },
    $signature: 1
  };
  U.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0: function() {
      var t1 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0: function() {
      var t1 = this.highlight == null ? "\u2500" : "\u253c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0: function() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 1
  };
  U.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0: function() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$2$color(new U.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          if (_this.endLine === t3) {
            t3 = _this.highlight.span;
            t2 = t3.get$end(t3).get$column() === t2.text.length;
          } else
            t2 = false;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$2$color(new U.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor);
        }
      }
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0: function() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0: function() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 0
  };
  U.Highlighter__writeHighlightedText_closure.prototype = {
    call$0: function() {
      var _this = this;
      return _this.$this._writeText$1(C.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 1
  };
  U.Highlighter__writeIndicator_closure.prototype = {
    call$0: function() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = type$.SourceSpan._as(this.highlight.span),
        startColumn = t2.get$start(t2).get$column(),
        endColumn = t2.get$end(t2).get$column();
      t2 = this.line.text;
      tabsBefore = t1._countTabs$1(J.getInterceptor$s(t2).substring$2(t2, 0, startColumn));
      tabsInside = t1._countTabs$1(C.JSString_methods.substring$2(t2, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t2 = t1._highlighter$_buffer;
      t2._contents += C.JSString_methods.$mul(" ", startColumn);
      t2._contents += C.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      t1._writeLabel$1(null);
    },
    $signature: 0
  };
  U.Highlighter__writeIndicator_closure0.prototype = {
    call$0: function() {
      var t1 = this.highlight.span;
      return this.$this._writeArrow$2(this.line, t1.get$start(t1).get$column());
    },
    $signature: 1
  };
  U.Highlighter__writeIndicator_closure1.prototype = {
    call$0: function() {
      var t2, _this = this,
        t1 = _this.$this;
      if (_this.coversWholeLine)
        t1._highlighter$_buffer._contents += C.JSString_methods.$mul("\u2500", 3);
      else {
        t2 = _this.highlight.span;
        t1._writeArrow$3$beginning(_this.line, Math.max(t2.get$end(t2).get$column() - 1, 0), false);
      }
      t1._writeLabel$1(null);
    },
    $signature: 0
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = t2._contents += C.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 0
  };
  U._Highlight.prototype = {
    toString$0: function(_) {
      var t3,
        t1 = this.span,
        t2 = t1.get$start(t1);
      t2 = H.S(t2.get$line(t2)) + ":" + t1.get$start(t1).get$column() + "-";
      t3 = t1.get$end(t1);
      t1 = "primary " + (t2 + H.S(t3.get$line(t3)) + ":" + t1.get$end(t1).get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$span: function(receiver) {
      return this.span;
    }
  };
  U._Highlight_closure.prototype = {
    call$0: function() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && B.findLineStart(t1.get$context(t1), t1.get$text(t1), t1.get$start(t1).get$column()) != null)) {
        t2 = t1.get$start(t1);
        t2 = V.SourceLocation$(t2.get$offset(t2), 0, 0, t1.get$sourceUrl());
        t3 = t1.get$end(t1);
        t3 = t3.get$offset(t3);
        t4 = t1.get$sourceUrl();
        t5 = B.countCodeUnits(t1.get$text(t1), 10);
        t1 = X.SourceSpanWithContext$(t2, V.SourceLocation$(t3, U._Highlight__lastLineLength(t1.get$text(t1)), t5, t4), t1.get$text(t1), t1.get$text(t1));
      }
      return U._Highlight__normalizeEndOfLine(U._Highlight__normalizeTrailingNewline(U._Highlight__normalizeNewlines(t1)));
    },
    $signature: 292
  };
  U._Line.prototype = {
    toString$0: function(_) {
      return "" + this.number + ': "' + H.S(this.text) + '" (' + C.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  V.SourceLocation0.prototype = {
    distance$1: function(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      var t1;
      type$.SourceLocation_2._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation_2._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.sourceUrl) + this.offset;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = "<" + H.getRuntimeType(_this).toString$0(0) + ": " + _this.offset + " ",
        source = _this.sourceUrl;
      return t1 + (H.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl: function() {
      return this.sourceUrl;
    },
    get$offset: function(receiver) {
      return this.offset;
    },
    get$line: function(receiver) {
      return this.line;
    },
    get$column: function() {
      return this.column;
    }
  };
  D.SourceLocationMixin.prototype = {
    distance$1: function(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      type$.SourceLocation_2._as(other);
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation_2._is(other) && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.file.url) + this.offset;
    },
    toString$0: function(_) {
      var t1 = this.offset,
        t2 = "<" + H.getRuntimeType(this).toString$0(0) + ": " + t1 + " ",
        t3 = this.file,
        source = t3.url,
        t4 = H.S(source == null ? "unknown source" : source) + ":",
        t5 = t3.getLine$1(t1);
      if (typeof t5 !== "number")
        return t5.$add();
      return t2 + (t4 + (t5 + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation0: 1
  };
  V.SourceSpan.prototype = {$isComparable: 1};
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3: function(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t2.get$sourceUrl()) + '" and  "' + H.S(t1.get$sourceUrl()) + "\" don't match."));
      else if (t1.get$offset(t1) < t2.get$offset(t2))
        throw H.wrapException(P.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + "."));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw H.wrapException(P.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long."));
      }
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    },
    get$text: function(receiver) {
      return this.text;
    }
  };
  G.SourceSpanException.prototype = {
    get$message: function(_) {
      return this._span_exception$_message;
    },
    get$span: function(_) {
      return this._span;
    },
    toString$0: function(_) {
      return "Error on " + this._span.message$2$color(0, this._span_exception$_message, null);
    },
    $isException: 1
  };
  G.SourceSpanFormatException.prototype = {
    get$offset: function(_) {
      var t1 = this._span;
      t1 = Y.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1,
    get$source: function(receiver) {
      return this.source;
    }
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl: function() {
      return this.get$start(this).get$sourceUrl();
    },
    get$length: function(_) {
      var t2, _this = this,
        t1 = _this.get$end(_this);
      t1 = t1.get$offset(t1);
      t2 = _this.get$start(_this);
      return t1 - t2.get$offset(t2);
    },
    compareTo$1: function(_, other) {
      var result, _this = this;
      type$.SourceSpan._as(other);
      result = _this.get$start(_this).compareTo$1(0, other.get$start(other));
      return result === 0 ? _this.get$end(_this).compareTo$1(0, other.get$end(other)) : result;
    },
    message$2$color: function(_, message, color) {
      var t2, highlight, _this = this,
        t1 = _this.get$start(_this);
      t1 = t1.get$line(t1);
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = "line " + (t1 + 1) + ", column " + (_this.get$start(_this).get$column() + 1);
      if (_this.get$sourceUrl() != null) {
        t2 = _this.get$sourceUrl();
        t2 = t1 + (" of " + $.$get$context().prettyUri$1(t2));
        t1 = t2;
      }
      t1 += ": " + message;
      highlight = _this.highlight$1$color(0, color);
      if (highlight.length !== 0)
        t1 = t1 + "\n" + highlight;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    message$1: function($receiver, message) {
      return this.message$2$color($receiver, message, null);
    },
    highlight$1$color: function(_, color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return U.Highlighter$(_this, color).highlight$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && _this.get$start(_this).$eq(0, other.get$start(other)) && _this.get$end(_this).$eq(0, other.get$end(other));
    },
    get$hashCode: function(_) {
      var t2, _this = this,
        t1 = _this.get$start(_this);
      t1 = t1.get$hashCode(t1);
      t2 = _this.get$end(_this);
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start(_this).toString$0(0) + " to " + _this.get$end(_this).toString$0(0) + ' "' + _this.get$text(_this) + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {
    get$context: function(_) {
      return this._span_with_context$_context;
    }
  };
  A._SplitOptions.prototype = {};
  A.Splitter.prototype = {};
  A.flexSplit_closure.prototype = {
    call$4: function(dimension, size, gutterSize, index) {
      var t1;
      H._asNumS(gutterSize);
      H._asIntS(index);
      t1 = type$.String;
      return P.jsify(P.LinkedHashMap_LinkedHashMap$_literal(["flex-basis", "calc(" + H.S(size) + "% - " + H.S(gutterSize) + "px)"], t1, t1));
    },
    call$3: function(dimension, size, gutterSize) {
      return this.call$4(dimension, size, gutterSize, null);
    },
    "call*": "call$4",
    $requiredArgCount: 3,
    $defaultValues: function() {
      return [null];
    },
    $signature: 294
  };
  A.flexSplit_closure0.prototype = {
    call$3: function(dimension, gutterSize, index) {
      var t1;
      H._asNumS(gutterSize);
      H._asIntS(index);
      t1 = type$.String;
      return P.jsify(P.LinkedHashMap_LinkedHashMap$_literal(["flex-basis", H.S(gutterSize) + "px"], t1, t1));
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 295
  };
  A.fixedSplit_closure.prototype = {
    call$4: function(dimension, size, gutterSize, index) {
      var o, t1, t2;
      H._asNumS(gutterSize);
      H._asIntS(index);
      o = {};
      t1 = H.boolConversionCheck(this.horizontal);
      t2 = t1 ? "width" : "height";
      o[t2] = "calc(" + H.S(size) + "% - " + H.S(gutterSize) + "px)";
      t1 = t1 ? "height" : "width";
      o[t1] = "100%";
      return o;
    },
    call$3: function(dimension, size, gutterSize) {
      return this.call$4(dimension, size, gutterSize, null);
    },
    "call*": "call$4",
    $requiredArgCount: 3,
    $defaultValues: function() {
      return [null];
    },
    $signature: 296
  };
  A.fixedSplit_closure0.prototype = {
    call$3: function(dimension, gutterSize, index) {
      var o, t1, t2;
      H._asNumS(gutterSize);
      H._asIntS(index);
      o = {};
      t1 = H.boolConversionCheck(this.horizontal);
      t2 = t1 ? "width" : "height";
      o[t2] = H.S(gutterSize) + "px";
      t1 = t1 ? "height" : "width";
      o[t1] = "100%";
      return o;
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 297
  };
  A._splitBidirectional_createSplitter.prototype = {
    call$0: function() {
      var _this = this,
        horizontal = _this.mediaQueryList.matches,
        t1 = H.boolConversionCheck(horizontal) ? _this.horizontalSizes : _this.verticalSizes;
      _this._box_0.splitter = _this.splitterBuilder.call$5$gutterSize$horizontal$minSize$sizes(_this.parts, _this.gutterSize, horizontal, _this.minSize, t1);
    },
    $signature: 1
  };
  A._splitBidirectional_closure.prototype = {
    call$1: function(e) {
      J.destroy$2$x(this._box_0.splitter, true, false);
      this.createSplitter.call$0();
    },
    $signature: 3
  };
  M.SseClient.prototype = {
    SseClient$1: function(serverUrl) {
      var t1, t2, t3, t4, _this = this,
        clientId = K.Uuid$().v1$0();
      _this._eventSource = W.EventSource__factoryEventSource(serverUrl + "?sseClientId=" + clientId, P.LinkedHashMap_LinkedHashMap$_literal(["withCredentials", true], type$.String, type$.dynamic));
      _this._serverUrl = serverUrl + "?sseClientId=" + clientId;
      t1 = _this._outgoingController;
      new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$2$onDone(_this.get$_onOutgoingMessage(), _this.get$_onOutgoingDone());
      C.EventSource_methods.addEventListener$2(_this._eventSource, "message", _this.get$_onIncomingMessage());
      C.EventSource_methods.addEventListener$2(_this._eventSource, "control", _this.get$_onIncomingControlMessage());
      t1 = _this._eventSource;
      t2 = type$.void_Function_Event;
      t3 = t2._as(new M.SseClient_closure(_this));
      type$.void_Function._as(null);
      t4 = type$.Event;
      W._EventStreamSubscription$(t1, "open", t3, false, t4);
      W._EventStreamSubscription$(_this._eventSource, "error", t2._as(new M.SseClient_closure0(_this)), false, t4);
      _this._startPostingMessages$0();
    },
    get$sink: function() {
      var t1 = this._outgoingController;
      return new P._StreamSinkWrapper(t1, H._instanceType(t1)._eval$1("_StreamSinkWrapper<1>"));
    },
    get$stream: function(_) {
      var t1 = this._incomingController;
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    close$0: function(_) {
      this._eventSource.close();
      this._incomingController.close$0(0);
      this._outgoingController.close$0(0);
    },
    _onIncomingControlMessage$1: function(message) {
      var data = new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(type$.Event._as(message)).data, true);
      if (J.$eq$(data, "close"))
        this.close$0(0);
      else
        throw H.wrapException(P.UnsupportedError$('Illegal Control Message "' + H.S(data) + '"'));
    },
    _onIncomingMessage$1: function(message) {
      this._incomingController.add$1(0, H._asStringS(C.C_JsonCodec.decode$2$reviver(0, H._asStringS(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(type$.Event._as(message)).data, true)), null)));
    },
    _onOutgoingDone$0: function() {
      this.close$0(0);
    },
    _onOutgoingMessage$1: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$_onOutgoingMessage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._sse_client$_messages.add$1(0, message);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_onOutgoingMessage$1, $async$completer);
    },
    _startPostingMessages$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, message, e, e0, t2, exception, t3, t1, $async$exception, $async$temp1;
      var $async$_startPostingMessages$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._sse_client$_messages;
              t1 = new P._StreamIterator(new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")), type$._StreamIterator_dynamic);
              $async$handler = 2;
              t2 = $async$self._logger;
            case 5:
              // for condition
              $async$temp1 = H;
              $async$goto = 7;
              return P._asyncAwait(t1.moveNext$0(), $async$_startPostingMessages$0);
            case 7:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 6;
                break;
              }
              message = t1.get$current(t1);
              $async$handler = 9;
              $async$goto = 12;
              return P._asyncAwait(W.HttpRequest_request($async$self._serverUrl, "POST", C.C_JsonCodec.encode$2$toEncodable(message, null), true), $async$_startPostingMessages$0);
            case 12:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 11;
              break;
            case 9:
              // catch
              $async$handler = 8;
              $async$exception = $async$currentError;
              t3 = H.unwrapException($async$exception);
              if (t3 instanceof P.JsonUnsupportedObjectError) {
                e = t3;
                t2.log$4(C.Level_WARNING_900, "Unable to encode outgoing message: " + H.S(e), null, null);
              } else if (t3 instanceof P.ArgumentError) {
                e0 = t3;
                t2.log$4(C.Level_WARNING_900, "Invalid argument: " + H.S(e0), null, null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 11;
              break;
            case 8:
              // uncaught
              // goto uncaught
              $async$goto = 2;
              break;
            case 11:
              // after finally
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$goto = 13;
              return P._asyncAwait(t1.cancel$0(0), $async$_startPostingMessages$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_startPostingMessages$0, $async$completer);
    }
  };
  M.SseClient_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this._errorTimer;
      if (t1 != null)
        t1.cancel$0(0);
    },
    $signature: 3
  };
  M.SseClient_closure0.prototype = {
    call$1: function(error) {
      var t1 = this.$this,
        t2 = t1._errorTimer;
      t2 = t2 == null ? null : t2._handle != null;
      if (t2 !== true)
        t1._errorTimer = P.Timer_Timer(C.Duration_5000000, new M.SseClient__closure(t1, error));
    },
    $signature: 3
  };
  M.SseClient__closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._incomingController.addError$1(this.error);
      t1.close$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  K.GuaranteeChannel.prototype = {
    get$stream: function(_) {
      var t1 = this._streamController;
      t1.toString;
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    get$sink: function() {
      return this._guarantee_channel$_sink;
    },
    GuaranteeChannel$3$allowSinkErrors: function(innerSink, allowSinkErrors, _box_0, $T) {
      var _this = this;
      _this.set$_guarantee_channel$_sink(new K._GuaranteeSink(innerSink, _this, new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic), allowSinkErrors, $T._eval$1("_GuaranteeSink<0>")));
      _this.set$_streamController(P.StreamController_StreamController(null, new K.GuaranteeChannel_closure(_box_0, _this), true, $T));
    },
    _onSinkDisconnected$0: function() {
      this._disconnected = true;
      var t1 = this._guarantee_channel$_subscription;
      if (t1 != null)
        t1.cancel$0(0);
      this._streamController.close$0(0);
    },
    set$_guarantee_channel$_sink: function(_sink) {
      this._guarantee_channel$_sink = this.$ti._eval$1("_GuaranteeSink<1>")._as(_sink);
    },
    set$_streamController: function(_streamController) {
      this._streamController = this.$ti._eval$1("StreamController<1>")._as(_streamController);
    },
    set$_guarantee_channel$_subscription: function(_subscription) {
      this._guarantee_channel$_subscription = this.$ti._eval$1("StreamSubscription<1>")._as(_subscription);
    }
  };
  K.GuaranteeChannel_closure.prototype = {
    call$0: function() {
      var t2, t3,
        t1 = this.$this;
      if (t1._disconnected)
        return;
      t2 = this._box_0.innerStream;
      t3 = t1._streamController;
      t1.set$_guarantee_channel$_subscription(t2.listen$3$onDone$onError(t3.get$add(t3), new K.GuaranteeChannel__closure(t1), t3.get$addError()));
    },
    $signature: 0
  };
  K.GuaranteeChannel__closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._guarantee_channel$_sink._onStreamDisconnected$0();
      t1._streamController.close$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  K._GuaranteeSink.prototype = {
    get$done: function() {
      return this._doneCompleter.future;
    },
    add$1: function(_, data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._closed)
        throw H.wrapException(P.StateError$("Cannot add event after closing."));
      if (_this._disconnected)
        return;
      t1 = _this._inner;
      t1._async$_target.add$1(0, t1.$ti._precomputed1._as(data));
    },
    addError$2: function(error, stackTrace) {
      if (this._closed)
        throw H.wrapException(P.StateError$("Cannot add event after closing."));
      if (this._disconnected)
        return;
      this._guarantee_channel$_addError$2(error, stackTrace);
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    _guarantee_channel$_addError$2: function(error, stackTrace) {
      var _this = this;
      if (_this._allowErrors) {
        _this._inner._async$_target.addError$2(error, stackTrace);
        return;
      }
      _this._doneCompleter.completeError$2(error, stackTrace);
      _this._onStreamDisconnected$0();
      _this._guarantee_channel$_channel._onSinkDisconnected$0();
      _this._inner._async$_target.close$0(0).catchError$1(new K._GuaranteeSink__addError_closure());
    },
    close$0: function(_) {
      var _this = this;
      if (_this._closed)
        return _this._doneCompleter.future;
      _this._closed = true;
      if (!_this._disconnected) {
        _this._guarantee_channel$_channel._onSinkDisconnected$0();
        _this._doneCompleter.complete$1(0, _this._inner._async$_target.close$0(0));
      }
      return _this._doneCompleter.future;
    },
    _onStreamDisconnected$0: function() {
      this._disconnected = true;
      var t1 = this._doneCompleter;
      if (t1.future._state === 0)
        t1.complete$0(0);
      return;
    },
    $isStreamSink: 1
  };
  K._GuaranteeSink__addError_closure.prototype = {
    call$1: function(_) {
    },
    $signature: 2
  };
  B.StreamChannelController.prototype = {
    set$_local: function(_local) {
      this._local = this.$ti._eval$1("StreamChannel<1>")._as(_local);
    },
    set$_foreign: function(_foreign) {
      this._foreign = this.$ti._eval$1("StreamChannel<1>")._as(_foreign);
    }
  };
  R._StreamChannel.prototype = {
    get$stream: function(receiver) {
      return this.stream;
    },
    get$sink: function() {
      return this.sink;
    }
  };
  R.StreamChannelMixin.prototype = {
    cast$1$0: function(_, $S) {
      var t1 = this.get$stream(this).cast$1$0(0, $S),
        t2 = this.get$sink();
      t2 = $S._eval$1("StreamSink<0>")._is(t2) ? t2 : new O.DelegatingStreamSink(t2, $S._eval$1("DelegatingStreamSink<0>"));
      return new R._StreamChannel(t1, t2, $S._eval$1("_StreamChannel<0>"));
    },
    $isStreamChannel: 1
  };
  E.StringScannerException.prototype = {
    get$source: function(_) {
      return H._asStringS(this.source);
    }
  };
  X.StringScanner.prototype = {
    get$lastMatch: function() {
      var _this = this;
      if (_this._string_scanner$_position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1: function(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(pattern, _this.string, _this._string_scanner$_position);
      _this._lastMatchPosition = _this._string_scanner$_position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._string_scanner$_position = t1.get$end(t1);
      return success;
    },
    expect$2$name: function(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (type$.RegExp._is(pattern))
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = H.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + H.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._string_scanner$_position);
    },
    expect$1: function(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0: function() {
      var t1 = this._string_scanner$_position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position(0, "expected no more input.", 0, t1);
    },
    error$3$length$position: function(_, message, $length, position) {
      var t2, t3, t4, sourceFile,
        t1 = this.string;
      if (position < 0)
        H.throwExpression(P.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        H.throwExpression(P.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        H.throwExpression(P.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new H.CodeUnits(t1);
      t4 = H.setRuntimeTypeInfo([0], type$.JSArray_int);
      sourceFile = new Y.SourceFile(t2, t4, new Uint32Array(H._ensureNativeList(t3.toList$0(t3))));
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      throw H.wrapException(new E.StringScannerException(t1, message, sourceFile.span$2(0, position, position + $length)));
    }
  };
  K.Uuid.prototype = {
    Uuid$1$options: function(_box_0) {
      var t1, t2, i, hex, t3, v1PositionalArgs, v1NamedArgs, _this = this,
        _s19_ = "v1rngPositionalArgs",
        _s14_ = "v1rngNamedArgs",
        _s18_ = "grngPositionalArgs",
        _s13_ = "grngNamedArgs",
        options = _box_0.options;
      if (!(options != null))
        options = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_dynamic);
      _box_0.options = options;
      t1 = new Array(256);
      t1.fixed$length = Array;
      _this.set$_byteToHex(H.setRuntimeTypeInfo(t1, type$.JSArray_String));
      _this.set$_hexToByte(new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_int));
      for (t1 = type$.JSArray_int, t2 = type$.HexCodec._eval$1("Codec.S"), i = 0; i < 256; ++i) {
        hex = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.add$1(hex, i);
        t3 = _this._byteToHex;
        t2._as(hex);
        (t3 && C.JSArray_methods).$indexSet(t3, i, C.C_HexCodec.get$encoder().convert$1(hex));
        _this._hexToByte.$indexSet(0, _this._byteToHex[i], i);
      }
      v1PositionalArgs = _box_0.options.$index(0, _s19_) != null ? _box_0.options.$index(0, _s19_) : [];
      v1NamedArgs = _box_0.options.$index(0, _s14_) != null ? type$.Map_Symbol_dynamic._as(_box_0.options.$index(0, _s14_)) : C.Map_empty;
      _this._seedBytes = _box_0.options.$index(0, "v1rng") != null ? P.Function_apply(type$.Function._as(_box_0.options.$index(0, "v1rng")), type$.List_dynamic._as(v1PositionalArgs), v1NamedArgs) : T.UuidUtil_mathRNG();
      if (_box_0.options.$index(0, _s18_) != null)
        _box_0.options.$index(0, _s18_);
      if (_box_0.options.$index(0, _s13_) != null)
        type$.Map_Symbol_dynamic._as(_box_0.options.$index(0, _s13_));
      _this._nodeId = [J.$or$bn(J.$index$asx(_this._seedBytes, 0), 1), J.$index$asx(_this._seedBytes, 1), J.$index$asx(_this._seedBytes, 2), J.$index$asx(_this._seedBytes, 3), J.$index$asx(_this._seedBytes, 4), J.$index$asx(_this._seedBytes, 5)];
      t1 = J.$shl$n(J.$index$asx(_this._seedBytes, 6), 8);
      t2 = J.$index$asx(_this._seedBytes, 7);
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this._clockSeq = (t1 | t2) & 262143;
    },
    v1$0: function() {
      var t1, buf, options, clockSeq, mSecs, nSecs, dt, t2, tl, tmh, node, n, _this = this,
        _s8_ = "clockSeq",
        _s5_ = "nSecs";
      type$.Map_String_dynamic._as(null);
      t1 = new Array(16);
      t1.fixed$length = Array;
      buf = H.setRuntimeTypeInfo(t1, type$.JSArray_int);
      options = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_dynamic);
      clockSeq = options.$index(0, _s8_) != null ? options.$index(0, _s8_) : _this._clockSeq;
      mSecs = options.$index(0, "mSecs") != null ? options.$index(0, "mSecs") : Date.now();
      nSecs = options.$index(0, _s5_) != null ? options.$index(0, _s5_) : _this._lastNSecs + 1;
      t1 = J.getInterceptor$n(mSecs);
      dt = J.$add$ansx(t1.$sub(mSecs, _this._lastMSecs), J.$div$n(J.$sub$n(nSecs, _this._lastNSecs), 10000));
      t2 = J.getInterceptor$n(dt);
      if (t2.$lt(dt, 0) && options.$index(0, _s8_) == null)
        clockSeq = J.$and$bn(J.$add$ansx(clockSeq, 1), 16383);
      if ((t2.$lt(dt, 0) || t1.$gt(mSecs, _this._lastMSecs)) && options.$index(0, _s5_) == null)
        nSecs = 0;
      if (J.$ge$n(nSecs, 10000))
        throw H.wrapException(P.Exception_Exception("uuid.v1(): Can't create more than 10M uuids/sec"));
      H._asIntS(mSecs);
      _this._lastMSecs = mSecs;
      H._asIntS(nSecs);
      _this._lastNSecs = nSecs;
      _this._clockSeq = clockSeq;
      mSecs += 122192928e5;
      tl = C.JSInt_methods.$mod((mSecs & 268435455) * 10000 + nSecs, 4294967296);
      C.JSArray_methods.$indexSet(buf, 0, C.JSInt_methods._shrOtherPositive$1(tl, 24) & 255);
      C.JSArray_methods.$indexSet(buf, 1, C.JSInt_methods._shrOtherPositive$1(tl, 16) & 255);
      C.JSArray_methods.$indexSet(buf, 2, C.JSInt_methods._shrOtherPositive$1(tl, 8) & 255);
      C.JSArray_methods.$indexSet(buf, 3, tl & 255);
      tmh = C.JSDouble_methods.floor$0(mSecs / 4294967296 * 10000) & 268435455;
      C.JSArray_methods.$indexSet(buf, 4, tmh >>> 8 & 255);
      C.JSArray_methods.$indexSet(buf, 5, tmh & 255);
      C.JSArray_methods.$indexSet(buf, 6, tmh >>> 24 & 15 | 16);
      C.JSArray_methods.$indexSet(buf, 7, tmh >>> 16 & 255);
      t1 = J.getInterceptor$n(clockSeq);
      C.JSArray_methods.$indexSet(buf, 8, (t1.$shr(clockSeq, 8) | 128) >>> 0);
      C.JSArray_methods.$indexSet(buf, 9, H._asIntS(t1.$and(clockSeq, 255)));
      node = options.$index(0, "node") != null ? options.$index(0, "node") : _this._nodeId;
      for (t1 = J.getInterceptor$asx(node), n = 0; n < 6; ++n)
        C.JSArray_methods.$indexSet(buf, 10 + n, H._asIntS(t1.$index(node, n)));
      type$.List_int._as(buf);
      t1 = _this._byteToHex;
      t1 = H.S((t1 && C.JSArray_methods).$index(t1, buf[0]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[1]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[2]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[3])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[4]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[5])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[6]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[7])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[8]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[9])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[10]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[11]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[12]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[13]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[14]));
      t2 = _this._byteToHex;
      return t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[15]));
    },
    set$_byteToHex: function(_byteToHex) {
      this._byteToHex = type$.List_String._as(_byteToHex);
    },
    set$_hexToByte: function(_hexToByte) {
      this._hexToByte = type$.Map_String_int._as(_hexToByte);
    }
  };
  Q.createServiceObject_closure.prototype = {
    call$1: function(e) {
      return Q.createServiceObject(e, this.expectedTypes);
    },
    $signature: 109
  };
  Q._createSpecificObject_closure.prototype = {
    call$1: function(e) {
      return this.creator.call$1(type$.Map_String_dynamic._as(e));
    },
    $signature: 4
  };
  Q.VmService.prototype = {
    _getEventController$1: function(eventName) {
      var t1 = this._eventControllers,
        controller = t1.$index(0, eventName);
      if (controller == null) {
        controller = new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_Event);
        t1.$indexSet(0, eventName, controller);
      }
      return controller;
    },
    VmService$5$disposeHandler$log$streamClosed: function(inStream, writeMessage, disposeHandler, log, streamClosed) {
      var _this = this;
      _this._streamSub = inStream.listen$2$onDone(_this.get$_processMessage(), new Q.VmService_closure(_this));
      _this._writeMessage = writeMessage;
      _this._log = new Q._NullLog();
      _this.set$_disposeHandler(disposeHandler);
    },
    get$onDebugEvent: function() {
      var t1 = this._getEventController$1("Debug");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onExtensionEvent: function() {
      var t1 = this._getEventController$1("Extension");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onStdoutEvent: function() {
      var t1 = this._getEventController$1("Stdout");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    get$onStderrEvent: function() {
      var t1 = this._getEventController$1("Stderr");
      return new P._BroadcastStream(t1, H._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    getObject$2: function(_, isolateId, objectId) {
      var t1 = type$.dynamic;
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      t1.$indexSet(0, "isolateId", isolateId);
      t1.$indexSet(0, "objectId", objectId);
      return this._call$1$2(0, "getObject", t1, type$.Obj);
    },
    callServiceExtension$3$args$isolateId: function(method, args, isolateId) {
      var t1, t2;
      type$.Map_dynamic_dynamic._as(args);
      t1 = args == null;
      if (t1 && isolateId == null)
        return this._call$1$1(0, method, type$.Response_2);
      else {
        t2 = type$.dynamic;
        if (t1)
          return this._call$1$2(0, method, P.LinkedHashMap_LinkedHashMap$_literal(["isolateId", isolateId], t2, t2), type$.Response_2);
        else {
          args = P.LinkedHashMap_LinkedHashMap$from(args, t2, t2);
          if (isolateId != null)
            args.$indexSet(0, "isolateId", isolateId);
          return this._call$1$2(0, method, args, type$.Response_2);
        }
      }
    },
    dispose$0: function() {
      var t1, _this = this;
      _this._streamSub.cancel$0(0);
      t1 = _this._completers;
      t1.forEach$1(0, new Q.VmService_dispose_closure(_this));
      t1.clear$0(0);
      t1 = _this._onDoneCompleter;
      if (t1.future._state === 0)
        t1.complete$0(0);
    },
    _call$1$2: function(_, method, args, $T) {
      var t2, message, _this = this,
        id = "" + ++_this._id,
        t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      _this._completers.$indexSet(0, id, new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>")));
      _this._methodCalls.$indexSet(0, id, method);
      t2 = type$.dynamic;
      message = C.C_JsonCodec.encode$2$toEncodable(P.LinkedHashMap_LinkedHashMap$_literal(["jsonrpc", "2.0", "id", id, "method", method, "params", args], t2, t2), null);
      _this._onSend.add$1(0, message);
      _this._writeMessage.call$1(message);
      return t1;
    },
    _call$1$1: function($receiver, method, $T) {
      return this._call$1$2($receiver, method, C.Map_empty1, $T);
    },
    _processMessage$1: function(message) {
      var t1, _this = this;
      if (typeof message == "string")
        _this._processMessageStr$1(message);
      else if (type$.List_int._is(message))
        _this._processMessageByteData$1(H.NativeByteData_NativeByteData$view(new Uint8Array(H._ensureNativeList(message)).buffer, 0, null));
      else if (type$.ByteData._is(message))
        _this._processMessageByteData$1(message);
      else {
        t1 = _this._log;
        J.get$runtimeType$(message).toString$0(0);
        t1.toString;
      }
    },
    _processMessageByteData$1: function(bytes) {
      var t2, t3, meta, data, map, streamId, $event,
        dataOffset = bytes.getUint32(0, true),
        t1 = bytes.byteLength;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = bytes.buffer;
      t3 = bytes.byteOffset;
      if (typeof t3 !== "number")
        return t3.$add();
      meta = C.C_Utf8Codec.decode$1(0, H.NativeUint8List_NativeUint8List$view(t2, t3 + 4, dataOffset - 4));
      t3 = bytes.buffer;
      t2 = bytes.byteOffset;
      if (typeof t2 !== "number")
        return t2.$add();
      data = H.NativeByteData_NativeByteData$view(t3, t2 + dataOffset, t1 - dataOffset);
      map = C.C_JsonCodec.decode$2$reviver(0, meta, null);
      if (map != null && J.$eq$(J.$index$asx(map, "method"), "streamNotify")) {
        t1 = J.getInterceptor$asx(map);
        streamId = H._asStringS(J.$index$asx(t1.$index(map, "params"), "streamId"));
        $event = type$.Map_dynamic_dynamic._as(J.$index$asx(t1.$index(map, "params"), "event"));
        J.$indexSet$ax($event, "data", data);
        this._getEventController$1(streamId).add$1(0, type$.Event_2._as(Q.createServiceObject($event, C.List_Event)));
      }
    },
    _processMessageStr$1: function(message) {
      var e, s, exception, t1, t2, t3, completer, methodName, returnTypes, result, type, _this = this, _s2_ = "id", _s5_ = "error", json = null;
      try {
        _this._onReceive.add$1(0, message);
        json = C.C_JsonCodec.decode$2$reviver(0, message, null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._log;
        H.S(e);
        H.S(s);
        t1.toString;
        return;
      }
      if (H.boolConversionCheck(J.containsKey$1$x(json, "method"))) {
        t1 = type$.Map_String_dynamic;
        if (H.boolConversionCheck(J.containsKey$1$x(json, _s2_)))
          _this._processRequest$1(t1._as(json));
        else
          _this._processNotification$1(t1._as(json));
      } else {
        if (H.boolConversionCheck(J.containsKey$1$x(json, _s2_)))
          t1 = H.boolConversionCheck(J.containsKey$1$x(json, "result")) || H.boolConversionCheck(J.containsKey$1$x(json, _s5_));
        else
          t1 = false;
        if (t1) {
          t1 = type$.Map_String_dynamic;
          t2 = t1._as(json);
          t3 = J.getInterceptor$asx(t2);
          completer = _this._completers.remove$1(0, t3.$index(t2, _s2_));
          methodName = _this._methodCalls.remove$1(0, t3.$index(t2, _s2_));
          returnTypes = $._methodReturnTypes.$index(0, methodName);
          if (completer == null) {
            t1 = _this._log;
            C.C_JsonCodec.encode$2$toEncodable(t2, null);
            t1.toString;
          } else if (t3.$index(t2, _s5_) != null) {
            t1 = t3.$index(t2, _s5_);
            t2 = J.getInterceptor$asx(t1);
            completer.completeError$1(new Q.RPCError(methodName, H._asIntS(t2.$index(t1, "code")), H._asStringS(t2.$index(t1, "message")), type$.Map_dynamic_dynamic._as(t2.$index(t1, "data"))));
          } else {
            result = t1._as(t3.$index(t2, "result"));
            type = H._asStringS(J.$index$asx(result, "type"));
            if (type === "Sentinel") {
              t1 = Q.Sentinel$_fromJson(result);
              completer.completeError$1(new Q.SentinelException(methodName, t1));
            } else if ($._typeFactories.$index(0, type) == null) {
              t1 = Q.Response$_fromJson(result);
              completer.complete$1(0, t1);
            } else
              completer.complete$1(0, Q.createServiceObject(result, returnTypes));
          }
        } else
          _this._log.toString;
      }
    },
    _processRequest$1: function(json) {
      return this._processRequest$body$VmService(type$.Map_String_dynamic._as(json));
    },
    _processRequest$body$VmService: function(json) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, message, t1, m, t2;
      var $async$_processRequest$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(json);
              $async$goto = 2;
              return P._asyncAwait($async$self._routeRequest$2(H._asStringS(t1.$index(json, "method")), type$.Map_dynamic_dynamic._as(t1.$index(json, "params"))), $async$_processRequest$1);
            case 2:
              // returning from await.
              m = $async$result;
              t2 = J.getInterceptor$ax(m);
              t2.$indexSet(m, "id", t1.$index(json, "id"));
              t2.$indexSet(m, "jsonrpc", "2.0");
              message = C.C_JsonCodec.encode$2$toEncodable(m, null);
              $async$self._onSend.add$1(0, message);
              $async$self._writeMessage.call$1(message);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_processRequest$1, $async$completer);
    },
    _processNotification$1: function(json) {
      return this._processNotification$body$VmService(type$.Map_String_dynamic._as(json));
    },
    _processNotification$body$VmService: function(json) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, method, params;
      var $async$_processNotification$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(json);
              method = H._asStringS(t1.$index(json, "method"));
              params = type$.Map_dynamic_dynamic._as(t1.$index(json, "params"));
              $async$goto = method === "streamNotify" ? 2 : 4;
              break;
            case 2:
              // then
              t1 = J.getInterceptor$asx(params);
              $async$self._getEventController$1(H._asStringS(t1.$index(params, "streamId"))).add$1(0, type$.Event_2._as(Q.createServiceObject(t1.$index(params, "event"), C.List_Event)));
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 5;
              return P._asyncAwait($async$self._routeRequest$2(method, params), $async$_processNotification$1);
            case 5:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_processNotification$1, $async$completer);
    },
    _routeRequest$2: function(method, params) {
      return this._routeRequest$body$VmService(method, params);
    },
    _routeRequest$body$VmService: function(method, params) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Map_dynamic_dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, st, t1, exception, $async$exception;
      var $async$_routeRequest$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $async$self._services;
              $async$goto = t1.containsKey$1(0, method) ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return P._asyncAwait(t1.$index(0, method).call$1(type$.Map_String_dynamic._as(params)), $async$_routeRequest$2);
            case 9:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
              t1 = type$.dynamic;
              t1 = P.LinkedHashMap_LinkedHashMap$_literal(["error", P.LinkedHashMap_LinkedHashMap$_literal(["code", -32601, "message", "Method not found '" + H.S(method) + "'"], type$.String, type$.Object)], t1, t1);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              st = H.getTraceFromException($async$exception);
              t1 = type$.dynamic;
              t1 = P.LinkedHashMap_LinkedHashMap$_literal(["error", P.LinkedHashMap_LinkedHashMap$_literal(["code", -32000, "message", "Unexpected Server Error " + H.S(e) + "\n" + H.S(st)], type$.String, type$.Object)], t1, t1);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_routeRequest$2, $async$completer);
    },
    set$_disposeHandler: function(_disposeHandler) {
      this._disposeHandler = type$.Future_dynamic_Function._as(_disposeHandler);
    }
  };
  Q.VmService_closure.prototype = {
    call$0: function() {
      return this.$this._onDoneCompleter.complete$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Q.VmService_dispose_closure.prototype = {
    call$2: function(id, c) {
      H._asStringS(id);
      return type$.Completer_dynamic._as(c).completeError$1(new Q.RPCError(this.$this._methodCalls.$index(0, id), -32000, "Service connection disposed", null));
    },
    $signature: 299
  };
  Q.RPCError.prototype = {
    get$details: function(_) {
      var t1 = this.data;
      return H._asStringS(t1 == null ? null : J.$index$asx(t1, "details"));
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.message,
        t2 = _this.code,
        t3 = _this.callingMethod;
      if (_this.get$details(_this) == null)
        return H.S(t1) + " (" + H.S(t2) + ") from " + H.S(t3) + "()";
      else
        return H.S(t1) + " (" + H.S(t2) + ") from " + H.S(t3) + "():\n" + H.S(_this.get$details(_this));
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  Q.SentinelException.prototype = {
    toString$0: function(_) {
      return H.S(this.sentinel) + " from " + H.S(this.callingMethod) + "()";
    },
    $isException: 1
  };
  Q.ExtensionData.prototype = {
    toString$0: function(_) {
      return "[ExtensionData " + H.S(this.data) + "]";
    }
  };
  Q._NullLog.prototype = {$isLog: 1};
  Q.AllocationProfile.prototype = {
    toJson$0: function() {
      var t3, t4, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "AllocationProfile");
      t3 = _this.members;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["members", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.AllocationProfile_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0), "memoryUsage", _this.memoryUsage.toJson$0()], t1, t2));
      Q._setIfNotNull(json, "dateLastAccumulatorReset", _this.dateLastAccumulatorReset);
      Q._setIfNotNull(json, "dateLastServiceGC", _this.dateLastServiceGC);
      return json;
    },
    toString$0: function(_) {
      return "[AllocationProfile type: " + H.S(this.type) + ", members: " + H.S(this.members) + ", memoryUsage: " + H.S(this.memoryUsage) + "]";
    },
    set$members: function(members) {
      this.members = type$.List_ClassHeapStats._as(members);
    }
  };
  Q.AllocationProfile_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ClassHeapStats._as(f).toJson$0();
    },
    $signature: 300
  };
  Q.BoundField.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["decl", this.decl.toJson$0(), "value", this.value.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[BoundField decl: " + H.S(this.decl) + ", value: " + H.S(this.value) + "]";
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  Q.BoundVariable.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "BoundVariable");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "value", _this.value.toJson$0(), "declarationTokenPos", _this.declarationTokenPos, "scopeStartTokenPos", _this.scopeStartTokenPos, "scopeEndTokenPos", _this.scopeEndTokenPos], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[BoundVariable type: " + H.S(_this.type) + ", name: " + H.S(_this.name) + ", value: " + H.S(_this.value) + ", declarationTokenPos: " + H.S(_this.declarationTokenPos) + ", scopeStartTokenPos: " + H.S(_this.scopeStartTokenPos) + ", scopeEndTokenPos: " + H.S(_this.scopeEndTokenPos) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  Q.Breakpoint.prototype = {
    toJson$0: function() {
      var _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Breakpoint");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["breakpointNumber", _this.breakpointNumber, "resolved", _this.resolved, "location", _this.location.toJson$0()], type$.String, type$.dynamic));
      Q._setIfNotNull(json, "isSyntheticAsyncContinuation", _this.isSyntheticAsyncContinuation);
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Breakpoint && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Breakpoint type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", breakpointNumber: " + H.S(_this.breakpointNumber) + ", resolved: " + H.S(_this.resolved) + ", location: " + H.S(_this.location) + "]";
    }
  };
  Q.ClassRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Class");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.ClassRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[ClassRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Class.prototype = {
    toJson$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _this = this, _null = null,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Class");
      t1 = _this.name;
      t2 = _this.isAbstract;
      t3 = _this.isConst;
      t4 = _this.library.toJson$0();
      t5 = _this.interfaces;
      t5.toString;
      t6 = H._arrayInstanceType(t5);
      t6 = new H.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new Q.Class_toJson_closure()), t6._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t5 = _this.fields;
      t5.toString;
      t7 = H._arrayInstanceType(t5);
      t7 = new H.MappedListIterable(t5, t7._eval$1("Map<String,@>(1)")._as(new Q.Class_toJson_closure0()), t7._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t5 = _this.functions;
      t5.toString;
      t8 = H._arrayInstanceType(t5);
      t8 = new H.MappedListIterable(t5, t8._eval$1("Map<String,@>(1)")._as(new Q.Class_toJson_closure1()), t8._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t5 = _this.subclasses;
      t5.toString;
      t9 = H._arrayInstanceType(t5);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", t1, "abstract", t2, "const", t3, "library", t4, "interfaces", t6, "fields", t7, "functions", t8, "subclasses", new H.MappedListIterable(t5, t9._eval$1("Map<String,@>(1)")._as(new Q.Class_toJson_closure2()), t9._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], type$.String, type$.dynamic));
      t9 = _this.error;
      Q._setIfNotNull(json, "error", t9 == null ? _null : t9.toJson$0());
      t1 = _this.location;
      Q._setIfNotNull(json, "location", t1 == null ? _null : t1.toJson$0());
      t1 = _this.superClass;
      Q._setIfNotNull(json, "super", t1 == null ? _null : t1.toJson$0());
      t1 = _this.superType;
      Q._setIfNotNull(json, "superType", t1 == null ? _null : t1.toJson$0());
      t1 = _this.mixin;
      Q._setIfNotNull(json, "mixin", t1 == null ? _null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Class && this.id == other.id;
    },
    toString$0: function(_) {
      return "[Class]";
    },
    set$interfaces: function(interfaces) {
      this.interfaces = type$.List_InstanceRef._as(interfaces);
    },
    set$fields: function(fields) {
      this.fields = type$.List_FieldRef._as(fields);
    },
    set$functions: function(functions) {
      this.functions = type$.List_FuncRef._as(functions);
    },
    set$subclasses: function(subclasses) {
      this.subclasses = type$.List_ClassRef._as(subclasses);
    },
    $isClassRef: 1,
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Class_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.InstanceRef._as(f).toJson$0();
    },
    $signature: 110
  };
  Q.Class_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.FieldRef._as(f).toJson$0();
    },
    $signature: 111
  };
  Q.Class_toJson_closure1.prototype = {
    call$1: function(f) {
      return type$.FuncRef._as(f).toJson$0();
    },
    $signature: 112
  };
  Q.Class_toJson_closure2.prototype = {
    call$1: function(f) {
      return type$.ClassRef._as(f).toJson$0();
    },
    $signature: 68
  };
  Q.ClassHeapStats.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "ClassHeapStats");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["class", _this.classRef.toJson$0(), "accumulatedSize", _this.accumulatedSize, "bytesCurrent", _this.bytesCurrent, "instancesAccumulated", _this.instancesAccumulated, "instancesCurrent", _this.instancesCurrent], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[ClassHeapStats type: " + H.S(_this.type) + ", classRef: " + H.S(_this.classRef) + ", accumulatedSize: " + H.S(_this.accumulatedSize) + ", bytesCurrent: " + H.S(_this.bytesCurrent) + ", instancesAccumulated: " + H.S(_this.instancesAccumulated) + ", instancesCurrent: " + H.S(_this.instancesCurrent) + "]";
    },
    get$classRef: function() {
      return this.classRef;
    }
  };
  Q.ClassList.prototype = {
    toJson$0: function() {
      var t3, t4,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "ClassList");
      t3 = this.classes;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["classes", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.ClassList_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[ClassList type: " + H.S(this.type) + ", classes: " + H.S(this.classes) + "]";
    },
    set$classes: function(_, classes) {
      this.classes = type$.List_ClassRef._as(classes);
    }
  };
  Q.ClassList_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ClassRef._as(f).toJson$0();
    },
    $signature: 68
  };
  Q.ClientName.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "ClientName");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[ClientName type: " + H.S(this.type) + ", name: " + H.S(this.name) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.CodeRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Code");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "kind", this.kind], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.CodeRef._is(other) && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[CodeRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", kind: " + H.S(_this.kind) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  Q.Code.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "Code");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "kind", this.kind], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Code && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Code type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", kind: " + H.S(_this.kind) + "]";
    },
    $isCodeRef: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  Q.ContextRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Context");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["length", this.length], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.ContextRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[ContextRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", length: " + H.S(this.length) + "]";
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  Q.Context.prototype = {
    toJson$0: function() {
      var t1, t2, t3, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Context");
      t1 = _this.length;
      t2 = _this.variables;
      t2.toString;
      t3 = H._arrayInstanceType(t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["length", t1, "variables", new H.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new Q.Context_toJson_closure()), t3._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], type$.String, type$.dynamic));
      t3 = _this.parent;
      Q._setIfNotNull(json, "parent", t3 == null ? null : t3.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Context && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Context type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", length: " + H.S(_this.length) + ", variables: " + H.S(_this.variables) + "]";
    },
    set$variables: function(variables) {
      this.variables = type$.List_ContextElement._as(variables);
    },
    $isContextRef: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  Q.Context_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ContextElement._as(f).toJson$0();
    },
    $signature: 305
  };
  Q.ContextElement.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["value", this.value.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[ContextElement value: " + H.S(this.value) + "]";
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  Q.CpuSamples.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "CpuSamples");
      t3 = _this.samplePeriod;
      t4 = _this.maxStackDepth;
      t5 = _this.sampleCount;
      t6 = _this.timeSpan;
      t7 = _this.timeOriginMicros;
      t8 = _this.timeExtentMicros;
      t9 = _this.pid;
      t10 = _this.functions;
      t10.toString;
      t11 = H._arrayInstanceType(t10);
      t11 = new H.MappedListIterable(t10, t11._eval$1("Map<String,@>(1)")._as(new Q.CpuSamples_toJson_closure()), t11._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t10 = _this.samples;
      t10.toString;
      t12 = H._arrayInstanceType(t10);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["samplePeriod", t3, "maxStackDepth", t4, "sampleCount", t5, "timeSpan", t6, "timeOriginMicros", t7, "timeExtentMicros", t8, "pid", t9, "functions", t11, "samples", new H.MappedListIterable(t10, t12._eval$1("Map<String,@>(1)")._as(new Q.CpuSamples_toJson_closure0()), t12._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[CpuSamples]";
    },
    set$functions: function(functions) {
      this.functions = type$.List_ProfileFunction._as(functions);
    },
    set$samples: function(samples) {
      this.samples = type$.List_CpuSample._as(samples);
    }
  };
  Q.CpuSamples_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ProfileFunction._as(f).toJson$0();
    },
    $signature: 306
  };
  Q.CpuSamples_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.CpuSample._as(f).toJson$0();
    },
    $signature: 307
  };
  Q.CpuSample.prototype = {
    toJson$0: function() {
      var t6, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
        t3 = _this.tid,
        t4 = _this.timestamp,
        t5 = _this.stack;
      t5.toString;
      t6 = H._arrayInstanceType(t5);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["tid", t3, "timestamp", t4, "stack", new H.MappedListIterable(t5, t6._eval$1("int(1)")._as(new Q.CpuSample_toJson_closure()), t6._eval$1("MappedListIterable<1,int>")).toList$0(0)], t1, t2));
      Q._setIfNotNull(json, "vmTag", _this.vmTag);
      Q._setIfNotNull(json, "userTag", _this.userTag);
      Q._setIfNotNull(json, "truncated", _this.truncated);
      return json;
    },
    toString$0: function(_) {
      return "[CpuSample tid: " + H.S(this.tid) + ", timestamp: " + H.S(this.timestamp) + ", stack: " + H.S(this.stack) + "]";
    },
    set$stack: function(stack) {
      this.stack = type$.List_int._as(stack);
    }
  };
  Q.CpuSample_toJson_closure.prototype = {
    call$1: function(f) {
      return H._asIntS(f);
    },
    $signature: 36
  };
  Q.ErrorRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Error");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", this.kind, "message", this.message], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.ErrorRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[ErrorRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", message: " + H.S(_this.message) + "]";
    },
    get$kind: function(receiver) {
      return this.kind;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  Q.Error.prototype = {
    toJson$0: function() {
      var t1, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Error");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", _this.kind, "message", _this.message], type$.String, type$.dynamic));
      t1 = _this.exception;
      Q._setIfNotNull(json, "exception", t1 == null ? null : t1.toJson$0());
      t1 = _this.stacktrace;
      Q._setIfNotNull(json, "stacktrace", t1 == null ? null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Error && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Error type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", message: " + H.S(_this.message) + "]";
    },
    $isErrorRef: 1,
    get$kind: function(receiver) {
      return this.kind;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  Q.Event.prototype = {
    toJson$0: function() {
      var _this = this, _null = null,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Event");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", _this.kind, "timestamp", _this.timestamp], t1, t2));
      t2 = _this.isolate;
      Q._setIfNotNull(json, "isolate", t2 == null ? _null : t2.toJson$0());
      t1 = _this.vm;
      Q._setIfNotNull(json, "vm", t1 == null ? _null : t1.toJson$0());
      t1 = _this.breakpoint;
      Q._setIfNotNull(json, "breakpoint", t1 == null ? _null : t1.toJson$0());
      t1 = _this.pauseBreakpoints;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Event_toJson_closure()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "pauseBreakpoints", t1 == null ? _null : t1.toList$0(0));
      t1 = _this.topFrame;
      Q._setIfNotNull(json, "topFrame", t1 == null ? _null : t1.toJson$0());
      t1 = _this.exception;
      Q._setIfNotNull(json, "exception", t1 == null ? _null : t1.toJson$0());
      Q._setIfNotNull(json, "bytes", _this.bytes);
      t1 = _this.inspectee;
      Q._setIfNotNull(json, "inspectee", t1 == null ? _null : t1.toJson$0());
      Q._setIfNotNull(json, "extensionRPC", _this.extensionRPC);
      Q._setIfNotNull(json, "extensionKind", _this.extensionKind);
      t1 = _this.extensionData;
      Q._setIfNotNull(json, "extensionData", t1 == null ? _null : t1.data);
      t1 = _this.timelineEvents;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Event_toJson_closure0()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "timelineEvents", t1 == null ? _null : t1.toList$0(0));
      Q._setIfNotNull(json, "atAsyncSuspension", _this.atAsyncSuspension);
      Q._setIfNotNull(json, "status", _this.status);
      t1 = _this.logRecord;
      Q._setIfNotNull(json, "logRecord", t1 == null ? _null : t1.toJson$0());
      Q._setIfNotNull(json, "service", _this.service);
      Q._setIfNotNull(json, "method", _this.method);
      Q._setIfNotNull(json, "alias", _this.alias);
      Q._setIfNotNull(json, "flag", _this.flag);
      Q._setIfNotNull(json, "newValue", _this.newValue);
      Q._setIfNotNull(json, "last", _this.last);
      Q._setIfNotNull(json, "data", _this.data);
      return json;
    },
    toString$0: function(_) {
      return "[Event type: " + H.S(this.type) + ", kind: " + H.S(this.kind) + ", timestamp: " + H.S(this.timestamp) + "]";
    },
    set$pauseBreakpoints: function(pauseBreakpoints) {
      this.pauseBreakpoints = type$.List_Breakpoint._as(pauseBreakpoints);
    },
    set$timelineEvents: function(timelineEvents) {
      this.timelineEvents = type$.List_TimelineEvent._as(timelineEvents);
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  Q.Event_toJson_closure.prototype = {
    call$1: function(f) {
      type$.Breakpoint._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 113
  };
  Q.Event_toJson_closure0.prototype = {
    call$1: function(f) {
      type$.TimelineEvent._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 87
  };
  Q.FieldRef.prototype = {
    toJson$0: function() {
      var _this = this,
        json = _this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Field");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "owner", _this.owner.toJson$0(), "declaredType", _this.declaredType.toJson$0(), "const", _this.isConst, "final", _this.isFinal, "static", _this.isStatic], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.FieldRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[FieldRef]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$owner: function() {
      return this.owner;
    },
    get$declaredType: function() {
      return this.declaredType;
    },
    get$isConst: function() {
      return this.isConst;
    },
    get$isStatic: function() {
      return this.isStatic;
    }
  };
  Q.Field.prototype = {
    toJson$0: function() {
      var t1, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Field");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "owner", _this.owner.toJson$0(), "declaredType", _this.declaredType.toJson$0(), "const", _this.isConst, "final", _this.isFinal, "static", _this.isStatic], type$.String, type$.dynamic));
      t1 = _this.staticValue;
      Q._setIfNotNull(json, "staticValue", t1 == null ? null : t1.toJson$0());
      t1 = _this.location;
      Q._setIfNotNull(json, "location", t1 == null ? null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Field && this.id == other.id;
    },
    toString$0: function(_) {
      return "[Field]";
    },
    $isFieldRef: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$owner: function() {
      return this.owner;
    },
    get$declaredType: function() {
      return this.declaredType;
    },
    get$isConst: function() {
      return this.isConst;
    },
    get$isStatic: function() {
      return this.isStatic;
    }
  };
  Q.Flag.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "comment", _this.comment, "modified", _this.modified], t1, t2));
      Q._setIfNotNull(json, "valueAsString", _this.valueAsString);
      return json;
    },
    toString$0: function(_) {
      return "[Flag name: " + H.S(this.name) + ", comment: " + H.S(this.comment) + ", modified: " + H.S(this.modified) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$valueAsString: function(receiver) {
      return this.valueAsString;
    }
  };
  Q.FlagList.prototype = {
    toJson$0: function() {
      var t3, t4,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "FlagList");
      t3 = this.flags;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["flags", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.FlagList_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[FlagList type: " + H.S(this.type) + ", flags: " + H.S(this.flags) + "]";
    },
    set$flags: function(flags) {
      this.flags = type$.List_Flag._as(flags);
    }
  };
  Q.FlagList_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.Flag._as(f).toJson$0();
    },
    $signature: 311
  };
  Q.Frame.prototype = {
    toJson$0: function() {
      var _this = this, _null = null,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Frame");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["index", _this.index], t1, t2));
      t2 = _this.$function;
      Q._setIfNotNull(json, "function", t2 == null ? _null : t2.toJson$0());
      t1 = _this.code;
      Q._setIfNotNull(json, "code", t1 == null ? _null : t1.toJson$0());
      t1 = _this.location;
      Q._setIfNotNull(json, "location", t1 == null ? _null : t1.toJson$0());
      t1 = _this.vars;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Frame_toJson_closure()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "vars", t1 == null ? _null : t1.toList$0(0));
      Q._setIfNotNull(json, "kind", _this.kind);
      return json;
    },
    toString$0: function(_) {
      return "[Frame type: " + H.S(this.type) + ", index: " + H.S(this.index) + "]";
    },
    set$vars: function(vars) {
      this.vars = type$.List_BoundVariable._as(vars);
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  Q.Frame_toJson_closure.prototype = {
    call$1: function(f) {
      type$.BoundVariable._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 312
  };
  Q.FuncRef.prototype = {
    toJson$0: function() {
      var _this = this,
        json = _this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Function");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "owner", _this.owner.toJson$0(), "static", _this.isStatic, "const", _this.isConst], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.FuncRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[FuncRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", owner: " + H.S(_this.owner) + ", isStatic: " + H.S(_this.isStatic) + ", isConst: " + H.S(_this.isConst) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$owner: function() {
      return this.owner;
    }
  };
  Q.Func.prototype = {
    toJson$0: function() {
      var t1, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Function");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "owner", _this.owner.toJson$0(), "static", _this.isStatic, "const", _this.isConst], type$.String, type$.dynamic));
      t1 = _this.location;
      Q._setIfNotNull(json, "location", t1 == null ? null : t1.toJson$0());
      t1 = _this.code;
      Q._setIfNotNull(json, "code", t1 == null ? null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Func && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Func type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", owner: " + H.S(_this.owner) + ", isStatic: " + H.S(_this.isStatic) + ", isConst: " + H.S(_this.isConst) + "]";
    },
    $isFuncRef: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$owner: function() {
      return this.owner;
    }
  };
  Q.InstanceRef.prototype = {
    InstanceRef$_fromJson$1: function(json) {
      var t2, t3, _this = this,
        t1 = J.getInterceptor$asx(json);
      _this.kind = H._asStringS(t1.$index(json, "kind"));
      t2 = type$.ClassRef;
      _this.classRef = t2._as(Q.createServiceObject(t1.$index(json, "class"), C.List_ClassRef));
      _this.set$valueAsString(0, H._asStringS(t1.$index(json, "valueAsString")));
      t3 = t1.$index(json, "valueAsStringIsTruncated");
      _this.valueAsStringIsTruncated = H._asBoolS(t3 == null ? false : t3);
      _this.length = H._asIntS(t1.$index(json, "length"));
      _this.name = H._asStringS(t1.$index(json, "name"));
      _this.typeClass = t2._as(Q.createServiceObject(t1.$index(json, "typeClass"), C.List_ClassRef));
      _this.parameterizedClass = t2._as(Q.createServiceObject(t1.$index(json, "parameterizedClass"), C.List_ClassRef));
      _this.pattern = type$.InstanceRef._as(Q.createServiceObject(t1.$index(json, "pattern"), C.List_InstanceRef));
      _this.closureFunction = type$.FuncRef._as(Q.createServiceObject(t1.$index(json, "closureFunction"), C.List_FuncRef));
      _this.closureContext = type$.ContextRef._as(Q.createServiceObject(t1.$index(json, "closureContext"), C.List_ContextRef));
    },
    toJson$0: function() {
      var t1, _this = this, _null = null,
        json = _this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Instance");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", _this.kind, "class", _this.classRef.toJson$0()], type$.String, type$.dynamic));
      Q._setIfNotNull(json, "valueAsString", _this.get$valueAsString(_this));
      t1 = _this.valueAsStringIsTruncated;
      Q._setIfNotNull(json, "valueAsStringIsTruncated", t1 === true);
      Q._setIfNotNull(json, "length", _this.length);
      Q._setIfNotNull(json, "name", _this.name);
      t1 = _this.typeClass;
      Q._setIfNotNull(json, "typeClass", t1 == null ? _null : t1.toJson$0());
      t1 = _this.parameterizedClass;
      Q._setIfNotNull(json, "parameterizedClass", t1 == null ? _null : t1.toJson$0());
      t1 = _this.pattern;
      Q._setIfNotNull(json, "pattern", t1 == null ? _null : t1.toJson$0());
      t1 = _this.closureFunction;
      Q._setIfNotNull(json, "closureFunction", t1 == null ? _null : t1.toJson$0());
      t1 = _this.closureContext;
      Q._setIfNotNull(json, "closureContext", t1 == null ? _null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.InstanceRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[InstanceRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", classRef: " + H.S(_this.classRef) + "]";
    },
    set$valueAsString: function(_, valueAsString) {
      this.valueAsString = H._asStringS(valueAsString);
    },
    get$kind: function(receiver) {
      return this.kind;
    },
    get$classRef: function() {
      return this.classRef;
    },
    get$valueAsString: function(receiver) {
      return this.valueAsString;
    },
    get$valueAsStringIsTruncated: function() {
      return this.valueAsStringIsTruncated;
    },
    get$length: function(receiver) {
      return this.length;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Instance.prototype = {
    Instance$_fromJson$1: function(json) {
      var t2, t3, _this = this,
        _s8_ = "elements",
        _s12_ = "associations",
        t1 = J.getInterceptor$asx(json);
      _this.kind = H._asStringS(t1.$index(json, "kind"));
      t2 = type$.ClassRef;
      _this.Instance_classRef = t2._as(Q.createServiceObject(t1.$index(json, "class"), C.List_ClassRef));
      _this.set$valueAsString(0, H._asStringS(t1.$index(json, "valueAsString")));
      t3 = t1.$index(json, "valueAsStringIsTruncated");
      _this.valueAsStringIsTruncated = H._asBoolS(t3 == null ? false : t3);
      _this.length = H._asIntS(t1.$index(json, "length"));
      _this.offset = H._asIntS(t1.$index(json, "offset"));
      _this.count = H._asIntS(t1.$index(json, "count"));
      _this.name = H._asStringS(t1.$index(json, "name"));
      _this.typeClass = t2._as(Q.createServiceObject(t1.$index(json, "typeClass"), C.List_ClassRef));
      _this.parameterizedClass = t2._as(Q.createServiceObject(t1.$index(json, "parameterizedClass"), C.List_ClassRef));
      _this.set$fields(t1.$index(json, "fields") == null ? null : P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t1.$index(json, "fields"), C.List_BoundField)), true, type$.BoundField));
      _this.elements = t1.$index(json, _s8_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(Q.createServiceObject(t1.$index(json, _s8_), C.List_dynamic)), true, type$.dynamic);
      _this.set$associations(t1.$index(json, _s12_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(Q._createSpecificObject(t1.$index(json, _s12_), Q.vm_service_MapAssociation_parse$closure())), true, type$.MapAssociation));
      _this.bytes = H._asStringS(t1.$index(json, "bytes"));
      t2 = type$.InstanceRef;
      _this.mirrorReferent = t2._as(Q.createServiceObject(t1.$index(json, "mirrorReferent"), C.List_InstanceRef));
      _this.pattern = t2._as(Q.createServiceObject(t1.$index(json, "pattern"), C.List_InstanceRef));
      _this.closureFunction = type$.FuncRef._as(Q.createServiceObject(t1.$index(json, "closureFunction"), C.List_FuncRef));
      _this.closureContext = type$.ContextRef._as(Q.createServiceObject(t1.$index(json, "closureContext"), C.List_ContextRef));
      _this.isCaseSensitive = H._asBoolS(t1.$index(json, "isCaseSensitive"));
      _this.isMultiLine = H._asBoolS(t1.$index(json, "isMultiLine"));
      _this.propertyKey = t2._as(Q.createServiceObject(t1.$index(json, "propertyKey"), C.List_InstanceRef));
      _this.propertyValue = t2._as(Q.createServiceObject(t1.$index(json, "propertyValue"), C.List_InstanceRef));
      _this.typeArguments = type$.TypeArgumentsRef._as(Q.createServiceObject(t1.$index(json, "typeArguments"), C.List_TypeArgumentsRef));
      _this.parameterIndex = H._asIntS(t1.$index(json, "parameterIndex"));
      _this.targetType = t2._as(Q.createServiceObject(t1.$index(json, "targetType"), C.List_InstanceRef));
      _this.bound = t2._as(Q.createServiceObject(t1.$index(json, "bound"), C.List_InstanceRef));
    },
    toJson$0: function() {
      var t1, t2, _this = this, _null = null,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Instance");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", _this.kind, "class", _this.Instance_classRef.toJson$0()], type$.String, type$.dynamic));
      Q._setIfNotNull(json, "valueAsString", _this.get$valueAsString(_this));
      t1 = _this.valueAsStringIsTruncated;
      Q._setIfNotNull(json, "valueAsStringIsTruncated", t1 === true);
      Q._setIfNotNull(json, "length", _this.length);
      Q._setIfNotNull(json, "offset", _this.offset);
      Q._setIfNotNull(json, "count", _this.count);
      Q._setIfNotNull(json, "name", _this.name);
      t1 = _this.typeClass;
      Q._setIfNotNull(json, "typeClass", t1 == null ? _null : t1.toJson$0());
      t1 = _this.parameterizedClass;
      Q._setIfNotNull(json, "parameterizedClass", t1 == null ? _null : t1.toJson$0());
      t1 = _this.fields;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Instance_toJson_closure()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "fields", t1 == null ? _null : t1.toList$0(0));
      t1 = _this.elements;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("@(1)")._as(new Q.Instance_toJson_closure0()), t2._eval$1("MappedListIterable<1,@>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "elements", t1 == null ? _null : t1.toList$0(0));
      t1 = _this.associations;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Instance_toJson_closure1()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "associations", t1 == null ? _null : t1.toList$0(0));
      Q._setIfNotNull(json, "bytes", _this.bytes);
      t1 = _this.mirrorReferent;
      Q._setIfNotNull(json, "mirrorReferent", t1 == null ? _null : t1.toJson$0());
      t1 = _this.pattern;
      Q._setIfNotNull(json, "pattern", t1 == null ? _null : t1.toJson$0());
      t1 = _this.closureFunction;
      Q._setIfNotNull(json, "closureFunction", t1 == null ? _null : t1.toJson$0());
      t1 = _this.closureContext;
      Q._setIfNotNull(json, "closureContext", t1 == null ? _null : t1.toJson$0());
      Q._setIfNotNull(json, "isCaseSensitive", _this.isCaseSensitive);
      Q._setIfNotNull(json, "isMultiLine", _this.isMultiLine);
      t1 = _this.propertyKey;
      Q._setIfNotNull(json, "propertyKey", t1 == null ? _null : t1.toJson$0());
      t1 = _this.propertyValue;
      Q._setIfNotNull(json, "propertyValue", t1 == null ? _null : t1.toJson$0());
      t1 = _this.typeArguments;
      Q._setIfNotNull(json, "typeArguments", t1 == null ? _null : t1.toJson$0());
      Q._setIfNotNull(json, "parameterIndex", _this.parameterIndex);
      t1 = _this.targetType;
      Q._setIfNotNull(json, "targetType", t1 == null ? _null : t1.toJson$0());
      t1 = _this.bound;
      Q._setIfNotNull(json, "bound", t1 == null ? _null : t1.toJson$0());
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Instance && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Instance type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", classRef: " + H.S(_this.Instance_classRef) + "]";
    },
    set$classRef: function(classRef) {
      this.Instance_classRef = type$.ClassRef._as(classRef);
    },
    set$valueAsString: function(_, valueAsString) {
      this.valueAsString = H._asStringS(valueAsString);
    },
    set$fields: function(fields) {
      this.fields = type$.List_BoundField._as(fields);
    },
    set$associations: function(associations) {
      this.associations = type$.List_MapAssociation._as(associations);
    },
    $isInstanceRef: 1,
    get$kind: function(receiver) {
      return this.kind;
    },
    get$classRef: function() {
      return this.Instance_classRef;
    },
    get$valueAsString: function(receiver) {
      return this.valueAsString;
    },
    get$valueAsStringIsTruncated: function() {
      return this.valueAsStringIsTruncated;
    },
    get$length: function(receiver) {
      return this.length;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Instance_toJson_closure.prototype = {
    call$1: function(f) {
      type$.BoundField._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 313
  };
  Q.Instance_toJson_closure0.prototype = {
    call$1: function(f) {
      return f == null ? null : f.toJson$0();
    },
    $signature: 4
  };
  Q.Instance_toJson_closure1.prototype = {
    call$1: function(f) {
      type$.MapAssociation._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 314
  };
  Q.IsolateRef.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "@Isolate");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "number", this.number, "name", this.name], t1, t2));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.IsolateRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[IsolateRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", number: " + H.S(_this.number) + ", name: " + H.S(_this.name) + "]";
    },
    get$id: function(receiver) {
      return this.id;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Isolate.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _this = this, _null = null,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Isolate");
      t3 = _this.id;
      t4 = _this.number;
      t5 = _this.name;
      t6 = _this.startTime;
      t7 = _this.runnable;
      t8 = _this.livePorts;
      t9 = _this.pauseOnExit;
      t10 = _this.pauseEvent.toJson$0();
      t11 = _this.libraries;
      t11.toString;
      t12 = H._arrayInstanceType(t11);
      t12 = new H.MappedListIterable(t11, t12._eval$1("Map<String,@>(1)")._as(new Q.Isolate_toJson_closure()), t12._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t11 = _this.breakpoints;
      t11.toString;
      t13 = H._arrayInstanceType(t11);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", t3, "number", t4, "name", t5, "startTime", t6, "runnable", t7, "livePorts", t8, "pauseOnExit", t9, "pauseEvent", t10, "libraries", t12, "breakpoints", new H.MappedListIterable(t11, t13._eval$1("Map<String,@>(1)")._as(new Q.Isolate_toJson_closure0()), t13._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0), "exceptionPauseMode", _this.exceptionPauseMode], t1, t2));
      t2 = _this.rootLib;
      Q._setIfNotNull(json, "rootLib", t2 == null ? _null : t2.toJson$0());
      t1 = _this.error;
      Q._setIfNotNull(json, "error", t1 == null ? _null : t1.toJson$0());
      t1 = _this.extensionRPCs;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("String(1)")._as(new Q.Isolate_toJson_closure1()), t2._eval$1("MappedListIterable<1,String>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "extensionRPCs", t1 == null ? _null : t1.toList$0(0));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Isolate && this.id == other.id;
    },
    toString$0: function(_) {
      return "[Isolate]";
    },
    set$libraries: function(libraries) {
      this.libraries = type$.List_LibraryRef._as(libraries);
    },
    set$breakpoints: function(breakpoints) {
      this.breakpoints = type$.List_Breakpoint._as(breakpoints);
    },
    set$extensionRPCs: function(extensionRPCs) {
      this.extensionRPCs = type$.List_String._as(extensionRPCs);
    },
    $isIsolateRef: 1,
    get$id: function(receiver) {
      return this.id;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Isolate_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.LibraryRef._as(f).toJson$0();
    },
    $signature: 315
  };
  Q.Isolate_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.Breakpoint._as(f).toJson$0();
    },
    $signature: 113
  };
  Q.Isolate_toJson_closure1.prototype = {
    call$1: function(f) {
      return H._asStringS(f);
    },
    $signature: 5
  };
  Q.IsolateGroupRef.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "@IsolateGroup");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "number", this.number, "name", this.name], t1, t2));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.IsolateGroupRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[IsolateGroupRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", number: " + H.S(_this.number) + ", name: " + H.S(_this.name) + "]";
    },
    get$id: function(receiver) {
      return this.id;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.IsolateGroup.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6, t7, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "IsolateGroup");
      t3 = _this.id;
      t4 = _this.number;
      t5 = _this.name;
      t6 = _this.isolates;
      t6.toString;
      t7 = H._arrayInstanceType(t6);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", t3, "number", t4, "name", t5, "isolates", new H.MappedListIterable(t6, t7._eval$1("Map<String,@>(1)")._as(new Q.IsolateGroup_toJson_closure()), t7._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.IsolateGroup && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[IsolateGroup type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", number: " + H.S(_this.number) + ", name: " + H.S(_this.name) + ", isolates: " + H.S(_this.isolates) + "]";
    },
    set$isolates: function(isolates) {
      this.isolates = type$.List_IsolateRef._as(isolates);
    },
    $isIsolateGroupRef: 1,
    get$id: function(receiver) {
      return this.id;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.IsolateGroup_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.IsolateRef._as(f).toJson$0();
    },
    $signature: 114
  };
  Q.InboundReferences.prototype = {
    toJson$0: function() {
      var t3, t4,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "InboundReferences");
      t3 = this.references;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["references", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.InboundReferences_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[InboundReferences type: " + H.S(this.type) + ", references: " + H.S(this.references) + "]";
    },
    set$references: function(references) {
      this.references = type$.List_InboundReference._as(references);
    }
  };
  Q.InboundReferences_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.InboundReference._as(f).toJson$0();
    },
    $signature: 317
  };
  Q.InboundReference.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["source", this.source.toJson$0()], t1, t2));
      Q._setIfNotNull(json, "parentListIndex", this.parentListIndex);
      t2 = this.parentField;
      Q._setIfNotNull(json, "parentField", t2 == null ? null : t2.toJson$0());
      return json;
    },
    toString$0: function(_) {
      return "[InboundReference source: " + H.S(this.source) + "]";
    }
  };
  Q.InstanceSet.prototype = {
    toJson$0: function() {
      var t3, t4, t5,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "InstanceSet");
      t3 = this.totalCount;
      t4 = this.instances;
      t4.toString;
      t5 = H._arrayInstanceType(t4);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["totalCount", t3, "instances", new H.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new Q.InstanceSet_toJson_closure()), t5._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[InstanceSet type: " + H.S(this.type) + ", totalCount: " + H.S(this.totalCount) + ", instances: " + H.S(this.instances) + "]";
    },
    set$instances: function(instances) {
      this.instances = type$.List_ObjRef._as(instances);
    }
  };
  Q.InstanceSet_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ObjRef._as(f).toJson$0();
    },
    $signature: 318
  };
  Q.LibraryRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Library");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "uri", this.uri], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.LibraryRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[LibraryRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", uri: " + H.S(_this.uri) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$uri: function() {
      return this.uri;
    }
  };
  Q.Library.prototype = {
    toJson$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Library");
      t1 = _this.name;
      t2 = _this.uri;
      t3 = _this.debuggable;
      t4 = _this.dependencies;
      t4.toString;
      t5 = H._arrayInstanceType(t4);
      t5 = new H.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new Q.Library_toJson_closure()), t5._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t4 = _this.scripts;
      t4.toString;
      t6 = H._arrayInstanceType(t4);
      t6 = new H.MappedListIterable(t4, t6._eval$1("Map<String,@>(1)")._as(new Q.Library_toJson_closure0()), t6._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t4 = _this.variables;
      t4.toString;
      t7 = H._arrayInstanceType(t4);
      t7 = new H.MappedListIterable(t4, t7._eval$1("Map<String,@>(1)")._as(new Q.Library_toJson_closure1()), t7._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t4 = _this.functions;
      t4.toString;
      t8 = H._arrayInstanceType(t4);
      t8 = new H.MappedListIterable(t4, t8._eval$1("Map<String,@>(1)")._as(new Q.Library_toJson_closure2()), t8._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t4 = _this.classes;
      t4.toString;
      t9 = H._arrayInstanceType(t4);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", t1, "uri", t2, "debuggable", t3, "dependencies", t5, "scripts", t6, "variables", t7, "functions", t8, "classes", new H.MappedListIterable(t4, t9._eval$1("Map<String,@>(1)")._as(new Q.Library_toJson_closure3()), t9._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Library && this.id == other.id;
    },
    toString$0: function(_) {
      return "[Library]";
    },
    set$dependencies: function(dependencies) {
      this.dependencies = type$.List_LibraryDependency._as(dependencies);
    },
    set$scripts: function(scripts) {
      this.scripts = type$.List_ScriptRef._as(scripts);
    },
    set$variables: function(variables) {
      this.variables = type$.List_FieldRef._as(variables);
    },
    set$functions: function(functions) {
      this.functions = type$.List_FuncRef._as(functions);
    },
    set$classes: function(_, classes) {
      this.classes = type$.List_ClassRef._as(classes);
    },
    $isLibraryRef: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$uri: function() {
      return this.uri;
    }
  };
  Q.Library_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.LibraryDependency._as(f).toJson$0();
    },
    $signature: 319
  };
  Q.Library_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.ScriptRef._as(f).toJson$0();
    },
    $signature: 70
  };
  Q.Library_toJson_closure1.prototype = {
    call$1: function(f) {
      return type$.FieldRef._as(f).toJson$0();
    },
    $signature: 111
  };
  Q.Library_toJson_closure2.prototype = {
    call$1: function(f) {
      return type$.FuncRef._as(f).toJson$0();
    },
    $signature: 112
  };
  Q.Library_toJson_closure3.prototype = {
    call$1: function(f) {
      return type$.ClassRef._as(f).toJson$0();
    },
    $signature: 68
  };
  Q.LibraryDependency.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["isImport", _this.isImport, "isDeferred", _this.isDeferred, "prefix", _this.prefix, "target", _this.target.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[LibraryDependency isImport: " + H.S(_this.isImport) + ", isDeferred: " + H.S(_this.isDeferred) + ", prefix: " + H.S(_this.prefix) + ", target: " + H.S(_this.target) + "]";
    }
  };
  Q.LogRecord.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "LogRecord");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message.toJson$0(), "time", _this.time, "level", _this.level, "sequenceNumber", _this.sequenceNumber, "loggerName", _this.loggerName.toJson$0(), "zone", _this.zone.toJson$0(), "error", _this.error.toJson$0(), "stackTrace", _this.stackTrace.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[LogRecord]";
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  Q.MapAssociation.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["key", this.key.toJson$0(), "value", this.value.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[MapAssociation key: " + H.S(this.key) + ", value: " + H.S(this.value) + "]";
    },
    get$key: function(receiver) {
      return this.key;
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  Q.MemoryUsage.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "MemoryUsage");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["externalUsage", this.externalUsage, "heapCapacity", this.heapCapacity, "heapUsage", this.heapUsage], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[MemoryUsage type: " + H.S(_this.type) + ", externalUsage: " + H.S(_this.externalUsage) + ", heapCapacity: " + H.S(_this.heapCapacity) + ", heapUsage: " + H.S(_this.heapUsage) + "]";
    }
  };
  Q.Message.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Message");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["index", _this.index, "name", _this.name, "messageObjectId", _this.messageObjectId, "size", _this.size], t1, t2));
      t2 = _this.handler;
      Q._setIfNotNull(json, "handler", t2 == null ? null : t2.toJson$0());
      t1 = _this.location;
      Q._setIfNotNull(json, "location", t1 == null ? null : t1.toJson$0());
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Message type: " + H.S(_this.type) + ", index: " + H.S(_this.index) + ", name: " + H.S(_this.name) + ", messageObjectId: " + H.S(_this.messageObjectId) + ", size: " + H.S(_this.size) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.NativeFunction.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[NativeFunction name: " + H.S(this.name) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.NullValRef.prototype = {
    toJson$0: function() {
      var json = this.super$InstanceRef$toJson();
      json.$indexSet(0, "type", "@Null");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["valueAsString", this.NullValRef_valueAsString], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.NullValRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      var _this = this;
      return "[NullValRef type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", classRef: " + H.S(_this.classRef) + ", valueAsString: " + H.S(_this.NullValRef_valueAsString) + "]";
    },
    set$valueAsString: function(_, valueAsString) {
      this.NullValRef_valueAsString = H._asStringS(valueAsString);
    },
    get$valueAsString: function(receiver) {
      return this.NullValRef_valueAsString;
    }
  };
  Q.NullVal.prototype = {
    toJson$0: function() {
      var json = this.super$Instance$toJson();
      json.$indexSet(0, "type", "Null");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["valueAsString", this.NullVal_valueAsString], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.NullVal && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[NullVal type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", kind: " + H.S(_this.kind) + ", classRef: " + H.S(_this.Instance_classRef) + ", valueAsString: " + H.S(_this.NullVal_valueAsString) + "]";
    },
    set$valueAsString: function(_, valueAsString) {
      this.NullVal_valueAsString = H._asStringS(valueAsString);
    },
    $isNullValRef: 1,
    get$valueAsString: function(receiver) {
      return this.NullVal_valueAsString;
    }
  };
  Q.ObjRef.prototype = {
    ObjRef$_fromJson$1: function(json) {
      var t1 = J.getInterceptor$asx(json);
      this.id = H._asStringS(t1.$index(json, "id"));
      this.fixedId = H._asBoolS(t1.$index(json, "fixedId"));
    },
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "@Object");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", this.id], t1, t2));
      Q._setIfNotNull(json, "fixedId", this.fixedId);
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.ObjRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[ObjRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + "]";
    },
    get$id: function(receiver) {
      return this.id;
    }
  };
  Q.Obj.prototype = {
    Obj$_fromJson$1: function(json) {
      var _this = this,
        t1 = J.getInterceptor$asx(json);
      _this.id = H._asStringS(t1.$index(json, "id"));
      _this.fixedId = H._asBoolS(t1.$index(json, "fixedId"));
      _this.set$classRef(type$.ClassRef._as(Q.createServiceObject(t1.$index(json, "class"), C.List_ClassRef)));
      _this.size = H._asIntS(t1.$index(json, "size"));
    },
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Object");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["id", _this.id], t1, t2));
      Q._setIfNotNull(json, "fixedId", _this.fixedId);
      t2 = _this.get$classRef();
      Q._setIfNotNull(json, "class", t2 == null ? null : t2.toJson$0());
      Q._setIfNotNull(json, "size", _this.size);
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Obj && this.id == other.id;
    },
    toString$0: function(_) {
      return "[Obj type: " + H.S(this.type) + ", id: " + H.S(this.id) + "]";
    },
    set$classRef: function(classRef) {
      this.classRef = type$.ClassRef._as(classRef);
    },
    $isObjRef: 1,
    get$id: function(receiver) {
      return this.id;
    },
    get$classRef: function() {
      return this.classRef;
    }
  };
  Q.ProfileFunction.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", _this.kind, "inclusiveTicks", _this.inclusiveTicks, "exclusiveTicks", _this.exclusiveTicks, "resolvedUrl", _this.resolvedUrl, "function", _this.$function.toJson$0()], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[ProfileFunction kind: " + H.S(_this.kind) + ", inclusiveTicks: " + H.S(_this.inclusiveTicks) + ", exclusiveTicks: " + H.S(_this.exclusiveTicks) + ", resolvedUrl: " + H.S(_this.resolvedUrl) + ", function: " + H.S(_this.$function) + "]";
    },
    get$kind: function(receiver) {
      return this.kind;
    }
  };
  Q.ReloadReport.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "ReloadReport");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["success", this.success], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[ReloadReport type: " + H.S(this.type) + ", success: " + H.S(this.success) + "]";
    }
  };
  Q.RetainingObject.prototype = {
    toJson$0: function() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["value", _this.value.toJson$0()], t1, t2));
      Q._setIfNotNull(json, "parentListIndex", _this.parentListIndex);
      t2 = _this.parentMapKey;
      Q._setIfNotNull(json, "parentMapKey", t2 == null ? null : t2.toJson$0());
      Q._setIfNotNull(json, "parentField", _this.parentField);
      return json;
    },
    toString$0: function(_) {
      return "[RetainingObject value: " + H.S(this.value) + "]";
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  Q.RetainingPath.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "RetainingPath");
      t3 = this.length;
      t4 = this.gcRootType;
      t5 = this.elements;
      t5.toString;
      t6 = H._arrayInstanceType(t5);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["length", t3, "gcRootType", t4, "elements", new H.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new Q.RetainingPath_toJson_closure()), t6._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[RetainingPath type: " + H.S(_this.type) + ", length: " + H.S(_this.length) + ", gcRootType: " + H.S(_this.gcRootType) + ", elements: " + H.S(_this.elements) + "]";
    },
    set$elements: function(_, elements) {
      this.elements = type$.List_RetainingObject._as(elements);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  Q.RetainingPath_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.RetainingObject._as(f).toJson$0();
    },
    $signature: 321
  };
  Q.Response.prototype = {
    toJson$0: function() {
      var t1 = this.json,
        t2 = type$.String,
        t3 = type$.dynamic,
        result = t1 == null ? P.LinkedHashMap_LinkedHashMap$_empty(t2, t3) : P.LinkedHashMap_LinkedHashMap$of(t1, t2, t3);
      t1 = this.type;
      result.$indexSet(0, "type", t1 == null ? "Response" : t1);
      return result;
    },
    toString$0: function(_) {
      return "[Response type: " + H.S(this.type) + "]";
    }
  };
  Q.Sentinel.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Sentinel");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["kind", this.kind, "valueAsString", this.valueAsString], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[Sentinel type: " + H.S(this.type) + ", kind: " + H.S(this.kind) + ", valueAsString: " + H.S(this.valueAsString) + "]";
    },
    get$kind: function(receiver) {
      return this.kind;
    },
    get$valueAsString: function(receiver) {
      return this.valueAsString;
    }
  };
  Q.ScriptRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@Script");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["uri", this.uri], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.ScriptRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[ScriptRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", uri: " + H.S(this.uri) + "]";
    },
    get$uri: function() {
      return this.uri;
    }
  };
  Q.Script.prototype = {
    Script$_fromJson$1: function(json) {
      var _this = this,
        _s13_ = "tokenPosTable",
        t1 = J.getInterceptor$asx(json);
      _this.uri = H._asStringS(t1.$index(json, "uri"));
      _this.library = type$.LibraryRef._as(Q.createServiceObject(t1.$index(json, "library"), C.List_LibraryRef));
      _this.lineOffset = H._asIntS(t1.$index(json, "lineOffset"));
      _this.columnOffset = H._asIntS(t1.$index(json, "columnOffset"));
      _this.source = H._asStringS(t1.$index(json, "source"));
      _this.set$tokenPosTable(t1.$index(json, _s13_) == null ? null : P.List_List$from(type$.Iterable_dynamic._as(J.map$1$ax(t1.$index(json, _s13_), new Q.Script$_fromJson_closure())), true, type$.List_int));
      _this._parseTokenPosTable$0();
    },
    _parseTokenPosTable$0: function() {
      var lineSet, t1, t2, t3, t4, _i, line, t5, lineNumber, pos, t6, tokenOffset, colNumber, _this = this;
      if (_this.tokenPosTable == null)
        return;
      lineSet = P.LinkedHashSet_LinkedHashSet(type$.int);
      for (t1 = _this.tokenPosTable, t2 = t1.length, t3 = _this._tokenToLine, t4 = _this._tokenToColumn, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        line = t1[_i];
        t5 = J.getInterceptor$asx(line);
        lineNumber = H._asIntS(t5.$index(line, 0));
        lineSet.add$1(0, lineNumber);
        pos = 1;
        while (true) {
          t6 = t5.get$length(line);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(pos < t6))
            break;
          tokenOffset = H._asIntS(t5.$index(line, pos));
          colNumber = H._asIntS(t5.$index(line, pos + 1));
          t3.$indexSet(0, tokenOffset, lineNumber);
          t4.$indexSet(0, tokenOffset, colNumber);
          pos += 2;
        }
      }
    },
    toJson$0: function() {
      var t1, t2, _this = this,
        json = _this.super$Obj$toJson();
      json.$indexSet(0, "type", "Script");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["uri", _this.uri, "library", _this.library.toJson$0()], type$.String, type$.dynamic));
      Q._setIfNotNull(json, "lineOffset", _this.lineOffset);
      Q._setIfNotNull(json, "columnOffset", _this.columnOffset);
      Q._setIfNotNull(json, "source", _this.source);
      t1 = _this.tokenPosTable;
      if (t1 == null)
        t1 = null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("List<int>(1)")._as(new Q.Script_toJson_closure()), t2._eval$1("MappedListIterable<1,List<int>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "tokenPosTable", t1 == null ? null : t1.toList$0(0));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.Script && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Script type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", uri: " + H.S(_this.uri) + ", library: " + H.S(_this.library) + "]";
    },
    set$tokenPosTable: function(tokenPosTable) {
      this.tokenPosTable = type$.List_List_int._as(tokenPosTable);
    },
    $isScriptRef: 1,
    get$uri: function() {
      return this.uri;
    }
  };
  Q.Script$_fromJson_closure.prototype = {
    call$1: function(list) {
      return P.List_List$from(type$.Iterable_dynamic._as(list), true, type$.int);
    },
    $signature: 322
  };
  Q.Script_toJson_closure.prototype = {
    call$1: function(f) {
      type$.List_int._as(f);
      return f == null ? null : J.toList$0$ax(f);
    },
    $signature: 323
  };
  Q.ScriptList.prototype = {
    toJson$0: function() {
      var t3, t4,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "ScriptList");
      t3 = this.scripts;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["scripts", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.ScriptList_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[ScriptList type: " + H.S(this.type) + ", scripts: " + H.S(this.scripts) + "]";
    },
    set$scripts: function(scripts) {
      this.scripts = type$.List_ScriptRef._as(scripts);
    }
  };
  Q.ScriptList_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.ScriptRef._as(f).toJson$0();
    },
    $signature: 70
  };
  Q.SourceLocation.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "SourceLocation");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["script", this.script.toJson$0(), "tokenPos", this.tokenPos], t1, t2));
      Q._setIfNotNull(json, "endTokenPos", this.endTokenPos);
      return json;
    },
    toString$0: function(_) {
      return "[SourceLocation type: " + H.S(this.type) + ", script: " + H.S(this.script) + ", tokenPos: " + H.S(this.tokenPos) + "]";
    }
  };
  Q.SourceReport.prototype = {
    toJson$0: function() {
      var t3, t4, t5,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "SourceReport");
      t3 = this.ranges;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      t4 = new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.SourceReport_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t3 = this.scripts;
      t3.toString;
      t5 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["ranges", t4, "scripts", new H.MappedListIterable(t3, t5._eval$1("Map<String,@>(1)")._as(new Q.SourceReport_toJson_closure0()), t5._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[SourceReport type: " + H.S(this.type) + ", ranges: " + H.S(this.ranges) + ", scripts: " + H.S(this.scripts) + "]";
    },
    set$ranges: function(ranges) {
      this.ranges = type$.List_SourceReportRange._as(ranges);
    },
    set$scripts: function(scripts) {
      this.scripts = type$.List_ScriptRef._as(scripts);
    }
  };
  Q.SourceReport_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.SourceReportRange._as(f).toJson$0();
    },
    $signature: 324
  };
  Q.SourceReport_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.ScriptRef._as(f).toJson$0();
    },
    $signature: 70
  };
  Q.SourceReportCoverage.prototype = {
    toJson$0: function() {
      var t4, t5,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
        t3 = this.hits;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      t4 = new H.MappedListIterable(t3, t4._eval$1("int(1)")._as(new Q.SourceReportCoverage_toJson_closure()), t4._eval$1("MappedListIterable<1,int>")).toList$0(0);
      t3 = this.misses;
      t3.toString;
      t5 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["hits", t4, "misses", new H.MappedListIterable(t3, t5._eval$1("int(1)")._as(new Q.SourceReportCoverage_toJson_closure0()), t5._eval$1("MappedListIterable<1,int>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[SourceReportCoverage hits: " + H.S(this.hits) + ", misses: " + H.S(this.misses) + "]";
    },
    set$hits: function(hits) {
      this.hits = type$.List_int._as(hits);
    },
    set$misses: function(misses) {
      this.misses = type$.List_int._as(misses);
    }
  };
  Q.SourceReportCoverage_toJson_closure.prototype = {
    call$1: function(f) {
      return H._asIntS(f);
    },
    $signature: 36
  };
  Q.SourceReportCoverage_toJson_closure0.prototype = {
    call$1: function(f) {
      return H._asIntS(f);
    },
    $signature: 36
  };
  Q.SourceReportRange.prototype = {
    toJson$0: function() {
      var _this = this, _null = null,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["scriptIndex", _this.scriptIndex, "startPos", _this.startPos, "endPos", _this.endPos, "compiled", _this.compiled], t1, t2));
      t2 = _this.error;
      Q._setIfNotNull(json, "error", t2 == null ? _null : t2.toJson$0());
      t1 = _this.coverage;
      Q._setIfNotNull(json, "coverage", t1 == null ? _null : t1.toJson$0());
      t1 = _this.possibleBreakpoints;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("int(1)")._as(new Q.SourceReportRange_toJson_closure()), t2._eval$1("MappedListIterable<1,int>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "possibleBreakpoints", t1 == null ? _null : t1.toList$0(0));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[SourceReportRange scriptIndex: " + H.S(_this.scriptIndex) + ", startPos: " + H.S(_this.startPos) + ", endPos: " + H.S(_this.endPos) + ", compiled: " + H.S(_this.compiled) + "]";
    },
    set$possibleBreakpoints: function(possibleBreakpoints) {
      this.possibleBreakpoints = type$.List_int._as(possibleBreakpoints);
    }
  };
  Q.SourceReportRange_toJson_closure.prototype = {
    call$1: function(f) {
      return H._asIntS(f);
    },
    $signature: 36
  };
  Q.Stack.prototype = {
    toJson$0: function() {
      var t3, t4, t5, _this = this, _null = null,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Stack");
      t3 = _this.frames;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      t4 = new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.Stack_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t3 = _this.messages;
      t3.toString;
      t5 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["frames", t4, "messages", new H.MappedListIterable(t3, t5._eval$1("Map<String,@>(1)")._as(new Q.Stack_toJson_closure0()), t5._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      t2 = _this.asyncCausalFrames;
      if (t2 == null)
        t1 = _null;
      else {
        t1 = H._arrayInstanceType(t2);
        t1 = new H.MappedListIterable(t2, t1._eval$1("Map<String,@>(1)")._as(new Q.Stack_toJson_closure1()), t1._eval$1("MappedListIterable<1,Map<String,@>>"));
      }
      Q._setIfNotNull(json, "asyncCausalFrames", t1 == null ? _null : t1.toList$0(0));
      t1 = _this.awaiterFrames;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = H._arrayInstanceType(t1);
        t2 = new H.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new Q.Stack_toJson_closure2()), t2._eval$1("MappedListIterable<1,Map<String,@>>"));
        t1 = t2;
      }
      Q._setIfNotNull(json, "awaiterFrames", t1 == null ? _null : t1.toList$0(0));
      return json;
    },
    toString$0: function(_) {
      return "[Stack type: " + H.S(this.type) + ", frames: " + H.S(this.frames) + ", messages: " + H.S(this.messages) + "]";
    },
    set$frames: function($frames) {
      this.frames = type$.List_Frame._as($frames);
    },
    set$asyncCausalFrames: function(asyncCausalFrames) {
      this.asyncCausalFrames = type$.List_Frame._as(asyncCausalFrames);
    },
    set$awaiterFrames: function(awaiterFrames) {
      this.awaiterFrames = type$.List_Frame._as(awaiterFrames);
    },
    set$messages: function(messages) {
      this.messages = type$.List_Message._as(messages);
    }
  };
  Q.Stack_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.Frame._as(f).toJson$0();
    },
    $signature: 71
  };
  Q.Stack_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.Message._as(f).toJson$0();
    },
    $signature: 326
  };
  Q.Stack_toJson_closure1.prototype = {
    call$1: function(f) {
      type$.Frame._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 71
  };
  Q.Stack_toJson_closure2.prototype = {
    call$1: function(f) {
      type$.Frame._as(f);
      return f == null ? null : f.toJson$0();
    },
    $signature: 71
  };
  Q.Success.prototype = {
    toJson$0: function() {
      var json = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      json.$indexSet(0, "type", "Success");
      return json;
    },
    toString$0: function(_) {
      return "[Success type: " + H.S(this.type) + "]";
    }
  };
  Q.Timeline.prototype = {
    toJson$0: function() {
      var t3, t4,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Timeline");
      t3 = this.traceEvents;
      t3.toString;
      t4 = H._arrayInstanceType(t3);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["traceEvents", new H.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new Q.Timeline_toJson_closure()), t4._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0), "timeOriginMicros", this.timeOriginMicros, "timeExtentMicros", this.timeExtentMicros], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[Timeline type: " + H.S(_this.type) + ", traceEvents: " + H.S(_this.traceEvents) + ", timeOriginMicros: " + H.S(_this.timeOriginMicros) + ", timeExtentMicros: " + H.S(_this.timeExtentMicros) + "]";
    },
    set$traceEvents: function(traceEvents) {
      this.traceEvents = type$.List_TimelineEvent._as(traceEvents);
    }
  };
  Q.Timeline_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.TimelineEvent._as(f).toJson$0();
    },
    $signature: 87
  };
  Q.TimelineEvent.prototype = {
    toJson$0: function() {
      var result = P.LinkedHashMap_LinkedHashMap$of(this.json, type$.String, type$.dynamic);
      result.$indexSet(0, "type", "TimelineEvent");
      return result;
    },
    toString$0: function(_) {
      return "[TimelineEvent ]";
    }
  };
  Q.TimelineFlags.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "TimelineFlags");
      t3 = this.recorderName;
      t4 = this.availableStreams;
      t4.toString;
      t5 = H._arrayInstanceType(t4);
      t5 = new H.MappedListIterable(t4, t5._eval$1("String(1)")._as(new Q.TimelineFlags_toJson_closure()), t5._eval$1("MappedListIterable<1,String>")).toList$0(0);
      t4 = this.recordedStreams;
      t4.toString;
      t6 = H._arrayInstanceType(t4);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["recorderName", t3, "availableStreams", t5, "recordedStreams", new H.MappedListIterable(t4, t6._eval$1("String(1)")._as(new Q.TimelineFlags_toJson_closure0()), t6._eval$1("MappedListIterable<1,String>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      var _this = this;
      return "[TimelineFlags type: " + H.S(_this.type) + ", recorderName: " + H.S(_this.recorderName) + ", availableStreams: " + H.S(_this.availableStreams) + ", recordedStreams: " + H.S(_this.recordedStreams) + "]";
    },
    set$availableStreams: function(availableStreams) {
      this.availableStreams = type$.List_String._as(availableStreams);
    },
    set$recordedStreams: function(recordedStreams) {
      this.recordedStreams = type$.List_String._as(recordedStreams);
    }
  };
  Q.TimelineFlags_toJson_closure.prototype = {
    call$1: function(f) {
      return H._asStringS(f);
    },
    $signature: 5
  };
  Q.TimelineFlags_toJson_closure0.prototype = {
    call$1: function(f) {
      return H._asStringS(f);
    },
    $signature: 5
  };
  Q.Timestamp.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Timestamp");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["timestamp", this.timestamp], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[Timestamp type: " + H.S(this.type) + ", timestamp: " + H.S(this.timestamp) + "]";
    }
  };
  Q.TypeArgumentsRef.prototype = {
    toJson$0: function() {
      var json = this.super$ObjRef$toJson();
      json.$indexSet(0, "type", "@TypeArguments");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return type$.TypeArgumentsRef._is(other) && this.id == other.get$id(other);
    },
    toString$0: function(_) {
      return "[TypeArgumentsRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.TypeArguments.prototype = {
    toJson$0: function() {
      var t1, t2, t3,
        json = this.super$Obj$toJson();
      json.$indexSet(0, "type", "TypeArguments");
      t1 = this.name;
      t2 = this.types;
      t2.toString;
      t3 = H._arrayInstanceType(t2);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", t1, "types", new H.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new Q.TypeArguments_toJson_closure()), t3._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], type$.String, type$.dynamic));
      return json;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.id);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Q.TypeArguments && this.id == other.id;
    },
    toString$0: function(_) {
      var _this = this;
      return "[TypeArguments type: " + H.S(_this.type) + ", id: " + H.S(_this.id) + ", name: " + H.S(_this.name) + ", types: " + H.S(_this.types) + "]";
    },
    set$types: function(_, types) {
      this.types = type$.List_InstanceRef._as(types);
    },
    $isTypeArgumentsRef: 1,
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.TypeArguments_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.InstanceRef._as(f).toJson$0();
    },
    $signature: 110
  };
  Q.UnresolvedSourceLocation.prototype = {
    toJson$0: function() {
      var t1, _this = this,
        json = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      json.$indexSet(0, "type", "UnresolvedSourceLocation");
      t1 = _this.script;
      Q._setIfNotNull(json, "script", t1 == null ? null : t1.toJson$0());
      Q._setIfNotNull(json, "scriptUri", _this.scriptUri);
      Q._setIfNotNull(json, "tokenPos", _this.tokenPos);
      Q._setIfNotNull(json, "line", _this.line);
      Q._setIfNotNull(json, "column", _this.column);
      return json;
    },
    toString$0: function(_) {
      return "[UnresolvedSourceLocation type: " + H.S(this.type) + "]";
    }
  };
  Q.Version.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "Version");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["major", this.major, "minor", this.minor], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[Version type: " + H.S(this.type) + ", major: " + H.S(this.major) + ", minor: " + H.S(this.minor) + "]";
    },
    get$major: function() {
      return this.major;
    },
    get$minor: function() {
      return this.minor;
    }
  };
  Q.VMRef.prototype = {
    toJson$0: function() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "@VM");
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[VMRef type: " + H.S(this.type) + ", name: " + H.S(this.name) + "]";
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.VM.prototype = {
    toJson$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        json = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      json.$indexSet(0, "type", "VM");
      t3 = _this.name;
      t4 = _this.architectureBits;
      t5 = _this.hostCPU;
      t6 = _this.operatingSystem;
      t7 = _this.targetCPU;
      t8 = _this.version;
      t9 = _this.pid;
      t10 = _this.startTime;
      t11 = _this.isolates;
      t11.toString;
      t12 = H._arrayInstanceType(t11);
      t12 = new H.MappedListIterable(t11, t12._eval$1("Map<String,@>(1)")._as(new Q.VM_toJson_closure()), t12._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0);
      t11 = _this.isolateGroups;
      t11.toString;
      t13 = H._arrayInstanceType(t11);
      json.addAll$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["name", t3, "architectureBits", t4, "hostCPU", t5, "operatingSystem", t6, "targetCPU", t7, "version", t8, "pid", t9, "startTime", t10, "isolates", t12, "isolateGroups", new H.MappedListIterable(t11, t13._eval$1("Map<String,@>(1)")._as(new Q.VM_toJson_closure0()), t13._eval$1("MappedListIterable<1,Map<String,@>>")).toList$0(0)], t1, t2));
      return json;
    },
    toString$0: function(_) {
      return "[VM]";
    },
    set$isolates: function(isolates) {
      this.isolates = type$.List_IsolateRef._as(isolates);
    },
    set$isolateGroups: function(isolateGroups) {
      this.isolateGroups = type$.List_IsolateGroupRef._as(isolateGroups);
    },
    $isVMRef: 1,
    get$name: function(receiver) {
      return this.name;
    },
    get$version: function(receiver) {
      return this.version;
    }
  };
  Q.VM_toJson_closure.prototype = {
    call$1: function(f) {
      return type$.IsolateRef._as(f).toJson$0();
    },
    $signature: 114
  };
  Q.VM_toJson_closure0.prototype = {
    call$1: function(f) {
      return type$.IsolateGroupRef._as(f).toJson$0();
    },
    $signature: 327
  };
  R.HtmlWebSocketChannel.prototype = {
    get$stream: function(_) {
      var t1 = this._html0$_controller._foreign._streamController;
      t1.toString;
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    get$sink: function() {
      return this._html0$_sink;
    },
    HtmlWebSocketChannel$1: function(_webSocket) {
      var t1, t2, t3, _this = this;
      _this._html0$_sink = new R._HtmlWebSocketSink(_this, _this._html0$_controller._foreign._guarantee_channel$_sink);
      t1 = _this._webSocket;
      if (t1.readyState === 1)
        _this._listen$0();
      else {
        t2 = new W._EventStream(t1, "open", false, type$._EventStream_Event);
        t2.get$first(t2).then$1$1(new R.HtmlWebSocketChannel_closure(_this), type$.Null);
      }
      t2 = new W._EventStream(t1, "error", false, type$._EventStream_Event);
      t3 = type$.Null;
      t2.get$first(t2).then$1$1(new R.HtmlWebSocketChannel_closure0(_this), t3);
      t2 = type$.void_Function_MessageEvent._as(new R.HtmlWebSocketChannel_closure1(_this));
      type$.void_Function._as(null);
      W._EventStreamSubscription$(t1, "message", t2, false, type$.MessageEvent);
      t1 = new W._EventStream(t1, "close", false, type$._EventStream_CloseEvent);
      t1.get$first(t1).then$1$1(new R.HtmlWebSocketChannel_closure2(_this), t3);
    },
    _listen$0: function() {
      var t1 = this._html0$_controller._local._streamController;
      t1.toString;
      new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$2$onDone(new R.HtmlWebSocketChannel__listen_closure(this), new R.HtmlWebSocketChannel__listen_closure0(this));
    }
  };
  R.HtmlWebSocketChannel_closure.prototype = {
    call$1: function(_) {
      type$.Event._as(_);
      this.$this._listen$0();
    },
    $signature: 3
  };
  R.HtmlWebSocketChannel_closure0.prototype = {
    call$1: function(_) {
      var t1;
      type$.Event._as(_);
      t1 = this.$this._html0$_controller;
      t1._local._guarantee_channel$_sink.addError$1(new E.WebSocketChannelException("WebSocket connection failed."));
      t1._local._guarantee_channel$_sink.close$0(0);
    },
    $signature: 3
  };
  R.HtmlWebSocketChannel_closure1.prototype = {
    call$1: function($event) {
      var data = new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as($event).data, true);
      if (type$.ByteBuffer._is(data))
        data = H.NativeUint8List_NativeUint8List$view(data, 0, null);
      this.$this._html0$_controller._local._guarantee_channel$_sink.add$1(0, data);
    },
    $signature: 328
  };
  R.HtmlWebSocketChannel_closure2.prototype = {
    call$1: function($event) {
      var t1;
      type$.CloseEvent._as($event);
      t1 = this.$this;
      t1._closeCode = $event.code;
      $event.reason;
      t1._html0$_controller._local._guarantee_channel$_sink.close$0(0);
    },
    $signature: 329
  };
  R.HtmlWebSocketChannel__listen_closure.prototype = {
    call$1: function(message) {
      return this.$this._webSocket.send(message);
    },
    $signature: 9
  };
  R.HtmlWebSocketChannel__listen_closure0.prototype = {
    call$0: function() {
      this.$this._webSocket.close();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  R._HtmlWebSocketSink.prototype = {$isWebSocketSink: 1};
  N.WebSocketChannel.prototype = {
    get$stream: function(_) {
      return new P.StreamView(this._channel$_webSocket, type$.StreamView_dynamic);
    },
    get$sink: function() {
      var t1 = this._channel$_webSocket;
      return new N.WebSocketSink(t1, t1);
    }
  };
  N.WebSocketSink.prototype = {};
  E.WebSocketChannelException.prototype = {
    toString$0: function(_) {
      var t1 = "WebSocketChannelException: " + this.message;
      return t1;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = P._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _.super$_BroadcastStreamController$add = _.add$1;
    _.super$_BroadcastStreamController$close = _.close$0;
    _.super$_BroadcastStreamController$_callOnCancel = _._callOnCancel$0;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = P.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = K.DisposableController.prototype;
    _.super$DisposableController$dispose = _.dispose$0;
    _ = F.FlameChart.prototype;
    _.super$FlameChart$initUiElements = _.initUiElements$0;
    _ = Z._InspectorController_DisposableController_AutoDisposeControllerMixin.prototype;
    _.super$_InspectorController_DisposableController_AutoDisposeControllerMixin$dispose = _.dispose$0;
    _ = E._InspectorService_DisposableController_AutoDisposeControllerMixin.prototype;
    _.super$_InspectorService_DisposableController_AutoDisposeControllerMixin$dispose = _.dispose$0;
    _ = K.InspectorTreeNode.prototype;
    _.super$InspectorTreeNode$isDirty = _.set$isDirty;
    _ = A.HtmlCpuProfilerView.prototype;
    _.super$HtmlCpuProfilerView$update = _.update$1$showLoadingSpinner;
    _ = K.TableData.prototype;
    _.super$TableData$addColumn = _.addColumn$1;
    _ = K.ColumnData.prototype;
    _.super$ColumnData$compare = _.compare$2;
    _ = U.TimelineBase.prototype;
    _.super$TimelineBase$clear = _.clear$0;
    _ = A.TimelineData.prototype;
    _.super$TimelineData$clear = _.clear$0;
    _ = A.TimelineEvent0.prototype;
    _.super$TimelineEvent$addChild = _.addChild$1;
    _ = U.ChangeNotifier.prototype;
    _.super$ChangeNotifier$addListener = _.addListener$1;
    _.super$ChangeNotifier$removeListener = _.removeListener$1;
    _ = U.DiagnosticableMixin.prototype;
    _.super$DiagnosticableMixin$debugFillProperties = _.debugFillProperties$1;
    _ = U.DiagnosticableTree.prototype;
    _.super$DiagnosticableTree$toDiagnosticsNode = _.toDiagnosticsNode$2$name$style;
    _ = S.Color.prototype;
    _.super$Color$$eq = _.$eq;
    _.super$Color$toString = _.toString$0;
    _ = N.ServiceExtensionSelector.prototype;
    _.super$ServiceExtensionSelector$addOptions = _.addOptions$0;
    _ = G.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = Q.InstanceRef.prototype;
    _.super$InstanceRef$toJson = _.toJson$0;
    _ = Q.Instance.prototype;
    _.super$Instance$toJson = _.toJson$0;
    _ = Q.ObjRef.prototype;
    _.super$ObjRef$toJson = _.toJson$0;
    _ = Q.Obj.prototype;
    _.super$Obj$toJson = _.toJson$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_1_u = hunkHelpers._instance_1u,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_2_i = hunkHelpers._instance_2i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 117);
    var _;
    _instance_1_i(_ = J.JSArray.prototype, "get$remove", "remove$1", 33);
    _instance_1_i(_, "get$addAll", "addAll$1", 10);
    _instance_1_u(H.CastStreamSubscription.prototype, "get$__internal$_onData", "__internal$_onData$1", 10);
    _static_0(H, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 82);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 57);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 57);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 57);
    _static_1(P, "async_Future__kTrue$closure", "Future__kTrue", 14);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 10);
    _static(P, "async___nullErrorHandler$closure", 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 22, 0);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 1);
    _static(P, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 332, 0);
    _static(P, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return P._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 333, 1);
    _static(P, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return P._rootRunUnary($self, $parent, zone, f, arg, type$.dynamic, type$.dynamic);
    }], 334, 1);
    _static(P, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return P._rootRunBinary($self, $parent, zone, f, arg1, arg2, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 335, 1);
    _static(P, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return P._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 336, 0);
    _static(P, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterUnaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic);
    }], 337, 0);
    _static(P, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterBinaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 338, 0);
    _static(P, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 339, 0);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 340, 0);
    _static(P, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 341, 0);
    _static(P, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 342, 0);
    _static(P, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 343, 0);
    _static_1(P, "async___printToZone$closure", "_printToZone", 93);
    _static(P, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 344, 0);
    _instance_0_u(_ = P._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_i(_ = P._AsBroadcastStreamController.prototype, "get$add", "add$1", 10);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 22, 0);
    _instance_0_i(_, "get$close", "close$0", 23);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 22, 0);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 22, 0);
    _instance_1_i(_ = P._StreamController.prototype, "get$add", "add$1", 10);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 22, 0);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_i(P._StreamSinkWrapper.prototype, "get$add", "add$1", 10);
    _instance_0_u(_ = P._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_u(P._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 1);
    _instance_0_u(_ = P._AsBroadcastStream.prototype, "get$_onCancel", "_onCancel$0", 1);
    _instance_0_u(_, "get$_onListen", "_onListen$0", 1);
    _instance_1_u(_ = P._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 10);
    _instance(_, "get$_onError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_onError$2", "_onError$1"], 22, 0);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 1);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 10);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 152);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 1);
    _static_2(P, "collection___defaultEquals$closure", "_defaultEquals", 345);
    _static_1(P, "collection___defaultHashCode$closure", "_defaultHashCode", 76);
    _static_2(P, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 117);
    _instance(P._LinkedHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 199, 0);
    _instance_1_i(P.ListQueue.prototype, "get$add", "add$1", 10);
    _instance(P._UnmodifiableSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 308, 0);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 4);
    _instance_1_i(_ = P._ByteCallbackSink.prototype, "get$add", "add$1", 10);
    _instance_0_i(_, "get$close", "close$0", 1);
    _static_1(P, "core__identityHashCode$closure", "identityHashCode", 107);
    _static_2(P, "core__identical$closure", "identical", 106);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 5);
    _instance_0_i(P.Stopwatch.prototype, "get$start", "start$0", 1);
    _static_1(W, "html_Element__determineMouseWheelEventType$closure", "Element__determineMouseWheelEventType", 346);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 118, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 118, 0);
    _instance_2_i(W.HttpRequest.prototype, "get$setRequestHeader", "setRequestHeader$2", 32);
    _instance(W.MediaRecorder.prototype, "get$start", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["start$1", "start$0"], 136, 0);
    _instance_0_i(W.PresentationRequest.prototype, "get$start", "start$0", 143);
    _instance_0_i(W.Sensor.prototype, "get$start", "start$0", 1);
    _instance_0_i(W.SpeechRecognition.prototype, "get$start", "start$0", 1);
    _instance_1_i(_ = W.TimeRanges.prototype, "get$end", "end$1", 55);
    _instance_1_i(_, "get$start", "start$1", 55);
    _instance_1_i(W.UnderlyingSourceBase.prototype, "get$start", "start$1", 165);
    _instance_0_i(W.VRSession.prototype, "get$end", "end$0", 23);
    _instance_1_u(P.CssClassSetImpl.prototype, "get$_validateToken", "_validateToken$1", 5);
    _static_1(P, "js___convertToJS$closure", "_convertToJS", 4);
    _static_1(P, "js___convertToDart$closure", "_convertToDart", 109);
    _static(P, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return P.max(a, b, type$.num);
    }], 348, 1);
    _instance(P.AudioBufferSourceNode.prototype, "get$start", 1, 0, function() {
      return [null, null, null];
    }, ["call$3", "call$1", "call$2", "call$0"], ["start$3", "start$1", "start$2", "start$0"], 224, 0);
    _instance_2_u(_ = U.DeepCollectionEquality.prototype, "get$equals", "equals$2", 106);
    _instance_1_i(_, "get$hash", "hash$1", 107);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 33);
    _static(U, "html_main___handleUncaughtError$closure", 5, null, ["call$5"], ["_handleUncaughtError"], 349, 0);
    _instance_2_u(_ = F.FlameChartCanvas.prototype, "get$paintCallback", "paintCallback$2", 52);
    _instance_1_u(_, "get$_onTap", "_onTap$1", 116);
    _instance_1_u(_, "get$_handleMouseWheel", "_handleMouseWheel$1", 331);
    _static_2(F, "breakpoints_view___breakpointComparator$closure", "_breakpointComparator", 350);
    _instance_1_u(_ = S.DebuggerState.prototype, "get$_debugger_state$_handleIsolateEvent", "_debugger_state$_handleIsolateEvent$1", 12);
    _instance_1_u(_, "get$getShortScriptName", "getShortScriptName$1", 5);
    _instance(_ = R.HtmlDebuggerScreen.prototype, "get$debuggerShortcuts", 0, 4, null, ["call$4"], ["debuggerShortcuts$4"], 78, 0);
    _instance_1_u(_, "get$_handleConnectionStart", "_handleConnectionStart$1", 79);
    _instance_1_u(_, "get$_handleIsolateChanged", "_handleIsolateChanged$1", 153);
    _instance_1_u(_, "get$_handleConnectionStop", "_handleConnectionStop$1", 9);
    _instance_0_u(N.HtmlPopupView.prototype, "get$hidePopup", "hidePopup$0", 1);
    _instance(N.HtmlScriptsMatcher.prototype, "get$start", 1, 3, function() {
      return [null];
    }, ["call$4", "call$3"], ["start$4", "start$3"], 256, 0);
    _instance_1_i(T.EnumUtils.prototype, "get$name", "name$1", 302);
    _instance_1_u(A.HtmlFramework.prototype, "get$handlePopState", "handlePopState$1", 316);
    _instance_0_u(A.HtmlToastAnimator.prototype, "get$hide", "hide$0", 1);
    _instance_1_u(G.HtmlMessageManager.prototype, "get$_showMessage", "_showMessage$1", 356);
    _instance(A.HtmlAutoCompleteMatcher.prototype, "get$start", 1, 3, function() {
      return [null];
    }, ["call$4", "call$3"], ["start$4", "start$3"], 126, 0);
    _instance_2_u(Q.HtmlTable.prototype, "get$_resize", "_resize$2", 127);
    _instance_0_u(_ = Q.TreeTableToolbar.prototype, "get$_expandAll", "_expandAll$0", 1);
    _instance_0_u(_, "get$_collapseAll", "_collapseAll$0", 1);
    _instance_1_u(_ = D.HtmlInspectorScreen.prototype, "get$_html_inspector_screen$_handleConnectionStart", "_html_inspector_screen$_handleConnectionStart$1", 79);
    _instance_1_u(_, "get$_html_inspector_screen$_handleConnectionStop", "_html_inspector_screen$_handleConnectionStop$1", 9);
    _instance_0_u(_, "get$_refreshInspector", "_refreshInspector$0", 1);
    _instance_0_u(_, "get$_onExpandCollapseSupported", "_onExpandCollapseSupported$0", 1);
    _instance_1_u(_ = Z.InspectorController.prototype, "get$_onClientChange", "_onClientChange$1", 428);
    _instance_2_u(_, "get$highlightShowNode", "highlightShowNode$2", 135);
    _instance_0_i(_, "get$refresh", "refresh$0", 7);
    _instance_1_u(_, "get$maybeUpdateValueUI", "maybeUpdateValueUI$1", 137);
    _instance_1_u(_, "get$_onExpand", "_onExpand$1", 88);
    _instance_0_u(_, "get$selectionChanged", "selectionChanged$0", 1);
    _instance_2_u(_, "get$_onNodeAdded", "_onNodeAdded$2", 139);
    _instance_1_u(_ = E.InspectorService.prototype, "get$onDebugVmServiceReceived", "onDebugVmServiceReceived$1", 12);
    _instance_1_u(_, "get$onExtensionVmServiceRecieved", "onExtensionVmServiceRecieved$1", 12);
    _instance_1_u(K.InspectorTreeController.prototype, "get$_collapseAllNodes", "_collapseAllNodes$1", 88);
    _instance_1_i(_ = E.InspectorTreeCanvas.prototype, "get$onMouseMove", "onMouseMove$1", 214);
    _instance_1_u(_, "get$_updateForContainerResize", "_updateForContainerResize$1", 144);
    _instance_2_u(_, "get$_inspector_tree_canvas$_paintCallback", "_inspector_tree_canvas$_paintCallback$2", 52);
    _instance_0_i(_, "get$onMouseLeave", "onMouseLeave$0", 1);
    _instance_1_u(_ = K.InspectorTreeHtml.prototype, "get$onMouseClick", "onMouseClick$1", 45);
    _instance_1_i(_, "get$onMouseMove", "onMouseMove$1", 45);
    _instance_1_i(_, "get$onMouseLeave", "onMouseLeave$1", 45);
    _instance_1_u(K.InspectorTreeControllerLegacy.prototype, "get$onTap", "onTap$1", 116);
    _static_1(Z, "html_logging_screen__logMessageToHtml$closure", "logMessageToHtml", 5);
    _instance(_ = Z.HtmlLogDetails.prototype, "get$onShowDetails", 0, 0, null, ["call$2$text$tree", "call$0", "call$1$text", "call$1$tree"], ["onShowDetails$2$text$tree", "onShowDetails$0", "onShowDetails$1$text", "onShowDetails$1$tree"], 149, 0);
    _instance(_, "get$createLoggingTree", 0, 0, function() {
      return {onSelectionChange: null};
    }, ["call$1$onSelectionChange", "call$0"], ["createLoggingTree$1$onSelectionChange", "createLoggingTree$0"], 150, 0);
    _instance_1_u(_ = E.LoggingController.prototype, "get$_logging_controller$_handleConnectionStart", "_logging_controller$_handleConnectionStart$1", 46);
    _instance_1_u(_, "get$_logging_controller$_handleExtensionEvent", "_logging_controller$_handleExtensionEvent$1", 12);
    _instance_1_u(_, "get$_logging_controller$_handleGCEvent", "_logging_controller$_handleGCEvent$1", 12);
    _instance_1_u(_, "get$_handleDeveloperLogEvent", "_handleDeveloperLogEvent$1", 12);
    _instance_1_u(_, "get$_logging_controller$_handleConnectionStop", "_logging_controller$_handleConnectionStop$1", 9);
    _instance_1_u(_, "get$_handleDebuggerEvent", "_handleDebuggerEvent$1", 75);
    _instance_1_u(_, "get$_handleDevToolsEvent", "_handleDevToolsEvent$1", 75);
    _instance_1_u(E._StdoutEventHandler.prototype, "get$handle", "handle$1", 12);
    _instance_1_u(_ = F.HtmlPerfToolFramework.prototype, "get$_gAReportExceptions", "_gAReportExceptions$1", 19);
    _instance_0_u(_, "get$_handleIsolateSelect", "_handleIsolateSelect$0", 1);
    _instance(_, "get$_rebuildIsolateSelect", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_rebuildIsolateSelect$1", "_rebuildIsolateSelect$0"], 156, 0);
    _instance_0_u(F.HtmlStatus.prototype, "get$dispose", "dispose$0", 1);
    _instance(_ = O.HtmlMemoryScreen.prototype, "get$memoryShortcuts", 0, 4, null, ["call$4"], ["memoryShortcuts$4"], 78, 0);
    _instance_0_u(_, "get$_displaySettingsDialog", "_displaySettingsDialog$0", 1);
    _instance_1_u(_, "get$_classPatternChanged", "_classPatternChanged$1", 93);
    _instance_0_u(_, "get$_liveUpdateFilters", "_liveUpdateFilters$0", 1);
    _instance_0_u(_, "get$_applySettings", "_applySettings$0", 1);
    _instance_0_u(_, "get$_cancelSettings", "_cancelSettings$0", 1);
    _instance(_, "get$_callbackPopupSelectClass", 0, 0, null, ["call$1", "call$0"], ["_callbackPopupSelectClass$1", "_callbackPopupSelectClass$0"], 164, 0);
    _instance_0_u(_, "get$_resetAllocatorCounts", "_resetAllocatorCounts$0", 7);
    _instance_0_u(_, "get$_search", "_search$0", 7);
    _instance_0_u(_, "get$_loadAllocationProfile", "_loadAllocationProfile$0", 7);
    _instance_0_u(_, "get$_gcNow", "_gcNow$0", 7);
    _instance_1_i(_, "get$select", "select$1", 92);
    _instance_1_u(_ = T.MemoryController.prototype, "get$_memory_controller$_handleConnectionStart", "_memory_controller$_handleConnectionStart$1", 46);
    _instance_1_u(_, "get$_memory_controller$_handleConnectionStop", "_memory_controller$_handleConnectionStop$1", 9);
    _instance_1_u(M.MemoryPlotly.prototype, "get$_doubleClick", "_doubleClick$1", 61);
    _instance_0_i(_ = T.MemoryTracker.prototype, "get$start", "start$0", 1);
    _instance_1_u(_, "get$_handleGCEvent", "_handleGCEvent$1", 12);
    _instance_0_u(_, "get$_pollMemory", "_pollMemory$0", 7);
    _instance_1_u(_ = R.HtmlApp.prototype, "get$devToolsReady", "devToolsReady$1", 50);
    _instance_1_u(_, "get$echo", "echo$1", 50);
    _instance_1_u(_, "get$switchPage", "switchPage$1", 50);
    _instance(_, "get$currentPageId", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["currentPageId$1", "currentPageId$0"], 42, 0);
    _instance(_, "get$connectDialogIsVisible", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["connectDialogIsVisible$1", "connectDialogIsVisible$0"], 98, 0);
    _instance(_, "get$connectDialogConnectTo", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["connectDialogConnectTo$1", "connectDialogConnectTo$0"], 20, 0);
    _instance(_, "get$logsClearLogs", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["logsClearLogs$1", "logsClearLogs$0"], 20, 0);
    _instance(_, "get$logsLogCount", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["logsLogCount$1", "logsLogCount$0"], 186, 0);
    _instance(_, "get$debuggerGetState", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetState$1", "debuggerGetState$0"], 42, 0);
    _instance(_, "get$debuggerGetConsoleContents", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetConsoleContents$1", "debuggerGetConsoleContents$0"], 42, 0);
    _instance(_, "get$debuggerGetLocation", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetLocation$1", "debuggerGetLocation$0"], 42, 0);
    _instance(_, "get$debuggerResume", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerResume$1", "debuggerResume$0"], 20, 0);
    _instance(_, "get$debuggerPause", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerPause$1", "debuggerPause$0"], 20, 0);
    _instance(_, "get$debuggerStep", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerStep$1", "debuggerStep$0"], 20, 0);
    _instance(_, "get$debuggerClearBreakpoints", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerClearBreakpoints$1", "debuggerClearBreakpoints$0"], 20, 0);
    _instance(_, "get$debuggerGetBreakpoints", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetBreakpoints$1", "debuggerGetBreakpoints$0"], 43, 0);
    _instance(_, "get$debuggerSupportsScripts", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerSupportsScripts$1", "debuggerSupportsScripts$0"], 98, 0);
    _instance(_, "get$debuggerGetScripts", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetScripts$1", "debuggerGetScripts$0"], 43, 0);
    _instance(_, "get$debuggerGetCallStackFrames", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetCallStackFrames$1", "debuggerGetCallStackFrames$0"], 43, 0);
    _instance(_, "get$debuggerGetVariables", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerGetVariables$1", "debuggerGetVariables$0"], 43, 0);
    _instance(_, "get$debuggerAddBreakpoint", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerAddBreakpoint$1", "debuggerAddBreakpoint$0"], 20, 0);
    _instance(_, "get$debuggerSetExceptionPauseMode", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["debuggerSetExceptionPauseMode$1", "debuggerSetExceptionPauseMode$0"], 20, 0);
    _instance_0_i(M.HtmlPerformanceScreen.prototype, "get$_clear", "_clear$0", 1);
    _static_1(V, "cpu_profile_transformer_BottomUpProfileTransformer_cascadeSampleCounts$closure", "BottomUpProfileTransformer_cascadeSampleCounts", 35);
    _instance_1_u(R.IsolateManager.prototype, "get$_handleIsolateEvent", "_handleIsolateEvent$1", 101);
    _instance_1_u(R.ServiceExtensionManager.prototype, "get$_handleExtensionEvent", "_handleExtensionEvent$1", 101);
    _instance_1_u(R.VmFlagManager.prototype, "get$handleVmEvent", "handleVmEvent$1", 12);
    _instance_1_u(_ = T.PlotlyDivGraph.prototype, "get$_plotlyClick", "_plotlyClick$1", 61);
    _instance_1_u(_, "get$_plotlyHover", "_plotlyHover$1", 61);
    _instance_1_u(_ = U.TimelineController.prototype, "get$recordTrace", "recordTrace$1", 223);
    _instance_1_u(_, "get$recordTraceForTimelineEvent", "recordTraceForTimelineEvent$1", 60);
    _instance_2_u(M.FullTimelineFlameChartCanvas.prototype, "get$paintCallback", "paintCallback$2", 52);
    _static_2(A, "html_timeline_model_FullTimelineData_eventGroupComparator$closure", "FullTimelineData_eventGroupComparator", 351);
    _instance_1_u(A.TimelineEvent0.prototype, "get$_addChild", "_addChild$1", 60);
    _instance_0_u(_ = M.HtmlTimelineScreen.prototype, "get$_exitOfflineMode", "_exitOfflineMode$0", 7);
    _instance_0_u(_, "get$_pauseFrameRecording", "_pauseFrameRecording$0", 7);
    _instance_0_u(_, "get$_resumeFrameRecording", "_resumeFrameRecording$0", 7);
    _instance_0_u(_, "get$_stopFullRecording", "_stopFullRecording$0", 1);
    _instance_0_u(_, "get$_exportTimeline", "_exportTimeline$0", 1);
    _instance_1_u(_ = R.TimelineService.prototype, "get$_initTimelineListener", "_initTimelineListener$1", 46);
    _instance_1_u(_, "get$_html_timeline_service$_handleConnectionStop", "_html_timeline_service$_handleConnectionStop$1", 9);
    _instance_1_u(X.TreeNode0.prototype, "get$addChild", "addChild$1", 10);
    _static_0(F, "analytics__gaEnabled$closure", "gaEnabled", 28);
    _static(U, "_fake_flutter__debugPrintThrottled$closure", 1, null, ["call$2$wrapWidth", "call$1"], ["debugPrintThrottled", function(message) {
      return U.debugPrintThrottled(message, null);
    }], 352, 0);
    _static_0(U, "_fake_flutter___debugPrintTask$closure", "_debugPrintTask", 1);
    _static(G, "html_custom___defaultRenderer$closure", 1, null, ["call$1$1", "call$1"], ["_defaultRenderer", function(item) {
      return G._defaultRenderer(item, type$.dynamic);
    }], 353, 0);
    _instance(G.HtmlTreeToggle.prototype, "get$toggle", 1, 0, null, ["call$2$onlyCollapse$onlyExpand", "call$0", "call$1$onlyCollapse", "call$1$onlyExpand"], ["toggle$2$onlyCollapse$onlyExpand", "toggle$0", "toggle$1$onlyCollapse", "toggle$1$onlyExpand"], 249, 0);
    _instance(_ = A.CoreElement.prototype, "get$attribute", 0, 1, null, ["call$2", "call$1"], ["attribute$2", "attribute$1"], 251, 0);
    _instance(_, "get$clazz", 0, 1, null, ["call$2$removeOthers", "call$1"], ["clazz$2$removeOthers", "clazz$1"], 252, 0);
    _instance_1_i(_, "get$add", "add$1", 4);
    _instance_0_u(_, "get$dispose", "dispose$0", 1);
    _instance(N.PSelect.prototype, "get$option", 0, 1, null, ["call$2$value", "call$1"], ["option$2$value", "option$1"], 260, 0);
    _instance_0_u(N.ServiceExtensionSelector.prototype, "get$_service_extension_elements$_handleSelect", "_service_extension_elements$_handleSelect$0", 1);
    _instance_1_u(R.HtmlTreeNavigator.prototype, "get$handleKeyPress", "handleKeyPress$1", 263);
    _instance_0_u(T.ProfileGranularitySelector.prototype, "get$_handleSelect", "_handleSelect$0", 1);
    _instance_0_u(B.DelayedTimer.prototype, "get$_fire", "_fire$0", 1);
    _instance(E.BaseClient.prototype, "get$patch", 0, 1, function() {
      return {body: null, encoding: null, headers: null};
    }, ["call$4$body$encoding$headers", "call$1"], ["patch$4$body$encoding$headers", "patch$1"], 267, 0);
    _static_1(T, "intl_Intl__throwLocaleError$closure", "Intl__throwLocaleError", 5);
    _static_1(T, "intl_DateFormat_localeExists$closure", "DateFormat_localeExists", 14);
    _static_1(T, "intl_NumberFormat_localeExists$closure", "NumberFormat_localeExists", 14);
    _instance(M.Context0.prototype, "get$extension", 0, 1, function() {
      return [1];
    }, ["call$2", "call$1"], ["extension$2", "extension$1"], 280, 0);
    _instance(X.ParsedPath.prototype, "get$extension", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["extension$1", "extension$0"], 281, 0);
    _static_1(L, "browser__Chrome__isChrome$closure", "_Chrome__isChrome", 34);
    _static_1(L, "browser__Chrome__getVersion$closure", "_Chrome__getVersion", 31);
    _static_1(L, "browser__Firefox__isFirefox$closure", "_Firefox__isFirefox", 34);
    _static_1(L, "browser__Firefox__getVersion$closure", "_Firefox__getVersion", 31);
    _static_1(L, "browser__Safari__isSafari$closure", "_Safari__isSafari", 34);
    _static_1(L, "browser__Safari__getVersion$closure", "_Safari__getVersion", 31);
    _static_1(L, "browser__WKWebView__isWKWebView$closure", "_WKWebView__isWKWebView", 34);
    _static_1(L, "browser__WKWebView__getVersion$closure", "_WKWebView__getVersion", 31);
    _static_1(L, "browser__InternetExplorer__isInternetExplorer$closure", "_InternetExplorer__isInternetExplorer", 34);
    _static_1(L, "browser__InternetExplorer__getVersion$closure", "_InternetExplorer__getVersion", 31);
    _instance(Y.SourceFile.prototype, "get$span", 1, 1, null, ["call$2", "call$1"], ["span$2", "span$1"], 429, 0);
    _instance(Y.SourceSpanMixin.prototype, "get$message", 1, 1, null, ["call$2$color", "call$1"], ["message$2$color", "message$1"], 293, 0);
    _static(A, "split__flexSplit$closure", 1, null, ["call$5$gutterSize$horizontal$minSize$sizes", "call$1"], ["flexSplit", function(parts) {
      return A.flexSplit(parts, 5, true, null, null);
    }], 90, 0);
    _static(A, "split__fixedSplit$closure", 1, null, ["call$5$gutterSize$horizontal$minSize$sizes", "call$1"], ["fixedSplit", function(parts) {
      return A.fixedSplit(parts, 5, true, null, null);
    }], 90, 0);
    _instance_1_u(_ = M.SseClient.prototype, "get$_onIncomingControlMessage", "_onIncomingControlMessage$1", 19);
    _instance_1_u(_, "get$_onIncomingMessage", "_onIncomingMessage$1", 19);
    _instance_0_u(_, "get$_onOutgoingDone", "_onOutgoingDone$0", 1);
    _instance_1_u(_, "get$_onOutgoingMessage", "_onOutgoingMessage$1", 9);
    _static_1(Q, "vm_service_ExtensionData_parse$closure", "ExtensionData_parse", 357);
    _static_1(Q, "vm_service_AllocationProfile_parse$closure", "AllocationProfile_parse", 358);
    _static_1(Q, "vm_service_BoundField_parse$closure", "BoundField_parse", 359);
    _static_1(Q, "vm_service_BoundVariable_parse$closure", "BoundVariable_parse", 360);
    _static_1(Q, "vm_service_Breakpoint_parse$closure", "Breakpoint_parse", 361);
    _static_1(Q, "vm_service_ClassRef_parse$closure", "ClassRef_parse", 362);
    _static_1(Q, "vm_service_Class_parse$closure", "Class_parse", 363);
    _static_1(Q, "vm_service_ClassHeapStats_parse$closure", "ClassHeapStats_parse", 364);
    _static_1(Q, "vm_service_ClassList_parse$closure", "ClassList_parse", 365);
    _static_1(Q, "vm_service_ClientName_parse$closure", "ClientName_parse", 366);
    _static_1(Q, "vm_service_CodeRef_parse$closure", "CodeRef_parse", 367);
    _static_1(Q, "vm_service_Code_parse$closure", "Code_parse", 368);
    _static_1(Q, "vm_service_ContextRef_parse$closure", "ContextRef_parse", 369);
    _static_1(Q, "vm_service_Context_parse$closure", "Context_parse", 370);
    _static_1(Q, "vm_service_ContextElement_parse$closure", "ContextElement_parse", 371);
    _static_1(Q, "vm_service_CpuSamples_parse$closure", "CpuSamples_parse", 372);
    _static_1(Q, "vm_service_CpuSample_parse$closure", "CpuSample_parse", 373);
    _static_1(Q, "vm_service_ErrorRef_parse$closure", "ErrorRef_parse", 374);
    _static_1(Q, "vm_service_Error_parse$closure", "Error_parse", 375);
    _static_1(Q, "vm_service_Event_parse$closure", "Event_parse", 376);
    _static_1(Q, "vm_service_FieldRef_parse$closure", "FieldRef_parse", 377);
    _static_1(Q, "vm_service_Field_parse$closure", "Field_parse", 378);
    _static_1(Q, "vm_service_Flag_parse$closure", "Flag_parse", 379);
    _static_1(Q, "vm_service_FlagList_parse$closure", "FlagList_parse", 380);
    _static_1(Q, "vm_service_Frame_parse$closure", "Frame_parse", 381);
    _static_1(Q, "vm_service_FuncRef_parse$closure", "FuncRef_parse", 382);
    _static_1(Q, "vm_service_Func_parse$closure", "Func_parse", 383);
    _static_1(Q, "vm_service_InstanceRef_parse$closure", "InstanceRef_parse", 384);
    _static_1(Q, "vm_service_Instance_parse$closure", "Instance_parse", 385);
    _static_1(Q, "vm_service_IsolateRef_parse$closure", "IsolateRef_parse", 386);
    _static_1(Q, "vm_service_Isolate_parse$closure", "Isolate_parse", 387);
    _static_1(Q, "vm_service_IsolateGroupRef_parse$closure", "IsolateGroupRef_parse", 388);
    _static_1(Q, "vm_service_IsolateGroup_parse$closure", "IsolateGroup_parse", 389);
    _static_1(Q, "vm_service_InboundReferences_parse$closure", "InboundReferences_parse", 390);
    _static_1(Q, "vm_service_InboundReference_parse$closure", "InboundReference_parse", 391);
    _static_1(Q, "vm_service_InstanceSet_parse$closure", "InstanceSet_parse", 392);
    _static_1(Q, "vm_service_LibraryRef_parse$closure", "LibraryRef_parse", 393);
    _static_1(Q, "vm_service_Library_parse$closure", "Library_parse", 394);
    _static_1(Q, "vm_service_LibraryDependency_parse$closure", "LibraryDependency_parse", 395);
    _static_1(Q, "vm_service_LogRecord_parse$closure", "LogRecord_parse", 396);
    _static_1(Q, "vm_service_MapAssociation_parse$closure", "MapAssociation_parse", 397);
    _static_1(Q, "vm_service_MemoryUsage_parse$closure", "MemoryUsage_parse", 398);
    _static_1(Q, "vm_service_Message_parse$closure", "Message_parse", 399);
    _static_1(Q, "vm_service_NativeFunction_parse$closure", "NativeFunction_parse", 400);
    _static_1(Q, "vm_service_NullValRef_parse$closure", "NullValRef_parse", 401);
    _static_1(Q, "vm_service_NullVal_parse$closure", "NullVal_parse", 402);
    _static_1(Q, "vm_service_ObjRef_parse$closure", "ObjRef_parse", 403);
    _static_1(Q, "vm_service_Obj_parse$closure", "Obj_parse", 404);
    _static_1(Q, "vm_service_ProfileFunction_parse$closure", "ProfileFunction_parse", 405);
    _static_1(Q, "vm_service_ReloadReport_parse$closure", "ReloadReport_parse", 406);
    _static_1(Q, "vm_service_RetainingObject_parse$closure", "RetainingObject_parse", 407);
    _static_1(Q, "vm_service_RetainingPath_parse$closure", "RetainingPath_parse", 408);
    _static_1(Q, "vm_service_Response_parse$closure", "Response_parse", 409);
    _static_1(Q, "vm_service_Sentinel_parse$closure", "Sentinel_parse", 410);
    _static_1(Q, "vm_service_ScriptRef_parse$closure", "ScriptRef_parse", 411);
    _static_1(Q, "vm_service_Script_parse$closure", "Script_parse", 412);
    _static_1(Q, "vm_service_ScriptList_parse$closure", "ScriptList_parse", 413);
    _static_1(Q, "vm_service_SourceLocation_parse$closure", "SourceLocation_parse", 414);
    _static_1(Q, "vm_service_SourceReport_parse$closure", "SourceReport_parse", 415);
    _static_1(Q, "vm_service_SourceReportCoverage_parse$closure", "SourceReportCoverage_parse", 416);
    _static_1(Q, "vm_service_SourceReportRange_parse$closure", "SourceReportRange_parse", 417);
    _static_1(Q, "vm_service_Stack_parse$closure", "Stack_parse", 418);
    _static_1(Q, "vm_service_Success_parse$closure", "Success_parse", 419);
    _static_1(Q, "vm_service_Timeline_parse$closure", "Timeline_parse", 420);
    _static_1(Q, "vm_service_TimelineEvent_parse$closure", "TimelineEvent_parse", 421);
    _static_1(Q, "vm_service_TimelineFlags_parse$closure", "TimelineFlags_parse", 422);
    _static_1(Q, "vm_service_Timestamp_parse$closure", "Timestamp_parse", 423);
    _static_1(Q, "vm_service_TypeArgumentsRef_parse$closure", "TypeArgumentsRef_parse", 424);
    _static_1(Q, "vm_service_TypeArguments_parse$closure", "TypeArguments_parse", 425);
    _static_1(Q, "vm_service_UnresolvedSourceLocation_parse$closure", "UnresolvedSourceLocation_parse", 426);
    _static_1(Q, "vm_service_Version_parse$closure", "Version_parse", 427);
    _static_1(Q, "vm_service_VMRef_parse$closure", "VMRef_parse", 310);
    _static_1(Q, "vm_service_VM_parse$closure", "VM_parse", 285);
    _instance_1_u(Q.VmService.prototype, "get$_processMessage", "_processMessage$1", 9);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.JSObject, J.ArrayIterator, P.Stream, H.CastStreamSubscription, P.StreamTransformerBase, P.Iterable, H.CastIterator, H.Closure, P.MapMixin, P._ListBase_Object_ListMixin, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error0, H.ExceptionAndStackTrace, H._StackTrace, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, H.Rti, H._FunctionParameters, H._Type, P._TimerImpl, P._AsyncAwaitCompleter, P._IterationMarker, P._SyncStarIterator, P._BufferingStreamSubscription, P._BroadcastStreamController, P.Future, P.TimeoutException, P.Completer, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.StreamSubscription, P.StreamController, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._StreamSinkWrapper, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._DoneStreamSubscription, P._BroadcastSubscriptionWrapper, P._StreamIterator, P.Timer, P.AsyncError, P._ZoneFunction, P._RunNullaryZoneFunction, P._RunUnaryZoneFunction, P._RunBinaryZoneFunction, P._RegisterNullaryZoneFunction, P._RegisterUnaryZoneFunction, P._RegisterBinaryZoneFunction, P.ZoneSpecification, P._ZoneSpecification, P.ZoneDelegate, P.Zone, P._ZoneDelegate, P._Zone, P._HashMapKeyIterator, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.ListMixin, P._MapBaseValueIterator, P._UnmodifiableMapMixin, P._ListQueueIterator, P.SetMixin, P._SetBase_Object_SetMixin, P._SplayTreeNode, P._SplayTree, P._SplayTreeIterator, P.Codec, P._Base64Encoder, P._Base64Decoder, P.ChunkedConversionSink, P._JsonStringifier, P._JsonPrettyPrintMixin, P._Utf8Encoder, P._Utf8Decoder, P.bool, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Expando, P.Function, P.List, P.Map, P.MapEntry, P.Null, P.Match, P.RegExp, P.RegExpMatch, P.StackTrace, P._StringStackTrace, P.Stopwatch, P.String, P.RuneIterator, P.StringBuffer, P.Symbol0, P.Type, P.Uri, P._Uri, P.UriData, P._SimpleUri, W.CssStyleDeclarationBase, W.ScrollAlignment, W.CanvasImageSource, W.EventStreamProvider, W._CustomEventStreamProvider, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W._DOMWindowCrossFrame, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P._StructuredClone, P._AcceptStructuredClone, P.JsObject, P._JSRandom, P.Point, P._RectangleBase, P.ByteBuffer, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Float32List, P.Float64List, O.AnsiUp, O.AnsiUpColor, O.PacketKind, O.TextPacket, O.StyledText, O.DelegatingStreamSink, X.ProxyHolder, X.Position, R.JsEventListener, M.CanonicalizedMap, U.DefaultEquality, U.IterableEquality, U.ListEquality, U._UnorderedEquality, U._MapEntry, U.MapEquality, U.DeepCollectionEquality, Y.HeapPriorityQueue, B.Pair, K.Disposer, K.DisposableController, K.AutoDisposeControllerMixin, F.FlameChart, F.FlameChartRow, F.FlameChartSection, F.FlameChartNode, F.TimelineGrid, F.LogLevel, E.Notification, L.ConnectedApp, A.BusEvent, A.MessageBus, F.BreakpointsView, A.CoreElement, S.CallStackView, O.ConsoleArea, S.DebuggerState, A.HtmlScreen, R.SourcePosition, R.SourceEditor, R.ScriptAndPosition, N.ListDirection, N.HtmlScriptsView, N.HtmlScriptsMatcher, F.HtmlVariablesView, G.ChildProvider, T.EnumUtils, B.EvalOnDartLibrary, B.LibraryNotFound, A.HtmlFramework, A.HtmlStatusLine, A.HtmlActionsContainer, A.HtmlSetStateMixin, A.HtmlStatusItem, A.HtmlToastAnimator, A.HtmlConnectDialog, A.HtmlSnapshotMessage, A.HtmlAnalyticsOptInDialog, O.FrameworkController, O.ConnectVmEvent, N.LineSegment, G.HtmlMessageManager, G.HtmlMessage, G.MessageType, A.ListDirection0, A.HtmlPopupListView, A.HtmlAutoCompleteMatcher, Q._HtmlTable_Object_HtmlSetStateMixin, Q.HtmlColumnRenderer, U._Diagnosticable_Object_DiagnosticableMixin, M.InspectorSourceLocation, S.Category, S.FlutterWidget, S.Catalog, E.ObjectGroup, E.FlutterTreeType, E.InspectorServiceClient, E.InspectorInstanceRef, E.InspectorObjectGroupManager, K.PaintEntry, K.InspectorTreeNodeRenderBuilder, K.InspectorTreeNodeRender, K.InspectorTreeNode, K.InspectorTreeRow, K.InspectorTreeConfig, K.InspectorTreeController, K.InspectorTreeFixedRowHeightController, M.InspectorTreeWeb, E.LoggingDetailsController, E.LoggingController, E._StdoutEventHandler, E.LogData, K.ColumnData, F.HtmlStatus, A.HtmlMemoryDataView, T.InboundsTreeData, X.TreeNode0, O.NavigationState, O.NavigationPath, T.MemoryController, T.SettingsModel, T.FilteredLibraries, T.LibraryCollection, M.MemoryPlotly, M.EventTimeline, T.MemoryTracker, T.ClassHeapDetailStats, T.InstanceSummary, Q.Response, R.HtmlApp, B._PerformanceController_Object_CpuProfilerControllerProviderMixin, T.CpuProfilerController, T.CpuProfilerControllerProviderMixin, E.CpuProfileData, E.CpuProfileMetaData, Z.CpuProfilerService, V.CpuProfileTransformer, A.CpuProfilerViewType, A.HtmlCpuProfilerTabNav, A.CpuProfilerTabOrder, L.DevToolsServerConnection, E.ServiceExtensionDescription, R.ServiceConnectionManager, R.IsolateManager, R.ServiceExtensionManager, R.ServiceExtensionState, R.VmFlagManager, R.VmServiceCapabilities, U.ChangeNotifier, K.HoverCellData, K.TableData, K.ColumnAlignment, Z.FramesBarPlotly, Z.SelectTrace, Z.Selection, U.TimelineController, U.TimelineBase, U.TimelineMode, A.TimelineData, A.FullTimelineEventGroup, A.FullTimelineRowData, A.OfflineData, A.TimelineFrame, Y.TimelineProcessor, R.TimelineService, L.TraceEvent, L.TraceEventWrapper, L.TimelineEventType, U.Listenable, U.DiagnosticLevel, U.DiagnosticsTreeStyle, U.TextTreeConfiguration, U._WordWrapParseMode, U._PrefixedStringBuilder, U._NoDefaultValue, U.TextTreeRenderer, U.DiagnosticsNode, U.DiagnosticPropertiesBuilder, U.DiagnosticableMixin, U.TextStyle, S.Color, S.OffsetBase, S.Rect, S._HashEnd, S.FontWeight, G.HtmlSelectableTreeNodeItem, G.HtmlActionButton, U.HtmlDragScroll, A.TrustedHtmlTreeSanitizer, Y.HtmlIconRenderer, S.DevToolsIcon, S.CustomIconMaker, S.IconKind, S.ColorIconMaker, N.ServiceExtensionCheckbox, N.ServiceExtensionButton, N.ServiceExtensionSelector, K.ThemedColor, X.TreeNavigator, X.Tree, X.TreeNode, R.HtmlTreeNavigator, T._CanvasChunk, T._ChunkPosition, T._ViewportCanvas_Object_HtmlSetStateMixin, T.ProfileGranularitySelector, B.Property, B.DelayedTimer, B.RateLimiter, B.TimeUnit, B.TimeRange, B.Reporter, B.SortDirection, T.SemanticVersion, U.VmServiceWrapper, U.TrackedFuture, U._CpuProfileTimelineTree, M.AdbMemoryInfo, E.HeapSample, L.HeapSpace, E.BaseClient, G.BaseRequest, T.BaseResponse, U.Client0, E.ClientException, R.MediaType, B.DateSymbols, T.DateFormat, T._DateFormatField, T.NumberFormat, T._NumberFormatParser, T._StringIterator, B.NumberSymbols, X.UninitializedLocaleData, X.LocaleDataException, Y.Level, L.LogRecord0, F.Logger, M.Context0, O.Style, X.ParsedPath, X.PathException, L.Browser, G._HtmlNavigator, G.NavigatorProvider, T.Version0, X.VersionRange, Y.SourceFile, D.SourceLocationMixin, Y.FileSpan, Y.SourceSpanMixin, U.Highlighter, U._Highlight, U._Line, V.SourceLocation0, V.SourceSpan, G.SourceSpanException, R.StreamChannelMixin, K._GuaranteeSink, B.StreamChannelController, X.StringScanner, K.Uuid, Q.VmService, Q.RPCError, Q.SentinelException, Q.ExtensionData, Q._NullLog, Q.BoundField, Q.ContextElement, Q.CpuSample, Q.Flag, Q.InboundReference, Q.LibraryDependency, Q.MapAssociation, Q.NativeFunction, Q.ProfileFunction, Q.RetainingObject, Q.SourceReportCoverage, Q.SourceReportRange, Q.TimelineEvent, E.WebSocketChannelException]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Event0, W.Blob, W.BluetoothRemoteGattDescriptor, W.CanvasRenderingContext2D, W.Client, W.Credential, W.CredentialUserData, W.CssRule, W.CssStyleValue, W.CssTransformComponent, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DataTransferItem, W.DataTransferItemList, W.ReportBody, W.DomError, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W.Entry, W._FileList_Interceptor_ListMixin, W.FileSystem, W.FontFace, W.Gamepad, W.GamepadButton, W.History, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.Location, W.MediaDeviceInfo, W.MediaError, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.NavigatorUserMediaError, W._NodeList_Interceptor_ListMixin, W.OverconstrainedError, W.PerformanceEntry, W.PerformanceServerTiming, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.PositionError, W.RelatedApplication, W.ResizeObserver, W.RtcLegacyStatsReport, W._RtcStatsReport_Interceptor_MapMixin, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W.SpeechSynthesisVoice, W._Storage_Interceptor_MapMixin, W.StyleSheet, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefaultList, W.UnderlyingSourceBase, W.Url, W.VideoTrack, W.VttRegion, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.Cursor, P.Index, P.KeyRange, P.ObjectStore, P.Observation, P.Angle, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P.AudioParam, P._AudioParamMap_Interceptor_MapMixin, P.AudioTrack, P.ActiveInfo, P.SqlDatabase, P.SqlError, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, F.GtagEvent, F.GtagException, O.Plotly, O.TraceData, O.Data, O.Marker, O.Line, O.Transform0, O.Title, O.Layout, O.Shape, O.Legend, O.HoverLabel, O.Font, O.AxisLayout, O.RangeSelector, O.Button, O.Margin, O.RangeSlider, O.Configuration, O.DataEvent, O.LegendDataEvent, O.Point1, O.HoverFX, A._SplitOptions, A.Splitter]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Stream, [H.CastStream, P._StreamImpl, P.StreamView, P._AsBroadcastStream, P._ForwardingStream, W._EventStream]);
    _inheritMany(P.StreamTransformerBase, [H.CastStreamTransformer, P.Converter]);
    _inheritMany(P.Converter, [H.CastConverter, P._UnicodeSubsetEncoder, P._UnicodeSubsetDecoder, P.Base64Encoder, P.Base64Decoder, P.JsonEncoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder, R.HexEncoder]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase, H._StringAllMatchesIterable, P.Runes]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin, H.CastSet, H.CastQueue]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(H.Closure, [H._CastListBase_sort_closure, H.CastSet_removeWhere_closure, H.CastMap_forEach_closure, H.CastMap_entries_closure, H.ConstantMap_map_closure, H.ConstantStringMap_values_closure, H.Instantiation, H.Primitives_initTicker_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._TimerImpl$periodic_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._SyncBroadcastStreamController__sendData_closure, P._SyncBroadcastStreamController__sendError_closure, P._SyncBroadcastStreamController__sendDone_closure, P.Future_Future$delayed_closure, P.Future_wait_handleError, P.Future_wait_closure, P.Future_forEach_closure, P.Future_doWhile_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P._Future_timeout_closure, P._Future_timeout_closure0, P._Future_timeout_closure1, P.Stream_Stream$fromIterable_closure, P.Stream_contains_closure, P.Stream_contains__closure, P.Stream_contains__closure0, P.Stream_contains_closure0, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_toList_closure, P.Stream_toList_closure0, P.Stream_first_closure, P.Stream_first_closure0, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._BufferingStreamSubscription_asFuture_closure, P._BufferingStreamSubscription_asFuture_closure0, P._BufferingStreamSubscription_asFuture__closure, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._DoneStreamSubscription_asFuture_closure, P._cancelAndError_closure, P._cancelAndErrorClosure_closure, P._cancelAndValue_closure, P._CustomZone_bindCallback_closure, P._CustomZone_bindUnaryCallback_closure, P._CustomZone_bindCallbackGuarded_closure, P._CustomZone_bindUnaryCallbackGuarded_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P._HashMap_values_closure, P._HashMap_addAll_closure, P._CustomHashMap_closure, P._LinkedCustomHashMap_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.MapMixin_entries_closure, P.SplayTreeMap_closure, P.SplayTreeMap_addAll_closure, P._JsonMap_values_closure, P._JsonMap_addAll_closure, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, P._symbolMapToStringMap_closure, P.NoSuchMethodError_toString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri_splitQueryString_closure, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._Uri__makePath_closure, P._Uri__makeQuery_writeParameter, P._Uri__makeQuery_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.Element_Element$html_closure, W.Entry_remove_closure, W.Entry_remove_closure0, W.HttpRequest_request_closure, W.MidiInputMap_keys_closure, W.MidiInputMap_values_closure, W.MidiOutputMap_keys_closure, W.MidiOutputMap_values_closure, W.Notification_requestPermission_closure, W.RtcStatsReport_keys_closure, W.RtcStatsReport_values_closure, W.Storage_addAll_closure, W.Storage_keys_closure, W.Storage_values_closure, W.Window_animationFrame_closure, W._AttributeMap_addAll_closure, W._EventStreamSubscription_closure, W._EventStreamSubscription_onData_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.convertDartToNative_Dictionary_closure, P.CssClassSetImpl_add_closure, P.CssClassSetImpl_addAll_closure, P.CssClassSetImpl_removeAll_closure, P.CssClassSetImpl_removeWhere_closure, P.CssClassSetImpl_clear_closure, P.FilteredElementList__iterable_closure, P.FilteredElementList__iterable_closure0, P.FilteredElementList_removeRange_closure, P.JsObject__convertDataTree__convert, P._convertToJS_closure, P._convertToJS_closure0, P._wrapToDart_closure, P._wrapToDart_closure0, P._wrapToDart_closure1, P._convertDataTree__convert, P.promiseToFuture_closure, P.promiseToFuture_closure0, P.AudioParamMap_keys_closure, P.AudioParamMap_values_closure, X.Doc_getAllMarks_closure, X.ProxyHolder_onEvent_closure, X.ProxyHolder_onEvent_closure0, R.JsEventListener_stream_closure, R.JsEventListener_stream__closure, R.JsEventListener_stream__closure0, R.JsEventListener_stream__closure1, R.JsEventListener_stream__closure2, R.JsEventListener_stream_closure0, M.CanonicalizedMap_addAll_closure, M.CanonicalizedMap_entries_closure, M.CanonicalizedMap_forEach_closure, M.CanonicalizedMap_keys_closure, M.CanonicalizedMap_map_closure, M.CanonicalizedMap_values_closure, M.CanonicalizedMap_toString_closure, M._isToStringVisiting_closure, Y.groupBy_closure, B.defaultCompare_closure, U.main_closure, U.main__closure, U.main__closure0, F.FlameChart_nodeInRow_binarySearchForNode, F.FlameChart_sectionLabel_closure, F.FlameChartCanvas_closure, F.FlameChartCanvas__initAsciiMeasurements_closure, F.FlameChartCanvas_paintSections_closure, F.FlameChartNode_paint_closure, T.allowedError_closure, A.MessageBus_onEvent_closure, F._breakpointComparator_getRef, F._breakpointComparator_getPos, F.BreakpointsView_closure, F.BreakpointsView__closure, F.BreakOnExceptionControl_closure, F.BreakOnExceptionControl_closure0, S.CallStackView_closure, O.ConsoleArea_appendText_closure, O.ConsoleArea_styledContents_closure, O.ConsoleArea_styledContents_closure0, S.DebuggerState_supportsStepping_closure, S.DebuggerState_supportsStepping_closure_update, S.DebuggerState_clearBreakpoints_closure, S.DebuggerState_addBreakpointByPathFragment_closure, S.DebuggerState_addBreakpointByPathFragment_closure0, R.HtmlDebuggerScreen_createContent__updateResumeButton, R.HtmlDebuggerScreen_createContent__updatePauseButton, R.HtmlDebuggerScreen_createContent_closure, R.HtmlDebuggerScreen_createContent_closure0, R.HtmlDebuggerScreen_createContent_closure1, R.HtmlDebuggerScreen_createContent_closure2, R.HtmlDebuggerScreen_createContent_closure3, R.HtmlDebuggerScreen_createContent_closure4, R.HtmlDebuggerScreen_createContent_closure5, R.HtmlDebuggerScreen_createContent__closure, R.HtmlDebuggerScreen_createContent_closure6, R.HtmlDebuggerScreen_createContent_updateStepCapabilities, R.HtmlDebuggerScreen_createContent_closure7, R.HtmlDebuggerScreen_createContent_closure8, R.HtmlDebuggerScreen_createContent_closure9, R.HtmlDebuggerScreen_createContent_updateFrames, R.HtmlDebuggerScreen_createContent_updateStatusLine, R.HtmlDebuggerScreen_createContent_closure10, R.HtmlDebuggerScreen_createContent_closure11, R.HtmlDebuggerScreen_createContent_closure12, R.HtmlDebuggerScreen_createContent_closure13, R.HtmlDebuggerScreen_createContent_closure14, R.HtmlDebuggerScreen_onContentAttached_closure, R.HtmlDebuggerScreen_onContentAttached_closure0, R.HtmlDebuggerScreen__hookupListeners_closure, R.HtmlDebuggerScreen__buildMenuNav_closure, R.HtmlDebuggerScreen__buildMenuNav_closure0, R.HtmlDebuggerScreen__buildMenuNav_closure1, R.HtmlDebuggerScreen__buildMenuNav_closure2, R.HtmlDebuggerScreen__buildMenuNav_closure3, R.HtmlDebuggerScreen__buildMenuNav_closure4, R.HtmlDebuggerScreen__buildMenuNav_closure5, R.HtmlDebuggerScreen__buildMenuNav_closure6, R.HtmlDebuggerScreen__buildMenuNav_closure7, R.HtmlDebuggerScreen__buildMenuNav_closure8, R.HtmlDebuggerScreen__buildMenuNav_closure9, R.HtmlDebuggerScreen__handleConnectionStart_closure, R.HtmlDebuggerScreen__handleConnectionStart_closure0, R.HtmlDebuggerScreen__handleIsolateChanged_closure, R.HtmlDebuggerScreen__handleIsolateChanged_closure0, R.SourceEditor_closure, R.SourceEditor__closure, R.SourceEditor__closure0, R.SourceEditor__refreshMarkers_closure, R.SourceEditor__refreshMarkers_closure0, N.HtmlScriptsView_closure, N.HtmlScriptsView_showScripts_closure, N.HtmlScriptsView_showScripts_closure0, N.HtmlScriptsView_showScripts_closure1, N.HtmlScriptsMatcher_start_closure, N.HtmlScriptsMatcher_reset_closure, N.HtmlScriptsMatcher__startMatching_closure, N.HtmlScriptsMatcher_displayMatchingScripts_closure, N.HtmlScriptsMatcher_displayMatchingScripts_closure0, F.HtmlVariablesView_closure, F.HtmlVariablesView__closure, F.HtmlVariablesView___closure, F.VariablesChildProvider_getChildren_closure, F.VariablesChildProvider_getChildren_closure0, B.EvalOnDartLibrary_closure, B.EvalOnDartLibrary_eval_closure, B.EvalOnDartLibrary_addRequest_wrappedRequest, B.EvalOnDartLibrary_getObjHelper_closure, A.HtmlFramework__initDragDrop_closure, A.HtmlFramework__initDragDrop_closure0, A.HtmlFramework__onDrop_closure, A.HtmlFramework__importTimeline_closure, A.HtmlFramework__importTimeline_closure0, A.HtmlFramework_exitOfflineMode_closure, A.HtmlFramework__hookupShortcuts_closure, A.HtmlFramework_loadScreenFromLocation_closure, A.HtmlFramework_loadScreenFromLocation__closure, A.HtmlFramework_loadScreenFromLocation__closure0, A.HtmlFramework_getScreen_closure, A.HtmlFramework_getScreen_closure0, A.HtmlFramework_load_closure, A.HtmlFramework_load__closure, A.HtmlActionsContainer_removeAction_closure, A.HtmlSetStateMixin_setState_closure, A.HtmlToastAnimator_show_closure, A.HtmlConnectDialog_closure, A.HtmlConnectDialog_closure0, A.HtmlConnectDialog__tryConnect_handleConnectError, A.HtmlConnectDialog__tryConnect_closure, A.HtmlConnectDialog__tryConnect_closure0, A.HtmlConnectDialog__connect_closure, A.HtmlAnalyticsOptInDialog_closure, A.HtmlAnalyticsOptInDialog_closure0, O.FrameworkController__init_closure, G.HtmlMessageManager_removeAll_closure, G.HtmlMessageManager_addMessage_closure, G.HtmlMessageManager_addMessage_closure0, G.HtmlMessage__buildFlash_closure, A.HtmlPopupListView_closure, A.HtmlPopupListView_setList_closure, A.HtmlPopupAutoCompleteView__initialize_closure, A.HtmlPopupAutoCompleteView__initialize_closure0, A.HtmlPopupAutoCompleteView__initialize__closure, A.HtmlPopupAutoCompleteView__initialize_closure1, A.HtmlPopupAutoCompleteView__hookupListeners_closure, A.HtmlAutoCompleteMatcher_start_closure, A.HtmlAutoCompleteMatcher_reset_closure, A.HtmlAutoCompleteMatcher__startMatching_closure, A.HtmlAutoCompleteMatcher_displayMatchingItems_closure, A.HtmlAutoCompleteMatcher_displayMatchingItems_closure0, Q.HtmlTable$__closure, Q.HtmlTable$__closure0, Q.HtmlTable_onSetRows_closure, Q.HtmlTable_onSetRows__closure, Q.HtmlTable__rebuildVirtualTable_closure, Q.HtmlTable__rebuildVirtualTable__closure, Q.HtmlTable__buildTableRows_selectRow, Q.HtmlTable__buildTableRows_closure, Q.HtmlTreeColumnRenderer_renderToElement_closure, D.HtmlInfoScreen_closure0, D.HtmlInfoScreen__closure, D.HtmlInfoScreen_closure, T.InfoController__listenForFlutterVersionChanges_closure, D.HtmlInspectorScreen_createContent_closure, D.HtmlInspectorScreen_createContent_closure0, D.HtmlInspectorScreen__handleConnectionStart_closure, D.HtmlInspectorScreen__handleConnectionStart_createTree, D.HtmlInspectorScreen__handleConnectionStart_closure0, D.HtmlInspectorScreen__onExpandCollapseSupported_closure, Z.InspectorController_closure, Z.InspectorController_closure0, Z.InspectorController__onVersionSupported_closure, E.InspectorService_closure, E.InspectorService_create_closure, E.InspectorService_create_closure0, E.InspectorService_create_lookupFunctionNames, E.InspectorService__trackClientSelfTriggeredSelection_closure, E.ObjectGroup__callServiceExtension_closure, E.ObjectGroup_getDartObjectProperties_closure, K.InspectorTreeController_root_closure, K.InspectorTreeController_selection_closure, K.InspectorTreeController_hover_closure, K.InspectorTreeController_navigateLeft_closure, K.InspectorTreeController_navigateRight_closure, K.InspectorTreeController_nodeChanged_closure, K.InspectorTreeController_removeNodeFromParent_closure, K.InspectorTreeController_appendChild_closure, K.InspectorTreeController_expandPath_closure, K.InspectorTreeController_collapseToSelected_closure, K.InspectorTreeController_onExpandRow_closure, K.InspectorTreeController_onCollapseRow_closure, E.IconPaintEntry_attach_closure, E.IconPaintEntry_attach__closure, E.InspectorTreeCanvas_setState_closure, E.InspectorTreeCanvas_paintRow_isVisible, E.InspectorTreeCanvas_paintRow__endPath, E.InspectorTreeCanvas_paintRow__maybeStart, K.InspectorTreeHtml_setState_closure, K.InspectorTreeHtml_animateToTargets_closure, K.InspectorTreeNodeLegacy_renderObject_radix, M.InspectorTreeWeb_addKeyboardListeners_closure, Z.HtmlLoggingScreen_closure, Z.HtmlLoggingScreen_closure0, Z.HtmlLoggingScreen_createContent_closure, Z.HtmlLoggingScreen_createContent_closure0, Z.HtmlLogDetails_createLoggingTree_closure, E._retrieveFullStringValue_closure, E.LoggingDetailsController_setData_closure, E.LoggingDetailsController_setData_closure0, E.LoggingController_loggingTableModel_closure, E.LoggingController_loggingTableModel_closure0, E.LoggingController__handleConnectionStart_closure, E.LoggingController__handleConnectionStart_closure0, E.LoggingController__handleDeveloperLogEvent_closure, E.LoggingController__handleBusEvents_closure, E.LoggingController__handleBusEvents_closure0, E.LoggingController__handleBusEvents_closure1, E.LoggingController__handleBusEvents_closure2, E._StdoutEventHandler_handle_closure, F.HtmlPerfToolFramework_initGlobalUI_closure, F.HtmlPerfToolFramework_initGlobalUI_closure0, F.HtmlPerfToolFramework_initGlobalUI_closure1, F.HtmlPerfToolFramework_initGlobalUI_closure2, F.HtmlPerfToolFramework_initGlobalUI_closure3, F.HtmlPerfToolFramework_initDevToolsServerConnection_closure, F.HtmlPerfToolFramework_initDevToolsServerConnection_closure0, F.HtmlPerfToolFramework_initDevToolsServerConnection_closure1, F.HtmlPerfToolFramework_initDevToolsServerConnection_closure2, F.HtmlPerfToolFramework_disableAppWithError_closure, F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure, F.HtmlPerfToolFramework__initHotReloadRestartServiceListeners_closure0, F.HtmlPerfToolFramework__buildReloadButton_closure, F.HtmlPerfToolFramework__buildRestartButton_closure, Y.HtmlMemoryChart_closure, A.HtmlMemoryDataView_closure, A.HtmlMemoryDataView__closure, A.HtmlMemoryDataView___closure, T.HtmlInboundsTree__init_closure, T.HtmlInboundsTree__init__closure, T.HtmlInboundsTree__init_closure0, O.HtmlMemoryScreen_createContent_closure, O.HtmlMemoryScreen_createContent_closure0, O.HtmlMemoryScreen_createContent_closure1, O.HtmlMemoryScreen_createContent_closure2, O.HtmlMemoryScreen_createContent_closure3, O.HtmlMemoryScreen_createContent_closure4, O.HtmlMemoryScreen_createContent_closure5, O.HtmlMemoryScreen_createSettingsDialog_closure, O.HtmlMemoryScreen_findClass_closure, O.HtmlMemoryScreen_findClass_closure0, O.HtmlMemoryScreen_findClassDetails_closure, O.HtmlMemoryScreen_findClassDetails_closure0, O.HtmlMemoryScreen__selectInstanceByObjectRef_closure, O.HtmlMemoryScreen__selectInstanceByObjectRef_closure0, O.HtmlMemoryScreen__createHeapStatsTableView_closure, O.HtmlMemoryScreen_computeInboundReference_closure, O.HtmlMemoryScreen__createInstanceView_closure, T.MemoryController__handleConnectionStart_closure, T.MemoryController_startTimeline_closure, T.MemoryController_getAllocationProfile_closure, T.MemoryController_getAllocationProfile_closure0, T.MemoryController_getInstances_closure, T.MemoryController_computeLibraries_closure, T.MemoryController_computeLibraries__closure, T.MemoryController_computeLibraries__closure0, T.MemoryController_computeLibraries___closure, T.LibraryCollection_computeDisplayClasses_closure, M.MemoryPlotly_getMemoryLayout_getYAxis, M.MemoryPlotly_getMemoryLayout_getLegend, T.MemoryTracker__pollMemory_closure, T.MemoryTracker__recalculate_closure, T.MemoryTracker__recalculate_closure0, T.MemoryTracker__recalculate_closure1, T.MemoryTracker__recalculate_closure2, T.MemoryTracker_getHeaps_closure, O.InboundReferences_closure, O._searchClass_closure, O._searchClass_closure0, R.HtmlApp__bind_closure, R.HtmlApp__bind__closure, R.HtmlApp__bind__closure0, R.HtmlApp_debuggerGetBreakpoints_closure, R.HtmlApp_debuggerGetScripts_closure, R.HtmlApp_debuggerGetCallStackFrames_closure, R.HtmlApp_debuggerGetVariables_closure, M.HtmlPerformanceScreen__initContent_closure, M.HtmlPerformanceScreen__initContent_closure0, M.HtmlPerformanceScreen__initContent_closure1, V.mergeProfileRoots_closure, Z.HtmlCpuFlameChart_rebuildView_closure, Z.CpuFlameChartCanvas_initUiElements_leftForStackFrame, Z.CpuFlameChartCanvas_initUiElements_createChartNodes, Z.CpuFlameChartCanvas_initUiElements_createChartNodes_closure, R.HtmlCpuCallTree__init_closure, R.HtmlCpuCallTree__init_closure0, R.HtmlCpuBottomUp__init_closure, R.HtmlCpuBottomUp__init_closure0, A.HtmlCpuProfiler_closure, A.HtmlCpuProfiler__removeMessage_closure, A.HtmlCpuProfilerTabNav__init_closure, A.HtmlCpuProfilerTabNav__init_closure0, A.HtmlCpuProfilerTabNav__init_closure1, A.HtmlCpuProfilerTabNav__init_closure2, L.DevToolsServerConnection$__closure, L.DevToolsServerConnection_initFrameworkController_closure, L.DevToolsServerConnection_initFrameworkController_closure0, L.DevToolsServerConnection_initFrameworkController_closure1, R._connectWithSse_closure, R._connectWithSse__closure, R._connectWithWebSocket_closure, R._connectWithWebSocket_closure0, R.connect_onError, R.connect_connectHelper, R.connect_closure, R.connect_closure0, E.ServiceExtensionDescription_closure, E.closure, E.closure0, R.ServiceConnectionManager_registeredServiceListenable_closure, R.ServiceConnectionManager_vmServiceOpened_closure, R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent, R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure, R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure0, R.ServiceConnectionManager_vmServiceOpened_handleServiceEvent_closure1, R.ServiceConnectionManager_vmServiceOpened_closure0, R.ServiceConnectionManager_getDisplayRefreshRate_closure, R.ServiceConnectionManager_getDisplayRefreshRate_closure0, R.ServiceConnectionManager_libraryUriAvailableNow_closure, R.ServiceConnectionManager_libraryUriAvailableNow_closure0, R.IsolateManager_selectIsolate_closure, R.IsolateManager_selectIsolate_closure0, R.IsolateManager__initSelectedIsolate_closure, R.IsolateManager__initSelectedIsolate_closure0, R.ServiceExtensionManager_resetAvailableExtensions_closure, R.ServiceExtensionManager_hasServiceExtensionListener_closure, R.ServiceExtensionManager_hasServiceExtensionListener__closure, R.ServiceExtensionManager_hasServiceExtensionListener___closure, R.ServiceExtensionManager_hasServiceExtensionListener__closure0, R.ServiceExtensionManager__getServiceExtensionController_closure, R.ServiceExtensionManager__getServiceExtensionStateController_closure, R._getStreamController_closure, K.TableData_setRows_closure, K.TableData_setRows_closure0, K.TableData_scrollTo_closure, K.TableData_scheduleRebuild_closure, K.TableData__sortData_closure, K.TreeTableData__sortData__addToSortedData, K.TreeTableData__sortData__addToSortedData_closure, K.TreeTableData__sortData_closure, K.TreeTableData__sortData_closure0, K.TreeTableData_collapseNode_cascadingRemove, K.TreeTableData_expandNode_expand, Z.HtmlEventDetails_closure, Z.HtmlEventDetails__initContent_closure, Z.HtmlEventDetails__initContent_closure0, Z.HtmlEventDetails__initListeners_closure, Z.HtmlEventDetails__initListeners_closure0, Z.HtmlEventDetails__initListeners_closure1, Z._CpuProfiler_maybeShowMessageOnUpdate_closure, Z.HtmlEventSummary_update_closure, T.FramesBarChart_closure, T.FramesBarChart_closure0, T.PlotlyDivGraph_createPlot_closure, U.TimelineController__threadIdForEvents_closure, U.TimelineController__threadIdForEvents_closure0, U.TimelineController_setOfflineData_closure, U.TimelineController_setOfflineData_closure0, U.TimelineController_setOfflineData_closure1, M.FrameBasedTimelineFlameChartCanvas_initUiElements_getTopForRow, M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes, M.FrameBasedTimelineFlameChartCanvas_initUiElements_createChartNodes_closure, M.FullTimelineFlameChartCanvas_initUiElements_getTopForRow, M.FullTimelineFlameChartCanvas_initUiElements_createChartNode, M.FullTimelineFlameChartCanvas_initUiElements_createChartNode_closure, M.FullTimelineFlameChartCanvas_initUiElements_closure, M.FullTimelineFlameChartCanvas__calculateAsyncGuidelines_generateSubsequentVerticalGuideline, M.FullTimelineFlameChartCanvas_relativeYPosition_closure, M.FullTimelineFlameChartCanvas_relativeYPosition_closure0, A.FullTimelineData_initializeEventGroups_closure, A.FullTimelineData_initializeEventGroups_closure0, A.OfflineTimelineEvent_closure, A.OfflineTimelineEvent_closure0, A.TimelineFrame_closure, A.TimelineFrame_findTimelineEvent_closure, A.TimelineEvent__isWellFormedDeep_closure, A.TimelineEvent_maybeRemoveDuplicate__maybeRemoveDuplicate, A.TimelineEvent_addChild__putChildInTree, A.SyncTimelineEvent_isUiEventFlow_closure, A.SyncTimelineEvent_isGpuEventFlow_closure, Y.FrameBasedTimelineProcessor_closure, Y.FrameBasedTimelineProcessor_processTraceEvent_closure, Y.FrameBasedTimelineProcessor__handleFrameStartEvent_closure, Y.FrameBasedTimelineProcessor__handleFrameEndEvent_closure, Y.FrameBasedTimelineProcessor__handleDurationCompleteEvent_closure, Y.FrameBasedTimelineProcessor_maybeAddPendingEvents_closure, Y.FrameBasedTimelineProcessor_eventOccursWithinFrameBounds_satisfiesUiGpuOrder, Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure, Y.FrameBasedTimelineProcessor__getAndSortWellFormedFrames_closure0, Y.FullTimelineProcessor_processTimeline_closure, Y.FullTimelineProcessor_processTimeline_closure0, Y.FullTimelineProcessor_processTimeline_closure1, Y.FullTimelineProcessor__handleDurationCompleteEvent_closure, M.HtmlTimelineScreen_createContent_closure, M.HtmlTimelineScreen_createContent_closure0, M.HtmlTimelineScreen_createContent_closure1, M.HtmlTimelineScreen_onContentAttached_closure, M.HtmlTimelineScreen_onContentAttached_closure0, M.HtmlTimelineScreen_onContentAttached__closure, M.HtmlTimelineScreen_onContentAttached_closure1, M.HtmlTimelineScreen_onContentAttached_closure2, M.HtmlTimelineScreen_onContentAttached_closure3, M.HtmlTimelineScreen_onContentAttached_closure4, M.HtmlTimelineScreen__selectFrame_closure, R.TimelineService__initTimelineListener_closure, R.TimelineService_startTimeline_closure, R.TimelineService_startTimeline_closure0, X.TreeNode_expandCascading_closure, X.TreeNode_collapseCascading_closure, E.waitForDimensionsComputed_closure, U._PrefixedStringBuilder__wordWrapLine_noWrap, U.TextTreeRenderer_render_visitor, U.TextTreeRenderer_render_closure, G.HtmlSelectableList_setItems_closure, G.HtmlSelectableList__hookup_closure, G.HtmlSelectableList__hookup_closure0, G.HtmlSelectableTree__addItemToTree_closure, G.HtmlSelectableTree__addItemToTree_closure0, G.HtmlSelectableTree__addItemToTree_closure1, G.HtmlSelectableTree__addItemToTree_closure2, G.HtmlSelectableTree__addItemToTree__closure, G.HtmlSelectableTree__addItemToTree__closure0, G.HtmlSelectableTree__buildTree_closure, G.HtmlSelectableTree__buildTree_closure0, U.HtmlDragScroll__handleMouseDrags_closure, U.HtmlDragScroll__handleMouseDrags__closure, U.HtmlDragScroll__handleMouseDrags__closure0, U.HtmlDragScroll__handleTouchDrags_closure, U.HtmlDragScroll__handleTouchDrags__closure, U.HtmlDragScroll__handleTouchDrags__closure0, A.CoreElement_add_closure, A.CoreElement_replace_closure, A.CoreElement_onClick_closure, A.CoreElement_onTouchStart_closure, A.CoreElement_onTouchMove_closure, A.CoreElement_onTouchEnd_closure, A.CoreElement_onFocus_closure, A.CoreElement_onBlur_closure, A.CoreElement_onMouseOver_closure, A.CoreElement_onMouseLeave_closure, A.CoreElement_click_closure, A.CoreElement_dblclick_closure, A.CoreElement_focus_closure, A.CoreElement_blur_closure, A.TextField_changed_closure, Y._UrlIconRenderer_loadImage_closure, Y._CustomIconRenderer__buildImageAsync_closure, Y._MaterialIconRenderer_loadImage_closure, Y._MaterialIconRenderer_loadImage_closure0, Y._MaterialIconRenderer_createCanvasSource__drawIcon, Y._MaterialIconRenderer_createCanvasSource_closure, S.CustomIconMaker_getCustomIcon_closure, S.ColorIconMaker_getCustomIcon_closure, K.FlutterMaterialIcons_getIconForCodePoint_closure, N.PSelect_onChange_closure, N.PSelect_change_closure, N.PTabNav_closure, N.ServiceExtensionCheckbox_closure, N.ServiceExtensionCheckbox_closure0, N.ServiceExtensionCheckbox__updateState_closure, N.ServiceExtensionButton_closure, N.ServiceExtensionButton_closure0, N.ServiceExtensionButton__updateState_closure, N.ServiceExtensionSelector_closure, N.ServiceExtensionSelector_updateState_closure, T.ViewportCanvas_closure, T.ViewportCanvas_closure0, T.ViewportCanvas_closure1, T.ViewportCanvas_closure2, T.ViewportCanvas_closure3, T.ViewportCanvas_closure4, T.ViewportCanvas_closure5, T.ViewportCanvas_closure6, T.ViewportCanvas__scheduleRebuild_closure, T.ViewportCanvas_scrollToRect_closure, B.executeWithDelay_closure, B.RateLimiter_scheduleRequest_closure, B.RateLimiter_scheduleRequest_closure0, T.FlutterVersion$__closure, U.VmServiceWrapper_getCpuProfileTimeline_processStackFrame, U.VmServiceWrapper_getCpuProfileTimeline_closure, G.get_closure, G.BaseRequest_closure, G.BaseRequest_closure0, O.BrowserClient_send_closure, O.BrowserClient_send__closure, O.BrowserClient_send__closure0, O.BrowserClient_send_closure0, Z.ByteStream_toBytes_closure, B.mapToQuery_closure, B.mapToQuery_closure0, Z.CaseInsensitiveMap$from_closure, Z.CaseInsensitiveMap$from_closure0, R.MediaType_MediaType$parse_closure, R.MediaType_toString_closure, R.MediaType_toString__closure, N.expectQuotedString_closure, T.DateFormat_closure, T.DateFormat__fieldConstructors_closure, T.DateFormat__fieldConstructors_closure0, T.DateFormat__fieldConstructors_closure1, T.NumberFormat$decimalPattern_closure, F.Logger_Logger_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, X.ParsedPath__splitExtension_closure, X.ParsedPath__splitExtension_closure0, L.Browser_getCurrentBrowser_closure, L.Browser_getCurrentBrowser_closure0, T.Version__splitParts_closure, U.Highlighter_closure, U.Highlighter$__closure, U.Highlighter$___closure, U.Highlighter$__closure0, U.Highlighter__collateLines_closure, U.Highlighter__collateLines_closure0, U.Highlighter__collateLines_closure1, U.Highlighter__collateLines__closure, U.Highlighter_highlight_closure, U.Highlighter_highlight_closure0, U.Highlighter__writeFileStart_closure, U.Highlighter__writeMultilineHighlights_closure, U.Highlighter__writeMultilineHighlights_closure0, U.Highlighter__writeMultilineHighlights_closure1, U.Highlighter__writeMultilineHighlights_closure2, U.Highlighter__writeMultilineHighlights__closure, U.Highlighter__writeMultilineHighlights__closure0, U.Highlighter__writeHighlightedText_closure, U.Highlighter__writeIndicator_closure, U.Highlighter__writeIndicator_closure0, U.Highlighter__writeIndicator_closure1, U.Highlighter__writeSidebar_closure, U._Highlight_closure, A.flexSplit_closure, A.flexSplit_closure0, A.fixedSplit_closure, A.fixedSplit_closure0, A._splitBidirectional_createSplitter, A._splitBidirectional_closure, M.SseClient_closure, M.SseClient_closure0, M.SseClient__closure, K.GuaranteeChannel_closure, K.GuaranteeChannel__closure, K._GuaranteeSink__addError_closure, Q.createServiceObject_closure, Q._createSpecificObject_closure, Q.VmService_closure, Q.VmService_dispose_closure, Q.AllocationProfile_toJson_closure, Q.Class_toJson_closure, Q.Class_toJson_closure0, Q.Class_toJson_closure1, Q.Class_toJson_closure2, Q.ClassList_toJson_closure, Q.Context_toJson_closure, Q.CpuSamples_toJson_closure, Q.CpuSamples_toJson_closure0, Q.CpuSample_toJson_closure, Q.Event_toJson_closure, Q.Event_toJson_closure0, Q.FlagList_toJson_closure, Q.Frame_toJson_closure, Q.Instance_toJson_closure, Q.Instance_toJson_closure0, Q.Instance_toJson_closure1, Q.Isolate_toJson_closure, Q.Isolate_toJson_closure0, Q.Isolate_toJson_closure1, Q.IsolateGroup_toJson_closure, Q.InboundReferences_toJson_closure, Q.InstanceSet_toJson_closure, Q.Library_toJson_closure, Q.Library_toJson_closure0, Q.Library_toJson_closure1, Q.Library_toJson_closure2, Q.Library_toJson_closure3, Q.RetainingPath_toJson_closure, Q.Script$_fromJson_closure, Q.Script_toJson_closure, Q.ScriptList_toJson_closure, Q.SourceReport_toJson_closure, Q.SourceReport_toJson_closure0, Q.SourceReportCoverage_toJson_closure, Q.SourceReportCoverage_toJson_closure0, Q.SourceReportRange_toJson_closure, Q.Stack_toJson_closure, Q.Stack_toJson_closure0, Q.Stack_toJson_closure1, Q.Stack_toJson_closure2, Q.Timeline_toJson_closure, Q.TimelineFlags_toJson_closure, Q.TimelineFlags_toJson_closure0, Q.TypeArguments_toJson_closure, Q.VM_toJson_closure, Q.VM_toJson_closure0, R.HtmlWebSocketChannel_closure, R.HtmlWebSocketChannel_closure0, R.HtmlWebSocketChannel_closure1, R.HtmlWebSocketChannel_closure2, R.HtmlWebSocketChannel__listen_closure, R.HtmlWebSocketChannel__listen_closure0]);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.CastMap, H.JsLinkedHashMap, P._HashMap, P._JsonMap, W._AttributeMap]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, W._ChildrenElementList, W._FrozenElementList, W._ChildNodeListLazy, P.FilteredElementList]);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P._MapBaseValueIterable, P._SplayTreeKeyIterable, P._SplayTreeValueIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inherit(H.Instantiation1, H.Instantiation);
    _inheritMany(P.Error0, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inheritMany(P.IterableBase, [H._AllMatchesIterable, P._SyncStarIterable, T._StringIterable]);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inheritMany(P._BroadcastStreamController, [P._SyncBroadcastStreamController, P._AsyncBroadcastStreamController]);
    _inherit(P._AsBroadcastStreamController, P._SyncBroadcastStreamController);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inheritMany(P._ForwardingStream, [P._WhereStream, P._MapStream, P._HandleErrorStream]);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(P._HashMap, [P._IdentityHashMap, P._CustomHashMap]);
    _inheritMany(H.JsLinkedHashMap, [P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inheritMany(P._SetBase, [P._LinkedHashSet, P._UnmodifiableSet]);
    _inherit(P.SetBase, P._SetBase_Object_SetMixin);
    _inherit(P._SplayTreeMapNode, P._SplayTreeNode);
    _inherit(P._SplayTreeMap__SplayTree_MapMixin, P._SplayTree);
    _inherit(P.SplayTreeMap, P._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(P._SplayTreeIterator, [P._SplayTreeKeyIterator, P._SplayTreeValueIterator, P._SplayTreeNodeIterator]);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P.JsonCodec, N.HexCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inheritMany(P._UnicodeSubsetDecoder, [P.AsciiDecoder, P.Latin1Decoder]);
    _inherit(P.ByteConversionSink, P.ChunkedConversionSink);
    _inherit(P.ByteConversionSinkBase, P.ByteConversionSink);
    _inherit(P._ByteCallbackSink, P.ByteConversionSinkBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(W.EventTarget, [W.Node, W.Animation, W.BackgroundFetchRegistration, W.BroadcastChannel, W.EventSource, W.FileReader, W.FileWriter, W.HttpRequestEventTarget, W.MediaKeySession, W.MediaRecorder, W.MediaStream, W.MediaStreamTrack, W.MessagePort, W.MidiPort, W.Notification0, W.PaymentRequest, W.PresentationAvailability, W.PresentationConnection, W.PresentationRequest, W.RtcDataChannel, W.Sensor, W.WorkerGlobalScope, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.SpeechRecognition, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VRSession, W.VideoTrackList, W.WebSocket, W.Window, P.Database, P.AudioNode, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W.Document, W._Attr]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.DataElement, W.DivElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.IFrameElement, W.ImageElement, W.InputElement, W.LIElement, W.MapElement, W.MediaElement, W.MetaElement, W.MeterElement, W.OListElement, W.ObjectElement, W.OptionElement, W.OutputElement, W.ParamElement, W.ProgressElement, W.SelectElement, W.SlotElement, W.TableColElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement, W.TrackElement]);
    _inheritMany(W.Event0, [W.ApplicationCacheErrorEvent, W.ExtendableEvent, W.CloseEvent, W.ErrorEvent, W.UIEvent, W.MediaKeyMessageEvent, W.MessageEvent, W.PopStateEvent, W.PresentationConnectionCloseEvent, W.ProgressEvent, W.RtcDataChannelEvent, W.SpeechRecognitionError, W.SpeechSynthesisEvent, W.StorageEvent]);
    _inherit(W.BackgroundFetchEvent, W.ExtendableEvent);
    _inherit(W.CssKeyframesRule, W.CssRule);
    _inheritMany(W.CssStyleValue, [W.CssKeywordValue, W.CssNumericValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W.CssUnitValue, W.CssNumericValue);
    _inheritMany(W.ReportBody, [W.DeprecationReport, W.InterventionReport]);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Credential, [W.FederatedCredential, W.PasswordCredential]);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.HttpRequest, W.HttpRequestEventTarget);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent, W.TouchEvent]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W.SharedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.VideoElement, W.MediaElement);
    _inherit(W.WheelEvent, W.MouseEvent);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(P.CssClassSetImpl, P.SetBase);
    _inheritMany(P.CssClassSetImpl, [W._ElementCssClassSet, P.AttributeClassSet]);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.CursorWithValue, P.Cursor);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inherit(P.Rectangle, P._RectangleBase);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.ScriptElement0, P.SvgElement);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioScheduledSourceNode, P.AudioNode);
    _inherit(P.AudioBufferSourceNode, P.AudioScheduledSourceNode);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(X.ProxyHolder, [X.CodeMirror, X.Doc, X.TextMarker, X.LineHandle]);
    _inherit(U.SetEquality, U._UnorderedEquality);
    _inherit(F.FlameChartCanvas, F.FlameChart);
    _inheritMany(A.CoreElement, [F.BreakOnExceptionControl, N.HtmlPopupView, A.HtmlToast, A.HtmlPopupAutoCompleteView, Q.TreeTableToolbar, D.HtmlFlagDetails, Z.HtmlLogDetails, Y.HtmlMemoryChart, T.HtmlInstanceRefsView, A.HtmlCpuProfiler, A.HtmlCpuProfilerView, N.PTabNavTab, Z.HtmlEventDetails, Z.HtmlEventSummary, T._FramesBarChart_CoreElement_HtmlSetStateMixin, T.PlotlyDivGraph, G.HtmlProgressElement, G.HtmlSpinner, G.HtmlSelectableList, G._HtmlSelectableTree_CoreElement_Tree, G.HtmlTreeToggle, A.TextField, N.PSelect, N.PButton, N.PFlash, N.PTabNav, N.PNavMenu, N.PNavMenuItem]);
    _inheritMany(A.HtmlScreen, [R.HtmlDebuggerScreen, D.HtmlInfoScreen, D.HtmlInspectorScreen, Z.HtmlLoggingScreen, F.HtmlNotFoundScreen, O._HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin, M.HtmlPerformanceScreen, M.HtmlTimelineScreen]);
    _inheritMany(G.ChildProvider, [F.VariablesChildProvider, A.MemoryDataChildProvider]);
    _inheritMany(N.LineSegment, [N.HorizontalLineSegment, N.VerticalLineSegment]);
    _inherit(Q.HtmlTable, Q._HtmlTable_Object_HtmlSetStateMixin);
    _inherit(Q.HtmlTreeColumnRenderer, Q.HtmlColumnRenderer);
    _inherit(Q.HtmlTreeTable, Q.HtmlTable);
    _inheritMany(K.DisposableController, [T._InfoController_DisposableController_AutoDisposeControllerMixin, Z._InspectorController_DisposableController_AutoDisposeControllerMixin, E._InspectorService_DisposableController_AutoDisposeControllerMixin]);
    _inherit(T.InfoController, T._InfoController_DisposableController_AutoDisposeControllerMixin);
    _inherit(U.Diagnosticable, U._Diagnosticable_Object_DiagnosticableMixin);
    _inherit(U.DiagnosticableTree, U.Diagnosticable);
    _inherit(M.RemoteDiagnosticsNode, U.DiagnosticableTree);
    _inherit(Z.InspectorController, Z._InspectorController_DisposableController_AutoDisposeControllerMixin);
    _inherit(E.InspectorService, E._InspectorService_DisposableController_AutoDisposeControllerMixin);
    _inherit(E.FlutterInspectorLibraryNotFound, B.LibraryNotFound);
    _inheritMany(K.InspectorTreeNodeRender, [K.InspectorTreeNodeRendererLegacy, K.InspectorTreeNodeHtmlRender]);
    _inheritMany(K.PaintEntry, [E.CanvasPaintEntry, K.HtmlPaintEntry]);
    _inheritMany(E.CanvasPaintEntry, [E.IconPaintEntry0, E.TextPaintEntry]);
    _inheritMany(K.InspectorTreeNodeRenderBuilder, [E.InspectorTreeNodeRenderCanvasBuilder, K.InspectorTreeNodeRenderHtmlBuilder]);
    _inherit(E.InspectorTreeNodeCanvasRender, K.InspectorTreeNodeRendererLegacy);
    _inherit(K.InspectorTreeNodeLegacy, K.InspectorTreeNode);
    _inheritMany(K.InspectorTreeNodeLegacy, [E.InspectorTreeNodeCanvas, K.InspectorTreeNodeHtml]);
    _inherit(K.InspectorTreeControllerLegacy, K.InspectorTreeController);
    _inheritMany(K.InspectorTreeControllerLegacy, [E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb, K._InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb]);
    _inherit(E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController, E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb);
    _inherit(E.InspectorTreeCanvas, E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController);
    _inheritMany(K.HtmlPaintEntry, [K.IconPaintEntry, K.HtmlTextPaintEntry]);
    _inherit(K.InspectorTreeHtml, K._InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb);
    _inheritMany(K.ColumnData, [E.LogKindColumn, E.LogWhenColumn, E.LogMessageColumn, K.TreeColumnData, T.FieldNameColumn, Z.MemoryColumnClassName, Z.MemoryColumnSize, Z.MemoryColumnInstanceCount, Z.MemoryColumnInstanceAccumulatedCount, T.SelfTimeColumn, T.TotalTimeColumn, T.SourceColumn]);
    _inherit(F.HtmlPerfToolFramework, A.HtmlFramework);
    _inherit(T.HtmlInboundsTree, T.HtmlInstanceRefsView);
    _inheritMany(X.TreeNode0, [T.InboundsTreeNode, E.CpuStackFrame, A.TimelineEvent0]);
    _inheritMany(K.TreeColumnData, [T.ClassNameColumn, T.MethodNameColumn]);
    _inherit(O.HtmlMemoryScreen, O._HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin);
    _inheritMany(Q.Response, [O.InboundReferences0, O.InboundReference0, Q.AllocationProfile, Q.BoundVariable, Q.Obj, Q.ObjRef, Q.ClassHeapStats, Q.ClassList, Q.ClientName, Q.CpuSamples, Q.Event, Q.FlagList, Q.Frame, Q.IsolateRef, Q.Isolate, Q.IsolateGroupRef, Q.IsolateGroup, Q.InboundReferences, Q.InstanceSet, Q.LogRecord, Q.MemoryUsage, Q.Message, Q.ReloadReport, Q.RetainingPath, Q.Sentinel, Q.ScriptList, Q.SourceLocation, Q.SourceReport, Q.Stack, Q.Success, Q.Timeline, Q.TimelineFlags, Q.Timestamp, Q.UnresolvedSourceLocation, Q.Version, Q.VMRef, Q.VM]);
    _inheritMany(A.HtmlCpuProfiler, [M._HtmlCpuProfiler, Z._CpuProfiler]);
    _inherit(B.PerformanceController, B._PerformanceController_Object_CpuProfilerControllerProviderMixin);
    _inheritMany(A.HtmlCpuProfilerView, [Z.HtmlCpuFlameChart, R.HtmlCpuCallTree, R.HtmlCpuBottomUp]);
    _inheritMany(F.FlameChartCanvas, [Z.CpuFlameChartCanvas, M.FrameBasedTimelineFlameChartCanvas, M.FullTimelineFlameChartCanvas]);
    _inherit(A.CpuProfilerTab, N.PTabNavTab);
    _inherit(E.ToggleableServiceExtensionDescription, E.ServiceExtensionDescription);
    _inheritMany(U.ChangeNotifier, [M.StreamValueListenable, U.ValueNotifier]);
    _inherit(K.TreeTableData, K.TableData);
    _inherit(T.FramesBarChart, T._FramesBarChart_CoreElement_HtmlSetStateMixin);
    _inheritMany(U.TimelineBase, [U.FrameBasedTimeline, U.FullTimeline]);
    _inheritMany(A.TimelineData, [A.FrameBasedTimelineData, A.FullTimelineData]);
    _inherit(A._OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData, A.FrameBasedTimelineData);
    _inherit(A.OfflineFrameBasedTimelineData, A._OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData);
    _inherit(A._OfflineFullTimelineData_FullTimelineData_OfflineData, A.FullTimelineData);
    _inherit(A.OfflineFullTimelineData, A._OfflineFullTimelineData_FullTimelineData_OfflineData);
    _inheritMany(A.TimelineEvent0, [A.OfflineTimelineEvent, A.SyncTimelineEvent, A.AsyncTimelineEvent]);
    _inheritMany(Y.TimelineProcessor, [Y.FrameBasedTimelineProcessor, Y.FullTimelineProcessor]);
    _inherit(F.GtagEventDevTools, F.GtagEvent);
    _inherit(F.GtagExceptionDevTools, F.GtagException);
    _inherit(U.ValueListenable, U.Listenable);
    _inheritMany(U.DiagnosticsNode, [U.DiagnosticsProperty, U.DiagnosticableNode]);
    _inherit(U.DiagnosticableTreeNode, U.DiagnosticableNode);
    _inherit(S.ColorSwatch, S.Color);
    _inheritMany(S.ColorSwatch, [S.MaterialColor, S.MaterialAccentColor]);
    _inheritMany(S.OffsetBase, [S.Offset, S.Size]);
    _inherit(G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator, G._HtmlSelectableTree_CoreElement_Tree);
    _inherit(G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator, G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator);
    _inherit(G.HtmlSelectableTree, G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator);
    _inheritMany(Y.HtmlIconRenderer, [Y._UrlIconRenderer, Y._ColorIconRenderer, Y._CustomIconRenderer, Y._MaterialIconRenderer]);
    _inheritMany(S.DevToolsIcon, [S.UrlIcon, S.CustomIcon, S.ColorIcon, K.MaterialIcon]);
    _inherit(N.TogglePlatformSelector, N.ServiceExtensionSelector);
    _inherit(T.ViewportCanvas, T._ViewportCanvas_Object_HtmlSetStateMixin);
    _inherit(B.ImmediateValueNotifier, U.ValueNotifier);
    _inherit(T.FlutterVersion, T.SemanticVersion);
    _inherit(O.BrowserClient, E.BaseClient);
    _inherit(Z.ByteStream, P.StreamView);
    _inherit(O.Request, G.BaseRequest);
    _inheritMany(T.BaseResponse, [U.Response0, X.StreamedResponse]);
    _inherit(Z.CaseInsensitiveMap, M.CanonicalizedMap);
    _inheritMany(T._DateFormatField, [T._DateFormatLiteralField, T._DateFormatQuotedField, T._DateFormatPatternField]);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inheritMany(L.Browser, [L._Chrome, L._Firefox, L._Safari, L._WKWebView, L._InternetExplorer]);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(G.SourceSpanFormatException, G.SourceSpanException);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _inheritMany(R.StreamChannelMixin, [M.SseClient, K.GuaranteeChannel, R._StreamChannel, R.HtmlWebSocketChannel, N.WebSocketChannel]);
    _inherit(E.StringScannerException, G.SourceSpanFormatException);
    _inheritMany(Q.Obj, [Q.Breakpoint, Q.Class, Q.Context, Q.Error, Q.Field, Q.Func, Q.Instance, Q.Library, Q.Script, Q.TypeArguments]);
    _inheritMany(Q.ObjRef, [Q.ClassRef, Q.CodeRef, Q.Code, Q.ContextRef, Q.ErrorRef, Q.FieldRef, Q.FuncRef, Q.InstanceRef, Q.LibraryRef, Q.ScriptRef, Q.TypeArgumentsRef]);
    _inherit(Q.NullValRef, Q.InstanceRef);
    _inherit(Q.NullVal, Q.Instance);
    _inheritMany(O.DelegatingStreamSink, [R._HtmlWebSocketSink, N.WebSocketSink]);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P._SyncStreamController, P._SyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SetBase_Object_SetMixin, P.SetMixin);
    _mixin(P._SplayTreeMap__SplayTree_MapMixin, P.MapMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._JsArray_JsObject_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(Q._HtmlTable_Object_HtmlSetStateMixin, A.HtmlSetStateMixin);
    _mixin(T._InfoController_DisposableController_AutoDisposeControllerMixin, K.AutoDisposeControllerMixin);
    _mixin(Z._InspectorController_DisposableController_AutoDisposeControllerMixin, K.AutoDisposeControllerMixin);
    _mixin(E._InspectorService_DisposableController_AutoDisposeControllerMixin, K.AutoDisposeControllerMixin);
    _mixin(E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb, M.InspectorTreeWeb);
    _mixin(E._InspectorTreeCanvas_InspectorTreeControllerLegacy_InspectorTreeWeb_InspectorTreeFixedRowHeightController, K.InspectorTreeFixedRowHeightController);
    _mixin(K._InspectorTreeHtml_InspectorTreeControllerLegacy_InspectorTreeWeb, M.InspectorTreeWeb);
    _mixin(O._HtmlMemoryScreen_HtmlScreen_HtmlSetStateMixin, A.HtmlSetStateMixin);
    _mixin(B._PerformanceController_Object_CpuProfilerControllerProviderMixin, T.CpuProfilerControllerProviderMixin);
    _mixin(T._FramesBarChart_CoreElement_HtmlSetStateMixin, A.HtmlSetStateMixin);
    _mixin(A._OfflineFrameBasedTimelineData_FrameBasedTimelineData_OfflineData, A.OfflineData);
    _mixin(A._OfflineFullTimelineData_FullTimelineData_OfflineData, A.OfflineData);
    _mixin(U._Diagnosticable_Object_DiagnosticableMixin, U.DiagnosticableMixin);
    _mixin(G._HtmlSelectableTree_CoreElement_Tree, X.Tree);
    _mixin(G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator, X.TreeNavigator);
    _mixin(G._HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator, R.HtmlTreeNavigator);
    _mixin(T._ViewportCanvas_Object_HtmlSetStateMixin, A.HtmlSetStateMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["Null()", "~()", "Null(@)", "Null(Event0)", "@(@)", "String(String)", "Null(MouseEvent)", "Future<~>()", "Null(String)", "~(@)", "~(Object)", "Null(bool)", "~(Event)", "Null(KeyboardEvent)", "bool(@)", "Future<Null>()", "bool(TimelineEvent0)", "Null(@,@)", "~(String,@)", "~(Event0)", "Future<~>([@])", "bool(String)", "~(Object[StackTrace])", "Future<@>()", "Null(TouchEvent)", "Null(ProgressEvent)", "Null(BusEvent)", "Null(~)", "bool()", "Null(String,@)", "Null(@,StackTrace)", "Version0(NavigatorProvider)", "~(String,String)", "bool(Object)", "bool(NavigatorProvider)", "~(CpuStackFrame)", "int(int)", "~(Set<String>)", "Null(IsolateRef)", "bool(HtmlScreen)", "String(int)", "int(int,HeapSpace)", "Future<String>([@])", "Future<List<String>>([@])", "Null(CanvasImageSource)", "~(MouseEvent)", "~(VmServiceWrapper)", "bool(ClassHeapDetailStats)", "Null(Event)", "Null(String,String)", "Future<~>(@)", "bool(Element)", "~(CanvasRenderingContext2D,Rect)", "String(TimelineEvent0)", "Null(FlameChartNode<@>)", "double(int)", "bool(CpuProfilerTab)", "~(~())", "Null(List<@>,ResizeObserver)", "bool(BusEvent)", "~(TimelineEvent0)", "~(DataEvent)", "bool(MouseEvent)", "bool(TouchEvent)", "bool(Event0)", "bool(bool)", "Null(ServiceExtensionState)", "bool(_Highlight)", "Map<String,@>(ClassRef)", "bool(ScriptRef)", "Map<String,@>(ScriptRef)", "Map<String,@>(Frame)", "ImmediateValueNotifier<bool>()", "List<ScriptRef>()", "bool(IsolateRef)", "~(BusEvent)", "int(@)", "StringBuffer()", "bool(bool,bool,bool,String)", "~(VmService)", "~({disabled:bool})", "Element(CoreElement)", "int()", "Null(int)", "List<Breakpoint>()", "~(Uint8List,String,int)", "bool(Node)", "Map<String,@>(TimelineEvent)", "~(InspectorTreeNode)", "~(num)", "Splitter(List<Element>{gutterSize:num,horizontal:bool,minSize:List<num>,sizes:List<num>})", "Future<Null>(String,String,bool)", "~(InboundsTreeNode)", "~(String)", "Future<Isolate>(IsolateRef)", "Null(num)", "@(Event0)", "bool(NodeValidator)", "Future<bool>([@])", "@(@,@)", "CpuProfileData()", "Future<~>(Event)", "bool(TraceEventWrapper)", "bool(TimelineFrame)", "bool(FlameChartSection)", "Null(FontFace)", "bool(Object,Object)", "int(Object)", "String(Match)", "Object(@)", "Map<String,@>(InstanceRef)", "Map<String,@>(FieldRef)", "Map<String,@>(FuncRef)", "Map<String,@>(Breakpoint)", "Map<String,@>(IsolateRef)", "Null(Symbol0,@)", "~(Offset)", "int(@,@)", "bool(Element,String,String,_Html5NodeValidator)", "num(int)", "TimelineFrame()", "String(BoundVariable)", "bool(HtmlMessage)", "Null(HtmlMessage)", "Set<HtmlMessage>()", "Future<Null>(@)", "~(Object,Object,CoreElement[~([bool])])", "~(@,ResizeObserver)", "Null(@[StackTrace])", "~(Element,int)", "Null(FlagList)", "HtmlFlagDetails(Flag)", "Null(FlutterVersion)", "InspectorTreeController()", "~(String[@])", "bool(InspectorTreeNode,DevToolsIcon)", "~([int])", "~(InspectorInstanceRef)", "@(String)", "~(InspectorTreeNode,RemoteDiagnosticsNode)", "Future<Set<String>>()", "List<int>()", "_Future<@>(@)", "Future<PresentationConnection>()", "~(Size)", "CoreElement(Breakpoint)", "bool(double)", "~([Color])", "Null(~())", "~({text:String,tree:InspectorTreeController})", "InspectorTreeWeb({onSelectionChange:~()})", "Null(InspectorTreeNode,DevToolsIcon)", "~(@,StackTrace)", "~(IsolateRef)", "Null(LogData)", "Future<String>()", "~([IsolateRef])", "Null(ConnectVmEvent)", "Null(MemoryTracker)", "CoreElement(BoundField)", "Future<Null>(InboundsTreeNode)", "Null(Script)", "int(int,int)", "Future<Null>(Frame)", "~([bool])", "Future<@>(Object)", "bool(InboundsTreeNode)", "Future<Null>(ClassHeapDetailStats)", "Future<String>(BoundField)", "ClassHeapDetailStats(ClassHeapStats)", "InstanceSummary(ObjRef)", "Null(VM)", "Null(Object,StackTrace)", "Null(List<Isolate>)", "Null(Obj)", "Null(String,List<Library>)", "Map<String,String>(Map<String,String>,String)", "AxisLayout(List<num>)", "Legend([bool])", "Future<Null>(ScriptRef)", "HeapSpace(@)", "InboundReference0(@)", "Future<String>(BoundVariable)", "Null(int,@)", "Future<Null>(Breakpoint)", "~(Node,Node)", "Future<int>([@])", "bool/()", "Null(String,int,@)", "String(Breakpoint)", "String(ScriptRef)", "String(Frame)", "Null(Object)", "CoreElement(Frame)", "bool(CpuStackFrame)", "bool(Set<String>)", "double(CpuStackFrame)", "~(CpuStackFrame,int)", "String(CpuStackFrame)", "Set<0^>()<Object>", "bool(HtmlCpuProfilerView)", "Element(Node)", "Null(PTabNavTab)", "Null(Uri)", "Future<VmServiceWrapper>()", "Null(VmServiceWrapper)", "String(@)", "ServiceExtensionDescription<@>(@)", "JsFunction(@)", "~(~)", "List<String>()", "Future<Null>(String)", "String(LibraryRef)", "ScriptRef(@)", "Future<~>(Offset)", "Null(String,StreamController<bool>)", "StreamValueListenable<bool>()", "StreamSubscription<bool>(StreamValueListenable<bool>)", "JsArray<@>(@)", "TimelineEvent0()", "Future<Null>(OfflineData<TimelineData>)", "JsObject(@)", "Null(Timer)", "~(Map<String,@>)", "~([num,num,num])", "~(String,int)", "CoreElement(ScriptRef)", "~(TimelineEvent0,int)", "double(int,int)", "~(TimelineEvent0,int,int)", "int(FlameChartNode<@>,FlameChartNode<@>)", "~(double)", "int(TimelineEvent0,TimelineEvent0)", "FullTimelineEventGroup()", "bool(TimelineEventType)", "TimelineEventType()", "~({parent:TimelineEvent0})", "HeapPriorityQueue<TraceEventWrapper>(int)", "int(ScriptRef,ScriptRef)", "int(SyncTimelineEvent,SyncTimelineEvent)", "int(TimelineFrame,TimelineFrame)", "Map<String,@>(TraceEventWrapper)", "bool(AsyncTimelineEvent)", "Null(OfflineData<TimelineData>)", "TraceEvent(Map<String,@>)", "bool(TraceEvent)", "bool(int)", "~(DiagnosticsNode)", "bool(DiagnosticsNode)", "~({onlyCollapse:bool,onlyExpand:bool})", "TextMarker(@)", "~(String[bool])", "~(String{removeOthers:bool})", "@(@,@,@)", "Null(@,@,@,@)", "Null(@,@,@)", "~(ScriptRef,HtmlScriptsView,CoreElement[Function])", "CustomIcon()", "ColorIcon()", "MaterialIcon()", "~(String{value:String})", "Uint8List(int)", "CoreElement(BoundVariable)", "~(KeyboardEvent)", "~({current:_CpuProfileTimelineTree,parent:_CpuProfileTimelineTree})", "CpuProfileData(Response)", "Future<Response0>(Client0)", "Future<Response0>(@{body:@,encoding:Encoding,headers:Map<String,String>})", "bool(String,String)", "int(String)", "~(List<int>)", "String(List<String>)", "MediaType()", "Uint8List(@,@)", "DateTime(int,int,int,int,int,int,int,bool)", "_DateFormatQuotedField(String,DateFormat)", "_DateFormatPatternField(String,DateFormat)", "_DateFormatLiteralField(String,DateFormat)", "String(NumberSymbols)", "Logger()", "String(String[int])", "String([int])", "bool(Browser)", "Browser()", "Object(String)", "VM(Map<String,@>)", "String()", "int(_Line)", "@(@,String)", "Uri(_Line)", "int(_Highlight,_Highlight)", "List<_Line>(List<_Highlight>)", "SourceSpanWithContext()", "String(String{color:@})", "@(Object,Object,num[int])", "@(Object,num,int)", "Object(Object,Object,num[int])", "Object(Object,num,int)", "BoundVariable(MapAssociation)", "~(String,Completer<@>)", "Map<String,@>(ClassHeapStats)", "BoundVariable(BoundField)", "String(Object)", "ValueNotifier<bool>()", "FlameChartNode<@>()", "Map<String,@>(ContextElement)", "Map<String,@>(ProfileFunction)", "Map<String,@>(CpuSample)", "Set<0^>()<Object>", "Future<InstanceRef>()", "VMRef(Map<String,@>)", "Map<String,@>(Flag)", "Map<String,@>(BoundVariable)", "Map<String,@>(BoundField)", "Map<String,@>(MapAssociation)", "Map<String,@>(LibraryRef)", "~(PopStateEvent)", "Map<String,@>(InboundReference)", "Map<String,@>(ObjRef)", "Map<String,@>(LibraryDependency)", "Future<@>(Breakpoint)", "Map<String,@>(RetainingObject)", "List<int>(@)", "List<int>(List<int>)", "Map<String,@>(SourceReportRange)", "Null(DomException)", "Map<String,@>(Message)", "Map<String,@>(IsolateGroupRef)", "Null(MessageEvent)", "Null(CloseEvent)", "HtmlScreen()", "~(WheelEvent)", "~(Zone,ZoneDelegate,Zone,@,StackTrace)", "0^(Zone,ZoneDelegate,Zone,0^())<Object>", "0^(Zone,ZoneDelegate,Zone,0^(1^),1^)<Object,Object>", "0^(Zone,ZoneDelegate,Zone,0^(1^,2^),1^,2^)<Object,Object,Object>", "0^()(Zone,ZoneDelegate,Zone,0^())<Object>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object,Object>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object,Object,Object>", "AsyncError(Zone,ZoneDelegate,Zone,Object,StackTrace)", "~(Zone,ZoneDelegate,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "~(Zone,ZoneDelegate,Zone,String)", "Zone(Zone,ZoneDelegate,Zone,ZoneSpecification,Map<@,@>)", "bool(@,@)", "String(EventTarget)", "Null(HtmlScreen,CoreElement)", "0^(0^,0^)<num>", "~(Zone,ZoneDelegate,Zone,Object,StackTrace)", "int(Breakpoint,Breakpoint)", "int(String,String)", "~(String{wrapWidth:int})", "CoreElement(0^)<Object>", "bool(HtmlActionButton)", "@(num)", "~(HtmlMessage)", "ExtensionData(Map<@,@>)", "AllocationProfile(Map<String,@>)", "BoundField(Map<String,@>)", "BoundVariable(Map<String,@>)", "Breakpoint(Map<String,@>)", "ClassRef(Map<String,@>)", "Class(Map<String,@>)", "ClassHeapStats(Map<String,@>)", "ClassList(Map<String,@>)", "ClientName(Map<String,@>)", "CodeRef(Map<String,@>)", "Code(Map<String,@>)", "ContextRef(Map<String,@>)", "Context(Map<String,@>)", "ContextElement(Map<String,@>)", "CpuSamples(Map<String,@>)", "CpuSample(Map<String,@>)", "ErrorRef(Map<String,@>)", "Error(Map<String,@>)", "Event(Map<String,@>)", "FieldRef(Map<String,@>)", "Field(Map<String,@>)", "Flag(Map<String,@>)", "FlagList(Map<String,@>)", "Frame(Map<String,@>)", "FuncRef(Map<String,@>)", "Func(Map<String,@>)", "InstanceRef(Map<String,@>)", "Instance(Map<String,@>)", "IsolateRef(Map<String,@>)", "Isolate(Map<String,@>)", "IsolateGroupRef(Map<String,@>)", "IsolateGroup(Map<String,@>)", "InboundReferences(Map<String,@>)", "InboundReference(Map<String,@>)", "InstanceSet(Map<String,@>)", "LibraryRef(Map<String,@>)", "Library(Map<String,@>)", "LibraryDependency(Map<String,@>)", "LogRecord(Map<String,@>)", "MapAssociation(Map<String,@>)", "MemoryUsage(Map<String,@>)", "Message(Map<String,@>)", "NativeFunction(Map<String,@>)", "NullValRef(Map<String,@>)", "NullVal(Map<String,@>)", "ObjRef(Map<String,@>)", "Obj(Map<String,@>)", "ProfileFunction(Map<String,@>)", "ReloadReport(Map<String,@>)", "RetainingObject(Map<String,@>)", "RetainingPath(Map<String,@>)", "Response(Map<String,@>)", "Sentinel(Map<String,@>)", "ScriptRef(Map<String,@>)", "Script(Map<String,@>)", "ScriptList(Map<String,@>)", "SourceLocation(Map<String,@>)", "SourceReport(Map<String,@>)", "SourceReportCoverage(Map<String,@>)", "SourceReportRange(Map<String,@>)", "Stack(Map<String,@>)", "Success(Map<String,@>)", "Timeline(Map<String,@>)", "TimelineEvent(Map<String,@>)", "TimelineFlags(Map<String,@>)", "Timestamp(Map<String,@>)", "TypeArgumentsRef(Map<String,@>)", "TypeArguments(Map<String,@>)", "UnresolvedSourceLocation(Map<String,@>)", "Version(Map<String,@>)", "~(bool)", "FileSpan(int[int])"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"JavaScriptObject","GtagEvent":"JavaScriptObject","GtagEventDevTools":"JavaScriptObject","GtagException":"JavaScriptObject","GtagExceptionDevTools":"JavaScriptObject","_SplitOptions":"JavaScriptObject","Splitter":"JavaScriptObject","Plotly":"JavaScriptObject","TraceData":"JavaScriptObject","Data":"JavaScriptObject","Marker":"JavaScriptObject","Line":"JavaScriptObject","Transform0":"JavaScriptObject","Title":"JavaScriptObject","Layout":"JavaScriptObject","Shape":"JavaScriptObject","Legend":"JavaScriptObject","HoverLabel":"JavaScriptObject","Font":"JavaScriptObject","AxisLayout":"JavaScriptObject","RangeSelector":"JavaScriptObject","Button":"JavaScriptObject","Margin":"JavaScriptObject","RangeSlider":"JavaScriptObject","Configuration":"JavaScriptObject","DataEvent":"JavaScriptObject","LegendDataEvent":"JavaScriptObject","Point1":"JavaScriptObject","HoverFX":"JavaScriptObject","PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","AnimationEvent":"Event0","AnalyserNode":"AudioNode","ConstantSourceNode":"AudioScheduledSourceNode","AudioContext":"BaseAudioContext","AElement":"SvgElement","GraphicsElement":"SvgElement","AccessibleNode":"EventTarget","_ResourceProgressEvent":"ProgressEvent","BRElement":"HtmlElement","ShadowRoot":"Node","DocumentFragment":"Node","HtmlDocument":"Document","VttCue":"TextTrackCue","CompositionEvent":"UIEvent","AbortPaymentEvent":"ExtendableEvent","DedicatedWorkerGlobalScope":"WorkerGlobalScope","CDataSection":"CharacterData","Text":"CharacterData","PointerEvent":"MouseEvent","MidiInput":"MidiPort","AbsoluteOrientationSensor":"Sensor","OrientationSensor":"Sensor","HttpRequestUpload":"HttpRequestEventTarget","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","CssStyleSheet":"StyleSheet","CanvasCaptureMediaStreamTrack":"MediaStreamTrack","BackgroundFetchClickEvent":"BackgroundFetchEvent","AudioElement":"MediaElement","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JavaScriptObject":{"JSObject":[],"Function":[],"Data":[],"Layout":[],"Shape":[],"Legend":[],"AxisLayout":[],"DataEvent":[],"HoverFX":[],"Splitter":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["@"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["@"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSDouble":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"]},"CastStream":{"Stream":["2"],"Stream.T":"2"},"CastStreamSubscription":{"StreamSubscription":["2"]},"CastStreamTransformer":{"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"],"StreamTransformerBase.S":"3","StreamTransformerBase.T":"4"},"CastConverter":{"Converter":["3","4"],"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"],"StreamTransformerBase.S":"3","StreamTransformerBase.T":"4","Converter.S":"3","Converter.T":"4"},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListMixin.E":"2","Iterable.E":"2"},"CastSet":{"Set":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"CastMap":{"MapMixin":["3","4"],"Map":["3","4"],"MapMixin.K":"3","MapMixin.V":"4"},"CastQueue":{"Queue":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"Error0":[]},"JsNoSuchMethodError":{"Error0":[]},"UnknownJsTypeError":{"Error0":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error0":[]},"_AssertionError":{"Error0":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"ByteBuffer":[]},"NativeTypedData":{"TypedData":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["@"],"NativeTypedData":[],"TypedData":[],"JSIndexable":["@"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":[],"ListMixin":["double"],"JavaScriptIndexingBehavior":["@"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["@"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":[],"ListMixin":["double"],"JavaScriptIndexingBehavior":["@"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["@"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":[],"ListMixin":["double"],"JavaScriptIndexingBehavior":["@"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["@"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":[],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["@"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["@"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error0":[]},"_TypeError":{"Error0":[]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsBroadcastStreamController":{"_SyncBroadcastStreamController":["1"],"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"TimeoutException":{"Exception":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_Future":{"Future":["1"]},"StreamView":{"Stream":["1"],"Stream.T":"1","StreamView.T":"1"},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"StreamController":{"StreamSink":["1"]},"_StreamController":{"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"StreamSink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamImpl":{"Stream":["1"]},"_GeneratedStreamImpl":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_IterablePendingEvents":{"_PendingEvents":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_StreamImplEvents":{"_PendingEvents":["1"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_AsBroadcastStream":{"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscriptionWrapper":{"StreamSubscription":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_WhereStream":{"_ForwardingStream":["1","1"],"Stream":["1"],"Stream.T":"1","_ForwardingStream.T":"1","_ForwardingStream.S":"1"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2","_ForwardingStream.T":"2","_ForwardingStream.S":"1"},"_HandleErrorStream":{"_ForwardingStream":["1","1"],"Stream":["1"],"Stream.T":"1","_ForwardingStream.T":"1","_ForwardingStream.S":"1"},"AsyncError":{"Error0":[]},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"_SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeMapNode":{"_SplayTreeNode":["1"],"_SplayTreeNode.K":"1"},"SplayTreeMap":{"MapMixin":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2","_SplayTree.K":"1","_SplayTree.1":"_SplayTreeMapNode<1,2>"},"_SplayTreeIterator":{"Iterator":["2"]},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_SplayTreeValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","1"],"Iterator":["1"],"_SplayTreeIterator.K":"1"},"_SplayTreeValueIterator":{"_SplayTreeIterator":["1","2"],"Iterator":["2"],"_SplayTreeIterator.K":"1"},"_SplayTreeNodeIterator":{"_SplayTreeIterator":["1","_SplayTreeNode<1>"],"Iterator":["_SplayTreeNode<1>"],"_SplayTreeIterator.K":"1"},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListIterable.E":"String","Iterable.E":"String"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"StreamTransformerBase.S":"String","StreamTransformerBase.T":"List<int>","Converter.S":"String","Converter.T":"List<int>"},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"StreamTransformerBase.S":"List<int>","StreamTransformerBase.T":"String","Converter.S":"List<int>","Converter.T":"String"},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"StreamTransformerBase.S":"List<int>","StreamTransformerBase.T":"String","Converter.S":"List<int>","Converter.T":"String"},"Base64Decoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"StreamTransformerBase.S":"String","StreamTransformerBase.T":"List<int>","Converter.S":"String","Converter.T":"List<int>"},"ByteConversionSink":{"ChunkedConversionSink":["List<int>"]},"ByteConversionSinkBase":{"ChunkedConversionSink":["List<int>"]},"_ByteCallbackSink":{"ChunkedConversionSink":["List<int>"]},"Converter":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error0":[]},"JsonCyclicError":{"Error0":[]},"JsonCodec":{"Codec":["Object","String"],"Codec.S":"Object"},"JsonEncoder":{"Converter":["Object","String"],"StreamTransformerBase":["Object","String"],"StreamTransformer":["Object","String"],"StreamTransformerBase.S":"Object","StreamTransformerBase.T":"String","Converter.S":"Object","Converter.T":"String"},"JsonDecoder":{"Converter":["String","Object"],"StreamTransformerBase":["String","Object"],"StreamTransformer":["String","Object"],"StreamTransformerBase.S":"String","StreamTransformerBase.T":"Object","Converter.S":"String","Converter.T":"Object"},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Latin1Encoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"StreamTransformerBase.S":"String","StreamTransformerBase.T":"List<int>","Converter.S":"String","Converter.T":"List<int>"},"Latin1Decoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"StreamTransformerBase.S":"List<int>","StreamTransformerBase.T":"String","Converter.S":"List<int>","Converter.T":"String"},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"StreamTransformerBase.S":"String","StreamTransformerBase.T":"List<int>","Converter.S":"String","Converter.T":"List<int>"},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"StreamTransformerBase.S":"List<int>","StreamTransformerBase.T":"String","Converter.S":"List<int>","Converter.T":"String"},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"AssertionError":{"Error0":[]},"NullThrownError":{"Error0":[]},"ArgumentError":{"Error0":[]},"RangeError":{"Error0":[]},"IndexError":{"Error0":[]},"NoSuchMethodError":{"Error0":[]},"UnsupportedError":{"Error0":[]},"UnimplementedError":{"Error0":[]},"StateError":{"Error0":[]},"ConcurrentModificationError":{"Error0":[]},"OutOfMemoryError":{"Error0":[]},"StackOverflowError":{"Error0":[]},"CyclicInitializationError":{"Error0":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExp":{"Pattern":[]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_StringStackTrace":{"StackTrace":[]},"String":{"Comparable":["String"],"Pattern":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"HtmlElement":{"Element":[],"Node":[],"EventTarget":[]},"AnchorElement":{"Element":[],"Node":[],"EventTarget":[]},"Animation":{"EventTarget":[]},"ApplicationCacheErrorEvent":{"Event0":[]},"AreaElement":{"Element":[],"Node":[],"EventTarget":[]},"BackgroundFetchEvent":{"Event0":[]},"BackgroundFetchRegistration":{"EventTarget":[]},"BaseElement":{"Element":[],"Node":[],"EventTarget":[]},"BodyElement":{"Element":[],"Node":[],"EventTarget":[]},"BroadcastChannel":{"EventTarget":[]},"ButtonElement":{"Element":[],"Node":[],"EventTarget":[]},"CanvasElement":{"Element":[],"Node":[],"EventTarget":[],"CanvasImageSource":[]},"CharacterData":{"Node":[],"EventTarget":[]},"CloseEvent":{"Event0":[]},"CssKeyframesRule":{"CssRule":[]},"DataElement":{"Element":[],"Node":[],"EventTarget":[]},"DivElement":{"Element":[],"Node":[],"EventTarget":[]},"Document":{"Node":[],"EventTarget":[]},"DomRectList":{"ListMixin":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"Iterable":["Rectangle<num>"],"JSIndexable":["Rectangle<num>"],"ListMixin.E":"Rectangle<num>","ImmutableListMixin.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"]},"DomStringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"JSIndexable":["String"],"ListMixin.E":"String","ImmutableListMixin.E":"String"},"_ChildrenElementList":{"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"ListMixin.E":"Element"},"_FrozenElementList":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"Element":{"Node":[],"EventTarget":[]},"EmbedElement":{"Element":[],"Node":[],"EventTarget":[]},"ErrorEvent":{"Event0":[]},"EventSource":{"EventTarget":[]},"ExtendableEvent":{"Event0":[]},"FieldSetElement":{"Element":[],"Node":[],"EventTarget":[]},"File":{"Blob":[]},"FileList":{"ListMixin":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"Iterable":["File"],"JSIndexable":["File"],"ListMixin.E":"File","ImmutableListMixin.E":"File"},"FileReader":{"EventTarget":[]},"FileWriter":{"EventTarget":[]},"FormElement":{"Element":[],"Node":[],"EventTarget":[]},"HtmlCollection":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node","ImmutableListMixin.E":"Node"},"HttpRequest":{"EventTarget":[]},"HttpRequestEventTarget":{"EventTarget":[]},"IFrameElement":{"Element":[],"Node":[],"EventTarget":[]},"ImageElement":{"Element":[],"Node":[],"EventTarget":[],"CanvasImageSource":[]},"InputElement":{"CheckboxInputElement":[],"Element":[],"Node":[],"EventTarget":[]},"KeyboardEvent":{"Event0":[]},"LIElement":{"Element":[],"Node":[],"EventTarget":[]},"MapElement":{"Element":[],"Node":[],"EventTarget":[]},"MediaElement":{"Element":[],"Node":[],"EventTarget":[]},"MediaKeyMessageEvent":{"Event0":[]},"MediaKeySession":{"EventTarget":[]},"MediaRecorder":{"EventTarget":[]},"MediaStream":{"EventTarget":[]},"MediaStreamTrack":{"EventTarget":[]},"MessageEvent":{"Event0":[]},"MessagePort":{"EventTarget":[]},"MetaElement":{"Element":[],"Node":[],"EventTarget":[]},"MeterElement":{"Element":[],"Node":[],"EventTarget":[]},"MidiInputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MidiOutputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MidiPort":{"EventTarget":[]},"MimeTypeArray":{"ListMixin":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"Iterable":["MimeType"],"JSIndexable":["MimeType"],"ListMixin.E":"MimeType","ImmutableListMixin.E":"MimeType"},"MouseEvent":{"Event0":[]},"_ChildNodeListLazy":{"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"ListMixin.E":"Node"},"Node":{"EventTarget":[]},"NodeList":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node","ImmutableListMixin.E":"Node"},"Notification0":{"EventTarget":[]},"OListElement":{"Element":[],"Node":[],"EventTarget":[]},"ObjectElement":{"Element":[],"Node":[],"EventTarget":[]},"OptionElement":{"Element":[],"Node":[],"EventTarget":[]},"OutputElement":{"Element":[],"Node":[],"EventTarget":[]},"ParamElement":{"Element":[],"Node":[],"EventTarget":[]},"PaymentRequest":{"EventTarget":[]},"PluginArray":{"ListMixin":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"Iterable":["Plugin"],"JSIndexable":["Plugin"],"ListMixin.E":"Plugin","ImmutableListMixin.E":"Plugin"},"PopStateEvent":{"Event0":[]},"PresentationAvailability":{"EventTarget":[]},"PresentationConnection":{"EventTarget":[]},"PresentationConnectionCloseEvent":{"Event0":[]},"PresentationRequest":{"EventTarget":[]},"ProgressElement":{"Element":[],"Node":[],"EventTarget":[]},"ProgressEvent":{"Event0":[]},"RtcDataChannel":{"EventTarget":[]},"RtcDataChannelEvent":{"Event0":[]},"RtcStatsReport":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"SelectElement":{"Element":[],"Node":[],"EventTarget":[]},"Sensor":{"EventTarget":[]},"SharedWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[]},"SlotElement":{"Element":[],"Node":[],"EventTarget":[]},"SourceBuffer":{"EventTarget":[]},"SourceBufferList":{"ListMixin":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EventTarget":[],"EfficientLengthIterable":["SourceBuffer"],"Iterable":["SourceBuffer"],"JSIndexable":["SourceBuffer"],"ListMixin.E":"SourceBuffer","ImmutableListMixin.E":"SourceBuffer"},"SpeechGrammarList":{"ListMixin":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"Iterable":["SpeechGrammar"],"JSIndexable":["SpeechGrammar"],"ListMixin.E":"SpeechGrammar","ImmutableListMixin.E":"SpeechGrammar"},"SpeechRecognition":{"EventTarget":[]},"SpeechRecognitionError":{"Event0":[]},"SpeechSynthesisEvent":{"Event0":[]},"Storage":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.K":"String","MapMixin.V":"String"},"StorageEvent":{"Event0":[]},"TableColElement":{"Element":[],"Node":[],"EventTarget":[]},"TableElement":{"Element":[],"Node":[],"EventTarget":[]},"TableRowElement":{"Element":[],"Node":[],"EventTarget":[]},"TableSectionElement":{"Element":[],"Node":[],"EventTarget":[]},"TemplateElement":{"Element":[],"Node":[],"EventTarget":[]},"TextAreaElement":{"Element":[],"Node":[],"EventTarget":[]},"TextTrack":{"EventTarget":[]},"TextTrackCue":{"EventTarget":[]},"TextTrackCueList":{"ListMixin":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"Iterable":["TextTrackCue"],"JSIndexable":["TextTrackCue"],"ListMixin.E":"TextTrackCue","ImmutableListMixin.E":"TextTrackCue"},"TextTrackList":{"ListMixin":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EventTarget":[],"EfficientLengthIterable":["TextTrack"],"Iterable":["TextTrack"],"JSIndexable":["TextTrack"],"ListMixin.E":"TextTrack","ImmutableListMixin.E":"TextTrack"},"TouchEvent":{"Event0":[]},"TouchList":{"ListMixin":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"Iterable":["Touch"],"JSIndexable":["Touch"],"ListMixin.E":"Touch","ImmutableListMixin.E":"Touch"},"TrackElement":{"Element":[],"Node":[],"EventTarget":[]},"UIEvent":{"Event0":[]},"VRSession":{"EventTarget":[]},"VideoElement":{"Element":[],"Node":[],"EventTarget":[],"CanvasImageSource":[]},"VideoTrackList":{"EventTarget":[]},"WebSocket":{"EventTarget":[]},"WheelEvent":{"MouseEvent":[],"Event0":[]},"Window":{"WindowBase":[],"EventTarget":[]},"WorkerGlobalScope":{"EventTarget":[]},"_Attr":{"Node":[],"EventTarget":[]},"_CssRuleList":{"ListMixin":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"Iterable":["CssRule"],"JSIndexable":["CssRule"],"ListMixin.E":"CssRule","ImmutableListMixin.E":"CssRule"},"_DomRect":{"Rectangle":["num"]},"_GamepadList":{"ListMixin":["Gamepad"],"ImmutableListMixin":["Gamepad"],"List":["Gamepad"],"JavaScriptIndexingBehavior":["Gamepad"],"EfficientLengthIterable":["Gamepad"],"Iterable":["Gamepad"],"JSIndexable":["Gamepad"],"ListMixin.E":"Gamepad","ImmutableListMixin.E":"Gamepad"},"_NamedNodeMap":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node","ImmutableListMixin.E":"Node"},"_SpeechRecognitionResultList":{"ListMixin":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"Iterable":["SpeechRecognitionResult"],"JSIndexable":["SpeechRecognitionResult"],"ListMixin.E":"SpeechRecognitionResult","ImmutableListMixin.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListMixin":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"Iterable":["StyleSheet"],"JSIndexable":["StyleSheet"],"ListMixin.E":"StyleSheet","ImmutableListMixin.E":"StyleSheet"},"_AttributeMap":{"MapMixin":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.K":"String","MapMixin.V":"String"},"_ElementCssClassSet":{"SetMixin":["String"],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"SetMixin.E":"String"},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription":{"StreamSubscription":["1"]},"_Html5NodeValidator":{"NodeValidator":[]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_TemplatingNodeValidator":{"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"FixedSizeListIterator":{"Iterator":["1"]},"_DOMWindowCrossFrame":{"WindowBase":[],"EventTarget":[]},"_SameOriginUriPolicy":{"UriPolicy":[]},"_ValidatingTreeSanitizer":{"NodeTreeSanitizer":[]},"CssClassSetImpl":{"SetMixin":["String"],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"FilteredElementList":{"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"ListMixin.E":"Element"},"Database":{"EventTarget":[]},"JsFunction":{"JsObject":[]},"JsArray":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JsObject":[],"Iterable":["1"],"ListMixin.E":"1"},"LengthList":{"ListMixin":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Iterable":["Length"],"ListMixin.E":"Length","ImmutableListMixin.E":"Length"},"NumberList":{"ListMixin":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Iterable":["Number"],"ListMixin.E":"Number","ImmutableListMixin.E":"Number"},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[],"EventTarget":[]},"StringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListMixin.E":"String","ImmutableListMixin.E":"String"},"AttributeClassSet":{"SetMixin":["String"],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"SetMixin.E":"String"},"SvgElement":{"Element":[],"Node":[],"EventTarget":[]},"TransformList":{"ListMixin":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"Iterable":["Transform"],"ListMixin.E":"Transform","ImmutableListMixin.E":"Transform"},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"TypedData":[]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"TypedData":[]},"AudioBufferSourceNode":{"EventTarget":[]},"AudioNode":{"EventTarget":[]},"AudioParamMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"AudioScheduledSourceNode":{"EventTarget":[]},"AudioTrackList":{"EventTarget":[]},"BaseAudioContext":{"EventTarget":[]},"OfflineAudioContext":{"EventTarget":[]},"SqlResultSetRowList":{"ListMixin":["Map<@,@>"],"ImmutableListMixin":["Map<@,@>"],"List":["Map<@,@>"],"EfficientLengthIterable":["Map<@,@>"],"Iterable":["Map<@,@>"],"ListMixin.E":"Map<@,@>","ImmutableListMixin.E":"Map<@,@>"},"DelegatingStreamSink":{"StreamSink":["1"],"DelegatingStreamSink.T":"1"},"Position":{"Comparable":["Position"]},"CanonicalizedMap":{"Map":["2","3"]},"DefaultEquality":{"Equality":["1"]},"IterableEquality":{"Equality":["Iterable<1>"]},"ListEquality":{"Equality":["List<1>"]},"_UnorderedEquality":{"Equality":["2"]},"SetEquality":{"_UnorderedEquality":["1","Set<1>"],"Equality":["Set<1>"],"_UnorderedEquality.E":"1","_UnorderedEquality.T":"Set<1>"},"MapEquality":{"Equality":["Map<1,2>"]},"DeepCollectionEquality":{"Equality":["@"]},"HexCodec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"HexEncoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"StreamTransformerBase.S":"List<int>","StreamTransformerBase.T":"String","Converter.S":"List<int>","Converter.T":"String"},"FlameChartCanvas":{"FlameChart":["@"]},"BreakpointsView":{"CoreElementView":[]},"BreakOnExceptionControl":{"CoreElement":[]},"CallStackView":{"CoreElementView":[]},"ConsoleArea":{"CoreElementView":[]},"HtmlDebuggerScreen":{"HtmlScreen":[]},"HtmlPopupView":{"CoreElement":[]},"HtmlScriptsView":{"CoreElementView":[]},"HtmlVariablesView":{"CoreElementView":[]},"VariablesChildProvider":{"ChildProvider":["BoundVariable"]},"LibraryNotFound":{"Exception":[]},"HtmlToast":{"CoreElement":[]},"HorizontalLineSegment":{"LineSegment":[],"Comparable":["HorizontalLineSegment"]},"VerticalLineSegment":{"LineSegment":[],"Comparable":["VerticalLineSegment"]},"HtmlPopupListView":{"CoreElementView":[]},"HtmlPopupAutoCompleteView":{"CoreElement":[]},"HtmlTable":{"HtmlSetStateMixin":[],"TableDataClient":["1"]},"HtmlTreeColumnRenderer":{"HtmlColumnRenderer":["1"]},"HtmlTreeTable":{"HtmlTable":["1"],"HtmlSetStateMixin":[],"TableDataClient":["1"]},"TreeTableToolbar":{"CoreElement":[]},"HtmlFlagDetails":{"CoreElement":[]},"HtmlInfoScreen":{"HtmlScreen":[]},"InfoController":{"Disposer":[]},"RemoteDiagnosticsNode":{"DiagnosticableTree":[]},"HtmlInspectorScreen":{"HtmlScreen":[]},"InspectorController":{"Disposer":[],"InspectorServiceClient":[]},"InspectorService":{"Disposer":[]},"FlutterInspectorLibraryNotFound":{"Exception":[]},"InspectorTreeNodeRendererLegacy":{"InspectorTreeNodeRender":["1"]},"CanvasPaintEntry":{"PaintEntry":[]},"IconPaintEntry0":{"CanvasPaintEntry":[],"PaintEntry":[]},"TextPaintEntry":{"CanvasPaintEntry":[],"PaintEntry":[]},"InspectorTreeNodeRenderCanvasBuilder":{"InspectorTreeNodeRenderBuilder":["InspectorTreeNodeCanvasRender"]},"InspectorTreeNodeCanvasRender":{"InspectorTreeNodeRendererLegacy":["CanvasPaintEntry"],"InspectorTreeNodeRender":["CanvasPaintEntry"],"InspectorTreeNodeRender.E":"CanvasPaintEntry"},"InspectorTreeNodeCanvas":{"InspectorTreeNode":[]},"InspectorTreeCanvas":{"InspectorTreeWeb":[],"InspectorTreeController":[],"CoreElementView":[]},"HtmlPaintEntry":{"PaintEntry":[]},"IconPaintEntry":{"HtmlPaintEntry":[],"PaintEntry":[]},"HtmlTextPaintEntry":{"HtmlPaintEntry":[],"PaintEntry":[]},"InspectorTreeNodeRenderHtmlBuilder":{"InspectorTreeNodeRenderBuilder":["InspectorTreeNodeHtmlRender"]},"InspectorTreeNodeHtmlRender":{"InspectorTreeNodeRender":["HtmlPaintEntry"],"InspectorTreeNodeRender.E":"HtmlPaintEntry"},"InspectorTreeNodeHtml":{"InspectorTreeNode":[]},"InspectorTreeHtml":{"InspectorTreeWeb":[],"InspectorTreeController":[],"CoreElementView":[]},"InspectorTreeControllerLegacy":{"InspectorTreeController":[]},"InspectorTreeNodeLegacy":{"InspectorTreeNode":[]},"InspectorTreeWeb":{"InspectorTreeController":[],"CoreElementView":[]},"HtmlLoggingScreen":{"HtmlScreen":[]},"HtmlLogDetails":{"CoreElement":[]},"LogKindColumn":{"ColumnData":["LogData"],"ColumnData.T":"LogData"},"LogWhenColumn":{"ColumnData":["LogData"],"ColumnData.T":"LogData"},"LogMessageColumn":{"ColumnData":["LogData"],"ColumnData.T":"LogData"},"HtmlPerfToolFramework":{"HtmlFramework":[]},"HtmlNotFoundScreen":{"HtmlScreen":[]},"HtmlMemoryChart":{"CoreElement":[]},"HtmlMemoryDataView":{"CoreElementView":[]},"MemoryDataChildProvider":{"ChildProvider":["BoundField"]},"HtmlInboundsTree":{"CoreElement":[]},"InboundsTreeNode":{"TreeNode0":["InboundsTreeNode"],"TreeNode0.T":"InboundsTreeNode"},"HtmlInstanceRefsView":{"CoreElement":[]},"ClassNameColumn":{"TreeColumnData":["InboundsTreeNode"],"ColumnData":["InboundsTreeNode"],"ColumnData.T":"InboundsTreeNode","TreeColumnData.T":"InboundsTreeNode"},"FieldNameColumn":{"ColumnData":["InboundsTreeNode"],"ColumnData.T":"InboundsTreeNode"},"HtmlMemoryScreen":{"HtmlScreen":[],"HtmlSetStateMixin":[]},"MemoryColumnClassName":{"ColumnData":["ClassHeapDetailStats"],"ColumnData.T":"ClassHeapDetailStats"},"MemoryColumnSize":{"ColumnData":["ClassHeapDetailStats"],"ColumnData.T":"ClassHeapDetailStats"},"MemoryColumnInstanceCount":{"ColumnData":["ClassHeapDetailStats"],"ColumnData.T":"ClassHeapDetailStats"},"MemoryColumnInstanceAccumulatedCount":{"ColumnData":["ClassHeapDetailStats"],"ColumnData.T":"ClassHeapDetailStats"},"InboundReferences0":{"Response":[]},"InboundReference0":{"Response":[]},"HtmlPerformanceScreen":{"HtmlScreen":[]},"_HtmlCpuProfiler":{"HtmlCpuProfiler":[],"CoreElement":[]},"SelfTimeColumn":{"ColumnData":["CpuStackFrame"],"ColumnData.T":"CpuStackFrame"},"TotalTimeColumn":{"ColumnData":["CpuStackFrame"],"ColumnData.T":"CpuStackFrame"},"MethodNameColumn":{"TreeColumnData":["CpuStackFrame"],"ColumnData":["CpuStackFrame"],"ColumnData.T":"CpuStackFrame","TreeColumnData.T":"CpuStackFrame"},"SourceColumn":{"ColumnData":["CpuStackFrame"],"ColumnData.T":"CpuStackFrame"},"CpuStackFrame":{"TreeNode0":["CpuStackFrame"],"TreeNode0.T":"CpuStackFrame"},"HtmlCpuFlameChart":{"HtmlCpuProfilerView":[],"CoreElement":[]},"CpuFlameChartCanvas":{"FlameChartCanvas":["CpuProfileData"],"FlameChart":["@"],"FlameChart.T":"@"},"HtmlCpuCallTree":{"HtmlCpuProfilerView":[],"CoreElement":[]},"HtmlCpuBottomUp":{"HtmlCpuProfilerView":[],"CoreElement":[]},"HtmlCpuProfiler":{"CoreElement":[]},"HtmlCpuProfilerView":{"CoreElement":[]},"CpuProfilerTab":{"PTabNavTab":[],"CoreElement":[]},"ToggleableServiceExtensionDescription":{"ServiceExtensionDescription":["@"],"ServiceExtensionDescription.T":"@"},"ServiceExtensionDescription":{"ServiceExtensionDescription.T":"1"},"StreamValueListenable":{"ValueListenable":["1"],"Listenable":[]},"TreeTableData":{"TableData":["1"]},"TreeColumnData":{"ColumnData":["1"]},"HtmlEventDetails":{"CoreElement":[]},"_CpuProfiler":{"HtmlCpuProfiler":[],"CoreElement":[]},"HtmlEventSummary":{"CoreElement":[]},"FramesBarChart":{"CoreElement":[],"HtmlSetStateMixin":[]},"PlotlyDivGraph":{"CoreElement":[]},"FrameBasedTimeline":{"TimelineBase":["FrameBasedTimelineData","FrameBasedTimelineProcessor"],"TimelineBase.V":"FrameBasedTimelineProcessor","TimelineBase.T":"FrameBasedTimelineData"},"FullTimeline":{"TimelineBase":["FullTimelineData","FullTimelineProcessor"],"TimelineBase.V":"FullTimelineProcessor","TimelineBase.T":"FullTimelineData"},"FrameBasedTimelineFlameChartCanvas":{"FlameChartCanvas":["TimelineFrame"],"FlameChart":["@"],"FlameChart.T":"@"},"FullTimelineFlameChartCanvas":{"FlameChartCanvas":["FullTimelineData"],"FlameChart":["@"],"FlameChart.T":"@"},"FrameBasedTimelineData":{"TimelineData":[]},"FullTimelineData":{"TimelineData":[]},"OfflineFrameBasedTimelineData":{"FrameBasedTimelineData":[],"OfflineData":["OfflineFrameBasedTimelineData"],"TimelineData":[]},"OfflineFullTimelineData":{"FullTimelineData":[],"OfflineData":["OfflineFullTimelineData"],"TimelineData":[]},"OfflineData":{"TimelineData":[]},"OfflineTimelineEvent":{"TimelineEvent0":[],"TreeNode0":["TimelineEvent0"],"TreeNode0.T":"TimelineEvent0"},"TimelineEvent0":{"TreeNode0":["TimelineEvent0"]},"SyncTimelineEvent":{"TimelineEvent0":[],"TreeNode0":["TimelineEvent0"],"TreeNode0.T":"TimelineEvent0"},"AsyncTimelineEvent":{"TimelineEvent0":[],"TreeNode0":["TimelineEvent0"],"TreeNode0.T":"TimelineEvent0"},"FrameBasedTimelineProcessor":{"TimelineProcessor":[]},"FullTimelineProcessor":{"TimelineProcessor":[]},"HtmlTimelineScreen":{"HtmlScreen":[]},"TraceEventWrapper":{"Comparable":["TraceEventWrapper"]},"ValueListenable":{"Listenable":[]},"ChangeNotifier":{"Listenable":[]},"ValueNotifier":{"ValueListenable":["1"],"Listenable":[]},"DiagnosticsProperty":{"DiagnosticsNode":[]},"DiagnosticableNode":{"DiagnosticsNode":[],"DiagnosticableNode.T":"1"},"DiagnosticableTreeNode":{"DiagnosticableNode":["DiagnosticableTree"],"DiagnosticsNode":[],"DiagnosticableNode.T":"DiagnosticableTree"},"MaterialColor":{"ColorSwatch":["int"],"Color":[],"ColorSwatch.T":"int"},"MaterialAccentColor":{"ColorSwatch":["int"],"Color":[],"ColorSwatch.T":"int"},"ColorSwatch":{"Color":[]},"Offset":{"OffsetBase":[]},"Size":{"OffsetBase":[]},"HtmlProgressElement":{"CoreElement":[]},"HtmlSpinner":{"CoreElement":[]},"HtmlSelectableList":{"CoreElement":[]},"HtmlSelectableTree":{"CoreElement":[],"Tree":["HtmlSelectableTreeNodeItem<1>"],"TreeNavigator":["HtmlSelectableTreeNodeItem<1>"],"Tree.T":"HtmlSelectableTreeNodeItem<1>","TreeNavigator.T":"HtmlSelectableTreeNodeItem<1>"},"HtmlTreeToggle":{"CoreElement":[]},"HtmlActionButton":{"CoreElementView":[]},"TextField":{"CoreElement":[]},"TrustedHtmlTreeSanitizer":{"NodeTreeSanitizer":[]},"_UrlIconRenderer":{"HtmlIconRenderer":["UrlIcon"],"HtmlIconRenderer.T":"UrlIcon"},"_ColorIconRenderer":{"HtmlIconRenderer":["ColorIcon"],"HtmlIconRenderer.T":"ColorIcon"},"_CustomIconRenderer":{"HtmlIconRenderer":["CustomIcon"],"HtmlIconRenderer.T":"CustomIcon"},"_MaterialIconRenderer":{"HtmlIconRenderer":["MaterialIcon"],"HtmlIconRenderer.T":"MaterialIcon"},"UrlIcon":{"DevToolsIcon":[]},"CustomIcon":{"DevToolsIcon":[]},"ColorIcon":{"DevToolsIcon":[]},"MaterialIcon":{"DevToolsIcon":[]},"PSelect":{"CoreElement":[]},"PButton":{"CoreElement":[]},"PFlash":{"CoreElement":[]},"PTabNav":{"CoreElement":[]},"PTabNavTab":{"CoreElement":[]},"PNavMenu":{"CoreElement":[]},"PNavMenuItem":{"CoreElement":[]},"ThemedColor":{"Color":[]},"ViewportCanvas":{"HtmlSetStateMixin":[]},"Reporter":{"Listenable":[]},"ImmediateValueNotifier":{"ValueNotifier":["1"],"ValueListenable":["1"],"Listenable":[]},"FlutterVersion":{"SemanticVersion":[],"Comparable":["@"]},"SemanticVersion":{"Comparable":["@"]},"VmServiceWrapper":{"VmService":[]},"BaseClient":{"Client0":[]},"BrowserClient":{"Client0":[]},"ByteStream":{"StreamView":["List<int>"],"Stream":["List<int>"],"Stream.T":"List<int>","StreamView.T":"List<int>"},"ClientException":{"Exception":[]},"Request":{"BaseRequest":[]},"CaseInsensitiveMap":{"CanonicalizedMap":["String","String","1"],"Map":["String","1"],"CanonicalizedMap.K":"String","CanonicalizedMap.V":"1","CanonicalizedMap.C":"String"},"_DateFormatLiteralField":{"_DateFormatField":[]},"_DateFormatQuotedField":{"_DateFormatField":[]},"_DateFormatPatternField":{"_DateFormatField":[]},"_StringIterable":{"Iterable":["String"],"Iterable.E":"String"},"_StringIterator":{"Iterator":["String"]},"LocaleDataException":{"Exception":[]},"Level":{"Comparable":["Level"]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"_Chrome":{"Browser":[]},"_Firefox":{"Browser":[]},"_Safari":{"Browser":[]},"_WKWebView":{"Browser":[]},"_InternetExplorer":{"Browser":[]},"_HtmlNavigator":{"NavigatorProvider":[]},"Version0":{"VersionRange":[],"Comparable":["VersionRange"]},"VersionRange":{"Comparable":["VersionRange"]},"FileLocation":{"SourceLocation0":[],"Comparable":["SourceLocation0"]},"FileSpan":{"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation0":{"Comparable":["SourceLocation0"]},"SourceLocationMixin":{"SourceLocation0":[],"Comparable":["SourceLocation0"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SseClient":{"StreamChannel":["String"]},"GuaranteeChannel":{"StreamChannel":["1"]},"_GuaranteeSink":{"StreamSink":["1"]},"_StreamChannel":{"StreamChannel":["1"]},"StreamChannelMixin":{"StreamChannel":["1"]},"StringScannerException":{"FormatException":[],"Exception":[]},"RPCError":{"Exception":[]},"SentinelException":{"Exception":[]},"_NullLog":{"Log":[]},"AllocationProfile":{"Response":[]},"BoundVariable":{"Response":[]},"Breakpoint":{"Obj":[],"ObjRef":[],"Response":[]},"ClassRef":{"ObjRef":[],"Response":[]},"Class":{"Obj":[],"ClassRef":[],"ObjRef":[],"Response":[]},"ClassHeapStats":{"Response":[]},"ClassList":{"Response":[]},"ClientName":{"Response":[]},"CodeRef":{"ObjRef":[],"Response":[]},"Code":{"CodeRef":[],"ObjRef":[],"Response":[]},"ContextRef":{"ObjRef":[],"Response":[]},"Context":{"Obj":[],"ContextRef":[],"ObjRef":[],"Response":[]},"CpuSamples":{"Response":[]},"ErrorRef":{"ObjRef":[],"Response":[]},"Error":{"Obj":[],"ErrorRef":[],"ObjRef":[],"Response":[]},"Event":{"Response":[]},"FieldRef":{"ObjRef":[],"Response":[]},"Field":{"Obj":[],"FieldRef":[],"ObjRef":[],"Response":[]},"FlagList":{"Response":[]},"Frame":{"Response":[]},"FuncRef":{"ObjRef":[],"Response":[]},"Func":{"Obj":[],"FuncRef":[],"ObjRef":[],"Response":[]},"InstanceRef":{"ObjRef":[],"Response":[]},"Instance":{"Obj":[],"InstanceRef":[],"ObjRef":[],"Response":[]},"IsolateRef":{"Response":[]},"Isolate":{"IsolateRef":[],"Response":[]},"IsolateGroupRef":{"Response":[]},"IsolateGroup":{"IsolateGroupRef":[],"Response":[]},"InboundReferences":{"Response":[]},"InstanceSet":{"Response":[]},"LibraryRef":{"ObjRef":[],"Response":[]},"Library":{"Obj":[],"LibraryRef":[],"ObjRef":[],"Response":[]},"LogRecord":{"Response":[]},"MemoryUsage":{"Response":[]},"Message":{"Response":[]},"NullValRef":{"InstanceRef":[],"ObjRef":[],"Response":[]},"NullVal":{"Instance":[],"NullValRef":[],"Obj":[],"InstanceRef":[],"ObjRef":[],"Response":[]},"ObjRef":{"Response":[]},"Obj":{"ObjRef":[],"Response":[]},"ReloadReport":{"Response":[]},"RetainingPath":{"Response":[]},"Sentinel":{"Response":[]},"ScriptRef":{"ObjRef":[],"Response":[]},"Script":{"Obj":[],"ScriptRef":[],"ObjRef":[],"Response":[]},"ScriptList":{"Response":[]},"SourceLocation":{"Response":[]},"SourceReport":{"Response":[]},"Stack":{"Response":[]},"Success":{"Response":[]},"Timeline":{"Response":[]},"TimelineFlags":{"Response":[]},"Timestamp":{"Response":[]},"TypeArgumentsRef":{"ObjRef":[],"Response":[]},"TypeArguments":{"Obj":[],"TypeArgumentsRef":[],"ObjRef":[],"Response":[]},"UnresolvedSourceLocation":{"Response":[]},"Version":{"Response":[]},"VMRef":{"Response":[]},"VM":{"VMRef":[],"Response":[]},"HtmlWebSocketChannel":{"StreamChannel":["@"]},"_HtmlWebSocketSink":{"WebSocketSink":[],"DelegatingStreamSink":["@"],"StreamSink":["@"],"DelegatingStreamSink.T":"@"},"WebSocketChannel":{"StreamChannel":["@"]},"WebSocketSink":{"DelegatingStreamSink":["@"],"StreamSink":["@"],"DelegatingStreamSink.T":"@"},"WebSocketChannelException":{"Exception":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"IterableBase":1,"ListBase":1,"MapBase":2,"SetBase":1,"_ListBase_Object_ListMixin":1,"_SetBase_Object_SetMixin":1,"_SplayTreeMap__SplayTree_MapMixin":2,"_JsArray_JsObject_ListMixin":1,"_RectangleBase":1,"_HtmlSelectableTree_CoreElement_Tree":1,"_HtmlSelectableTree_CoreElement_Tree_TreeNavigator":1,"_HtmlSelectableTree_CoreElement_Tree_TreeNavigator_HtmlTreeNavigator":1,"HtmlTreeNavigator":1,"StreamChannelMixin":1}'));
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      $env_1_1_String: findType("@<String>"),
      AllocationProfile: findType("AllocationProfile"),
      AnsiUpColor: findType("AnsiUpColor"),
      AsyncError: findType("AsyncError"),
      AsyncTimelineEvent: findType("AsyncTimelineEvent"),
      BaseElement: findType("BaseElement"),
      Blob: findType("Blob"),
      BodyElement: findType("BodyElement"),
      BoundField: findType("BoundField"),
      BoundVariable: findType("BoundVariable"),
      Breakpoint: findType("Breakpoint"),
      Browser: findType("Browser"),
      BusEvent: findType("BusEvent"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CanvasImageSource: findType("CanvasImageSource"),
      Catalog: findType("Catalog"),
      Category: findType("Category"),
      CheckboxInputElement: findType("CheckboxInputElement"),
      Class: findType("Class"),
      ClassHeapDetailStats: findType("ClassHeapDetailStats"),
      ClassHeapStats: findType("ClassHeapStats"),
      ClassRef: findType("ClassRef"),
      CloseEvent: findType("CloseEvent"),
      CodeRef: findType("CodeRef"),
      CodeUnits: findType("CodeUnits"),
      Color: findType("Color"),
      Comparable_dynamic: findType("Comparable<@>"),
      Completer_LibraryRef: findType("Completer<LibraryRef>"),
      Completer_VmService: findType("Completer<VmService>"),
      Completer_dynamic: findType("Completer<@>"),
      ConnectVmEvent: findType("ConnectVmEvent"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_Null: findType("ConstantStringMap<String,Null>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      Context: findType("Context"),
      ContextElement: findType("ContextElement"),
      ContextRef: findType("ContextRef"),
      CoreElement: findType("CoreElement"),
      CoreElementView: findType("CoreElementView"),
      CoreElement_Function_ScriptRef: findType("CoreElement(ScriptRef)"),
      CpuProfileData: findType("CpuProfileData"),
      CpuProfilerTab: findType("CpuProfilerTab"),
      CpuSample: findType("CpuSample"),
      CpuSamples: findType("CpuSamples"),
      CpuStackFrame: findType("CpuStackFrame"),
      CssRule: findType("CssRule"),
      CustomIcon: findType("CustomIcon"),
      Data: findType("Data"),
      DataEvent: findType("DataEvent"),
      DateSymbols: findType("DateSymbols"),
      DateTime: findType("DateTime"),
      DevToolsServerConnection: findType("DevToolsServerConnection"),
      DiagnosticsNode: findType("DiagnosticsNode"),
      Document: findType("Document"),
      DomException: findType("DomException"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Element: findType("Element"),
      Encoding: findType("Encoding"),
      Error: findType("Error0"),
      ErrorEvent: findType("ErrorEvent"),
      ErrorRef: findType("ErrorRef"),
      Error_2: findType("Error"),
      Event: findType("Event0"),
      EventTarget: findType("EventTarget"),
      Event_2: findType("Event"),
      Exception: findType("Exception"),
      FieldRef: findType("FieldRef"),
      File: findType("File"),
      FileList: findType("FileList"),
      FileSpan: findType("FileSpan"),
      Flag: findType("Flag"),
      FlagList: findType("FlagList"),
      FlameChartNode_dynamic: findType("FlameChartNode<@>"),
      FlameChartSection: findType("FlameChartSection"),
      FlutterWidget: findType("FlutterWidget"),
      FontFace: findType("FontFace"),
      FormatException: findType("FormatException"),
      Frame: findType("Frame"),
      FrameworkController: findType("FrameworkController"),
      FullTimelineData: findType("FullTimelineData"),
      FullTimelineEventGroup: findType("FullTimelineEventGroup"),
      FuncRef: findType("FuncRef"),
      Function: findType("Function"),
      FutureOr_InstanceRef: findType("InstanceRef/"),
      Future_CanvasImageSource: findType("Future<CanvasImageSource>"),
      Future_InboundReferences: findType("Future<InboundReferences>"),
      Future_List_RemoteDiagnosticsNode: findType("Future<List<RemoteDiagnosticsNode>>"),
      Future_Map_String_InstanceRef: findType("Future<Map<String,InstanceRef>>"),
      Future_Map_String_dynamic_Function_Map_String_dynamic: findType("Future<Map<String,@>>(Map<String,@>)"),
      Future_Null: findType("Future<Null>"),
      Future_Null_Function_String: findType("Future<Null>(String)"),
      Future_String_Function: findType("Future<String>()"),
      Future_Success: findType("Future<Success>"),
      Future_bool: findType("Future<bool>"),
      Future_dynamic: findType("Future<@>"),
      Future_dynamic_Function: findType("Future<@>()"),
      Future_dynamic_Function_dynamic: findType("Future<@>(@)"),
      Gamepad: findType("Gamepad"),
      GeneralConstantMap_int_Color: findType("GeneralConstantMap<int,Color>"),
      HeapPriorityQueue_TraceEventWrapper: findType("HeapPriorityQueue<TraceEventWrapper>"),
      HeapSpace: findType("HeapSpace"),
      HexCodec: findType("HexCodec"),
      HorizontalLineSegment: findType("HorizontalLineSegment"),
      HtmlActionButton: findType("HtmlActionButton"),
      HtmlAutoCompleteMatcher_dynamic: findType("HtmlAutoCompleteMatcher<@>"),
      HtmlCpuProfilerView: findType("HtmlCpuProfilerView"),
      HtmlDebuggerScreen: findType("HtmlDebuggerScreen"),
      HtmlHoverCell_InstanceSummary: findType("HtmlHoverCell<InstanceSummary>"),
      HtmlInboundsTree: findType("HtmlInboundsTree"),
      HtmlLoggingScreen: findType("HtmlLoggingScreen"),
      HtmlMessage: findType("HtmlMessage"),
      HtmlPopupListView_String: findType("HtmlPopupListView<String>"),
      HtmlScreen: findType("HtmlScreen"),
      HtmlScriptsView: findType("HtmlScriptsView"),
      HtmlSelectableList_Breakpoint: findType("HtmlSelectableList<Breakpoint>"),
      HtmlSelectableList_Frame: findType("HtmlSelectableList<Frame>"),
      HtmlSelectableList_ScriptRef: findType("HtmlSelectableList<ScriptRef>"),
      HtmlSelectableTree_BoundField: findType("HtmlSelectableTree<BoundField>"),
      HtmlSelectableTree_BoundVariable: findType("HtmlSelectableTree<BoundVariable>"),
      HtmlSpinner: findType("HtmlSpinner"),
      HtmlStatus: findType("HtmlStatus"),
      HtmlTable_LogData: findType("HtmlTable<LogData>"),
      HtmlTable_dynamic: findType("HtmlTable<@>"),
      HtmlTimelineScreen: findType("HtmlTimelineScreen"),
      HtmlTreeTable_CpuStackFrame: findType("HtmlTreeTable<CpuStackFrame>"),
      HtmlTreeTable_InboundsTreeNode: findType("HtmlTreeTable<InboundsTreeNode>"),
      HttpRequest: findType("HttpRequest"),
      ImageData: findType("ImageData"),
      ImmediateValueNotifier_bool: findType("ImmediateValueNotifier<bool>"),
      InboundReference: findType("InboundReference"),
      InboundReference_2: findType("InboundReference0"),
      InboundReferences: findType("InboundReferences0"),
      InboundReferences_2: findType("InboundReferences"),
      InboundsTreeNode: findType("InboundsTreeNode"),
      InputElement: findType("InputElement"),
      InspectorInstanceRef: findType("InspectorInstanceRef"),
      InspectorService: findType("InspectorService"),
      InspectorServiceClient: findType("InspectorServiceClient"),
      InspectorSourceLocation: findType("InspectorSourceLocation"),
      InspectorTreeController: findType("InspectorTreeController"),
      InspectorTreeNode: findType("InspectorTreeNode"),
      InspectorTreeNodeCanvas: findType("InspectorTreeNodeCanvas"),
      InspectorTreeNodeCanvasRender: findType("InspectorTreeNodeCanvasRender"),
      InspectorTreeNodeHtml: findType("InspectorTreeNodeHtml"),
      InspectorTreeNodeHtmlRender: findType("InspectorTreeNodeHtmlRender"),
      InspectorTreeNodeRenderBuilder_InspectorTreeNodeRender_dynamic: findType("InspectorTreeNodeRenderBuilder<InspectorTreeNodeRender<@>>"),
      InspectorTreeWeb: findType("InspectorTreeWeb"),
      Instance: findType("Instance"),
      InstanceRef: findType("InstanceRef"),
      InstanceSet: findType("InstanceSet"),
      InstanceSummary: findType("InstanceSummary"),
      Invocation: findType("Invocation"),
      Isolate: findType("Isolate"),
      IsolateGroupRef: findType("IsolateGroupRef"),
      IsolateRef: findType("IsolateRef"),
      IterableEquality_dynamic: findType("IterableEquality<@>"),
      Iterable_Element: findType("Iterable<Element>"),
      Iterable_InboundReference: findType("Iterable<InboundReference0>"),
      Iterable_Node: findType("Iterable<Node>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_AnsiUpColor: findType("JSArray<AnsiUpColor>"),
      JSArray_BoundField: findType("JSArray<BoundField>"),
      JSArray_BoundVariable: findType("JSArray<BoundVariable>"),
      JSArray_Breakpoint: findType("JSArray<Breakpoint>"),
      JSArray_CanvasPaintEntry: findType("JSArray<CanvasPaintEntry>"),
      JSArray_ClassHeapDetailStats: findType("JSArray<ClassHeapDetailStats>"),
      JSArray_CoreElement: findType("JSArray<CoreElement>"),
      JSArray_CpuProfilerTab: findType("JSArray<CpuProfilerTab>"),
      JSArray_CpuStackFrame: findType("JSArray<CpuStackFrame>"),
      JSArray_Data: findType("JSArray<Data>"),
      JSArray_DiagnosticsNode: findType("JSArray<DiagnosticsNode>"),
      JSArray_Element: findType("JSArray<Element>"),
      JSArray_FlameChartNode_dynamic: findType("JSArray<FlameChartNode<@>>"),
      JSArray_FlameChartRow: findType("JSArray<FlameChartRow>"),
      JSArray_FlameChartSection: findType("JSArray<FlameChartSection>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_FullTimelineRowData: findType("JSArray<FullTimelineRowData>"),
      JSArray_Future_bool: findType("JSArray<Future<bool>>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_HeapSample: findType("JSArray<HeapSample>"),
      JSArray_HeapSpace: findType("JSArray<HeapSpace>"),
      JSArray_HorizontalLineSegment: findType("JSArray<HorizontalLineSegment>"),
      JSArray_HoverFX: findType("JSArray<HoverFX>"),
      JSArray_HtmlActionButton: findType("JSArray<HtmlActionButton>"),
      JSArray_HtmlCpuProfilerView: findType("JSArray<HtmlCpuProfilerView>"),
      JSArray_HtmlPaintEntry: findType("JSArray<HtmlPaintEntry>"),
      JSArray_HtmlScreen: findType("JSArray<HtmlScreen>"),
      JSArray_HtmlScriptsView: findType("JSArray<HtmlScriptsView>"),
      JSArray_HtmlStatusItem: findType("JSArray<HtmlStatusItem>"),
      JSArray_InboundReference: findType("JSArray<InboundReference0>"),
      JSArray_InboundsTreeNode: findType("JSArray<InboundsTreeNode>"),
      JSArray_InspectorSourceLocation: findType("JSArray<InspectorSourceLocation>"),
      JSArray_InspectorTreeNode: findType("JSArray<InspectorTreeNode>"),
      JSArray_InspectorTreeRow: findType("JSArray<InspectorTreeRow>"),
      JSArray_InstanceSummary: findType("JSArray<InstanceSummary>"),
      JSArray_IsolateRef: findType("JSArray<IsolateRef>"),
      JSArray_Library: findType("JSArray<Library>"),
      JSArray_List_AnsiUpColor: findType("JSArray<List<AnsiUpColor>>"),
      JSArray_List_String: findType("JSArray<List<String>>"),
      JSArray_List_TimelineEvent: findType("JSArray<List<TimelineEvent0>>"),
      JSArray_List_dynamic: findType("JSArray<List<@>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_Listenable: findType("JSArray<Listenable>"),
      JSArray_LogData: findType("JSArray<LogData>"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_Map_dynamic_dynamic: findType("JSArray<Map<@,@>>"),
      JSArray_NavigationState: findType("JSArray<NavigationState>"),
      JSArray_NodeValidator: findType("JSArray<NodeValidator>"),
      JSArray_PButton: findType("JSArray<PButton>"),
      JSArray_PTabNavTab: findType("JSArray<PTabNavTab>"),
      JSArray_Position: findType("JSArray<Position>"),
      JSArray_RemoteDiagnosticsNode: findType("JSArray<RemoteDiagnosticsNode>"),
      JSArray_ScriptRef: findType("JSArray<ScriptRef>"),
      JSArray_SelectTrace: findType("JSArray<SelectTrace>"),
      JSArray_Shape: findType("JSArray<Shape>"),
      JSArray_StreamSubscription_dynamic: findType("JSArray<StreamSubscription<@>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_SyncTimelineEvent: findType("JSArray<SyncTimelineEvent>"),
      JSArray_TextMarker: findType("JSArray<TextMarker>"),
      JSArray_ThemedColor: findType("JSArray<ThemedColor>"),
      JSArray_TimelineBase_TimelineData_TimelineProcessor: findType("JSArray<TimelineBase<TimelineData,TimelineProcessor>>"),
      JSArray_TimelineEvent: findType("JSArray<TimelineEvent0>"),
      JSArray_TimelineFrame: findType("JSArray<TimelineFrame>"),
      JSArray_TraceEvent: findType("JSArray<TraceEvent>"),
      JSArray_TraceEventWrapper: findType("JSArray<TraceEventWrapper>"),
      JSArray_VerticalLineSegment: findType("JSArray<VerticalLineSegment>"),
      JSArray__CpuProfileTimelineTree: findType("JSArray<_CpuProfileTimelineTree>"),
      JSArray__DateFormatField: findType("JSArray<_DateFormatField>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_num: findType("JSArray<num>"),
      JSArray_of__DateFormatField_Function_String_DateFormat: findType("JSArray<_DateFormatField(String,DateFormat)>"),
      JSArray_of_void_Function: findType("JSArray<~()>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsArray_dynamic: findType("JsArray<@>"),
      JsEventListener_dynamic: findType("JsEventListener<@>"),
      JsFunction: findType("JsFunction"),
      JsLinkedHashMap_String_dynamic: findType("JsLinkedHashMap<String,@>"),
      JsLinkedHashMap_String_int: findType("JsLinkedHashMap<String,int>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      JsObject: findType("JsObject"),
      KeyRange: findType("KeyRange"),
      KeyboardEvent: findType("KeyboardEvent"),
      Layout: findType("Layout"),
      Length: findType("Length"),
      Level: findType("Level"),
      Library: findType("Library"),
      LibraryDependency: findType("LibraryDependency"),
      LibraryRef: findType("LibraryRef"),
      ListEquality_dynamic: findType("ListEquality<@>"),
      List_AnsiUpColor: findType("List<AnsiUpColor>"),
      List_BoundField: findType("List<BoundField>"),
      List_BoundVariable: findType("List<BoundVariable>"),
      List_Breakpoint: findType("List<Breakpoint>"),
      List_ClassHeapDetailStats: findType("List<ClassHeapDetailStats>"),
      List_ClassHeapStats: findType("List<ClassHeapStats>"),
      List_ClassRef: findType("List<ClassRef>"),
      List_ContextElement: findType("List<ContextElement>"),
      List_CoreElement: findType("List<CoreElement>"),
      List_CpuSample: findType("List<CpuSample>"),
      List_Data: findType("List<Data>"),
      List_Element: findType("List<Element>"),
      List_FieldRef: findType("List<FieldRef>"),
      List_Flag: findType("List<Flag>"),
      List_Frame: findType("List<Frame>"),
      List_FuncRef: findType("List<FuncRef>"),
      List_HeapSpace: findType("List<HeapSpace>"),
      List_HtmlCpuProfilerView: findType("List<HtmlCpuProfilerView>"),
      List_HtmlScriptsView: findType("List<HtmlScriptsView>"),
      List_HtmlStatusItem: findType("List<HtmlStatusItem>"),
      List_InboundReference: findType("List<InboundReference>"),
      List_InboundsTreeNode: findType("List<InboundsTreeNode>"),
      List_InspectorTreeNode: findType("List<InspectorTreeNode>"),
      List_InstanceRef: findType("List<InstanceRef>"),
      List_InstanceSummary: findType("List<InstanceSummary>"),
      List_Isolate: findType("List<Isolate>"),
      List_IsolateGroupRef: findType("List<IsolateGroupRef>"),
      List_IsolateRef: findType("List<IsolateRef>"),
      List_Library: findType("List<Library>"),
      List_LibraryDependency: findType("List<LibraryDependency>"),
      List_LibraryRef: findType("List<LibraryRef>"),
      List_LineSegment: findType("List<LineSegment>"),
      List_List_AnsiUpColor: findType("List<List<AnsiUpColor>>"),
      List_List_TimelineEvent: findType("List<List<TimelineEvent0>>"),
      List_List_int: findType("List<List<int>>"),
      List_LogData: findType("List<LogData>"),
      List_MapAssociation: findType("List<MapAssociation>"),
      List_Map_String_dynamic: findType("List<Map<String,@>>"),
      List_Message: findType("List<Message>"),
      List_ObjRef: findType("List<ObjRef>"),
      List_Object: findType("List<Object>"),
      List_ProfileFunction: findType("List<ProfileFunction>"),
      List_RemoteDiagnosticsNode: findType("List<RemoteDiagnosticsNode>"),
      List_RetainingObject: findType("List<RetainingObject>"),
      List_ScriptRef: findType("List<ScriptRef>"),
      List_SelectTrace: findType("List<SelectTrace>"),
      List_SourceReportRange: findType("List<SourceReportRange>"),
      List_String: findType("List<String>"),
      List_TimelineBase_TimelineData_TimelineProcessor: findType("List<TimelineBase<TimelineData,TimelineProcessor>>"),
      List_TimelineEvent: findType("List<TimelineEvent>"),
      List_TraceEventWrapper: findType("List<TraceEventWrapper>"),
      List__DateFormatField: findType("List<_DateFormatField>"),
      List__Highlight: findType("List<_Highlight>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_num: findType("List<num>"),
      LogData: findType("LogData"),
      LogRecord: findType("LogRecord"),
      Logger: findType("Logger"),
      MapAssociation: findType("MapAssociation"),
      MapEquality_dynamic_dynamic: findType("MapEquality<@,@>"),
      Map_String_InstanceRef: findType("Map<String,InstanceRef>"),
      Map_String_Object: findType("Map<String,Object>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_String_int: findType("Map<String,int>"),
      Map_Symbol_dynamic: findType("Map<Symbol0,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedListIterable_String_Object: findType("MappedListIterable<String,Object>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable_of_List_String_and_String: findType("MappedListIterable<List<String>,String>"),
      MappedListIterable_of_String_and_Future_Null: findType("MappedListIterable<String,Future<Null>>"),
      MediaType: findType("MediaType"),
      MemoryTracker: findType("MemoryTracker"),
      MemoryUsage: findType("MemoryUsage"),
      Message: findType("Message"),
      MessageBus: findType("MessageBus"),
      MessageEvent: findType("MessageEvent"),
      MessagePort: findType("MessagePort"),
      MimeType: findType("MimeType"),
      MouseEvent: findType("MouseEvent"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      NavigatorProvider: findType("NavigatorProvider"),
      Node: findType("Node"),
      NodeValidator: findType("NodeValidator"),
      Null: findType("Null"),
      NullValRef: findType("NullValRef"),
      Null_Function_String_int_dynamic: findType("Null(String,int,@)"),
      Number: findType("Number"),
      Obj: findType("Obj"),
      ObjRef: findType("ObjRef"),
      Object: findType("Object"),
      Object_Function_String: findType("Object(String)"),
      OfflineData_TimelineData: findType("OfflineData<TimelineData>"),
      Offset: findType("Offset"),
      OffsetBase: findType("OffsetBase"),
      OptionElement: findType("OptionElement"),
      PTabNavTab: findType("PTabNavTab"),
      Pattern: findType("Pattern"),
      Plugin: findType("Plugin"),
      Point_num: findType("Point<num>"),
      PopStateEvent: findType("PopStateEvent"),
      Position: findType("Position"),
      PresentationConnection: findType("PresentationConnection"),
      ProfileFunction: findType("ProfileFunction"),
      ProgressEvent: findType("ProgressEvent"),
      Property_bool: findType("Property<bool>"),
      Rect: findType("Rect"),
      Rectangle_num: findType("Rectangle<num>"),
      RegExp: findType("RegExp"),
      RemoteDiagnosticsNode: findType("RemoteDiagnosticsNode"),
      ResizeObserver: findType("ResizeObserver"),
      Response: findType("Response0"),
      Response_2: findType("Response"),
      RetainingObject: findType("RetainingObject"),
      Rti: findType("Rti"),
      Runes: findType("Runes"),
      Script: findType("Script"),
      ScriptElement: findType("ScriptElement0"),
      ScriptList: findType("ScriptList"),
      ScriptRef: findType("ScriptRef"),
      SelectElement: findType("SelectElement"),
      ServiceConnectionManager: findType("ServiceConnectionManager"),
      ServiceExtensionDescription_dynamic: findType("ServiceExtensionDescription<@>"),
      ServiceExtensionState: findType("ServiceExtensionState"),
      SetEquality_dynamic: findType("SetEquality<@>"),
      Set_HtmlMessage: findType("Set<HtmlMessage>"),
      Set_String: findType("Set<String>"),
      Set_dynamic: findType("Set<@>"),
      Size: findType("Size"),
      SourceBuffer: findType("SourceBuffer"),
      SourceLocation: findType("SourceLocation"),
      SourceLocation_2: findType("SourceLocation0"),
      SourceReportCoverage: findType("SourceReportCoverage"),
      SourceReportRange: findType("SourceReportRange"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      SpeechGrammar: findType("SpeechGrammar"),
      SpeechRecognitionResult: findType("SpeechRecognitionResult"),
      Stack: findType("Stack"),
      StackTrace: findType("StackTrace"),
      StreamChannelController_dynamic: findType("StreamChannelController<@>"),
      StreamController_BusEvent: findType("StreamController<BusEvent>"),
      StreamController_Event: findType("StreamController<Event>"),
      StreamController_ServiceExtensionState: findType("StreamController<ServiceExtensionState>"),
      StreamController_bool: findType("StreamController<bool>"),
      StreamSubscription_Event: findType("StreamSubscription<Event>"),
      StreamSubscription_IsolateRef: findType("StreamSubscription<IsolateRef>"),
      StreamSubscription_MouseEvent: findType("StreamSubscription<MouseEvent>"),
      StreamSubscription_TouchEvent: findType("StreamSubscription<TouchEvent>"),
      StreamSubscription_dynamic: findType("StreamSubscription<@>"),
      StreamValueListenable_bool: findType("StreamValueListenable<bool>"),
      StreamView_dynamic: findType("StreamView<@>"),
      StreamedResponse: findType("StreamedResponse"),
      String: findType("String"),
      StringBuffer: findType("StringBuffer"),
      String_Function_List_String: findType("String(List<String>)"),
      String_Function_Match: findType("String(Match)"),
      String_Function_String: findType("String(String)"),
      StyleSheet: findType("StyleSheet"),
      StyledText: findType("StyledText"),
      Success: findType("Success"),
      SvgElement: findType("SvgElement"),
      Symbol: findType("Symbol0"),
      SyncTimelineEvent: findType("SyncTimelineEvent"),
      TableData_LogData: findType("TableData<LogData>"),
      TemplateElement: findType("TemplateElement"),
      TextMarker: findType("TextMarker"),
      TextStyle: findType("TextStyle"),
      TextTrack: findType("TextTrack"),
      TextTrackCue: findType("TextTrackCue"),
      Timeline: findType("Timeline"),
      TimelineBase_TimelineData_TimelineProcessor: findType("TimelineBase<TimelineData,TimelineProcessor>"),
      TimelineEvent: findType("TimelineEvent"),
      TimelineEventType: findType("TimelineEventType"),
      TimelineEvent_2: findType("TimelineEvent0"),
      TimelineFlags: findType("TimelineFlags"),
      TimelineFrame: findType("TimelineFrame"),
      Timer: findType("Timer"),
      Touch: findType("Touch"),
      TouchEvent: findType("TouchEvent"),
      TraceEvent: findType("TraceEvent"),
      TraceEventWrapper: findType("TraceEventWrapper"),
      TrackedFuture_Object: findType("TrackedFuture<Object>"),
      Transform: findType("Transform"),
      TypeArgumentsRef: findType("TypeArgumentsRef"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_String_Logger: findType("UnmodifiableMapView<String,Logger>"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      Uri: findType("Uri"),
      VM: findType("VM"),
      VMRef: findType("VMRef"),
      ValueListenable_bool: findType("ValueListenable<bool>"),
      ValueNotifier_CpuProfileData: findType("ValueNotifier<CpuProfileData>"),
      ValueNotifier_CpuStackFrame: findType("ValueNotifier<CpuStackFrame>"),
      ValueNotifier_Flag: findType("ValueNotifier<Flag>"),
      ValueNotifier_FlagList: findType("ValueNotifier<FlagList>"),
      ValueNotifier_List_Breakpoint: findType("ValueNotifier<List<Breakpoint>>"),
      ValueNotifier_String: findType("ValueNotifier<String>"),
      ValueNotifier_TimelineEvent: findType("ValueNotifier<TimelineEvent0>"),
      ValueNotifier_TimelineFrame: findType("ValueNotifier<TimelineFrame>"),
      ValueNotifier_TimelineMode: findType("ValueNotifier<TimelineMode>"),
      ValueNotifier_bool: findType("ValueNotifier<bool>"),
      ValueNotifier_double: findType("ValueNotifier<double>"),
      Version: findType("Version"),
      VersionRange: findType("VersionRange"),
      Version_2: findType("Version0"),
      VerticalLineSegment: findType("VerticalLineSegment"),
      VmService: findType("VmService"),
      VmServiceCapabilities: findType("VmServiceCapabilities"),
      VmServiceWrapper: findType("VmServiceWrapper"),
      WheelEvent: findType("WheelEvent"),
      WhereIterable_String: findType("WhereIterable<String>"),
      Window: findType("Window"),
      WindowBase: findType("WindowBase"),
      WorkerGlobalScope: findType("WorkerGlobalScope"),
      Zone: findType("Zone"),
      ZoneDelegate: findType("ZoneDelegate"),
      ZoneSpecification: findType("ZoneSpecification"),
      _AsyncBroadcastStreamController_Breakpoint: findType("_AsyncBroadcastStreamController<Breakpoint>"),
      _AsyncBroadcastStreamController_BusEvent: findType("_AsyncBroadcastStreamController<BusEvent>"),
      _AsyncBroadcastStreamController_ConnectVmEvent: findType("_AsyncBroadcastStreamController<ConnectVmEvent>"),
      _AsyncBroadcastStreamController_CpuStackFrame: findType("_AsyncBroadcastStreamController<CpuStackFrame>"),
      _AsyncBroadcastStreamController_Event: findType("_AsyncBroadcastStreamController<Event>"),
      _AsyncBroadcastStreamController_FlameChartNode_dynamic: findType("_AsyncBroadcastStreamController<FlameChartNode<@>>"),
      _AsyncBroadcastStreamController_Frame: findType("_AsyncBroadcastStreamController<Frame>"),
      _AsyncBroadcastStreamController_HtmlMessage: findType("_AsyncBroadcastStreamController<HtmlMessage>"),
      _AsyncBroadcastStreamController_InboundsTreeNode: findType("_AsyncBroadcastStreamController<InboundsTreeNode>"),
      _AsyncBroadcastStreamController_IsolateRef: findType("_AsyncBroadcastStreamController<IsolateRef>"),
      _AsyncBroadcastStreamController_MemoryTracker: findType("_AsyncBroadcastStreamController<MemoryTracker>"),
      _AsyncBroadcastStreamController_OfflineData_TimelineData: findType("_AsyncBroadcastStreamController<OfflineData<TimelineData>>"),
      _AsyncBroadcastStreamController_PTabNavTab: findType("_AsyncBroadcastStreamController<PTabNavTab>"),
      _AsyncBroadcastStreamController_ScriptRef: findType("_AsyncBroadcastStreamController<ScriptRef>"),
      _AsyncBroadcastStreamController_String: findType("_AsyncBroadcastStreamController<String>"),
      _AsyncBroadcastStreamController_Uri: findType("_AsyncBroadcastStreamController<Uri>"),
      _AsyncBroadcastStreamController_VmServiceWrapper: findType("_AsyncBroadcastStreamController<VmServiceWrapper>"),
      _AsyncBroadcastStreamController_bool: findType("_AsyncBroadcastStreamController<bool>"),
      _AsyncBroadcastStreamController_dynamic: findType("_AsyncBroadcastStreamController<@>"),
      _AsyncBroadcastStreamController_void: findType("_AsyncBroadcastStreamController<~>"),
      _AsyncCompleter_CanvasElement: findType("_AsyncCompleter<CanvasElement>"),
      _AsyncCompleter_CanvasImageSource: findType("_AsyncCompleter<CanvasImageSource>"),
      _AsyncCompleter_HttpRequest: findType("_AsyncCompleter<HttpRequest>"),
      _AsyncCompleter_LibraryRef: findType("_AsyncCompleter<LibraryRef>"),
      _AsyncCompleter_StreamedResponse: findType("_AsyncCompleter<StreamedResponse>"),
      _AsyncCompleter_String: findType("_AsyncCompleter<String>"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _AsyncCompleter_VmService: findType("_AsyncCompleter<VmService>"),
      _AsyncCompleter_VmServiceWrapper: findType("_AsyncCompleter<VmServiceWrapper>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _Attr: findType("_Attr"),
      _CanvasChunk: findType("_CanvasChunk"),
      _ChildNodeListLazy: findType("_ChildNodeListLazy"),
      _ChunkPosition: findType("_ChunkPosition"),
      _DelayedEvent_dynamic: findType("_DelayedEvent<@>"),
      _ElementEventStreamImpl_Event: findType("_ElementEventStreamImpl<Event0>"),
      _ElementEventStreamImpl_KeyboardEvent: findType("_ElementEventStreamImpl<KeyboardEvent>"),
      _ElementEventStreamImpl_MouseEvent: findType("_ElementEventStreamImpl<MouseEvent>"),
      _ElementEventStreamImpl_TouchEvent: findType("_ElementEventStreamImpl<TouchEvent>"),
      _ElementEventStreamImpl_WheelEvent: findType("_ElementEventStreamImpl<WheelEvent>"),
      _EventStream_CloseEvent: findType("_EventStream<CloseEvent>"),
      _EventStream_Event: findType("_EventStream<Event0>"),
      _EventStream_ProgressEvent: findType("_EventStream<ProgressEvent>"),
      _FrozenElementList_Element: findType("_FrozenElementList<Element>"),
      _FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>"),
      _Future_CanvasElement: findType("_Future<CanvasElement>"),
      _Future_CanvasImageSource: findType("_Future<CanvasImageSource>"),
      _Future_HttpRequest: findType("_Future<HttpRequest>"),
      _Future_LibraryRef: findType("_Future<LibraryRef>"),
      _Future_Map_String_InstanceRef: findType("_Future<Map<String,InstanceRef>>"),
      _Future_Object: findType("_Future<Object>"),
      _Future_StreamedResponse: findType("_Future<StreamedResponse>"),
      _Future_String: findType("_Future<String>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_VmService: findType("_Future<VmService>"),
      _Future_VmServiceWrapper: findType("_Future<VmServiceWrapper>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_num: findType("_Future<num>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _Html5NodeValidator: findType("_Html5NodeValidator"),
      _IdentityHashMap_dynamic_dynamic: findType("_IdentityHashMap<@,@>"),
      _Line: findType("_Line"),
      _LinkedHashSetCell: findType("_LinkedHashSetCell"),
      _MapEntry: findType("_MapEntry"),
      _StreamIterator_dynamic: findType("_StreamIterator<@>"),
      _SyncBroadcastStreamController_String: findType("_SyncBroadcastStreamController<String>"),
      _SyncCompleter_num: findType("_SyncCompleter<num>"),
      _UnmodifiableSet_String: findType("_UnmodifiableSet<String>"),
      _ZoneFunction_of_AsyncError_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<AsyncError(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      _ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function: findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~())>"),
      _ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function_Timer: findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))>"),
      _ZoneFunction_of_Zone_Function_5_Zone_and_ZoneDelegate_and_Zone_and_ZoneSpecification_and_Map_dynamic_dynamic: findType("_ZoneFunction<Zone(Zone,ZoneDelegate,Zone,ZoneSpecification,Map<@,@>)>"),
      _ZoneFunction_of_void_Function_4_Zone_and_ZoneDelegate_and_Zone_and_void_Function: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,String)>"),
      bool: findType("bool"),
      bool_Function: findType("bool()"),
      bool_Function_Element: findType("bool(Element)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      bool_Function_bool_bool_bool_String: findType("bool(bool,bool,bool,String)"),
      bool_Function_dynamic: findType("bool(@)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_3_Object_and_Object_and_num_$opt_int: findType("@(Object,Object,num[int])"),
      dynamic_Function_Event: findType("@(Event0)"),
      dynamic_Function_Null_Null: findType("@(Null,Null)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_Object: findType("@(Object,Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_Object_num_int: findType("@(Object,num,int)"),
      dynamic_Function_Set_String: findType("@(Set<String>)"),
      dynamic_Function_String: findType("@(String)"),
      dynamic_Function_dynamic: findType("@(@)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      int_Function_Element_Element: findType("int(Element,Element)"),
      int_Function_Node_Node: findType("int(Node,Node)"),
      legacy_Object: findType("Object*"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_$opt_bool: findType("~([bool])"),
      void_Function_DomException: findType("~(DomException)"),
      void_Function_Event: findType("~(Event0)"),
      void_Function_IsolateRef: findType("~(IsolateRef)"),
      void_Function_KeyboardEvent: findType("~(KeyboardEvent)"),
      void_Function_MessageEvent: findType("~(MessageEvent)"),
      void_Function_MouseEvent: findType("~(MouseEvent)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_PopStateEvent: findType("~(PopStateEvent)"),
      void_Function_ProgressEvent: findType("~(ProgressEvent)"),
      void_Function_ServiceExtensionState: findType("~(ServiceExtensionState)"),
      void_Function_String: findType("~(String)"),
      void_Function_String_String: findType("~(String,String)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_Timer: findType("~(Timer)"),
      void_Function_TouchEvent: findType("~(TouchEvent)"),
      void_Function_bool: findType("~(bool)"),
      void_Function_dynamic: findType("~(@)"),
      void_Function_dynamic_StackTrace: findType("~(@,StackTrace)"),
      void_Function_num: findType("~(num)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.CanvasElement_methods = W.CanvasElement.prototype;
    C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
    C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
    C.DivElement_methods = W.DivElement.prototype;
    C.EventSource_methods = W.EventSource.prototype;
    C.FileList_methods = W.FileList.prototype;
    C.FileReader_methods = W.FileReader.prototype;
    C.HttpRequest_methods = W.HttpRequest.prototype;
    C.InputElement_methods = W.InputElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.SelectElement_methods = W.SelectElement.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.TouchList_methods = W.TouchList.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.WheelEvent_methods = W.WheelEvent.prototype;
    C.Window_methods = W.Window.prototype;
    C.AsciiDecoder_false_127 = new P.AsciiDecoder(false, 127);
    C.AsciiEncoder_127 = new P.AsciiEncoder(127);
    C.C_AsciiCodec = new P.AsciiCodec();
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_Base64Decoder = new P.Base64Decoder();
    C.C_DefaultEquality = new U.DefaultEquality(H.findType("DefaultEquality<@>"));
    C.C_DeepCollectionEquality = new U.DeepCollectionEquality();
    C.C_EmptyIterator = new H.EmptyIterator(H.findType("EmptyIterator<Null>"));
    C.C_HexCodec = new N.HexCodec();
    C.C_HexEncoder = new R.HexEncoder();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Latin1Codec = new P.Latin1Codec();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_TrustedHtmlTreeSanitizer = new A.TrustedHtmlTreeSanitizer();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__HashEnd = new S._HashEnd();
    C.C__JSRandom = new P._JSRandom();
    C.C__NoDefaultValue = new U._NoDefaultValue();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.Color_4278190080 = new S.Color(4278190080);
    C.Color_4280723098 = new S.Color(4280723098);
    C.Color_4283283116 = new S.Color(4283283116);
    C.Color_4286630852 = new S.Color(4286630852);
    C.Color_4288513226 = new S.Color(4288513226);
    C.Color_4289961435 = new S.Color(4289961435);
    C.Color_4291475689 = new S.Color(4291475689);
    C.Color_4292138970 = new S.Color(4292138970);
    C.Color_4293980400 = new S.Color(4293980400);
    C.Color_4294967295 = new S.Color(4294967295);
    C.ColumnAlignment_0 = new K.ColumnAlignment("ColumnAlignment.left");
    C.ColumnAlignment_1 = new K.ColumnAlignment("ColumnAlignment.right");
    C.ColumnAlignment_2 = new K.ColumnAlignment("ColumnAlignment.center");
    C.CpuProfilerViewType_0 = new A.CpuProfilerViewType("CpuProfilerViewType.flameChart");
    C.CpuProfilerViewType_1 = new A.CpuProfilerViewType("CpuProfilerViewType.bottomUp");
    C.CpuProfilerViewType_2 = new A.CpuProfilerViewType("CpuProfilerViewType.callTree");
    C.DiagnosticLevel_0 = new U.DiagnosticLevel(0, "DiagnosticLevel.hidden");
    C.DiagnosticLevel_1 = new U.DiagnosticLevel(1, "DiagnosticLevel.fine");
    C.DiagnosticLevel_2 = new U.DiagnosticLevel(2, "DiagnosticLevel.debug");
    C.DiagnosticLevel_3 = new U.DiagnosticLevel(3, "DiagnosticLevel.info");
    C.DiagnosticLevel_4 = new U.DiagnosticLevel(4, "DiagnosticLevel.warning");
    C.DiagnosticLevel_6 = new U.DiagnosticLevel(6, "DiagnosticLevel.summary");
    C.DiagnosticLevel_7 = new U.DiagnosticLevel(7, "DiagnosticLevel.error");
    C.DiagnosticsTreeStyle_0 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.none");
    C.DiagnosticsTreeStyle_1 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.sparse");
    C.DiagnosticsTreeStyle_10 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.shallow");
    C.DiagnosticsTreeStyle_11 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.truncateChildren");
    C.DiagnosticsTreeStyle_2 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.offstage");
    C.DiagnosticsTreeStyle_3 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.dense");
    C.DiagnosticsTreeStyle_4 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.transition");
    C.DiagnosticsTreeStyle_5 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.error");
    C.DiagnosticsTreeStyle_6 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.whitespace");
    C.DiagnosticsTreeStyle_7 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.flat");
    C.DiagnosticsTreeStyle_8 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.singleLine");
    C.DiagnosticsTreeStyle_9 = new U.DiagnosticsTreeStyle("DiagnosticsTreeStyle.errorProperty");
    C.Duration_0 = new P.Duration(0);
    C.Duration_1 = new P.Duration(1);
    C.Duration_1000 = new P.Duration(1000);
    C.Duration_100000 = new P.Duration(100000);
    C.Duration_1000000 = new P.Duration(1000000);
    C.Duration_10000000 = new P.Duration(10000000);
    C.Duration_166000 = new P.Duration(166000);
    C.Duration_200000 = new P.Duration(200000);
    C.Duration_3000000 = new P.Duration(3000000);
    C.Duration_4000000 = new P.Duration(4000000);
    C.Duration_500000 = new P.Duration(500000);
    C.Duration_5000000 = new P.Duration(5000000);
    C.FlutterTreeType_0 = new E.FlutterTreeType("FlutterTreeType.widget");
    C.FlutterTreeType_1 = new E.FlutterTreeType("FlutterTreeType.renderObject");
    C.UrlIcon_8qt = new S.UrlIcon("/icons/custom/info.png", false);
    C.IconKind_0KV = new S.IconKind("info", C.UrlIcon_8qt, C.UrlIcon_8qt);
    C.UrlIcon_MIe = new S.UrlIcon("/icons/custom/class.png", false);
    C.UrlIcon_Ccz = new S.UrlIcon("/icons/custom/class_abstract.png", false);
    C.IconKind_Q7f = new S.IconKind("class", C.UrlIcon_MIe, C.UrlIcon_Ccz);
    C.UrlIcon_trF = new S.UrlIcon("/icons/custom/method.png", false);
    C.UrlIcon_o8Y = new S.UrlIcon("/icons/custom/method_abstract.png", false);
    C.IconKind_jzj = new S.IconKind("method", C.UrlIcon_trF, C.UrlIcon_o8Y);
    C.C_DefaultEquality0 = new U.DefaultEquality(H.findType("DefaultEquality<Null>"));
    C.IterableEquality_DefaultEquality = new U.IterableEquality(C.C_DefaultEquality0, type$.IterableEquality_dynamic);
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
    C.Latin1Decoder_false_255 = new P.Latin1Decoder(false, 255);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255);
    C.Level_INFO_800 = new Y.Level("INFO", 800);
    C.Level_WARNING_900 = new Y.Level("WARNING", 900);
    C.ListDirection_0 = new N.ListDirection("ListDirection.pageUp");
    C.ListDirection_00 = new A.ListDirection0("ListDirection.pageUp");
    C.ListDirection_1 = new N.ListDirection("ListDirection.pageDown");
    C.ListDirection_10 = new A.ListDirection0("ListDirection.pageDown");
    C.ListDirection_2 = new N.ListDirection("ListDirection.home");
    C.ListDirection_20 = new A.ListDirection0("ListDirection.home");
    C.ListDirection_3 = new N.ListDirection("ListDirection.end");
    C.ListDirection_30 = new A.ListDirection0("ListDirection.end");
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), type$.JSArray_String);
    C.List_3US = H.setRuntimeTypeInfo(makeConstList(["S", "M", "T", "W", "T", "F", "S"]), type$.JSArray_String);
    C.List_6xs = H.setRuntimeTypeInfo(makeConstList(["Before Christ", "Anno Domini"]), type$.JSArray_String);
    C.List_AM_PM = H.setRuntimeTypeInfo(makeConstList(["AM", "PM"]), type$.JSArray_String);
    C.List_AllocationProfile = H.setRuntimeTypeInfo(makeConstList(["AllocationProfile"]), type$.JSArray_String);
    C.List_BC_AD = H.setRuntimeTypeInfo(makeConstList(["BC", "AD"]), type$.JSArray_String);
    C.List_BmV = H.setRuntimeTypeInfo(makeConstList(["package:flutter/src/widgets/widget_inspector.dart", "package:flutter_web/src/widgets/widget_inspector.dart"]), type$.JSArray_String);
    C.List_BoundField = H.setRuntimeTypeInfo(makeConstList(["BoundField"]), type$.JSArray_String);
    C.List_BoundVariable = H.setRuntimeTypeInfo(makeConstList(["BoundVariable"]), type$.JSArray_String);
    C.List_Breakpoint = H.setRuntimeTypeInfo(makeConstList(["Breakpoint"]), type$.JSArray_String);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_ClassHeapStats = H.setRuntimeTypeInfo(makeConstList(["ClassHeapStats"]), type$.JSArray_String);
    C.List_ClassList = H.setRuntimeTypeInfo(makeConstList(["ClassList"]), type$.JSArray_String);
    C.List_ClassRef = H.setRuntimeTypeInfo(makeConstList(["ClassRef"]), type$.JSArray_String);
    C.List_ClientName = H.setRuntimeTypeInfo(makeConstList(["ClientName"]), type$.JSArray_String);
    C.List_CodeRef = H.setRuntimeTypeInfo(makeConstList(["CodeRef"]), type$.JSArray_String);
    C.List_Context = H.setRuntimeTypeInfo(makeConstList(["Context"]), type$.JSArray_String);
    C.List_ContextElement = H.setRuntimeTypeInfo(makeConstList(["ContextElement"]), type$.JSArray_String);
    C.List_ContextRef = H.setRuntimeTypeInfo(makeConstList(["ContextRef"]), type$.JSArray_String);
    C.List_CpuSample = H.setRuntimeTypeInfo(makeConstList(["CpuSample"]), type$.JSArray_String);
    C.List_CpuSamples = H.setRuntimeTypeInfo(makeConstList(["CpuSamples"]), type$.JSArray_String);
    C.List_Error = H.setRuntimeTypeInfo(makeConstList(["Error"]), type$.JSArray_String);
    C.List_ErrorRef = H.setRuntimeTypeInfo(makeConstList(["ErrorRef"]), type$.JSArray_String);
    C.List_Event = H.setRuntimeTypeInfo(makeConstList(["Event"]), type$.JSArray_String);
    C.List_FieldRef = H.setRuntimeTypeInfo(makeConstList(["FieldRef"]), type$.JSArray_String);
    C.List_Flag = H.setRuntimeTypeInfo(makeConstList(["Flag"]), type$.JSArray_String);
    C.List_FlagList = H.setRuntimeTypeInfo(makeConstList(["FlagList"]), type$.JSArray_String);
    C.List_Frame = H.setRuntimeTypeInfo(makeConstList(["Frame"]), type$.JSArray_String);
    C.List_FuncRef = H.setRuntimeTypeInfo(makeConstList(["FuncRef"]), type$.JSArray_String);
    C.TimelineEventType_0 = new L.TimelineEventType(0, "TimelineEventType.ui");
    C.TimelineEventType_1 = new L.TimelineEventType(1, "TimelineEventType.raster");
    C.TimelineEventType_2 = new L.TimelineEventType(2, "TimelineEventType.async");
    C.TimelineEventType_3 = new L.TimelineEventType(3, "TimelineEventType.unknown");
    C.List_G1V = H.setRuntimeTypeInfo(makeConstList([C.TimelineEventType_0, C.TimelineEventType_1, C.TimelineEventType_2, C.TimelineEventType_3]), H.findType("JSArray<TimelineEventType>"));
    C.List_InboundReference = H.setRuntimeTypeInfo(makeConstList(["InboundReference"]), type$.JSArray_String);
    C.List_InboundReferences = H.setRuntimeTypeInfo(makeConstList(["InboundReferences"]), type$.JSArray_String);
    C.List_InstanceRef = H.setRuntimeTypeInfo(makeConstList(["InstanceRef"]), type$.JSArray_String);
    C.List_InstanceRef_ErrorRef = H.setRuntimeTypeInfo(makeConstList(["InstanceRef", "ErrorRef"]), type$.JSArray_String);
    C.List_InstanceRef_Sentinel = H.setRuntimeTypeInfo(makeConstList(["InstanceRef", "Sentinel"]), type$.JSArray_String);
    C.List_InstanceSet = H.setRuntimeTypeInfo(makeConstList(["InstanceSet"]), type$.JSArray_String);
    C.List_Isolate = H.setRuntimeTypeInfo(makeConstList(["Isolate"]), type$.JSArray_String);
    C.List_IsolateGroup = H.setRuntimeTypeInfo(makeConstList(["IsolateGroup"]), type$.JSArray_String);
    C.List_IsolateGroupRef = H.setRuntimeTypeInfo(makeConstList(["IsolateGroupRef"]), type$.JSArray_String);
    C.List_IsolateRef = H.setRuntimeTypeInfo(makeConstList(["IsolateRef"]), type$.JSArray_String);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    C.List_Khz = H.setRuntimeTypeInfo(makeConstList([C.DiagnosticsTreeStyle_0, C.DiagnosticsTreeStyle_1, C.DiagnosticsTreeStyle_2, C.DiagnosticsTreeStyle_3, C.DiagnosticsTreeStyle_4, C.DiagnosticsTreeStyle_5, C.DiagnosticsTreeStyle_6, C.DiagnosticsTreeStyle_7, C.DiagnosticsTreeStyle_8, C.DiagnosticsTreeStyle_9, C.DiagnosticsTreeStyle_10, C.DiagnosticsTreeStyle_11]), H.findType("JSArray<DiagnosticsTreeStyle>"));
    C.List_LibraryRef = H.setRuntimeTypeInfo(makeConstList(["LibraryRef"]), type$.JSArray_String);
    C.List_LibraryRef_ClassRef_FuncRef = H.setRuntimeTypeInfo(makeConstList(["LibraryRef", "ClassRef", "FuncRef"]), type$.JSArray_String);
    C.List_LogRecord = H.setRuntimeTypeInfo(makeConstList(["LogRecord"]), type$.JSArray_String);
    C.List_MemoryUsage = H.setRuntimeTypeInfo(makeConstList(["MemoryUsage"]), type$.JSArray_String);
    C.List_Message = H.setRuntimeTypeInfo(makeConstList(["Message"]), type$.JSArray_String);
    C.List_Obj = H.setRuntimeTypeInfo(makeConstList(["Obj"]), type$.JSArray_String);
    C.List_ObjRef = H.setRuntimeTypeInfo(makeConstList(["ObjRef"]), type$.JSArray_String);
    C.List_PAk = H.setRuntimeTypeInfo(makeConstList(["InstanceRef", "TypeArgumentsRef", "Sentinel"]), type$.JSArray_String);
    C.List_ProfileFunction = H.setRuntimeTypeInfo(makeConstList(["ProfileFunction"]), type$.JSArray_String);
    C.List_Q1_Q2_Q3_Q4 = H.setRuntimeTypeInfo(makeConstList(["Q1", "Q2", "Q3", "Q4"]), type$.JSArray_String);
    C.List_ReloadReport = H.setRuntimeTypeInfo(makeConstList(["ReloadReport"]), type$.JSArray_String);
    C.List_RetainingObject = H.setRuntimeTypeInfo(makeConstList(["RetainingObject"]), type$.JSArray_String);
    C.List_RetainingPath = H.setRuntimeTypeInfo(makeConstList(["RetainingPath"]), type$.JSArray_String);
    C.List_ScriptList = H.setRuntimeTypeInfo(makeConstList(["ScriptList"]), type$.JSArray_String);
    C.List_ScriptRef = H.setRuntimeTypeInfo(makeConstList(["ScriptRef"]), type$.JSArray_String);
    C.List_SourceLocation = H.setRuntimeTypeInfo(makeConstList(["SourceLocation"]), type$.JSArray_String);
    C.List_SourceReport = H.setRuntimeTypeInfo(makeConstList(["SourceReport"]), type$.JSArray_String);
    C.List_Stack = H.setRuntimeTypeInfo(makeConstList(["Stack"]), type$.JSArray_String);
    C.List_Success = H.setRuntimeTypeInfo(makeConstList(["Success"]), type$.JSArray_String);
    C.List_Success_Error = H.setRuntimeTypeInfo(makeConstList(["Success", "Error"]), type$.JSArray_String);
    C.List_Timeline = H.setRuntimeTypeInfo(makeConstList(["Timeline"]), type$.JSArray_String);
    C.List_TimelineEvent = H.setRuntimeTypeInfo(makeConstList(["TimelineEvent"]), type$.JSArray_String);
    C.List_TimelineFlags = H.setRuntimeTypeInfo(makeConstList(["TimelineFlags"]), type$.JSArray_String);
    C.List_Timestamp = H.setRuntimeTypeInfo(makeConstList(["Timestamp"]), type$.JSArray_String);
    C.List_TypeArgumentsRef = H.setRuntimeTypeInfo(makeConstList(["TypeArgumentsRef"]), type$.JSArray_String);
    C.List_VM = H.setRuntimeTypeInfo(makeConstList(["VM"]), type$.JSArray_String);
    C.List_VMRef = H.setRuntimeTypeInfo(makeConstList(["VMRef"]), type$.JSArray_String);
    C.List_Version = H.setRuntimeTypeInfo(makeConstList(["Version"]), type$.JSArray_String);
    C.List_bJM = H.setRuntimeTypeInfo(makeConstList(["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]), type$.JSArray_String);
    C.List_cIc = H.setRuntimeTypeInfo(makeConstList(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]), type$.JSArray_String);
    C.List_dynamic = H.setRuntimeTypeInfo(makeConstList(["dynamic"]), type$.JSArray_String);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), type$.JSArray_String);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_DiagnosticsNode);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), H.findType("JSArray<Null>"));
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_RemoteDiagnosticsNode);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_String);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_dynamic);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_gc6 = H.setRuntimeTypeInfo(makeConstList(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]), type$.JSArray_String);
    C.List_h8w = H.setRuntimeTypeInfo(makeConstList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]), type$.JSArray_String);
    C.UrlIcon_cI8 = new S.UrlIcon("/icons/inspector/balloonInformation.png", false);
    C.Category_cdS = new S.Category("Accessibility", C.UrlIcon_cI8);
    C.UrlIcon_1b4 = new S.UrlIcon("/icons/inspector/resume.png", false);
    C.Category_FIw = new S.Category("Animation and Motion", C.UrlIcon_1b4);
    C.UrlIcon_xw8 = new S.UrlIcon("/icons/inspector/any_type.png", false);
    C.Category_X3x = new S.Category("Assets, Images, and Icons", C.UrlIcon_xw8);
    C.UrlIcon_aWL = new S.UrlIcon("/icons/inspector/threads.png", false);
    C.Category_GJf = new S.Category("Async", C.UrlIcon_aWL);
    C.Category_Basics_null = new S.Category("Basics", null);
    C.Category_smQ = new S.Category("Cupertino (iOS-style widgets)", null);
    C.UrlIcon_cAH0 = new S.UrlIcon("/icons/inspector/renderer.png", false);
    C.Category_Fb0 = new S.Category("Input", C.UrlIcon_cAH0);
    C.UrlIcon_43h = new S.UrlIcon("/icons/inspector/colors.png", false);
    C.Category_gg4 = new S.Category("Painting and effects", C.UrlIcon_43h);
    C.UrlIcon_aDp = new S.UrlIcon("/icons/inspector/scrollbar.png", false);
    C.Category_a7E = new S.Category("Scrolling", C.UrlIcon_aDp);
    C.UrlIcon_fXI = new S.UrlIcon("/icons/inspector/value.png", false);
    C.Category_QLA = new S.Category("Stack", C.UrlIcon_fXI);
    C.UrlIcon_ViB = new S.UrlIcon("/icons/inspector/atrule.png", false);
    C.Category_Phi = new S.Category("Styling", C.UrlIcon_ViB);
    C.UrlIcon_cAH = new S.UrlIcon("/icons/inspector/textArea.png", false);
    C.Category_C0x = new S.Category("Text", C.UrlIcon_cAH);
    C.List_mya = H.setRuntimeTypeInfo(makeConstList([C.Category_cdS, C.Category_FIw, C.Category_X3x, C.Category_GJf, C.Category_Basics_null, C.Category_smQ, C.Category_Fb0, C.Category_gg4, C.Category_a7E, C.Category_QLA, C.Category_Phi, C.Category_C0x]), H.findType("JSArray<Category>"));
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_oqh = H.setRuntimeTypeInfo(makeConstList(["SourceLocation", "UnresolvedSourceLocation"]), type$.JSArray_String);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_qpm = H.setRuntimeTypeInfo(makeConstList(["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"]), type$.JSArray_String);
    C.DiagnosticLevel_5 = new U.DiagnosticLevel(5, "DiagnosticLevel.hint");
    C.DiagnosticLevel_8 = new U.DiagnosticLevel(8, "DiagnosticLevel.off");
    C.List_szR = H.setRuntimeTypeInfo(makeConstList([C.DiagnosticLevel_0, C.DiagnosticLevel_1, C.DiagnosticLevel_2, C.DiagnosticLevel_3, C.DiagnosticLevel_4, C.DiagnosticLevel_5, C.DiagnosticLevel_6, C.DiagnosticLevel_7, C.DiagnosticLevel_8]), H.findType("JSArray<DiagnosticLevel>"));
    C.List_wMy = H.setRuntimeTypeInfo(makeConstList(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]), type$.JSArray_String);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), type$.JSArray_String);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), type$.JSArray_String);
    C.LogLevel_0 = new F.LogLevel("LogLevel.debug");
    C.LogLevel_1 = new F.LogLevel("LogLevel.warning");
    C.LogLevel_2 = new F.LogLevel("LogLevel.error");
    C.List_EQM = H.setRuntimeTypeInfo(makeConstList(["d", "E", "EEEE", "LLL", "LLLL", "M", "Md", "MEd", "MMM", "MMMd", "MMMEd", "MMMM", "MMMMd", "MMMMEEEEd", "QQQ", "QQQQ", "y", "yM", "yMd", "yMEd", "yMMM", "yMMMd", "yMMMEd", "yMMMM", "yMMMMd", "yMMMMEEEEd", "yQQQ", "yQQQQ", "H", "Hm", "Hms", "j", "jm", "jms", "jmv", "jmz", "jz", "m", "ms", "s", "v", "z", "zzzz", "ZZZZ"]), type$.JSArray_String);
    C.Map_EQGBe = new H.ConstantStringMap(44, {d: "d", E: "EEE", EEEE: "EEEE", LLL: "LLL", LLLL: "LLLL", M: "L", Md: "M/d", MEd: "EEE, M/d", MMM: "LLL", MMMd: "MMM d", MMMEd: "EEE, MMM d", MMMM: "LLLL", MMMMd: "MMMM d", MMMMEEEEd: "EEEE, MMMM d", QQQ: "QQQ", QQQQ: "QQQQ", y: "y", yM: "M/y", yMd: "M/d/y", yMEd: "EEE, M/d/y", yMMM: "MMM y", yMMMd: "MMM d, y", yMMMEd: "EEE, MMM d, y", yMMMM: "MMMM y", yMMMMd: "MMMM d, y", yMMMMEEEEd: "EEEE, MMMM d, y", yQQQ: "QQQ y", yQQQQ: "QQQQ y", H: "HH", Hm: "HH:mm", Hms: "HH:mm:ss", j: "h a", jm: "h:mm a", jms: "h:mm:ss a", jmv: "h:mm a v", jmz: "h:mm a z", jz: "h a z", m: "m", ms: "mm:ss", s: "s", v: "v", z: "z", zzzz: "zzzz", ZZZZ: "ZZZZ"}, C.List_EQM, type$.ConstantStringMap_String_String);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty0, type$.ConstantStringMap_String_String);
    C.List_empty4 = H.setRuntimeTypeInfo(makeConstList([]), H.findType("JSArray<Symbol0>"));
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty4, H.findType("ConstantStringMap<Symbol0,@>"));
    C.Map_empty1 = new H.ConstantStringMap(0, {}, C.List_empty, H.findType("ConstantStringMap<@,@>"));
    C.Map_yXAeS = new H.GeneralConstantMap([0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"], H.findType("GeneralConstantMap<int,String>"));
    C.Color_4294638330 = new S.Color(4294638330);
    C.Color_4294309365 = new S.Color(4294309365);
    C.Color_4293848814 = new S.Color(4293848814);
    C.Color_4292927712 = new S.Color(4292927712);
    C.Color_4292269782 = new S.Color(4292269782);
    C.Color_4290624957 = new S.Color(4290624957);
    C.Color_4288585374 = new S.Color(4288585374);
    C.Color_4285887861 = new S.Color(4285887861);
    C.Color_4284572001 = new S.Color(4284572001);
    C.Color_4282532418 = new S.Color(4282532418);
    C.Color_4281348144 = new S.Color(4281348144);
    C.Color_4280361249 = new S.Color(4280361249);
    C.Map_HFpTk = new H.GeneralConstantMap([50, C.Color_4294638330, 100, C.Color_4294309365, 200, C.Color_4293848814, 300, C.Color_4292927712, 350, C.Color_4292269782, 400, C.Color_4290624957, 500, C.Color_4288585374, 600, C.Color_4285887861, 700, C.Color_4284572001, 800, C.Color_4282532418, 850, C.Color_4281348144, 900, C.Color_4280361249], type$.GeneralConstantMap_int_Color);
    C.MaterialColor_Map_HFpTk_4288585374 = new S.MaterialColor(C.Map_HFpTk, 4288585374);
    C.Color_4294964192 = new S.Color(4294964192);
    C.Color_4294959282 = new S.Color(4294959282);
    C.Color_4294954112 = new S.Color(4294954112);
    C.Color_4294948685 = new S.Color(4294948685);
    C.Color_4294944550 = new S.Color(4294944550);
    C.Color_4294940672 = new S.Color(4294940672);
    C.Color_4294675456 = new S.Color(4294675456);
    C.Color_4294278144 = new S.Color(4294278144);
    C.Color_4293880832 = new S.Color(4293880832);
    C.Color_4293284096 = new S.Color(4293284096);
    C.Map_JNZaB = new H.GeneralConstantMap([50, C.Color_4294964192, 100, C.Color_4294959282, 200, C.Color_4294954112, 300, C.Color_4294948685, 400, C.Color_4294944550, 500, C.Color_4294940672, 600, C.Color_4294675456, 700, C.Color_4294278144, 800, C.Color_4293880832, 900, C.Color_4293284096], type$.GeneralConstantMap_int_Color);
    C.MaterialColor_Map_JNZaB_4294940672 = new S.MaterialColor(C.Map_JNZaB, 4294940672);
    C.Color_4294962158 = new S.Color(4294962158);
    C.Color_4294954450 = new S.Color(4294954450);
    C.Color_4293892762 = new S.Color(4293892762);
    C.Color_4293227379 = new S.Color(4293227379);
    C.Color_4293874512 = new S.Color(4293874512);
    C.Color_4294198070 = new S.Color(4294198070);
    C.Color_4293212469 = new S.Color(4293212469);
    C.Color_4292030255 = new S.Color(4292030255);
    C.Color_4291176488 = new S.Color(4291176488);
    C.Color_4290190364 = new S.Color(4290190364);
    C.Map_JNc9P = new H.GeneralConstantMap([50, C.Color_4294962158, 100, C.Color_4294954450, 200, C.Color_4293892762, 300, C.Color_4293227379, 400, C.Color_4293874512, 500, C.Color_4294198070, 600, C.Color_4293212469, 700, C.Color_4292030255, 800, C.Color_4291176488, 900, C.Color_4290190364], type$.GeneralConstantMap_int_Color);
    C.MaterialColor_Map_JNc9P_4294198070 = new S.MaterialColor(C.Map_JNc9P, 4294198070);
    C.MessageType_1 = new G.MessageType("MessageType.warning");
    C.MessageType_2 = new G.MessageType("MessageType.error");
    C.PacketKind_0 = new O.PacketKind("PacketKind.EOS");
    C.PacketKind_1 = new O.PacketKind("PacketKind.Text");
    C.PacketKind_2 = new O.PacketKind("PacketKind.Incomplete");
    C.PacketKind_3 = new O.PacketKind("PacketKind.ESC");
    C.PacketKind_4 = new O.PacketKind("PacketKind.Unknown");
    C.PacketKind_5 = new O.PacketKind("PacketKind.SGR");
    C.PacketKind_6 = new O.PacketKind("PacketKind.OSCURL");
    C.Rect_0_0_0_0 = new S.Rect(0, 0, 0, 0);
    C.ScrollAlignment_BOTTOM = new W.ScrollAlignment("BOTTOM");
    C.ScrollAlignment_CENTER = new W.ScrollAlignment("CENTER");
    C.ScrollAlignment_TOP = new W.ScrollAlignment("TOP");
    C.List_ijv = H.setRuntimeTypeInfo(makeConstList(["Flutter.ServiceExtensionStateChanged"]), type$.JSArray_String);
    C.Map_ijWZH = new H.ConstantStringMap(1, {"Flutter.ServiceExtensionStateChanged": null}, C.List_ijv, type$.ConstantStringMap_String_Null);
    C.Set_ijvA = new P._UnmodifiableSet(C.Map_ijWZH, type$._UnmodifiableSet_String);
    C.List_nPX = H.setRuntimeTypeInfo(makeConstList(["Flutter.FirstFrame", "Flutter.FrameworkInitialization"]), type$.JSArray_String);
    C.Map_nP0C4 = new H.ConstantStringMap(2, {"Flutter.FirstFrame": null, "Flutter.FrameworkInitialization": null}, C.List_nPX, type$.ConstantStringMap_String_Null);
    C.Set_nPXOm = new P._UnmodifiableSet(C.Map_nP0C4, type$._UnmodifiableSet_String);
    C.SortDirection_0 = new B.SortDirection("SortDirection.ascending");
    C.SortDirection_1 = new B.SortDirection("SortDirection.descending");
    C.Symbol_89P = new H.Symbol("Intl.locale");
    C.Symbol_call = new H.Symbol("call");
    C.Color_4290493371 = new S.Color(4290493371);
    C.ThemedColor_Color_4278190080_Color_4290493371 = new K.ThemedColor(C.Color_4278190080, C.Color_4290493371);
    C.FontWeight_6 = new S.FontWeight();
    C.TextStyle_0iR = new U.TextStyle(true, C.ThemedColor_Color_4278190080_Color_4290493371, null, null, C.FontWeight_6, null, null, null, null, null, null, null, null, null);
    C.TextStyle_Ure = new U.TextStyle(true, C.ThemedColor_Color_4278190080_Color_4290493371, null, null, null, null, null, null, null, null, null, null, null, null);
    C.TextStyle_w66 = new U.TextStyle(true, null, null, 14, null, null, null, null, null, null, null, null, null, null);
    C.Color_1511726883 = new S.Color(1511726883);
    C.ThemedColor_Color_1511726883_Color_1511726883 = new K.ThemedColor(C.Color_1511726883, C.Color_1511726883);
    C.Color_1727987712 = new S.Color(1727987712);
    C.Color_1727175833 = new S.Color(1727175833);
    C.ThemedColor_Color_1727987712_Color_1727175833 = new K.ThemedColor(C.Color_1727987712, C.Color_1727175833);
    C.Color_2164195328 = new S.Color(2164195328);
    C.Color_2580420892 = new S.Color(2580420892);
    C.ThemedColor_Color_2164195328_Color_2580420892 = new K.ThemedColor(C.Color_2164195328, C.Color_2580420892);
    C.Color_2315255808 = new S.Color(2315255808);
    C.Color_4291348680 = new S.Color(4291348680);
    C.ThemedColor_Color_2315255808_Color_4291348680 = new K.ThemedColor(C.Color_2315255808, C.Color_4291348680);
    C.Color_4287215096 = new S.Color(4287215096);
    C.ThemedColor_Color_4278190080_Color_4287215096 = new K.ThemedColor(C.Color_4278190080, C.Color_4287215096);
    C.ThemedColor_Color_4278190080_Color_4293980400 = new K.ThemedColor(C.Color_4278190080, C.Color_4293980400);
    C.Color_4278190335 = new S.Color(4278190335);
    C.Color_4279786209 = new S.Color(4279786209);
    C.ThemedColor_Color_4278190335_Color_4279786209 = new K.ThemedColor(C.Color_4278190335, C.Color_4279786209);
    C.Color_4278278043 = new S.Color(4278278043);
    C.Color_4279785917 = new S.Color(4279785917);
    C.ThemedColor_Color_4278278043_Color_4279785917 = new K.ThemedColor(C.Color_4278278043, C.Color_4279785917);
    C.Color_4278351805 = new S.Color(4278351805);
    C.ThemedColor_Color_4278351805_Color_4278278043 = new K.ThemedColor(C.Color_4278351805, C.Color_4278278043);
    C.Color_4279854802 = new S.Color(4279854802);
    C.ThemedColor_Color_4278351805_Color_4279854802 = new K.ThemedColor(C.Color_4278351805, C.Color_4279854802);
    C.Color_4278356177 = new S.Color(4278356177);
    C.Color_4279923688 = new S.Color(4279923688);
    C.ThemedColor_Color_4278356177_Color_4279923688 = new K.ThemedColor(C.Color_4278356177, C.Color_4279923688);
    C.Color_4278430196 = new S.Color(4278430196);
    C.Color_4278426597 = new S.Color(4278426597);
    C.ThemedColor_Color_4278430196_Color_4278426597 = new K.ThemedColor(C.Color_4278430196, C.Color_4278426597);
    C.Color_4280559918 = new S.Color(4280559918);
    C.ThemedColor_Color_4280559918_Color_4287215096 = new K.ThemedColor(C.Color_4280559918, C.Color_4287215096);
    C.Color_4294638588 = new S.Color(4294638588);
    C.ThemedColor_Color_4280559918_Color_4294638588 = new K.ThemedColor(C.Color_4280559918, C.Color_4294638588);
    C.Color_4280923894 = new S.Color(4280923894);
    C.Color_4284914934 = new S.Color(4284914934);
    C.ThemedColor_Color_4280923894_Color_4284914934 = new K.ThemedColor(C.Color_4280923894, C.Color_4284914934);
    C.Color_4282735204 = new S.Color(4282735204);
    C.Color_4291811548 = new S.Color(4291811548);
    C.ThemedColor_Color_4282735204_Color_4291811548 = new K.ThemedColor(C.Color_4282735204, C.Color_4291811548);
    C.Color_4283417591 = new S.Color(4283417591);
    C.ThemedColor_Color_4283417591_Color_4280923894 = new K.ThemedColor(C.Color_4283417591, C.Color_4280923894);
    C.Color_4287280375 = new S.Color(4287280375);
    C.ThemedColor_Color_4283417591_Color_4287280375 = new K.ThemedColor(C.Color_4283417591, C.Color_4287280375);
    C.Color_4286611584 = new S.Color(4286611584);
    C.ThemedColor_Color_4286611584_Color_4286611584 = new K.ThemedColor(C.Color_4286611584, C.Color_4286611584);
    C.Color_4286698746 = new S.Color(4286698746);
    C.Color_4288593657 = new S.Color(4288593657);
    C.ThemedColor_Color_4286698746_Color_4288593657 = new K.ThemedColor(C.Color_4286698746, C.Color_4288593657);
    C.Color_4289450719 = new S.Color(4289450719);
    C.Color_4286166774 = new S.Color(4286166774);
    C.ThemedColor_Color_4289450719_Color_4286166774 = new K.ThemedColor(C.Color_4289450719, C.Color_4286166774);
    C.Color_4290098613 = new S.Color(4290098613);
    C.Color_4291414473 = new S.Color(4291414473);
    C.ThemedColor_Color_4290098613_Color_4291414473 = new K.ThemedColor(C.Color_4290098613, C.Color_4291414473);
    C.Color_4291477317 = new S.Color(4291477317);
    C.Color_4284704103 = new S.Color(4284704103);
    C.ThemedColor_Color_4291477317_Color_4284704103 = new K.ThemedColor(C.Color_4291477317, C.Color_4284704103);
    C.Color_4291611852 = new S.Color(4291611852);
    C.Color_4283979864 = new S.Color(4283979864);
    C.ThemedColor_Color_4291611852_Color_4283979864 = new K.ThemedColor(C.Color_4291611852, C.Color_4283979864);
    C.ThemedColor_Color_4292138970_Color_4292138970 = new K.ThemedColor(C.Color_4292138970, C.Color_4292138970);
    C.ThemedColor_Color_4292138970_Color_4294967295 = new K.ThemedColor(C.Color_4292138970, C.Color_4294967295);
    C.Color_4294375158 = new S.Color(4294375158);
    C.Color_4280295716 = new S.Color(4280295716);
    C.ThemedColor_Color_4294375158_Color_4280295716 = new K.ThemedColor(C.Color_4294375158, C.Color_4280295716);
    C.Color_4281151025 = new S.Color(4281151025);
    C.ThemedColor_Color_4294375158_Color_4281151025 = new K.ThemedColor(C.Color_4294375158, C.Color_4281151025);
    C.ThemedColor_Color_4294675456_Color_4293284096 = new K.ThemedColor(C.Color_4294675456, C.Color_4293284096);
    C.ThemedColor_Color_4294967295_Color_4278190080 = new K.ThemedColor(C.Color_4294967295, C.Color_4278190080);
    C.ThemedColor_Color_4294967295_Color_4281151025 = new K.ThemedColor(C.Color_4294967295, C.Color_4281151025);
    C.Color_4294967181 = new S.Color(4294967181);
    C.Color_4294967040 = new S.Color(4294967040);
    C.Color_4294961664 = new S.Color(4294961664);
    C.Color_4294956544 = new S.Color(4294956544);
    C.Map_iTwHq = new H.GeneralConstantMap([100, C.Color_4294967181, 200, C.Color_4294967040, 400, C.Color_4294961664, 700, C.Color_4294956544], type$.GeneralConstantMap_int_Color);
    C.MaterialAccentColor_Map_iTwHq_4294967040 = new S.MaterialAccentColor(C.Map_iTwHq, 4294967040);
    C.Color_4282796364 = new S.Color(4282796364);
    C.ThemedColor_W3G = new K.ThemedColor(C.MaterialAccentColor_Map_iTwHq_4294967040, C.Color_4282796364);
    C.TimeUnit_0 = new B.TimeUnit("TimeUnit.microseconds");
    C.TimeUnit_1 = new B.TimeUnit("TimeUnit.milliseconds");
    C.TimelineMode_0 = new U.TimelineMode("TimelineMode.frameBased");
    C.TimelineMode_1 = new U.TimelineMode("TimelineMode.full");
    C.Type_ByteBuffer_RkP = H.typeLiteral("ByteBuffer");
    C.Type_ByteData_zNC = H.typeLiteral("ByteData");
    C.Type_ErrorRef_Ltj = H.typeLiteral("ErrorRef");
    C.Type_Error_9Cx = H.typeLiteral("Error");
    C.Type_FieldRef_YUI = H.typeLiteral("FieldRef");
    C.Type_Float32List_LB7 = H.typeLiteral("Float32List");
    C.Type_Float64List_LB7 = H.typeLiteral("Float64List");
    C.Type_FrameworkController_QHx = H.typeLiteral("FrameworkController");
    C.Type_InstanceRef_N4G = H.typeLiteral("InstanceRef");
    C.Type_Int16List_uXf = H.typeLiteral("Int16List");
    C.Type_Int32List_O50 = H.typeLiteral("Int32List");
    C.Type_Int8List_ekJ = H.typeLiteral("Int8List");
    C.Type_JSObject_8k0 = H.typeLiteral("JSObject");
    C.Type_MessageBus_MAi = H.typeLiteral("MessageBus");
    C.Type_Null_Yyn = H.typeLiteral("Null");
    C.Type_RPCError_Tnu = H.typeLiteral("RPCError");
    C.Type_ServiceConnectionManager_qdG = H.typeLiteral("ServiceConnectionManager");
    C.Type_String_k8F = H.typeLiteral("String");
    C.Type_Uint16List_2bx = H.typeLiteral("Uint16List");
    C.Type_Uint32List_2bx = H.typeLiteral("Uint32List");
    C.Type_Uint8ClampedList_Jik = H.typeLiteral("Uint8ClampedList");
    C.Type_Uint8List_WLA = H.typeLiteral("Uint8List");
    C.Type_bool_lhE = H.typeLiteral("bool");
    C.Type_double_K1J = H.typeLiteral("double");
    C.Type_int_tHn = H.typeLiteral("int");
    C.Type_num_cv7 = H.typeLiteral("num");
    C.UrlIcon_0 = new S.UrlIcon("/icons/debug_banner.png", false);
    C.UrlIcon_23h = new S.UrlIcon("/icons/debug_paint.png", false);
    C.UrlIcon_46y = new S.UrlIcon("/icons/general/pause_white@2x.png", true);
    C.UrlIcon_ACG = new S.UrlIcon("/icons/hot-restart-white.png", false);
    C.UrlIcon_Amm = new S.UrlIcon("/icons/general/performance_overlay.png", false);
    C.UrlIcon_Db0 = new S.UrlIcon("/icons/history.png", false);
    C.UrlIcon_Dfi = new S.UrlIcon("/icons/general/locate.png", false);
    C.UrlIcon_Eyg = new S.UrlIcon("/icons/hot-reload-white.png", false);
    C.UrlIcon_JmU = new S.UrlIcon("/icons/general/resume_white_disabled@2x.png", true);
    C.UrlIcon_QOR = new S.UrlIcon("/icons/memory/ic_search.png", false);
    C.UrlIcon_UIA = new S.UrlIcon("/icons/phone.png", false);
    C.UrlIcon_USK = new S.UrlIcon("/icons/memory/settings.png", true);
    C.UrlIcon_gTM = new S.UrlIcon("/icons/memory/snapshot_color.png", false);
    C.UrlIcon_lyL = new S.UrlIcon("/icons/general/pause_black@2x.png", true);
    C.UrlIcon_m7u = new S.UrlIcon("/icons/memory/ic_delete_outline_black.png", true);
    C.UrlIcon_nod = new S.UrlIcon("/icons/widget_tree.png", false);
    C.UrlIcon_omH = new S.UrlIcon("/icons/memory/reset_icon.png", true);
    C.UrlIcon_oxV = new S.UrlIcon("/icons/perf/RedExcl.png", false);
    C.UrlIcon_y9i = new S.UrlIcon("/icons/general/resume_black_disabled@2x.png", false);
    C.UrlIcon_zgw = new S.UrlIcon("/icons/repaint_rainbow.png", false);
    C.Utf8Decoder_false = new P.Utf8Decoder(false);
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
    C._RegisterBinaryZoneFunction_kGu = new P._RegisterBinaryZoneFunction(C.C__RootZone, P.async___rootRegisterBinaryCallback$closure());
    C._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback = new P._RegisterNullaryZoneFunction(C.C__RootZone, P.async___rootRegisterCallback$closure());
    C._RegisterUnaryZoneFunction_Bqo = new P._RegisterUnaryZoneFunction(C.C__RootZone, P.async___rootRegisterUnaryCallback$closure());
    C._RunBinaryZoneFunction__RootZone__rootRunBinary = new P._RunBinaryZoneFunction(C.C__RootZone, P.async___rootRunBinary$closure());
    C._RunNullaryZoneFunction__RootZone__rootRun = new P._RunNullaryZoneFunction(C.C__RootZone, P.async___rootRun$closure());
    C._RunUnaryZoneFunction__RootZone__rootRunUnary = new P._RunUnaryZoneFunction(C.C__RootZone, P.async___rootRunUnary$closure());
    C._WordWrapParseMode_0 = new U._WordWrapParseMode("_WordWrapParseMode.inSpace");
    C._WordWrapParseMode_1 = new U._WordWrapParseMode("_WordWrapParseMode.inWord");
    C._WordWrapParseMode_2 = new U._WordWrapParseMode("_WordWrapParseMode.atBreak");
    C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P.async___rootCreatePeriodicTimer$closure(), type$._ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function_Timer);
    C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P.async___rootHandleUncaughtError$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P.async___rootCreateTimer$closure(), type$._ZoneFunction_of_Timer_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Duration_and_void_Function);
    C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootErrorCallback$closure(), type$._ZoneFunction_of_AsyncError_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P.async___rootFork$closure(), type$._ZoneFunction_of_Zone_Function_5_Zone_and_ZoneDelegate_and_Zone_and_ZoneSpecification_and_Map_dynamic_dynamic);
    C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P.async___rootPrint$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String);
    C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P.async___rootScheduleMicrotask$closure(), type$._ZoneFunction_of_void_Function_4_Zone_and_ZoneDelegate_and_Zone_and_void_Function);
    C._ZoneSpecification_2jN = new P._ZoneSpecification(U.html_main___handleUncaughtError$closure(), null, null, null, null, null, null, null, null, null, null, null, null);
    C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $.printToZone = null;
    $.Primitives_timerFrequency = null;
    $.Primitives_timerTicks = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = [];
    $.Encoding__nameToEncoding = P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], type$.String, type$.Encoding);
    $.Expando__keyCount = 0;
    $.Stopwatch__frequency = null;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Function);
    $.Device__isOpera = null;
    $.Device__isIE = null;
    $.Device__isFirefox = null;
    $.Device__isWebKit = null;
    $.Device__cachedCssPrefix = null;
    $.CodeMirror__instances = P.LinkedHashMap_LinkedHashMap$_empty(type$.JsObject, H.findType("CodeMirror"));
    $._toStringVisiting0 = [];
    $._asciiMeasurements = null;
    $.offlineMode = false;
    $.globals = P.LinkedHashMap_LinkedHashMap$_empty(H.findType("Type"), type$.dynamic);
    $.Category__categories = null;
    $.Catalog__cachedCatalog = null;
    $.Catalog__instance = null;
    $._inspectorDependenciesLoaded = false;
    $.InspectorService_nextGroupId = 0;
    $.FullTimelineFlameChartCanvas_sectionLabelWidths = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.double);
    $._uiColorOffset = 0;
    $._gpuColorOffset = 0;
    $._asyncColorOffset = 0;
    $._unknownColorOffset = 0;
    $.debugHandledTraceEvents = H.setRuntimeTypeInfo([], type$.JSArray_Map_String_dynamic);
    $._traceEventWrapperId = 0;
    $._gaEnabled = null;
    $._lastGaError = null;
    $._userAppType = "";
    $._userBuildType = "";
    $._userPlatformType = "";
    $._devtoolsPlatformType = "";
    $._devtoolsChrome = "";
    $._ideLaunched = "";
    $._flutterClientId = "";
    $._analyticsComputed = false;
    $._computing = false;
    $._stillWaiting = 0;
    $.uiColorPalette = H.setRuntimeTypeInfo([C.ThemedColor_Color_4286698746_Color_4288593657, C.ThemedColor_Color_4283417591_Color_4287280375, C.ThemedColor_Color_4280923894_Color_4284914934], type$.JSArray_ThemedColor);
    $.rasterColorPalette = H.setRuntimeTypeInfo([C.ThemedColor_Color_4278356177_Color_4279923688, C.ThemedColor_Color_4278351805_Color_4279854802, C.ThemedColor_Color_4278278043_Color_4279785917], type$.JSArray_ThemedColor);
    $._debugPrintedCharacters = 0;
    $._debugPrintCompleter = null;
    $._debugPrintScheduled = false;
    $._cssColors = P.LinkedHashMap_LinkedHashMap$_empty(type$.Color, type$.String);
    $._MaterialIconRenderer__iconsFont = null;
    $._MaterialIconRenderer__iconsFontFuture = null;
    $._MaterialIconRenderer__fontLoaded = false;
    $.FlutterMaterialIcons__iconCache = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, H.findType("MaterialIcon"));
    $._hiddenPages = null;
    $.Intl__defaultLocale = null;
    $.DateFormat__useNativeDigitsByDefault = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.bool);
    $.currencyFractionDigits = P.LinkedHashMap_LinkedHashMap$_literal(["ADP", 0, "AFN", 0, "ALL", 0, "AMD", 2, "BHD", 3, "BIF", 0, "BYN", 2, "BYR", 0, "CAD", 2, "CHF", 2, "CLF", 4, "CLP", 0, "COP", 2, "CRC", 2, "CZK", 2, "DEFAULT", 2, "DJF", 0, "DKK", 2, "ESP", 0, "GNF", 0, "GYD", 2, "HUF", 2, "IDR", 2, "IQD", 0, "IRR", 0, "ISK", 0, "ITL", 0, "JOD", 3, "JPY", 0, "KMF", 0, "KPW", 0, "KRW", 0, "KWD", 3, "LAK", 0, "LBP", 0, "LUF", 0, "LYD", 3, "MGA", 0, "MGF", 0, "MMK", 0, "MNT", 2, "MRO", 0, "MUR", 2, "NOK", 2, "OMR", 3, "PKR", 2, "PYG", 0, "RSD", 0, "RWF", 0, "SEK", 2, "SLL", 0, "SOS", 0, "STD", 0, "SYP", 0, "TMM", 0, "TND", 3, "TRL", 0, "TWD", 2, "TZS", 2, "UGX", 0, "UYI", 0, "UYW", 4, "UZS", 2, "VEF", 2, "VND", 0, "VUV", 0, "XAF", 0, "XOF", 0, "XPF", 0, "YER", 0, "ZMK", 0, "ZWD", 0], type$.String, type$.int);
    $.cachedDateSymbols = null;
    $.lastDateSymbolLocale = null;
    $.LogRecord__nextNumber = 0;
    $.Logger__loggers = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger);
    $._currentUriBase = null;
    $._current = null;
    $.Browser_navigator = null;
    $._browser = null;
    $._typeFactories = P.LinkedHashMap_LinkedHashMap$_literal(["AllocationProfile", Q.vm_service_AllocationProfile_parse$closure(), "BoundField", Q.vm_service_BoundField_parse$closure(), "BoundVariable", Q.vm_service_BoundVariable_parse$closure(), "Breakpoint", Q.vm_service_Breakpoint_parse$closure(), "@Class", Q.vm_service_ClassRef_parse$closure(), "Class", Q.vm_service_Class_parse$closure(), "ClassHeapStats", Q.vm_service_ClassHeapStats_parse$closure(), "ClassList", Q.vm_service_ClassList_parse$closure(), "ClientName", Q.vm_service_ClientName_parse$closure(), "@Code", Q.vm_service_CodeRef_parse$closure(), "Code", Q.vm_service_Code_parse$closure(), "@Context", Q.vm_service_ContextRef_parse$closure(), "Context", Q.vm_service_Context_parse$closure(), "ContextElement", Q.vm_service_ContextElement_parse$closure(), "CpuSamples", Q.vm_service_CpuSamples_parse$closure(), "CpuSample", Q.vm_service_CpuSample_parse$closure(), "@Error", Q.vm_service_ErrorRef_parse$closure(), "Error", Q.vm_service_Error_parse$closure(), "Event", Q.vm_service_Event_parse$closure(), "ExtensionData", Q.vm_service_ExtensionData_parse$closure(), "@Field", Q.vm_service_FieldRef_parse$closure(), "Field", Q.vm_service_Field_parse$closure(), "Flag", Q.vm_service_Flag_parse$closure(), "FlagList", Q.vm_service_FlagList_parse$closure(), "Frame", Q.vm_service_Frame_parse$closure(), "@Function", Q.vm_service_FuncRef_parse$closure(), "Function", Q.vm_service_Func_parse$closure(), "@Instance", Q.vm_service_InstanceRef_parse$closure(), "Instance", Q.vm_service_Instance_parse$closure(), "@Isolate", Q.vm_service_IsolateRef_parse$closure(), "Isolate", Q.vm_service_Isolate_parse$closure(), "@IsolateGroup", Q.vm_service_IsolateGroupRef_parse$closure(), "IsolateGroup", Q.vm_service_IsolateGroup_parse$closure(), "InboundReferences", Q.vm_service_InboundReferences_parse$closure(), "InboundReference", Q.vm_service_InboundReference_parse$closure(), "InstanceSet", Q.vm_service_InstanceSet_parse$closure(), "@Library", Q.vm_service_LibraryRef_parse$closure(), "Library", Q.vm_service_Library_parse$closure(), "LibraryDependency", Q.vm_service_LibraryDependency_parse$closure(), "LogRecord", Q.vm_service_LogRecord_parse$closure(), "MapAssociation", Q.vm_service_MapAssociation_parse$closure(), "MemoryUsage", Q.vm_service_MemoryUsage_parse$closure(), "Message", Q.vm_service_Message_parse$closure(), "NativeFunction", Q.vm_service_NativeFunction_parse$closure(), "@Null", Q.vm_service_NullValRef_parse$closure(), "Null", Q.vm_service_NullVal_parse$closure(), "@Object", Q.vm_service_ObjRef_parse$closure(), "Object", Q.vm_service_Obj_parse$closure(), "ProfileFunction", Q.vm_service_ProfileFunction_parse$closure(), "ReloadReport", Q.vm_service_ReloadReport_parse$closure(), "RetainingObject", Q.vm_service_RetainingObject_parse$closure(), "RetainingPath", Q.vm_service_RetainingPath_parse$closure(), "Response", Q.vm_service_Response_parse$closure(), "Sentinel", Q.vm_service_Sentinel_parse$closure(), "@Script", Q.vm_service_ScriptRef_parse$closure(), "Script", Q.vm_service_Script_parse$closure(), "ScriptList", Q.vm_service_ScriptList_parse$closure(), "SourceLocation", Q.vm_service_SourceLocation_parse$closure(), "SourceReport", Q.vm_service_SourceReport_parse$closure(), "SourceReportCoverage", Q.vm_service_SourceReportCoverage_parse$closure(), "SourceReportRange", Q.vm_service_SourceReportRange_parse$closure(), "Stack", Q.vm_service_Stack_parse$closure(), "Success", Q.vm_service_Success_parse$closure(), "Timeline", Q.vm_service_Timeline_parse$closure(), "TimelineEvent", Q.vm_service_TimelineEvent_parse$closure(), "TimelineFlags", Q.vm_service_TimelineFlags_parse$closure(), "Timestamp", Q.vm_service_Timestamp_parse$closure(), "@TypeArguments", Q.vm_service_TypeArgumentsRef_parse$closure(), "TypeArguments", Q.vm_service_TypeArguments_parse$closure(), "UnresolvedSourceLocation", Q.vm_service_UnresolvedSourceLocation_parse$closure(), "Version", Q.vm_service_Version_parse$closure(), "@VM", Q.vm_service_VMRef_parse$closure(), "VM", Q.vm_service_VM_parse$closure()], type$.String, type$.Function);
    $._methodReturnTypes = P.LinkedHashMap_LinkedHashMap$_literal(["addBreakpoint", C.List_Breakpoint, "addBreakpointWithScriptUri", C.List_Breakpoint, "addBreakpointAtEntry", C.List_Breakpoint, "clearCpuSamples", C.List_Success, "clearVMTimeline", C.List_Success, "invoke", C.List_InstanceRef_ErrorRef, "evaluate", C.List_InstanceRef_ErrorRef, "evaluateInFrame", C.List_InstanceRef_ErrorRef, "getAllocationProfile", C.List_AllocationProfile, "getClassList", C.List_ClassList, "getClientName", C.List_ClientName, "getCpuSamples", C.List_CpuSamples, "getFlagList", C.List_FlagList, "getInboundReferences", C.List_InboundReferences, "getInstances", C.List_InstanceSet, "getIsolate", C.List_Isolate, "getIsolateGroup", C.List_IsolateGroup, "getMemoryUsage", C.List_MemoryUsage, "getIsolateGroupMemoryUsage", C.List_MemoryUsage, "getScripts", C.List_ScriptList, "getObject", C.List_Obj, "getRetainingPath", C.List_RetainingPath, "getStack", C.List_Stack, "getSourceReport", C.List_SourceReport, "getVersion", C.List_Version, "getVM", C.List_VM, "getVMTimeline", C.List_Timeline, "getVMTimelineFlags", C.List_TimelineFlags, "getVMTimelineMicros", C.List_Timestamp, "pause", C.List_Success, "kill", C.List_Success, "registerService", C.List_Success, "reloadSources", C.List_ReloadReport, "removeBreakpoint", C.List_Success, "requestHeapSnapshot", C.List_Success, "requirePermissionToResume", C.List_Success, "resume", C.List_Success, "setClientName", C.List_Success, "setExceptionPauseMode", C.List_Success, "setFlag", C.List_Success_Error, "setLibraryDebuggable", C.List_Success, "setName", C.List_Success, "setVMName", C.List_Success, "setVMTimelineFlags", C.List_Success, "streamCancel", C.List_Success, "streamListen", C.List_Success], type$.String, type$.List_String);
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return P._Future$zoneValue(null, C.C__RootZone, type$.Null);
    });
    _lazy($, "Future__falseFuture", "$get$Future__falseFuture", function() {
      return P._Future$zoneValue(false, C.C__RootZone, type$.bool);
    });
    _lazy($, "_RootZone__rootMap", "$get$_RootZone__rootMap", function() {
      var t1 = type$.dynamic;
      return P.HashMap_HashMap(null, null, null, t1, t1);
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int)));
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", false);
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
      return {};
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], type$.String);
    });
    _lazy($, "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
      return P.RegExp_RegExp("^\\S+$", false);
    });
    _lazy($, "_context", "$get$_context", function() {
      return type$.JsObject._as(P._wrapToDart(self));
    });
    _lazy($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartObject");
    });
    _lazy($, "_dartProxyCtor", "$get$_dartProxyCtor", function() {
      return function DartObject(o) {
        this.o = o;
      };
    });
    _lazy($, "trackWidgetCreationWarning", "$get$trackWidgetCreationWarning", function() {
      var _null = null,
        t1 = A.div(_null, _null, _null);
      t1.add$1(0, A.span(_null, _null, "The "));
      t1.add$1(0, A.a("https://flutter.dev/docs/development/tools/devtools/inspector#track-widget-creation", "_blank;", "widget creation tracking feature"));
      t1.add$1(0, A.span(_null, _null, " is not enabled. "));
      t1.add$1(0, A.span(_null, _null, "This feature allows the Flutter inspector to present \nthe widget tree in a manner similar to how the UI was defined in your source\ncode. Without it, the tree of nodes in the widget tree are much deeper, and it\ncan be more difficult to understand how the runtime widget hierarchy corresponds\nto your application\u2019s UI."));
      return G.HtmlMessage$(C.MessageType_1, H.setRuntimeTypeInfo([t1, A.div(_null, _null, "To fix this, relaunch your application by running \n'flutter run --track-widget-creation' (or run your application from VS Code or\nIntelliJ).")], type$.JSArray_CoreElement), "trackWidgetCreationWarningId", _null, _null);
    });
    _lazy($, "debugWarning", "$get$debugWarning", function() {
      var _null = null,
        t1 = A.div(_null, _null, "You are running your app in debug mode. Debug mode frame rendering times are not indicative of release performance."),
        t2 = A.div(_null, _null, _null);
      t2.add$1(0, A.span(_null, _null, "Relaunch your application with the '--profile' argument, or \n"));
      t2.add$1(0, A.a("https://flutter.dev/docs/testing/ui-performance#run-in-profile-mode", "_blank;", "relaunch in profile mode from VS Code or IntelliJ"));
      t2.add$1(0, A.span(_null, _null, "."));
      return G.HtmlMessage$(C.MessageType_1, H.setRuntimeTypeInfo([t1, t2], type$.JSArray_CoreElement), "debugWarningId", _null, _null);
    });
    _lazy($, "profileGranularityWarning", "$get$profileGranularityWarning", function() {
      var _null = null,
        t1 = A.div(_null, _null, "You are opting in to a high CPU sampling rate. This may affect the performance of your application."),
        t2 = A.div(_null, _null, _null);
      t2.add$1(0, A.span(_null, _null, "Please read our "));
      t2.add$1(0, A.a("https://flutter.dev/docs/development/tools/devtools/performance#profile-granularity", "_blank;", "documentation"));
      t2.add$1(0, A.span(_null, _null, " to understand the trade-offs associated with this setting."));
      return G.HtmlMessage$(C.MessageType_1, H.setRuntimeTypeInfo([t1, t2], type$.JSArray_CoreElement), "highSamplingRateWarning", _null, _null);
    });
    _lazy($, "diagnosticLevelUtils", "$get$diagnosticLevelUtils", function() {
      return T.EnumUtils$(C.List_szR, H.findType("DiagnosticLevel"));
    });
    _lazy($, "treeStyleUtils", "$get$treeStyleUtils", function() {
      return T.EnumUtils$(C.List_Khz, H.findType("DiagnosticsTreeStyle"));
    });
    _lazy($, "RemoteDiagnosticsNode_iconMaker", "$get$RemoteDiagnosticsNode_iconMaker", function() {
      return S.CustomIconMaker$();
    });
    _lazy($, "unimportant", "$get$unimportant", function() {
      var _null = null;
      return U.TextStyle$(K.ThemedColor$(C.MaterialColor_Map_HFpTk_4288585374.get$shade500(), C.MaterialColor_Map_HFpTk_4288585374.$index(0, 600)), _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null);
    });
    _lazy($, "warning", "$get$warning", function() {
      var _null = null;
      return U.TextStyle$(K.ThemedColor$(C.MaterialColor_Map_JNZaB_4294940672.$index(0, 900), C.MaterialColor_Map_JNZaB_4294940672.get$shade400()), _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null);
    });
    _lazy($, "error0", "$get$error", function() {
      var _null = null;
      return U.TextStyle$(K.ThemedColor$(C.MaterialColor_Map_JNc9P_4294198070.get$shade500(), C.MaterialColor_Map_JNc9P_4294198070.get$shade400()), _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null);
    });
    _lazy($, "treeNodePrimaryDescriptionPattern", "$get$treeNodePrimaryDescriptionPattern", function() {
      return P.RegExp_RegExp("^([\\w ]+)(.*)$", false);
    });
    _lazy($, "assertionThrownBuildingError", "$get$assertionThrownBuildingError", function() {
      return P.RegExp_RegExp("^(The following assertion was thrown building [a-zA-Z]+)(\\(.*\\))(:)$", false);
    });
    _lazy($, "collapseArrow", "$get$collapseArrow", function() {
      return K.MaterialIcon$("arrow_drop_down", C.MaterialColor_Map_HFpTk_4288585374, 0, 58821, 32, 11);
    });
    _lazy($, "expandArrow", "$get$expandArrow", function() {
      return K.MaterialIcon$("arrow_drop_down", C.MaterialColor_Map_HFpTk_4288585374, -1.5707963267948966, 58821, 32, 11);
    });
    _lazy($, "InspectorTreeNodeRenderCanvasBuilder__measurementCanvas", "$get$InspectorTreeNodeRenderCanvasBuilder__measurementCanvas", function() {
      return C.CanvasElement_methods.get$context2D(W.CanvasElement_CanvasElement(1, 1));
    });
    _lazy($, "_colorIconMaker", "$get$_colorIconMaker", function() {
      return new S.ColorIconMaker(P.LinkedHashMap_LinkedHashMap$_empty(type$.Color, H.findType("DevToolsIcon")));
    });
    _lazy($, "_customIconMaker", "$get$_customIconMaker", function() {
      return S.CustomIconMaker$();
    });
    _lazy($, "defaultIcon", "$get$defaultIcon", function() {
      return $.$get$_customIconMaker().fromInfo$1("Default");
    });
    _lazy($, "timeFormat", "$get$timeFormat", function() {
      var t1 = new T.DateFormat(new T.DateFormat_closure());
      t1._locale = T.Intl_verifiedLocale(null, T.intl_DateFormat_localeExists$closure(), T.intl_Intl__throwLocaleError$closure());
      t1.addPattern$1("HH:mm:ss.SSS");
      return t1;
    });
    _lazy($, "MemoryPlotly_rssColor", "$get$MemoryPlotly_rssColor", function() {
      return Y.colorToCss(C.ThemedColor_Color_4294675456_Color_4293284096);
    });
    _lazy($, "MemoryPlotly_capacityColor", "$get$MemoryPlotly_capacityColor", function() {
      return Y.colorToCss(C.ThemedColor_Color_4282735204_Color_4291811548);
    });
    _lazy($, "MemoryPlotly_externalColor", "$get$MemoryPlotly_externalColor", function() {
      return Y.colorToCss(C.ThemedColor_Color_4278351805_Color_4278278043);
    });
    _lazy($, "MemoryPlotly_usedColor", "$get$MemoryPlotly_usedColor", function() {
      return Y.colorToCss(C.ThemedColor_Color_4283417591_Color_4280923894);
    });
    _lazy($, "MemoryPlotly_gcColor", "$get$MemoryPlotly_gcColor", function() {
      return Y.colorToCss(C.ThemedColor_Color_4278430196_Color_4278426597);
    });
    _lazy($, "CpuProfilerController_baseStateCpuProfileData", "$get$CpuProfilerController_baseStateCpuProfileData", function() {
      return E.CpuProfileData_parse(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    });
    _lazy($, "debugAllowBanner", "$get$debugAllowBanner", function() {
      return E.ToggleableServiceExtensionDescription$_("Debug Banner", "Show Debug Banner", false, "Hide Debug Banner", true, "ext.flutter.debugAllowBanner", "debugBanner", "inspector", C.UrlIcon_0, type$.bool);
    });
    _lazy($, "debugPaint", "$get$debugPaint", function() {
      return E.ToggleableServiceExtensionDescription$_("Debug Paint", "Show Debug Paint", false, "Hide Debug Paint", true, "ext.flutter.debugPaint", "debugPaint", "inspector", C.UrlIcon_23h, type$.bool);
    });
    _lazy($, "debugPaintBaselines", "$get$debugPaintBaselines", function() {
      return E.ToggleableServiceExtensionDescription$_("Paint Baselines", "Show Paint Baselines", false, "Hide Paint Baselines", true, "ext.flutter.debugPaintBaselinesEnabled", "paintBaseline", "inspector", C.UrlIcon_cAH, type$.bool);
    });
    _lazy($, "performanceOverlay", "$get$performanceOverlay", function() {
      return E.ToggleableServiceExtensionDescription$_("Performance Overlay", "Show Performance Overlay", false, "Hide Performance Overlay", true, "ext.flutter.showPerformanceOverlay", "performanceOverlay", "inspector", C.UrlIcon_Amm, type$.bool);
    });
    _lazy($, "profileWidgetBuilds", "$get$profileWidgetBuilds", function() {
      return E.ToggleableServiceExtensionDescription$_("Track Widget Builds", "Enable tracking widget builds", false, "Disable tracking widget builds", true, "ext.flutter.profileWidgetBuilds", "trackRebuilds", "performance", C.UrlIcon_nod, type$.bool);
    });
    _lazy($, "repaintRainbow", "$get$repaintRainbow", function() {
      return E.ToggleableServiceExtensionDescription$_("Repaint Rainbow", "Show Repaint Rainbow", false, "Hide Repaint Rainbow", true, "ext.flutter.repaintRainbow", "repaintRainbow", "inspector", C.UrlIcon_zgw, type$.bool);
    });
    _lazy($, "slowAnimations", "$get$slowAnimations", function() {
      return E.ToggleableServiceExtensionDescription$_("Slow Animations", "Enable Slow Animations", 1, "Disable Slow Animations", 5, "ext.flutter.timeDilation", "slowAnimation", "inspector", C.UrlIcon_Db0, type$.num);
    });
    _lazy($, "togglePlatformMode", "$get$togglePlatformMode", function() {
      var t1 = type$.JSArray_String,
        t2 = H.setRuntimeTypeInfo(["iOS", "android", "fuchsia", "macOS", "linux"], t1);
      return E.ServiceExtensionDescription$("Override target platform", H.setRuntimeTypeInfo(["Platform: iOS", "Platform: Android", "Platform: Fuchsia", "Platform: MacOS", "Platform: Linux"], t1), "ext.flutter.platformOverride", "togglePlatform", "inspector", C.UrlIcon_UIA, H.setRuntimeTypeInfo(["Override Target Platform"], t1), t2, type$.String);
    });
    _lazy($, "toggleOnDeviceWidgetInspector", "$get$toggleOnDeviceWidgetInspector", function() {
      return E.ToggleableServiceExtensionDescription$_("Select Widget Mode", "Enable select widget mode", false, "Disable select widget mode", true, "ext.flutter.inspector.show", "showInspector", "inspector", C.UrlIcon_Dfi, type$.bool);
    });
    _lazy($, "toggleSelectWidgetMode", "$get$toggleSelectWidgetMode", function() {
      return E.ToggleableServiceExtensionDescription$_("Select widget mode", "Enter select widget mode", false, "Exit select widget mode", true, "ext.flutter.inspector.selectMode", "selectWidgetMode", "inspector", C.UrlIcon_Dfi, type$.bool);
    });
    _lazy($, "enableOnDeviceInspector", "$get$enableOnDeviceInspector", function() {
      return E.ToggleableServiceExtensionDescription$_("Enable on-device inspector", "Enter on-device inspector", false, "Exit on-device inspector", true, "ext.flutter.inspector.enable", "enableOnDeviceInspector", "inspector", C.UrlIcon_Dfi, type$.bool);
    });
    _lazy($, "structuredErrors", "$get$structuredErrors", function() {
      return E.ToggleableServiceExtensionDescription$_("Show structured errors", "Show structured errors for Flutter framework issues", false, "Disable structured errors for Flutter framework issues", true, "ext.flutter.inspector.structuredErrors", "structuredErrors", "logging", C.UrlIcon_oxV, type$.bool);
    });
    _lazy($, "_extensionDescriptions", "$get$_extensionDescriptions", function() {
      return H.setRuntimeTypeInfo([$.$get$debugPaint(), $.$get$debugPaintBaselines(), $.$get$repaintRainbow(), $.$get$performanceOverlay(), $.$get$debugAllowBanner(), $.$get$profileWidgetBuilds(), $.$get$toggleOnDeviceWidgetInspector(), $.$get$toggleSelectWidgetMode(), $.$get$enableOnDeviceInspector(), $.$get$togglePlatformMode(), $.$get$slowAnimations(), $.$get$structuredErrors()], H.findType("JSArray<ServiceExtensionDescription<@>>"));
    });
    _lazy($, "serviceExtensionsWhitelist", "$get$serviceExtensionsWhitelist", function() {
      var t1 = $.$get$_extensionDescriptions(),
        map = P.LinkedHashMap_LinkedHashMap(null, null, type$.String, type$.ServiceExtensionDescription_dynamic);
      P.MapBase__fillMapWithMappedIterable(map, t1, new E.closure(), new E.closure0());
      return map;
    });
    _lazy($, "guidelineColorCss", "$get$guidelineColorCss", function() {
      return Y.colorToCss(C.ThemedColor_Color_2315255808_Color_4291348680);
    });
    _lazy($, "debugFrameTracking", "$get$debugFrameTracking", function() {
      return P.StringBuffer$("");
    });
    _lazy($, "mainUnknownColor", "$get$mainUnknownColor", function() {
      return K.ThemedColor_fromSingleColor(C.Color_4291475689);
    });
    _lazy($, "mainAsyncColor", "$get$mainAsyncColor", function() {
      return K.ThemedColor_fromSingleColor(C.Color_4286630852);
    });
    _lazy($, "asyncColorPalette", "$get$asyncColorPalette", function() {
      return H.setRuntimeTypeInfo([$.$get$mainAsyncColor(), K.ThemedColor_fromSingleColor(C.Color_4283283116), K.ThemedColor_fromSingleColor(C.Color_4280723098)], type$.JSArray_ThemedColor);
    });
    _lazy($, "unknownColorPalette", "$get$unknownColorPalette", function() {
      return H.setRuntimeTypeInfo([$.$get$mainUnknownColor(), K.ThemedColor_fromSingleColor(C.Color_4289961435), K.ThemedColor_fromSingleColor(C.Color_4288513226)], type$.JSArray_ThemedColor);
    });
    _lazy($, "sparseTextConfiguration", "$get$sparseTextConfiguration", function() {
      return U.TextTreeConfiguration$(true, "", ":", "", "", "", "", "", true, false, "\n", true, "\u2502", "", "\u2514\u2500", "\u251c\u2500", " ", " ", "\u2502 ", "  ", "", true, "");
    });
    _lazy($, "dashedTextConfiguration", "$get$dashedTextConfiguration", function() {
      return U.TextTreeConfiguration$(true, "", ":", "", "", "", "", "", true, false, "\n", true, "\u254e", "", "\u2514\u254c", "\u254e\u254c", " ", " ", "\u2502 ", "  ", "", true, "");
    });
    _lazy($, "denseTextConfiguration", "$get$denseTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", false, false, "\n", false, "\u2502", "", "\u2514", "\u251c", "", "", "\u2502", " ", ", ", true, "");
    });
    _lazy($, "transitionTextConfiguration", "$get$transitionTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, ":", " \u2550\u2550\u2550", "", "", "", "  ", " \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", false, true, "\n", true, "\u2502", "", "\u2558\u2550\u2566\u2550\u2550 ", "\u255e\u2550\u2566\u2550\u2550 ", " \u2551 ", "", "", "", "", true, "");
    });
    _lazy($, "errorTextConfiguration", "$get$errorTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, "", ":", "", "\u2550\u2550\u2561 ", "", "", " \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", false, false, "\n", true, "\u2502", "\u2550\u2550\u2550\u2550\u2550", "\u2558\u2550\u2566", "\u255e\u2550\u2566", " \u2551 ", "", "", "", "", true, " \u255e\u2550\u2550");
    });
    _lazy($, "whitespaceTextConfiguration", "$get$whitespaceTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, " ", "", "", "", " ", "  ", "", "", "", true, "");
    });
    _lazy($, "flatTextConfiguration", "$get$flatTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, "", "", "", "", "", "", "", "", "", true, "");
    });
    _lazy($, "singleLineTextConfiguration", "$get$singleLineTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", true, false, "", false, "", "", "", "", "", "", "  ", "  ", ", ", false, "");
    });
    _lazy($, "errorPropertyTextConfiguration", "$get$errorPropertyTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", true, true, "\n", false, "", "", "", "", "", "", "  ", "  ", ", ", false, "");
    });
    _lazy($, "shallowTextConfiguration", "$get$shallowTextConfiguration", function() {
      return U.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, " ", "", "", "", " ", "  ", "", "", "", false, "");
    });
    _lazy($, "_debugPrintBuffer", "$get$_debugPrintBuffer", function() {
      return P.ListQueue$(type$.String);
    });
    _lazy($, "_debugPrintStopwatch", "$get$_debugPrintStopwatch", function() {
      return P.Stopwatch$();
    });
    _lazy($, "_devicePixelRatio", "$get$_devicePixelRatio", function() {
      return W.window().devicePixelRatio;
    });
    _lazy($, "rendererExpando", "$get$rendererExpando", function() {
      return P.Expando$("IconRenderer", H.findType("HtmlIconRenderer<DevToolsIcon>"));
    });
    _lazy($, "clearIcon", "$get$clearIcon", function() {
      return K.MaterialIcon$("block", C.ThemedColor_Color_4280559918_Color_4287215096, 0, 57675, 18, 18);
    });
    _lazy($, "exitIcon", "$get$exitIcon", function() {
      return K.MaterialIcon$("clear", C.ThemedColor_Color_4280559918_Color_4287215096, 0, 57676, 18, 18);
    });
    _lazy($, "exportIcon", "$get$exportIcon", function() {
      return K.MaterialIcon$("file_download", C.ThemedColor_Color_4280559918_Color_4287215096, 0, 58052, 18, 18);
    });
    _lazy($, "recordPrimary", "$get$recordPrimary", function() {
      return K.MaterialIcon$("fiber_manual_record", C.ThemedColor_Color_4294967295_Color_4278190080, 0, 57441, 18, 18);
    });
    _lazy($, "record", "$get$record", function() {
      return K.MaterialIcon$("fiber_manual_record", C.ThemedColor_Color_4280559918_Color_4287215096, 0, 57441, 18, 18);
    });
    _lazy($, "stop", "$get$stop", function() {
      return K.MaterialIcon$("stop", C.ThemedColor_Color_4280559918_Color_4287215096, 0, 57415, 18, 18);
    });
    _lazy($, "maxJsInt", "$get$maxJsInt", function() {
      return H._asIntS(P.pow(2, 52));
    });
    _lazy($, "nf", "$get$nf", function() {
      return T.NumberFormat$decimalPattern();
    });
    _lazy($, "_CpuProfileTimelineTree__timelineTreeExpando", "$get$_CpuProfileTimelineTree__timelineTreeExpando", function() {
      return P.Expando$(null, H.findType("_CpuProfileTimelineTree"));
    });
    _lazy($, "_escapedChar", "$get$_escapedChar", function() {
      return P.RegExp_RegExp('["\\x00-\\x1F\\x7F]', false);
    });
    _lazy($, "token", "$get$token", function() {
      return P.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', false);
    });
    _lazy($, "_lws", "$get$_lws", function() {
      return P.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", false);
    });
    _lazy($, "_quotedString", "$get$_quotedString", function() {
      return P.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', false);
    });
    _lazy($, "_quotedPair", "$get$_quotedPair", function() {
      return P.RegExp_RegExp("\\\\(.)", false);
    });
    _lazy($, "nonToken", "$get$nonToken", function() {
      return P.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', false);
    });
    _lazy($, "whitespace", "$get$whitespace", function() {
      return P.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*", false);
    });
    _lazy($, "en_USSymbols", "$get$en_USSymbols", function() {
      return new B.DateSymbols("en_US", C.List_BC_AD, C.List_6xs, C.List_qpm, C.List_qpm, C.List_cIc, C.List_cIc, C.List_h8w, C.List_h8w, C.List_wMy, C.List_wMy, C.List_gc6, C.List_gc6, C.List_3US, C.List_Q1_Q2_Q3_Q4, C.List_bJM, C.List_AM_PM);
    });
    _lazy($, "DateFormat__matchers", "$get$DateFormat__matchers", function() {
      return H.setRuntimeTypeInfo([P.RegExp_RegExp("^'(?:[^']|'')*'", false), P.RegExp_RegExp("^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|D+|m+|s+|v+|z+|Z+)", false), P.RegExp_RegExp("^[^'GyMkSEahKHcLQdDmsvzZ]+", false)], H.findType("JSArray<RegExp>"));
    });
    _lazy($, "DateFormat__asciiZeroCodeUnit", "$get$DateFormat__asciiZeroCodeUnit", function() {
      return 48;
    });
    _lazy($, "_DateFormatQuotedField__twoEscapedQuotes", "$get$_DateFormatQuotedField__twoEscapedQuotes", function() {
      return P.RegExp_RegExp("''", false);
    });
    _lazy($, "NumberFormat__ln10", "$get$NumberFormat__ln10", function() {
      return P.log0(10);
    });
    _lazy($, "NumberFormat__maxInt", "$get$NumberFormat__maxInt", function() {
      var t1 = P.pow(2, 52);
      return t1;
    });
    _lazy($, "NumberFormat__maxDigits", "$get$NumberFormat__maxDigits", function() {
      return C.JSDouble_methods.ceil$0(P.log0($.$get$NumberFormat__maxInt()) / P.log0(10));
    });
    _lazy($, "numberFormatSymbols", "$get$numberFormatSymbols", function() {
      var _s1_ = ",", _s1_0 = "\xa0", _s1_1 = "%", _s1_2 = "0", _s1_3 = "+", _s1_4 = "-", _s1_5 = "E", _s1_6 = "\u2030", _s1_7 = "\u221e", _s3_ = "NaN",
        _s9_ = "#,##0.###",
        _s3_0 = "#E0", _s6_ = "#,##0%",
        _s9_0 = "\xa4#,##0.00",
        _s1_8 = ".",
        _s2_ = "\u200e+",
        _s2_0 = "\u200e-",
        _s9_1 = "\u0644\u064a\u0633\xa0\u0631\u0642\u0645\u064b\u0627",
        _s10_ = "\xa4\xa0#,##0.00",
        _s10_0 = "#,##0.00\xa0\xa4",
        _s7_ = "#,##0\xa0%",
        _s12_ = "#,##,##0.###",
        _s3_1 = "EUR", _s3_2 = "USD",
        _s21_ = "\xa4\xa0#,##0.00;\xa4-#,##0.00",
        _s3_3 = "CHF",
        _s9_2 = "#,##,##0%",
        _s13_ = "\xa4\xa0#,##,##0.00",
        _s3_4 = "INR", _s1_9 = "\u2212",
        _s4_ = "\xd710^",
        _s5_ = "[#E0]",
        _s12_0 = "\xa4#,##,##0.00",
        _s24_ = "\u200f#,##0.00\xa0\xa4;\u200f-#,##0.00\xa0\xa4";
      return P.LinkedHashMap_LinkedHashMap$_literal(["af", B.NumberSymbols$(_s9_0, _s9_, _s1_, "ZAR", _s1_5, _s1_0, _s1_7, _s1_4, "af", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "am", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "ETB", _s1_5, _s1_, _s1_7, _s1_4, "am", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ar", B.NumberSymbols$(_s10_, _s9_, _s1_8, "EGP", _s1_5, _s1_, _s1_7, _s2_0, "ar", _s9_1, "\u200e%\u200e", _s6_, _s1_6, _s2_, _s3_0, _s1_2), "ar_DZ", B.NumberSymbols$(_s10_, _s9_, _s1_, "DZD", _s1_5, _s1_8, _s1_7, _s2_0, "ar_DZ", _s9_1, "\u200e%\u200e", _s6_, _s1_6, _s2_, _s3_0, _s1_2), "ar_EG", B.NumberSymbols$(_s10_0, _s9_, "\u066b", "EGP", "\u0627\u0633", "\u066c", _s1_7, "\u061c-", "ar_EG", "\u0644\u064a\u0633\xa0\u0631\u0642\u0645", "\u066a\u061c", _s6_, "\u0609", "\u061c+", _s3_0, "\u0660"), "az", B.NumberSymbols$(_s10_0, _s9_, _s1_, "AZN", _s1_5, _s1_8, _s1_7, _s1_4, "az", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "be", B.NumberSymbols$(_s10_0, _s9_, _s1_, "BYN", _s1_5, _s1_0, _s1_7, _s1_4, "be", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "bg", B.NumberSymbols$("0.00\xa0\xa4", _s9_, _s1_, "BGN", _s1_5, _s1_0, _s1_7, _s1_4, "bg", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "bn", B.NumberSymbols$("#,##,##0.00\xa4", _s12_, _s1_8, "BDT", _s1_5, _s1_, _s1_7, _s1_4, "bn", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, "\u09e6"), "br", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_0, _s1_7, _s1_4, "br", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "bs", B.NumberSymbols$(_s10_0, _s9_, _s1_, "BAM", _s1_5, _s1_8, _s1_7, _s1_4, "bs", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "ca", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "ca", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "chr", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_2, _s1_5, _s1_, _s1_7, _s1_4, "chr", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "cs", B.NumberSymbols$(_s10_0, _s9_, _s1_, "CZK", _s1_5, _s1_0, _s1_7, _s1_4, "cs", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "cy", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "GBP", _s1_5, _s1_, _s1_7, _s1_4, "cy", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "da", B.NumberSymbols$(_s10_0, _s9_, _s1_, "DKK", _s1_5, _s1_8, _s1_7, _s1_4, "da", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "de", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "de", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "de_AT", B.NumberSymbols$(_s10_, _s9_, _s1_, _s3_1, _s1_5, _s1_0, _s1_7, _s1_4, "de_AT", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "de_CH", B.NumberSymbols$(_s21_, _s9_, _s1_8, _s3_3, _s1_5, "\u2019", _s1_7, _s1_4, "de_CH", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "el", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, "e", _s1_8, _s1_7, _s1_4, "el", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_2, _s1_5, _s1_, _s1_7, _s1_4, "en", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_AU", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "AUD", "e", _s1_, _s1_7, _s1_4, "en_AU", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_CA", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "CAD", "e", _s1_, _s1_7, _s1_4, "en_CA", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_GB", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "GBP", _s1_5, _s1_, _s1_7, _s1_4, "en_GB", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_IE", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_1, _s1_5, _s1_, _s1_7, _s1_4, "en_IE", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_IN", B.NumberSymbols$(_s13_, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "en_IN", _s3_, _s1_1, _s9_2, _s1_6, _s1_3, _s3_0, _s1_2), "en_MY", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "MYR", _s1_5, _s1_, _s1_7, _s1_4, "en_MY", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_SG", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "SGD", _s1_5, _s1_, _s1_7, _s1_4, "en_SG", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_US", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_2, _s1_5, _s1_, _s1_7, _s1_4, "en_US", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "en_ZA", B.NumberSymbols$(_s9_0, _s9_, _s1_, "ZAR", _s1_5, _s1_0, _s1_7, _s1_4, "en_ZA", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "es", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "es", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "es_419", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "MXN", _s1_5, _s1_, _s1_7, _s1_4, "es_419", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "es_ES", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "es_ES", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "es_MX", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "MXN", _s1_5, _s1_, _s1_7, _s1_4, "es_MX", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "es_US", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_2, _s1_5, _s1_, _s1_7, _s1_4, "es_US", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "et", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s4_, _s1_0, _s1_7, _s1_9, "et", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "eu", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_9, "eu", _s3_, _s1_1, "%\xa0#,##0", _s1_6, _s1_3, _s3_0, _s1_2), "fa", B.NumberSymbols$("\u200e\xa4#,##0.00", _s9_, "\u066b", "IRR", "\xd7\u06f1\u06f0^", "\u066c", _s1_7, "\u200e\u2212", "fa", "\u0646\u0627\u0639\u062f\u062f", "\u066a", _s6_, "\u0609", _s2_, _s3_0, "\u06f0"), "fi", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_0, _s1_7, _s1_9, "fi", "ep\xe4luku", _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "fil", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "PHP", _s1_5, _s1_, _s1_7, _s1_4, "fil", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "fr", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, "\u202f", _s1_7, _s1_4, "fr", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "fr_CA", B.NumberSymbols$(_s10_0, _s9_, _s1_, "CAD", _s1_5, _s1_0, _s1_7, _s1_4, "fr_CA", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "fr_CH", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_3, _s1_5, "\u202f", _s1_7, _s1_4, "fr_CH", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ga", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_1, _s1_5, _s1_, _s1_7, _s1_4, "ga", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "gl", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "gl", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "gsw", B.NumberSymbols$(_s10_0, _s9_, _s1_8, _s3_3, _s1_5, "\u2019", _s1_7, _s1_9, "gsw", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "gu", B.NumberSymbols$(_s12_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "gu", _s3_, _s1_1, _s9_2, _s1_6, _s1_3, _s5_, _s1_2), "haw", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_2, _s1_5, _s1_, _s1_7, _s1_4, "haw", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "he", B.NumberSymbols$(_s24_, _s9_, _s1_8, "ILS", _s1_5, _s1_, _s1_7, _s2_0, "he", _s3_, _s1_1, _s6_, _s1_6, _s2_, _s3_0, _s1_2), "hi", B.NumberSymbols$(_s12_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "hi", _s3_, _s1_1, _s9_2, _s1_6, _s1_3, _s5_, _s1_2), "hr", B.NumberSymbols$(_s10_0, _s9_, _s1_, "HRK", _s1_5, _s1_8, _s1_7, _s1_4, "hr", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "hu", B.NumberSymbols$(_s10_0, _s9_, _s1_, "HUF", _s1_5, _s1_0, _s1_7, _s1_4, "hu", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "hy", B.NumberSymbols$(_s10_0, _s9_, _s1_, "AMD", _s1_5, _s1_0, _s1_7, _s1_4, "hy", "\u0548\u0579\u0539", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "id", B.NumberSymbols$(_s9_0, _s9_, _s1_, "IDR", _s1_5, _s1_8, _s1_7, _s1_4, "id", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "in", B.NumberSymbols$(_s9_0, _s9_, _s1_, "IDR", _s1_5, _s1_8, _s1_7, _s1_4, "in", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "is", B.NumberSymbols$(_s10_0, _s9_, _s1_, "ISK", _s1_5, _s1_8, _s1_7, _s1_4, "is", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "it", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "it", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "it_CH", B.NumberSymbols$(_s21_, _s9_, _s1_8, _s3_3, _s1_5, "\u2019", _s1_7, _s1_4, "it_CH", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "iw", B.NumberSymbols$(_s24_, _s9_, _s1_8, "ILS", _s1_5, _s1_, _s1_7, _s2_0, "iw", _s3_, _s1_1, _s6_, _s1_6, _s2_, _s3_0, _s1_2), "ja", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "JPY", _s1_5, _s1_, _s1_7, _s1_4, "ja", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ka", B.NumberSymbols$(_s10_0, _s9_, _s1_, "GEL", _s1_5, _s1_0, _s1_7, _s1_4, "ka", "\u10d0\u10e0\xa0\u10d0\u10e0\u10d8\u10e1\xa0\u10e0\u10d8\u10ea\u10ee\u10d5\u10d8", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "kk", B.NumberSymbols$(_s10_0, _s9_, _s1_, "KZT", _s1_5, _s1_0, _s1_7, _s1_4, "kk", "\u0441\u0430\u043d\xa0\u0435\u043c\u0435\u0441", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "km", B.NumberSymbols$("#,##0.00\xa4", _s9_, _s1_, "KHR", _s1_5, _s1_8, _s1_7, _s1_4, "km", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "kn", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "kn", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ko", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "KRW", _s1_5, _s1_, _s1_7, _s1_4, "ko", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ky", B.NumberSymbols$(_s10_0, _s9_, _s1_, "KGS", _s1_5, _s1_0, _s1_7, _s1_4, "ky", "\u0441\u0430\u043d\xa0\u044d\u043c\u0435\u0441", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ln", B.NumberSymbols$(_s10_0, _s9_, _s1_, "CDF", _s1_5, _s1_8, _s1_7, _s1_4, "ln", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "lo", B.NumberSymbols$("\xa4#,##0.00;\xa4-#,##0.00", _s9_, _s1_, "LAK", _s1_5, _s1_8, _s1_7, _s1_4, "lo", "\u0e9a\u0ecd\u0ec8\u200b\u0ec1\u0ea1\u0ec8\u0e99\u200b\u0ec2\u0e95\u200b\u0ec0\u0ea5\u0e81", _s1_1, _s6_, _s1_6, _s1_3, "#", _s1_2), "lt", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s4_, _s1_0, _s1_7, _s1_9, "lt", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "lv", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_0, _s1_7, _s1_4, "lv", "NS", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "mk", B.NumberSymbols$(_s10_0, _s9_, _s1_, "MKD", _s1_5, _s1_8, _s1_7, _s1_4, "mk", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ml", B.NumberSymbols$(_s9_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "ml", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "mn", B.NumberSymbols$(_s10_, _s9_, _s1_8, "MNT", _s1_5, _s1_, _s1_7, _s1_4, "mn", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "mr", B.NumberSymbols$(_s9_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "mr", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s5_, "\u0966"), "ms", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "MYR", _s1_5, _s1_, _s1_7, _s1_4, "ms", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "mt", B.NumberSymbols$(_s9_0, _s9_, _s1_8, _s3_1, _s1_5, _s1_, _s1_7, _s1_4, "mt", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "my", B.NumberSymbols$(_s10_0, _s9_, _s1_8, "MMK", _s1_5, _s1_, _s1_7, _s1_4, "my", "\u1002\u100f\u1014\u103a\u1038\u1019\u101f\u102f\u1010\u103a\u101e\u1031\u102c", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, "\u1040"), "nb", B.NumberSymbols$(_s10_, _s9_, _s1_, "NOK", _s1_5, _s1_0, _s1_7, _s1_9, "nb", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "ne", B.NumberSymbols$(_s10_, _s9_, _s1_8, "NPR", _s1_5, _s1_, _s1_7, _s1_4, "ne", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, "\u0966"), "nl", B.NumberSymbols$("\xa4\xa0#,##0.00;\xa4\xa0-#,##0.00", _s9_, _s1_, _s3_1, _s1_5, _s1_8, _s1_7, _s1_4, "nl", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "no", B.NumberSymbols$(_s10_, _s9_, _s1_, "NOK", _s1_5, _s1_0, _s1_7, _s1_9, "no", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "no_NO", B.NumberSymbols$(_s10_, _s9_, _s1_, "NOK", _s1_5, _s1_0, _s1_7, _s1_9, "no_NO", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "or", B.NumberSymbols$(_s9_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "or", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "pa", B.NumberSymbols$(_s13_, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "pa", _s3_, _s1_1, _s9_2, _s1_6, _s1_3, _s5_, _s1_2), "pl", B.NumberSymbols$(_s10_0, _s9_, _s1_, "PLN", _s1_5, _s1_0, _s1_7, _s1_4, "pl", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ps", B.NumberSymbols$(_s10_0, _s9_, "\u066b", "AFN", "\xd7\u06f1\u06f0^", "\u066c", _s1_7, "\u200e-\u200e", "ps", _s3_, "\u066a", _s6_, "\u0609", "\u200e+\u200e", _s3_0, "\u06f0"), "pt", B.NumberSymbols$(_s10_, _s9_, _s1_, "BRL", _s1_5, _s1_8, _s1_7, _s1_4, "pt", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "pt_BR", B.NumberSymbols$(_s10_, _s9_, _s1_, "BRL", _s1_5, _s1_8, _s1_7, _s1_4, "pt_BR", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "pt_PT", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, _s1_5, _s1_0, _s1_7, _s1_4, "pt_PT", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ro", B.NumberSymbols$(_s10_0, _s9_, _s1_, "RON", _s1_5, _s1_8, _s1_7, _s1_4, "ro", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "ru", B.NumberSymbols$(_s10_0, _s9_, _s1_, "RUB", _s1_5, _s1_0, _s1_7, _s1_4, "ru", "\u043d\u0435\xa0\u0447\u0438\u0441\u043b\u043e", _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "si", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "LKR", _s1_5, _s1_, _s1_7, _s1_4, "si", _s3_, _s1_1, _s6_, _s1_6, _s1_3, "#", _s1_2), "sk", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, "e", _s1_0, _s1_7, _s1_4, "sk", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "sl", B.NumberSymbols$(_s10_0, _s9_, _s1_, _s3_1, "e", _s1_8, _s1_7, _s1_9, "sl", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "sq", B.NumberSymbols$(_s10_0, _s9_, _s1_, "ALL", _s1_5, _s1_0, _s1_7, _s1_4, "sq", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "sr", B.NumberSymbols$(_s10_0, _s9_, _s1_, "RSD", _s1_5, _s1_8, _s1_7, _s1_4, "sr", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "sr_Latn", B.NumberSymbols$(_s10_0, _s9_, _s1_, "RSD", _s1_5, _s1_8, _s1_7, _s1_4, "sr_Latn", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "sv", B.NumberSymbols$(_s10_0, _s9_, _s1_, "SEK", _s4_, _s1_0, _s1_7, _s1_9, "sv", _s3_, _s1_1, _s7_, _s1_6, _s1_3, _s3_0, _s1_2), "sw", B.NumberSymbols$(_s10_, _s9_, _s1_8, "TZS", _s1_5, _s1_, _s1_7, _s1_4, "sw", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ta", B.NumberSymbols$(_s13_, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "ta", _s3_, _s1_1, _s9_2, _s1_6, _s1_3, _s3_0, _s1_2), "te", B.NumberSymbols$(_s12_0, _s12_, _s1_8, _s3_4, _s1_5, _s1_, _s1_7, _s1_4, "te", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "th", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "THB", _s1_5, _s1_, _s1_7, _s1_4, "th", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "tl", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "PHP", _s1_5, _s1_, _s1_7, _s1_4, "tl", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "tr", B.NumberSymbols$(_s9_0, _s9_, _s1_, "TRY", _s1_5, _s1_8, _s1_7, _s1_4, "tr", _s3_, _s1_1, "%#,##0", _s1_6, _s1_3, _s3_0, _s1_2), "uk", B.NumberSymbols$(_s10_0, _s9_, _s1_, "UAH", "\u0415", _s1_0, _s1_7, _s1_4, "uk", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "ur", B.NumberSymbols$(_s10_, _s9_, _s1_8, "PKR", _s1_5, _s1_, _s1_7, _s2_0, "ur", _s3_, _s1_1, _s6_, _s1_6, _s2_, _s3_0, _s1_2), "uz", B.NumberSymbols$(_s10_0, _s9_, _s1_, "UZS", _s1_5, _s1_0, _s1_7, _s1_4, "uz", "son\xa0emas", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "vi", B.NumberSymbols$(_s10_0, _s9_, _s1_, "VND", _s1_5, _s1_8, _s1_7, _s1_4, "vi", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "zh", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "CNY", _s1_5, _s1_, _s1_7, _s1_4, "zh", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "zh_CN", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "CNY", _s1_5, _s1_, _s1_7, _s1_4, "zh_CN", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "zh_HK", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "HKD", _s1_5, _s1_, _s1_7, _s1_4, "zh_HK", "\u975e\u6578\u503c", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "zh_TW", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "TWD", _s1_5, _s1_, _s1_7, _s1_4, "zh_TW", "\u975e\u6578\u503c", _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2), "zu", B.NumberSymbols$(_s9_0, _s9_, _s1_8, "ZAR", _s1_5, _s1_, _s1_7, _s1_4, "zu", _s3_, _s1_1, _s6_, _s1_6, _s1_3, _s3_0, _s1_2)], type$.String, H.findType("NumberSymbols"));
    });
    _lazy($, "_dateTimeSymbols", "$get$_dateTimeSymbols", function() {
      return X.UninitializedLocaleData$("initializeDateFormatting(<locale>)", $.$get$en_USSymbols(), type$.DateSymbols);
    });
    _lazy($, "dateTimePatterns", "$get$dateTimePatterns", function() {
      return X.UninitializedLocaleData$("initializeDateFormatting(<locale>)", C.Map_EQGBe, type$.Map_String_String);
    });
    _lazy($, "Logger_root", "$get$Logger_root", function() {
      return F.Logger_Logger("");
    });
    _lazy($, "context", "$get$context", function() {
      return new M.Context0($.$get$Style_platform());
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("[^/]$", false), P.RegExp_RegExp("^/", false));
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", false), P.RegExp_RegExp("[^/\\\\]$", false), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", false), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", false));
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false), P.RegExp_RegExp("^/", false));
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazy($, "Browser_UnknownBrowser", "$get$Browser_UnknownBrowser", function() {
      return L.Browser$("Unknown", null, null, null);
    });
    _lazy($, "Browser__knownBrowsers", "$get$Browser__knownBrowsers", function() {
      return H.setRuntimeTypeInfo([$.$get$chrome(), $.$get$firefox(), $.$get$safari(), $.$get$internetExplorer(), $.$get$wkWebView()], H.findType("JSArray<Browser>"));
    });
    _lazy($, "chrome", "$get$chrome", function() {
      return new L._Chrome("Chrome", L.browser__Chrome__isChrome$closure(), L.browser__Chrome__getVersion$closure());
    });
    _lazy($, "firefox", "$get$firefox", function() {
      return new L._Firefox("Firefox", L.browser__Firefox__isFirefox$closure(), L.browser__Firefox__getVersion$closure());
    });
    _lazy($, "safari", "$get$safari", function() {
      return new L._Safari("Safari", L.browser__Safari__isSafari$closure(), L.browser__Safari__getVersion$closure());
    });
    _lazy($, "internetExplorer", "$get$internetExplorer", function() {
      return new L._InternetExplorer("Internet Explorer", L.browser__InternetExplorer__isInternetExplorer$closure(), L.browser__InternetExplorer__getVersion$closure());
    });
    _lazy($, "wkWebView", "$get$wkWebView", function() {
      return new L._WKWebView("WKWebView", L.browser__WKWebView__isWKWebView$closure(), L.browser__WKWebView__getVersion$closure());
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBFactory: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLBuffer: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLProgram: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTexture: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLUniformLocation: J.Interceptor, WebGLVertexArrayObject: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLBRElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, Animation: W.Animation, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, HTMLAreaElement: W.AreaElement, BackgroundFetchClickEvent: W.BackgroundFetchEvent, BackgroundFetchEvent: W.BackgroundFetchEvent, BackgroundFetchFailEvent: W.BackgroundFetchEvent, BackgroundFetchedEvent: W.BackgroundFetchEvent, BackgroundFetchRegistration: W.BackgroundFetchRegistration, HTMLBaseElement: W.BaseElement, Blob: W.Blob, BluetoothRemoteGATTDescriptor: W.BluetoothRemoteGattDescriptor, HTMLBodyElement: W.BodyElement, BroadcastChannel: W.BroadcastChannel, HTMLButtonElement: W.ButtonElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, Client: W.Client, WindowClient: W.Client, CloseEvent: W.CloseEvent, PublicKeyCredential: W.Credential, Credential: W.Credential, CredentialUserData: W.CredentialUserData, CSSKeyframesRule: W.CssKeyframesRule, MozCSSKeyframesRule: W.CssKeyframesRule, WebKitCSSKeyframesRule: W.CssKeyframesRule, CSSKeywordValue: W.CssKeywordValue, CSSNumericValue: W.CssNumericValue, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSImageValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnitValue: W.CssUnitValue, CSSUnparsedValue: W.CssUnparsedValue, HTMLDataElement: W.DataElement, DataTransferItem: W.DataTransferItem, DataTransferItemList: W.DataTransferItemList, DeprecationReport: W.DeprecationReport, HTMLDivElement: W.DivElement, Document: W.Document, HTMLDocument: W.Document, XMLDocument: W.Document, DOMError: W.DomError, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, Element: W.Element, HTMLEmbedElement: W.EmbedElement, DirectoryEntry: W.Entry, Entry: W.Entry, FileEntry: W.Entry, ErrorEvent: W.ErrorEvent, AnimationEvent: W.Event0, AnimationPlaybackEvent: W.Event0, BeforeInstallPromptEvent: W.Event0, BeforeUnloadEvent: W.Event0, BlobEvent: W.Event0, ClipboardEvent: W.Event0, CustomEvent: W.Event0, DeviceMotionEvent: W.Event0, DeviceOrientationEvent: W.Event0, FontFaceSetLoadEvent: W.Event0, GamepadEvent: W.Event0, HashChangeEvent: W.Event0, MediaEncryptedEvent: W.Event0, MediaQueryListEvent: W.Event0, MediaStreamEvent: W.Event0, MediaStreamTrackEvent: W.Event0, MIDIConnectionEvent: W.Event0, MIDIMessageEvent: W.Event0, MutationEvent: W.Event0, PageTransitionEvent: W.Event0, PaymentRequestUpdateEvent: W.Event0, PresentationConnectionAvailableEvent: W.Event0, PromiseRejectionEvent: W.Event0, RTCDTMFToneChangeEvent: W.Event0, RTCPeerConnectionIceEvent: W.Event0, RTCTrackEvent: W.Event0, SecurityPolicyViolationEvent: W.Event0, SensorErrorEvent: W.Event0, SpeechRecognitionEvent: W.Event0, TrackEvent: W.Event0, TransitionEvent: W.Event0, WebKitTransitionEvent: W.Event0, VRDeviceEvent: W.Event0, VRDisplayEvent: W.Event0, VRSessionEvent: W.Event0, MojoInterfaceRequestEvent: W.Event0, USBConnectionEvent: W.Event0, IDBVersionChangeEvent: W.Event0, AudioProcessingEvent: W.Event0, OfflineAudioCompletionEvent: W.Event0, WebGLContextEvent: W.Event0, Event: W.Event0, InputEvent: W.Event0, SubmitEvent: W.Event0, EventSource: W.EventSource, AccessibleNode: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BatteryManager: W.EventTarget, FontFaceSet: W.EventTarget, MediaDevices: W.EventTarget, MediaQueryList: W.EventTarget, MediaSource: W.EventTarget, MIDIAccess: W.EventTarget, NetworkInformation: W.EventTarget, OffscreenCanvas: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationConnectionList: W.EventTarget, RemotePlayback: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, ScreenOrientation: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VisualViewport: W.EventTarget, Worker: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBOpenDBRequest: W.EventTarget, IDBVersionChangeRequest: W.EventTarget, IDBRequest: W.EventTarget, IDBTransaction: W.EventTarget, EventTarget: W.EventTarget, AbortPaymentEvent: W.ExtendableEvent, CanMakePaymentEvent: W.ExtendableEvent, ExtendableMessageEvent: W.ExtendableEvent, FetchEvent: W.ExtendableEvent, ForeignFetchEvent: W.ExtendableEvent, InstallEvent: W.ExtendableEvent, NotificationEvent: W.ExtendableEvent, PaymentRequestEvent: W.ExtendableEvent, PushEvent: W.ExtendableEvent, SyncEvent: W.ExtendableEvent, ExtendableEvent: W.ExtendableEvent, FederatedCredential: W.FederatedCredential, HTMLFieldSetElement: W.FieldSetElement, File: W.File, FileList: W.FileList, FileReader: W.FileReader, DOMFileSystem: W.FileSystem, FileWriter: W.FileWriter, FontFace: W.FontFace, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, GamepadButton: W.GamepadButton, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, XMLHttpRequest: W.HttpRequest, XMLHttpRequestUpload: W.HttpRequestEventTarget, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, HTMLIFrameElement: W.IFrameElement, ImageData: W.ImageData, HTMLImageElement: W.ImageElement, HTMLInputElement: W.InputElement, InterventionReport: W.InterventionReport, KeyboardEvent: W.KeyboardEvent, HTMLLIElement: W.LIElement, Location: W.Location, HTMLMapElement: W.MapElement, MediaDeviceInfo: W.MediaDeviceInfo, HTMLAudioElement: W.MediaElement, HTMLMediaElement: W.MediaElement, MediaError: W.MediaError, MediaKeyMessageEvent: W.MediaKeyMessageEvent, MediaKeySession: W.MediaKeySession, MediaList: W.MediaList, MediaRecorder: W.MediaRecorder, MediaStream: W.MediaStream, CanvasCaptureMediaStreamTrack: W.MediaStreamTrack, MediaStreamTrack: W.MediaStreamTrack, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, HTMLMetaElement: W.MetaElement, HTMLMeterElement: W.MeterElement, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MIDIInput: W.MidiPort, MIDIOutput: W.MidiPort, MIDIPort: W.MidiPort, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, PointerEvent: W.MouseEvent, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, NavigatorUserMediaError: W.NavigatorUserMediaError, DocumentFragment: W.Node, ShadowRoot: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, Notification: W.Notification0, HTMLOListElement: W.OListElement, HTMLObjectElement: W.ObjectElement, HTMLOptionElement: W.OptionElement, HTMLOutputElement: W.OutputElement, OverconstrainedError: W.OverconstrainedError, HTMLParamElement: W.ParamElement, PasswordCredential: W.PasswordCredential, PaymentRequest: W.PaymentRequest, PerformanceEntry: W.PerformanceEntry, PerformanceLongTaskTiming: W.PerformanceEntry, PerformanceMark: W.PerformanceEntry, PerformanceMeasure: W.PerformanceEntry, PerformanceNavigationTiming: W.PerformanceEntry, PerformancePaintTiming: W.PerformanceEntry, PerformanceResourceTiming: W.PerformanceEntry, TaskAttributionTiming: W.PerformanceEntry, PerformanceServerTiming: W.PerformanceServerTiming, Plugin: W.Plugin, PluginArray: W.PluginArray, PopStateEvent: W.PopStateEvent, PositionError: W.PositionError, PresentationAvailability: W.PresentationAvailability, PresentationConnection: W.PresentationConnection, PresentationConnectionCloseEvent: W.PresentationConnectionCloseEvent, PresentationRequest: W.PresentationRequest, HTMLProgressElement: W.ProgressElement, ProgressEvent: W.ProgressEvent, ResourceProgressEvent: W.ProgressEvent, RelatedApplication: W.RelatedApplication, ReportBody: W.ReportBody, ResizeObserver: W.ResizeObserver, RTCDataChannel: W.RtcDataChannel, DataChannel: W.RtcDataChannel, RTCDataChannelEvent: W.RtcDataChannelEvent, RTCLegacyStatsReport: W.RtcLegacyStatsReport, RTCStatsReport: W.RtcStatsReport, HTMLSelectElement: W.SelectElement, AbsoluteOrientationSensor: W.Sensor, Accelerometer: W.Sensor, AmbientLightSensor: W.Sensor, Gyroscope: W.Sensor, LinearAccelerationSensor: W.Sensor, Magnetometer: W.Sensor, OrientationSensor: W.Sensor, RelativeOrientationSensor: W.Sensor, Sensor: W.Sensor, SharedWorkerGlobalScope: W.SharedWorkerGlobalScope, HTMLSlotElement: W.SlotElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognition: W.SpeechRecognition, SpeechRecognitionError: W.SpeechRecognitionError, SpeechRecognitionResult: W.SpeechRecognitionResult, SpeechSynthesisEvent: W.SpeechSynthesisEvent, SpeechSynthesisVoice: W.SpeechSynthesisVoice, Storage: W.Storage, StorageEvent: W.StorageEvent, CSSStyleSheet: W.StyleSheet, StyleSheet: W.StyleSheet, HTMLTableColElement: W.TableColElement, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, HTMLTextAreaElement: W.TextAreaElement, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchEvent: W.TouchEvent, TouchList: W.TouchList, TrackDefaultList: W.TrackDefaultList, HTMLTrackElement: W.TrackElement, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, UIEvent: W.UIEvent, UnderlyingSourceBase: W.UnderlyingSourceBase, URL: W.Url, VRSession: W.VRSession, HTMLVideoElement: W.VideoElement, VideoTrack: W.VideoTrack, VideoTrackList: W.VideoTrackList, VTTRegion: W.VttRegion, WebSocket: W.WebSocket, WheelEvent: W.WheelEvent, Window: W.Window, DOMWindow: W.Window, DedicatedWorkerGlobalScope: W.WorkerGlobalScope, ServiceWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope, Attr: W._Attr, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, IDBCursor: P.Cursor, IDBCursorWithValue: P.CursorWithValue, IDBDatabase: P.Database, IDBIndex: P.Index, IDBKeyRange: P.KeyRange, IDBObjectStore: P.ObjectStore, IDBObservation: P.Observation, SVGAngle: P.Angle, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGScriptElement: P.ScriptElement0, SVGStringList: P.StringList, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AudioBufferSourceNode: P.AudioBufferSourceNode, AnalyserNode: P.AudioNode, RealtimeAnalyserNode: P.AudioNode, AudioDestinationNode: P.AudioNode, AudioWorkletNode: P.AudioNode, BiquadFilterNode: P.AudioNode, ChannelMergerNode: P.AudioNode, AudioChannelMerger: P.AudioNode, ChannelSplitterNode: P.AudioNode, AudioChannelSplitter: P.AudioNode, ConvolverNode: P.AudioNode, DelayNode: P.AudioNode, DynamicsCompressorNode: P.AudioNode, GainNode: P.AudioNode, AudioGainNode: P.AudioNode, IIRFilterNode: P.AudioNode, MediaElementAudioSourceNode: P.AudioNode, MediaStreamAudioDestinationNode: P.AudioNode, MediaStreamAudioSourceNode: P.AudioNode, PannerNode: P.AudioNode, AudioPannerNode: P.AudioNode, webkitAudioPannerNode: P.AudioNode, ScriptProcessorNode: P.AudioNode, JavaScriptAudioNode: P.AudioNode, StereoPannerNode: P.AudioNode, WaveShaperNode: P.AudioNode, AudioNode: P.AudioNode, AudioParam: P.AudioParam, AudioParamMap: P.AudioParamMap, ConstantSourceNode: P.AudioScheduledSourceNode, OscillatorNode: P.AudioScheduledSourceNode, Oscillator: P.AudioScheduledSourceNode, AudioScheduledSourceNode: P.AudioScheduledSourceNode, AudioTrack: P.AudioTrack, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, OfflineAudioContext: P.OfflineAudioContext, WebGLActiveInfo: P.ActiveInfo, Database: P.SqlDatabase, SQLError: P.SqlError, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, Clients: true, CookieStore: true, Coordinates: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, External: true, FaceDetector: true, FontFaceSource: true, FormData: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceNavigation: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, Presentation: true, PresentationReceiver: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, ReportingObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBFactory: true, IDBObserver: true, IDBObserverChanges: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, SQLResultSet: true, SQLTransaction: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLBRElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMenuElement: true, HTMLModElement: true, HTMLOptGroupElement: true, HTMLParagraphElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, Animation: true, ApplicationCacheErrorEvent: true, HTMLAreaElement: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BackgroundFetchRegistration: true, HTMLBaseElement: true, Blob: false, BluetoothRemoteGATTDescriptor: true, HTMLBodyElement: true, BroadcastChannel: true, HTMLButtonElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, Client: true, WindowClient: true, CloseEvent: true, PublicKeyCredential: true, Credential: false, CredentialUserData: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSKeywordValue: true, CSSNumericValue: false, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSRule: false, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnitValue: true, CSSUnparsedValue: true, HTMLDataElement: true, DataTransferItem: true, DataTransferItemList: true, DeprecationReport: true, HTMLDivElement: true, Document: true, HTMLDocument: true, XMLDocument: true, DOMError: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, HTMLEmbedElement: true, DirectoryEntry: true, Entry: true, FileEntry: true, ErrorEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, ClipboardEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, FontFaceSetLoadEvent: true, GamepadEvent: true, HashChangeEvent: true, MediaEncryptedEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, PageTransitionEvent: true, PaymentRequestUpdateEvent: true, PresentationConnectionAvailableEvent: true, PromiseRejectionEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, EventSource: true, AccessibleNode: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BatteryManager: true, FontFaceSet: true, MediaDevices: true, MediaQueryList: true, MediaSource: true, MIDIAccess: true, NetworkInformation: true, OffscreenCanvas: true, Performance: true, PermissionStatus: true, PresentationConnectionList: true, RemotePlayback: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerRegistration: true, SharedWorker: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VisualViewport: true, Worker: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, EventTarget: false, AbortPaymentEvent: true, CanMakePaymentEvent: true, ExtendableMessageEvent: true, FetchEvent: true, ForeignFetchEvent: true, InstallEvent: true, NotificationEvent: true, PaymentRequestEvent: true, PushEvent: true, SyncEvent: true, ExtendableEvent: false, FederatedCredential: true, HTMLFieldSetElement: true, File: true, FileList: true, FileReader: true, DOMFileSystem: true, FileWriter: true, FontFace: true, HTMLFormElement: true, Gamepad: true, GamepadButton: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, XMLHttpRequest: true, XMLHttpRequestUpload: true, XMLHttpRequestEventTarget: false, HTMLIFrameElement: true, ImageData: true, HTMLImageElement: true, HTMLInputElement: true, InterventionReport: true, KeyboardEvent: true, HTMLLIElement: true, Location: true, HTMLMapElement: true, MediaDeviceInfo: true, HTMLAudioElement: true, HTMLMediaElement: false, MediaError: true, MediaKeyMessageEvent: true, MediaKeySession: true, MediaList: true, MediaRecorder: true, MediaStream: true, CanvasCaptureMediaStreamTrack: true, MediaStreamTrack: true, MessageEvent: true, MessagePort: true, HTMLMetaElement: true, HTMLMeterElement: true, MIDIInputMap: true, MIDIOutputMap: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, MimeType: true, MimeTypeArray: true, PointerEvent: true, MouseEvent: false, DragEvent: false, NavigatorUserMediaError: true, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Notification: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptionElement: true, HTMLOutputElement: true, OverconstrainedError: true, HTMLParamElement: true, PasswordCredential: true, PaymentRequest: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigationTiming: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, TaskAttributionTiming: true, PerformanceServerTiming: true, Plugin: true, PluginArray: true, PopStateEvent: true, PositionError: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionCloseEvent: true, PresentationRequest: true, HTMLProgressElement: true, ProgressEvent: true, ResourceProgressEvent: true, RelatedApplication: true, ReportBody: false, ResizeObserver: true, RTCDataChannel: true, DataChannel: true, RTCDataChannelEvent: true, RTCLegacyStatsReport: true, RTCStatsReport: true, HTMLSelectElement: true, AbsoluteOrientationSensor: true, Accelerometer: true, AmbientLightSensor: true, Gyroscope: true, LinearAccelerationSensor: true, Magnetometer: true, OrientationSensor: true, RelativeOrientationSensor: true, Sensor: true, SharedWorkerGlobalScope: true, HTMLSlotElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognition: true, SpeechRecognitionError: true, SpeechRecognitionResult: true, SpeechSynthesisEvent: true, SpeechSynthesisVoice: true, Storage: true, StorageEvent: true, CSSStyleSheet: true, StyleSheet: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchEvent: true, TouchList: true, TrackDefaultList: true, HTMLTrackElement: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, UIEvent: false, UnderlyingSourceBase: true, URL: true, VRSession: true, HTMLVideoElement: true, VideoTrack: true, VideoTrackList: true, VTTRegion: true, WebSocket: true, WheelEvent: true, Window: true, DOMWindow: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, WorkerGlobalScope: false, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBCursor: false, IDBCursorWithValue: true, IDBDatabase: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, SVGAngle: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioBufferSourceNode: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioDestinationNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, AudioNode: false, AudioParam: true, AudioParamMap: true, ConstantSourceNode: true, OscillatorNode: true, Oscillator: true, AudioScheduledSourceNode: false, AudioTrack: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, WebGLActiveInfo: true, Database: true, SQLError: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main0, []);
    else
      F.main0([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
